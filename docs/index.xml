<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Der Schockwellenreiter</title>
<link>https://kantel.github.io/</link>
<atom:link href="https://kantel.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description>Schockwellenreiter</description>
<generator>quarto-1.5.47</generator>
<lastBuildDate>Thu, 18 Sep 2025 19:10:00 GMT</lastBuildDate>
<item>
  <title>Brandenburg an der Havel: Wo die wilden Waldmöpse wohnen</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025091801_waldmoepse/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54794988405/"><img src="https://kantel.github.io/posts/2025091801_waldmoepse/images/bauchschmerzenbruecke-b.jpg" class="img-fluid"></a></p>
<p>Die legendären, gehörnten, plattnasigen <a href="https://de.wikipedia.org/wiki/Waldm%C3%B6pse">Waldmöpse</a> mit Ringel­schwänzchen wurden im April 2015 in der Natur der Stadt Brandenburg an der Havel ausgewildert und damit vor dem Aussterben gerettet. Bis heute hat sich die Population auf etwa 27 dieser seltenen Tiere erholt, weitere Vermehrungen sind nicht ausgeschlossen. Sie konzentriert sich auf <a href="https://erlebnis-brandenburg.de/loriot">vier Waldmops-Areale im Brandenburger Stadtgebiet</a>. Ursprünglich hatte er an der Mündung der Weser seine Paarungsgebiete und überwinterte früher zu Hunderttausenden in Südafrika. Die Tierart wurde von dem beühmten Biologen <a href="https://de.wikipedia.org/wiki/Loriot">Loriot</a>, dem wir auch die Enteckung der <a href="https://de.wikipedia.org/wiki/Steinlaus">Steinlaus</a> <em>(Petrophaga lorioti)</em> verdanken, erstmals 1972 beschrieben. Da der Mops jedoch schwere Waldschäden anrichtete, wurde er trotz einer »romantischer Tierliebe« gnadenlos bejagt und galt bis zum Brandenburger Wiederansiedlungsprogramm als fast ausgestorben.</p>
<p><a href="https://www.flickr.com/photos/schockwellenreiter/54793804912/"><img src="https://kantel.github.io/posts/2025091801_waldmoepse/images/waldmops01.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/54794893994/"><img src="https://kantel.github.io/posts/2025091801_waldmoepse/images/waldmops02.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/54794989695/"><img src="https://kantel.github.io/posts/2025091801_waldmoepse/images/waldmops03.jpg" class="img-fluid"></a><br><br> <a href="https://www.flickr.com/photos/schockwellenreiter/54794910113/"><img src="https://kantel.github.io/posts/2025091801_waldmoepse/images/waldmops04.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/54794909963/"><img src="https://kantel.github.io/posts/2025091801_waldmoepse/images/waldmops05.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/54793804197/"><img src="https://kantel.github.io/posts/2025091801_waldmoepse/images/waldmops06.jpg" class="img-fluid"></a><br><br> <a href="https://www.flickr.com/photos/schockwellenreiter/54794988820/"><img src="https://kantel.github.io/posts/2025091801_waldmoepse/images/waldmops07.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/54794988715/"><img src="https://kantel.github.io/posts/2025091801_waldmoepse/images/waldmops08.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/54794892329/"><img src="https://kantel.github.io/posts/2025091801_waldmoepse/images/waldmops09.jpg" class="img-fluid"></a></p>
<p><em>Mit einem Klick auf die Vorschaubilder kommt Ihr je auf eine Seite mit einer Vergrößerung.</em></p>
<p>Bevor das <a href="https://www.tagesschau.de/eilmeldung/deutschlandticket-preiserhoehung-102.html">Deutschlandticket unerschwinglich wird</a>, war ich gestern mit der schon mehrfach auf diesen Seiten erwähnten netten jungen Dame auf einer Photosafari in Brandenburg an der Havel. Ziel war es, möglichst viele dieser scheuen Tiere vor die Linse zu bekommen. Neun Waldmöpse habe ich erwischt, das Ergebnis könnt Ihr hier bewundern. Wer mehr entdecken will, dem empfehle ich die von der Stadt Brandenburg veranstalteten <a href="https://erlebnis-brandenburg.de/mops-fuehrung">Waldmops-Führungen</a>.</p>
<hr>
<p><strong>Photos</strong> (<a href="https://creativecommons.org/licenses/by-sa/4.0/deed.de">cc</a>) 2025: <em><a href="http://cognitiones.kantel-chaos-team.de/cv.html">Jörg Kantel</a></em></p>



 ]]></description>
  <category>Atlas Curiosa</category>
  <category>Photographie</category>
  <guid>https://kantel.github.io/posts/2025091801_waldmoepse/</guid>
  <pubDate>Thu, 18 Sep 2025 19:10:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025091801_waldmoepse/images/bauchschmerzenbruecke.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Aus dem Britzer Garten: Dahlienfeuer</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025091601_dahlienfeuer/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54743658174/"><img src="https://kantel.github.io/posts/2025091601_dahlienfeuer/images/dahlie01-b.jpg" class="img-fluid"></a></p>
<p>In diesem Jahr war es schon im August soweit: Bei strahlendem Sonnenschein zeigte sich das jährliche <a href="https://www.britzergarten.de/blueten-gaerten/bluetenschauen/dahlienfeuer/">Dahlienfeuer</a> im Britzer Garten in seiner schönsten und buntesten Pracht. Fast 300 verschiedene Sorten wurden durch anliegende Gräser und Blattschmuckpflanzen in Szene gesetzt, die die üppige Farbvielfalt der Dahlienblüten unterstreichen sollten, und als Kontrast säumten Süßkartoffelpflanzen mit ihren purpurnen, bronzenen und frischgrünen Blättern die Beete.</p>
<p><a href="https://www.flickr.com/photos/schockwellenreiter/54743435731/"><img src="https://kantel.github.io/posts/2025091601_dahlienfeuer/images/dahlie02.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/54743435551/"><img src="https://kantel.github.io/posts/2025091601_dahlienfeuer/images/dahlie03.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/54743435546/"><img src="https://kantel.github.io/posts/2025091601_dahlienfeuer/images/dahlie04.jpg" class="img-fluid"></a><br><br> <a href="https://www.flickr.com/photos/schockwellenreiter/54742591802/"><img src="https://kantel.github.io/posts/2025091601_dahlienfeuer/images/dahlie05.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/54743653053/"><img src="https://kantel.github.io/posts/2025091601_dahlienfeuer/images/dahlie06.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/54743785900/"><img src="https://kantel.github.io/posts/2025091601_dahlienfeuer/images/dahlie07.jpg" class="img-fluid"></a><br><br> <a href="https://www.flickr.com/photos/schockwellenreiter/54743785905/"><img src="https://kantel.github.io/posts/2025091601_dahlienfeuer/images/dahlie08.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/54743652913/"><img src="https://kantel.github.io/posts/2025091601_dahlienfeuer/images/dahlie09.jpg" class="img-fluid"></a></p>
<p><em>Mit einem Klick auf die Vorschaubilder kommt Ihr je auf eine Seite mit einer Vergrößerung.</em></p>
<p>Wie schon <a href="https://kantel.github.io/posts/2023091402_dahlienfeuer/">vor zwei Jahren</a> war es auch in diesem Jahr ein knallbuntes Erlebnis (wie ich einer der umstehenden Infotafeln entnehmen konnte, können Dahlien alles außer blau) und als besonderes Highlight für den kleinen Pufferküsser in mir fuhr auch die <a href="https://kantel.github.io/posts/2023062901_rosen_stauden_garten_toeff_toeff/">Garten-Töff-Töff</a> wieder.</p>
<hr>
<p><strong>Photos</strong> (<a href="https://creativecommons.org/licenses/by-sa/4.0/deed.de">cc</a>) 2025: <em><a href="http://cognitiones.kantel-chaos-team.de/cv.html">Jörg Kantel</a></em></p>



 ]]></description>
  <category>Neukölln</category>
  <category>Parks und Gärten</category>
  <category>Photographie</category>
  <guid>https://kantel.github.io/posts/2025091601_dahlienfeuer/</guid>
  <pubDate>Tue, 16 Sep 2025 14:35:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025091601_dahlienfeuer/images/dahlie01.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Aus der Nachbarschaft: Stolpersteinführung in Neubritz</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025091401_stolpersteine/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/8250851230/"><img src="https://kantel.github.io/posts/2025091401_stolpersteine/images/stolperstein-b.jpg" class="img-fluid"></a></p>
<p>Im Rahmen der Veranstaltungen zum Jubiläum <a href="https://650-jahre-britz.info/">650&nbsp;Jahre Britz</a> veranstaltet der Stadtteilverein <a href="https://proneubritz.jimdofree.com/">proNeubritz&nbsp;e.V.</a> am <strong>Donnerstag, den 18.&nbsp;September&nbsp;2025 um 18:00&nbsp;Uhr</strong> eine <a href="https://650-jahre-britz.info/all-events/?event=4783">Stolpersteinführung</a> durch Neubritz. Treffpunkt ist der U-Bahnhof Grenzallee, Ausgang Buschkrugallee.</p>
<p>An vielen Stationen wird an die Opfer des Nationalsozialismus erinnert, zum Beispiel an die jüdische <em>Familie Wittenberg</em>, an den kommunistischen Widerstandskämpfer <em>Karl Tybussek</em>, an <em>Samson Baruch Wurzel</em> und seine Tochter, an den zur Bekennenden Kirche gehörenden <em>Carl Pohle</em>, an den sozialdemokratischen Verleger <em>Paul Fürst</em>, an das Euthanasie-Opfer <em>Klara Jacob</em> und an viele andere.</p>
<p>Der Verein proNeubritz e.V. organisiert ein- bis zweimal im Jahr <a href="https://proneubritz.jimdofree.com/stolpersteine/">Führungen zu den Stolpersteinen</a> in Neubritz. Er freut sich auch dieses Mal auf Euer Kommen.</p>
<hr>
<p><strong>Photo</strong> (<a href="http://creativecommons.org/licenses/by-nc-nd/2.0/">cc</a>) 2012: <em><a href="http://www.gabi-kantel.de/Website/Willkommen.html">Gabriele Kantel</a></em></p>



 ]]></description>
  <category>Geschichte</category>
  <category>Neukölln</category>
  <guid>https://kantel.github.io/posts/2025091401_stolpersteine/</guid>
  <pubDate>Sun, 14 Sep 2025 17:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025091401_stolpersteine/images/stolperstein.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Zurück zum Code: Bouncing Balls mit Py5 und Proceso</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025091001_bouncing_balls/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54777942521/"><img src="https://kantel.github.io/posts/2025091001_bouncing_balls/images/bouncingballspy5-b.jpg" class="img-fluid"></a></p>
<p>Wie ich schon in meiner <a href="https://kantel.github.io/posts/2025090701_py5_0_10_7a0/">jüngsten Update-Meldung</a> zu <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/py5.html">Py5</a>, dem <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processing.html">Processing</a>-Python3-Modul, angedeutet hatte, interessiert mich, welche Code-Änderungen notwendig sind, wenn ich Py5-Skripte nach <a href="https://proceso.cc/">Proceso</a>, der <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/pyscript.html">PyScript</a>-Version von Processing und Python, portiere (oder <em>vice versa</em>). Also habe ich als ersten Test das sattsam bekannte Bouncing-Balls-Beispiel einmal in Proceso implementiert:</p>
<iframe src="bouncingball/index.html" width="100%" height="360">
</iframe>
<p>Auch hier habe ich wieder ein wenig Interaktivität eingebaut: Mit einem Mausklick in den Canvas könnt ihr neue Bälle erzeugen und das Skript neu starten.</p>
<p>Der Quellcode ist <em>straight forward</em>, die eigentlichen Aktionen sind in die Klasse <code>Ball()</code> ausgelagert und für den Ort wie auch für die Geschwindigkeit <em>(Velocity)</em> der Bälle habe ich eine Implementierung mit Vektoren ausgewählt:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> proceso <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Sketch</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> randint, uniform, choice</span>
<span id="cb1-3"></span>
<span id="cb1-4">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">640</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">360</span></span>
<span id="cb1-5">NUM_BALLS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span></span>
<span id="cb1-6"></span>
<span id="cb1-7">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">230</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">96</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">55</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">106</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>),</span>
<span id="cb1-8">          (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">183</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">116</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">212</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">251</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">69</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>),</span>
<span id="cb1-9">          (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">252</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">159</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">53</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">233</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>),</span>
<span id="cb1-10">          (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">57</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">218</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">56</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">67</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">253</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">133</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>),</span>
<span id="cb1-11">          (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">78</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">148</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">67</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">254</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">211</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>),</span>
<span id="cb1-12">          (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">74</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">143</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">186</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">52</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">99</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">234</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)]</span>
<span id="cb1-13">balls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb1-14"></span>
<span id="cb1-15">p5 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Sketch()</span>
<span id="cb1-16"></span>
<span id="cb1-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> setup():</span>
<span id="cb1-18">    p5.create_canvas(WIDTH, HEIGHT)</span>
<span id="cb1-19">    p5.stroke_weight(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-20">    reset()</span>
<span id="cb1-21"></span>
<span id="cb1-22"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw():</span>
<span id="cb1-23">    p5.background(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">192</span>)</span>
<span id="cb1-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ball <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> balls:</span>
<span id="cb1-25">        ball.update()</span>
<span id="cb1-26">        ball.display()</span>
<span id="cb1-27"></span>
<span id="cb1-28"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> reset():</span>
<span id="cb1-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(NUM_BALLS):</span>
<span id="cb1-30">        ball <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Ball()</span>
<span id="cb1-31">        balls.append(ball)</span>
<span id="cb1-32"></span>
<span id="cb1-33"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> mouse_clicked():</span>
<span id="cb1-34">    balls.clear()</span>
<span id="cb1-35">    reset()</span>
<span id="cb1-36"></span>
<span id="cb1-37"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Ball():</span>
<span id="cb1-38"></span>
<span id="cb1-39">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-40">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.radius <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb1-41">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.diam   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb1-42">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.diam, p5.width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.diam)</span>
<span id="cb1-43">        y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.diam, p5.height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.diam)</span>
<span id="cb1-44">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.Vector(x, y)</span>
<span id="cb1-45">        vel_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> uniform(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>)</span>
<span id="cb1-46">        vel_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> uniform(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>)</span>
<span id="cb1-47">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.Vector(vel_x, vel_y)</span>
<span id="cb1-48">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> choice(colors)</span>
<span id="cb1-49"></span>
<span id="cb1-50">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-51">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel</span>
<span id="cb1-52">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check borders</span></span>
<span id="cb1-53">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.radius <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> p5.width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.radius:</span>
<span id="cb1-54">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-55">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.radius <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> p5.height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.radius:</span>
<span id="cb1-56">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-57">        </span>
<span id="cb1-58"></span>
<span id="cb1-59">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> display(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-60">        p5.fill(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c)</span>
<span id="cb1-61">        p5.circle(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.diam)</span>
<span id="cb1-62">        </span>
<span id="cb1-63">p5.run_sketch(setup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>setup, draw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>draw, mouse_clicked<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mouse_clicked)</span></code></pre></div>
<p>Die anschließende Portierung nach Py5 verlief schmerzfreier, als ich gedacht hatte. Natürlich mußte ich die Zeile <code>from proceso import Sketch</code> durch die Zeile <code>import py5</code> ersetzen, die Zeile <code>p5 = Sketch()</code> konnte komplett entfallen und die letzte Zeile <code>p5.run_sketch(setup=setup, draw=draw, mouse_clicked=mouse_clicked)</code> wurde durch das bedeutend kürzere <code>py5.run_sketch()</code> abgelöst. Außerdem genügt Py5 statt <code>create_canvas()</code> einfach der Befehl <code>size()</code> und eine Titelzeile für das Fenster habe ich dem Sketch auch noch spendiert – wenn schon, denn schon. Jetzt noch mit einem globalen Ersetzen alle <code>p5.</code> in <code>py5.</code> umwandeln … und das sollte es gewesen sein, oder?</p>
<p>Doch der Teufel steckte im Detail: Einmal hieß die Klasse <code>p5.Vector()</code> in Py5 <code>py5.Py5Vector()</code>, doch das war leicht zu fixen. Mehr Überlegung brauchte der Umstand, daß Py5 für <code>fill()</code> nur Integer-Werte und keine Tupel zuließ. Daher mußte ich zum Schluß noch die Zeile <code>p5.fill(self.c)</code> durch die Zeile <code>py5.fill(py5.color(self.c[0], self.c[1], self.c[2], self.c[3]))</code> ersetzen.</p>
<p>Aber das war es dann wirklich, nach diesen Änderungen lief das Skript auch in Py5 (siehe <a href="https://www.flickr.com/photos/schockwellenreiter/54777942521/">Screenshot</a> im Bannerbild oben).</p>
<p>Hier der komplette Py5-Quellcode zum Vergleich:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> py5</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> randint, uniform, choice</span>
<span id="cb2-3"></span>
<span id="cb2-4">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">640</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">360</span></span>
<span id="cb2-5">NUM_BALLS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span></span>
<span id="cb2-6"></span>
<span id="cb2-7">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">230</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">96</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">55</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">106</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>),</span>
<span id="cb2-8">          (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">183</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">116</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">212</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">251</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">69</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>),</span>
<span id="cb2-9">          (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">252</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">159</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">53</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">233</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>),</span>
<span id="cb2-10">          (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">57</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">218</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">56</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">67</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">253</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">133</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>),</span>
<span id="cb2-11">          (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">78</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">148</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">67</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">254</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">211</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>),</span>
<span id="cb2-12">          (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">74</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">143</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">186</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">52</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">99</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">234</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)]</span>
<span id="cb2-13">balls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-14"></span>
<span id="cb2-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> setup():</span>
<span id="cb2-16">    py5.size(WIDTH, HEIGHT)</span>
<span id="cb2-17">    py5.window_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bouncing Balls 🐍"</span>)</span>
<span id="cb2-18">    py5.stroke_weight(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb2-19">    reset()</span>
<span id="cb2-20"></span>
<span id="cb2-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw():</span>
<span id="cb2-22">    py5.background(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">192</span>)</span>
<span id="cb2-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ball <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> balls:</span>
<span id="cb2-24">        ball.update()</span>
<span id="cb2-25">        ball.display()</span>
<span id="cb2-26"></span>
<span id="cb2-27"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> reset():</span>
<span id="cb2-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(NUM_BALLS):</span>
<span id="cb2-29">        ball <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Ball()</span>
<span id="cb2-30">        balls.append(ball)</span>
<span id="cb2-31"></span>
<span id="cb2-32"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> mouse_clicked():</span>
<span id="cb2-33">    balls.clear()</span>
<span id="cb2-34">    reset()</span>
<span id="cb2-35"></span>
<span id="cb2-36"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Ball():</span>
<span id="cb2-37"></span>
<span id="cb2-38">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-39">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.radius <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb2-40">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.diam   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-41">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.diam, py5.width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.diam)</span>
<span id="cb2-42">        y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.diam, py5.height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.diam)</span>
<span id="cb2-43">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> py5.Py5Vector(x, y)</span>
<span id="cb2-44">        vel_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> uniform(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>)</span>
<span id="cb2-45">        vel_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> uniform(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>)</span>
<span id="cb2-46">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> py5.Py5Vector(vel_x, vel_y)</span>
<span id="cb2-47">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> choice(colors)</span>
<span id="cb2-48"></span>
<span id="cb2-49">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-50">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel</span>
<span id="cb2-51">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check borders</span></span>
<span id="cb2-52">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.radius <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> py5.width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.radius:</span>
<span id="cb2-53">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-54">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.radius <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> py5.height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.radius:</span>
<span id="cb2-55">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-56">        </span>
<span id="cb2-57"></span>
<span id="cb2-58">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> display(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-59">        py5.fill(py5.color(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]))</span>
<span id="cb2-60">        py5.circle(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.diam)</span>
<span id="cb2-61"></span>
<span id="cb2-62">py5.run_sketch()</span></code></pre></div>
<p>Er ist doch wirklich dem obigen Proceso-Quellcode extrem ähnlich. Eine Portierung hin und/oder her müsste also eigentlich ohne Schwierigkeiten möglich sein.</p>
<p>Sowohl die <a href="https://github.com/kantel/pythoncuriosa/tree/main/pyscript/proseco/bouncingball">Proceso-Implementierung</a> (mit den üblichen Hilfsdateien <code>index.html</code>, <code>pyscript.json</code> und <code>style.css</code>) wie auch den <a href="https://github.com/kantel/py5/blob/main/bouncing_balls/bouncing_balls_2.py">Py5-Quellcode</a> findet Ihr in meinen GitHub-Repositorien.</p>
<p>Und ich bin wirklich überrascht, wie einfach der Port war. Py5 und Proceso scheinen ein gutes Team zu sein, um Processing-Python-Skripte sowohl für das Web wie auch für den Desktop zu entwickeln. Ich habe Blut geleckt, ich will mehr davon. <em>Still digging!</em></p>



 ]]></description>
  <category>Py5</category>
  <category>Python</category>
  <category>Proceso</category>
  <category>PyScript</category>
  <category>Processing</category>
  <category>Creative Coding</category>
  <category>Nature of Code</category>
  <guid>https://kantel.github.io/posts/2025091001_bouncing_balls/</guid>
  <pubDate>Wed, 10 Sep 2025 13:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025091001_bouncing_balls/images/bouncingballspy5.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Aus der Nachbarschaft: Einladung zum 5. Dezentralen Kiezfest</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025090901_kiezfest_5/</link>
  <description><![CDATA[ 




<p><a href="https://proneubritz.jimdofree.com/"><img src="https://kantel.github.io/posts/2025090901_kiezfest_5/images/kiezfest-b.jpg" class="img-fluid"></a></p>
<p>Am Freitag, den <strong>12. September 2025</strong> findet von <strong>15:30 Uhr bis 17:30 Uhr</strong> in Neubritz zwischen Hermannstraße, Karl-Marx-Straße, Delbrückstraße und Rungiusstraße wieder das jährliche, <a href="https://qm-glasower-strasse.de/wieder-kinder-kiez-rallye-beim-5-dezentralen-kiezfest/">dezentrale Kiezfest</a> statt. Es ist das fünfte in Folge und wieder in Form einer Kiezrallye organisiert. An 14 Stationen, organisiert von 14 Initiativen im Kiez, gibt es Spiel, Spaß oder Sport für Kinder und Informationen über die Initiativen für deren erwachsene Begleiterinnen oder Begleiter.</p>
<p>Die Kinder können sich an jeder Station einen Stempel auf einem Laufzettel abholen. Wenn sie mindestens fünf Stempel auf der Karte haben, gibt es einen kleinen Preis, den sie sich im Quartiersmanagement-Büro in der Juliusstraße 14a (Station 12) bis 17:30 Uhr abholen können.</p>
<p>Veranstaltet wird das Dezentrale Kiezfest in diesem Jahr von <a href="https://proneubritz.jimdofree.com/">proNeubritz e.V.</a> mit Unterstützung durch das <a href="https://qm-glasower-strasse.de/">Quartiersmanagement Glasower Straße</a>. Aber es wäre natürlich nicht möglich ohne die zahlreichen teilnehmenden Initiativen.</p>
<p>Wir wüschen allen Kindern und allen Nachbarinnen und Nachbarn viel Spaß bei diesem Fest.</p>
<p><strong>Caveat</strong>: Ich bin <a href="https://proneubritz.jimdofree.com/vorstand/">Vorstandsmitglied von proNeubritz e.V.</a> und Mitorganisator dieses Festes. Daher ist dieser Beitrag schamlose Eigenwerbung. 😜</p>



 ]]></description>
  <category>Neukölln</category>
  <category>Kiezfest</category>
  <guid>https://kantel.github.io/posts/2025090901_kiezfest_5/</guid>
  <pubDate>Tue, 09 Sep 2025 19:40:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025090901_kiezfest_5/images/kiezfest.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Animierte GIFs in Proceso</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025090801_anim_gif_proceso/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54774654379/"><img src="https://kantel.github.io/posts/2025090801_anim_gif_proceso/images/animgif-b.jpg" class="img-fluid"></a></p>
<p>Gestern abend stolperte ich über <a href="https://www.youtube.com/watch?v=YGBi4lR0swY">dieses Video</a>, in dem der User <em><a href="https://www.kennyyipcoding.com/">Kenney Yip Coding</a></em> ein Entenjagdspiel in <em>pure JavaScript</em> und dem HTML Canvas programmierte. Das ist an sich noch nichts Besonderes, aber die Bilder der Enten, die er verwendete, waren animierte GIFs, und da stellte sich mir die Frage, ob das nicht auch in Python ginge. Die kurze Antwort ist: <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/py5.html">Py5</a> kann mit den animierten GIFs nichts anfangen, aber <a href="https://proceso.cc/">Proceso</a>, die <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/pyscript.html">PyScript</a>-Version von <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processing.html">Processing</a> und Python, kann es.</p>
<p>Für meine Versuche habe ich mir die Entenbildchen und das Hintergrundbild aus dem <a href="https://github.com/ImKennyYip/duck-hunt">GitHub-Repositorium von <em>KennyYip</em></a> »ausgeborgt« und daraus ein kleines Skriptchen gebastelt, das zwei kleine Enten ziellos über den Monitor flattern lässt:</p>
<iframe src="giftest/index.html" width="100%" height="338">
</iframe>
<p>Wenn Ihr mit der Maus in das Fenster klickt, wird das Skript zurückgesetzt, soviel Interaktivität muß sein.&nbsp;😎</p>
<p>Proceso, wie auch <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/p5js.html">P5.js</a>, behandelt animierte GIFs wie jedes andere Bild auch, so daß es in dem Skript eigentlich nichts neues zu entdecken gibt:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> proceso <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Sketch</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> randint</span>
<span id="cb1-3"></span>
<span id="cb1-4">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">640</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">338</span></span>
<span id="cb1-5">DUCK_W, DUCK_H <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">78</span></span>
<span id="cb1-6">START_X, START_Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span></span>
<span id="cb1-7">BOTTOM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span></span>
<span id="cb1-8"></span>
<span id="cb1-9">p5 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Sketch()</span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> preload():</span>
<span id="cb1-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">global</span> bg, duck_r, duck_l</span>
<span id="cb1-13">    bg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.load_image(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data/duckhunt-bg.png"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the images</span></span>
<span id="cb1-14">    duck_r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.load_image(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data/duck-right.gif"</span>)</span>
<span id="cb1-15">    duck_l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.load_image(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data/duck-left.gif"</span>)</span>
<span id="cb1-16"></span>
<span id="cb1-17">ducks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb1-18"></span>
<span id="cb1-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> setup():</span>
<span id="cb1-20">    p5.create_canvas(WIDTH, HEIGHT)</span>
<span id="cb1-21">    reset()</span>
<span id="cb1-22"></span>
<span id="cb1-23"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> reset():</span>
<span id="cb1-24">    ducks.append(Duck(randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, p5.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, BOTTOM), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"right"</span>))</span>
<span id="cb1-25">    ducks.append(Duck(randint(p5.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, p5.width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> DUCK_W), randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, BOTTOM), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span>))</span>
<span id="cb1-26">    </span>
<span id="cb1-27"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw():</span>
<span id="cb1-28">    p5.image(bg, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> duck <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ducks:</span>
<span id="cb1-30">        duck.update()</span>
<span id="cb1-31">        duck.display()</span>
<span id="cb1-32"></span>
<span id="cb1-33"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> mouse_clicked():</span>
<span id="cb1-34">    ducks.clear()</span>
<span id="cb1-35">    reset()</span>
<span id="cb1-36">    </span>
<span id="cb1-37"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Duck():</span>
<span id="cb1-38"></span>
<span id="cb1-39">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, _x, _y, _dir):</span>
<span id="cb1-40">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.Vector(_x, _y)</span>
<span id="cb1-41">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.Vector(randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), randint(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb1-42">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> _dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span>:</span>
<span id="cb1-43">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> duck_l</span>
<span id="cb1-44">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-45">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-46">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> duck_r</span>
<span id="cb1-47"></span>
<span id="cb1-48">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-49">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel</span>
<span id="cb1-50">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.check_borders()</span>
<span id="cb1-51"></span>
<span id="cb1-52">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> check_borders(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-53">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pos.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> p5.width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> DUCK_W:</span>
<span id="cb1-54">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-55">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> duck_l</span>
<span id="cb1-56">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pos.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb1-57">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-58">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> duck_r</span>
<span id="cb1-59">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pos.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pos.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> BOTTOM:</span>
<span id="cb1-60">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-61"></span>
<span id="cb1-62">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> display(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-63">        p5.image(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.img, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pos.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pos.y, DUCK_W, DUCK_H)</span>
<span id="cb1-64">        </span>
<span id="cb1-65">p5.run_sketch(preload<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>preload, setup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>setup, draw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>draw, mouse_clicked<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mouse_clicked)</span></code></pre></div>
<p>Die von P5.js bekannte <code>preload()</code>-Funktion lädt die Bilder vor, so daß sie geladen sind, bevor <code>setup()</code> das eigentliche Skript startet.</p>
<p>Die Enten habe ich in die Klasse <code>Duck()</code> ausgelagert, wo ihre Position und ihr Geschwindigkeit <em>(Velocity)</em> durch Vektoren repräsentiert wird. Daher ruft die <code>draw()</code>-Funktion im Hauptprogramm eigentlich nur noch die Methoden <code>update()</code> und <code>display()</code> für die einzelnen Enten auf.</p>
<p>Ich bin mir nicht sicher, ob die Nutzung animierter GIFs in Spielen wirklich ein Fortschritt ist, Spielefiguren lassen sich in einer Einzelanimation <em>(Frame bei Frame)</em> meiner Meinung nach viel lebendiger gestalten. Aber »weil es geht« mußte schon so oft als Begründung herhalten und hier habe ich eben gezeigt, daß es geht.</p>
<p>Wie immer gibt es den <a href="https://github.com/kantel/pythoncuriosa/tree/main/pyscript/proseco/giftest">Quellcode und die Assets</a> nicht nur in meinem GitHub-Repositorium, sondern ich habe das Projekt auch auf meine PyScript-Seiten <a href="https://kantel.pyscriptapps.com/proceso-gif-test/">hochgeladen</a>, wo Ihr es klonen und für eigene Experimente weiterentwickeln könnt.</p>



 ]]></description>
  <category>Proceso</category>
  <category>Python</category>
  <category>PyScript</category>
  <category>Processing</category>
  <category>Creative Coding</category>
  <category>Spieleprogrammierung</category>
  <guid>https://kantel.github.io/posts/2025090801_anim_gif_proceso/</guid>
  <pubDate>Mon, 08 Sep 2025 19:50:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025090801_anim_gif_proceso/images/animgif.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Herbst-Update: Py5 Release 0.10.7a0 freigegeben</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025090701_py5_0_10_7a0/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54770609862/"><img src="https://kantel.github.io/posts/2025090701_py5_0_10_7a0/images/rabbitpython-b.jpg" class="img-fluid"></a></p>
<p>Das erste (für mich) wichtige Update in diesem Herbst: Letzte Woche verkündete <em>James Schmitz</em> stolz, daß er das <a href="https://ixora.io/blog/new-release-0107a0/">Release 0.10.7a0</a> von <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/py5.html">Py5</a>, dem <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processing.html">Processing</a>-Python3-Modul, das Processings Original-Bibliotheken (via JPype) nutzt, freigegeben habe, das auf dem jüngsten <a href="https://github.com/processing/processing4/releases/tag/processing-1306-4.4.6">Processing-Release 4.4.6</a> beruhe.</p>
<p>Neben einigen Bugfixes ist das einzige neue Feature, daß das Py5Image-Objekt nun ebenfalls eine <code>resize()</code>-Methode besitzt. Processings PImage-Objekt besaß schon jeher eine <code>PImage.resize()</code>-Methode, die es bisher aber nicht nach Py5 geschafft hatte. Standardmäßig verwendet diese Methode eine bilineare Interpolation für die Bildumrechnung, unterstützt aber auch die Methoden »Nearest Neighbor« und »Bicubic«. Weitere Informationen findet Ihr in der <a href="https://py5coding.org/reference/py5image_resize.html">Dokumentation zu <code>Py5Image.resize()</code></a>.</p>
<p>Zusätzlich wurde an der Geschwindigkeit des Übersetzters geschraubt.</p>
<p>Da ich in der Regel Py5 mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/jupyterlabdesktop.html">JypterLab-Desktop</a> oder <a href="https://www.jetbrains.com/de-de/pycharm/">PyCharm CE</a> in einer <a href="https://kantel.github.io/posts/2024062801_conda_env_python/">eigenen, virtuellen Py5-Umgebung</a> nutze, war das Update mit</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> activate py5</span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--upgrade</span> py5 py5jupyter</span></code></pre></div>
<p>recht einfach und verlief schnell und problemlos. Dabei wurden gleichzeitig auch noch JPype&nbsp;1.6.0 mitinstalliert. Da ich aber weiß, daß der Freund aus Bremen, dem ich so <a href="https://kantel.github.io/posts/2025071601_fraktale_xxl/">viele schöne Bücher zu Fraktalen</a> verdanke, gerne mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/thonny.html">Thonny</a> spielt, habe ich auch dieses über das Menü <code>Werkzeuge -&gt; Verwalte Plugins</code> auf die neue Py5-Version aktualisiert. Sicherheitshalber habe ich mir über das gleiche Menü auch noch bestätigen lassen, daß der von mir verwendete <a href="https://github.com/tabreturn/thonny-py5mode">thonny-py5mode</a> in der <a href="https://kantel.github.io/posts/2024111401_py5_updates/">Version 0.4.7a0</a> immer noch aktuell ist. Hier ist also für Thonny-Nutzer kein zusätzliches Update nötig. (Das wird <em>Kalle</em> freuen!)</p>
<p>Nun stehen neue Experimente mit Py5 an. Insbesondere will ich testen, welche Code-Änderungen notwendig sind, wenn ich Py5-Skripte nach <a href="https://proceso.cc/">Proceso</a>, der <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/pyscript.html">PyScript</a>-Version von Processing und Python, portiere (oder <em>vice versa</em>). Ich könnte ja erst einmal mit <a href="https://kantel.github.io/posts/2025072101_partikel_proceso/">diesem Partikelsystem</a> anfangen. <em>Still digging!</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54770609862/">Kaninchen und Schlange</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>Colored Franco-Belgian comic style. Illustration of a green python wearing glasses and a white rabbit in a blue vest and with a large pocket watch are standing in front of a whiteboard in an autumnal magical garden with giant mushrooms. The whiteboard is covered with strange drawings, which the python is pointing at with a stick.</em>«. Modell: Flux Kontext.</p>



 ]]></description>
  <category>Py5</category>
  <category>Python</category>
  <category>Creative Coding</category>
  <category>JupyterLab Desktop</category>
  <category>PyCharm</category>
  <category>Thonny</category>
  <category>Proceso</category>
  <category>PyScript</category>
  <guid>https://kantel.github.io/posts/2025090701_py5_0_10_7a0/</guid>
  <pubDate>Sun, 07 Sep 2025 16:50:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025090701_py5_0_10_7a0/images/rabbitpython.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Die letzten Zahlen für diesen Sommer</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025090101_mediadaten/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54758908363/"><img src="https://kantel.github.io/posts/2025090101_mediadaten/images/dachs-b.jpg" class="img-fluid"></a></p>
<p>Mit dem scheidenden August wird sich langsam für dieses Jahr auch der Sommer verabschieden und einem (hoffentlich!) goldenen Herbst Platz machen. Auf jeden Fall ist es Zeit für die Daten des Vormonats, die manches Mal hochtrabend auch <em>Mediadaten</em> genannt werden: Im August 2025 hatte der <em>Schockwellenreiter</em> laut seinem nicht wirklich immer zuverlässigen, aber dafür (noch einmal: hoffentlich!) datenschutzkonformen <del>Geißenpeter</del> <a href="https://www.goatcounter.com/">Neugiertool</a> <strong>5.827 Seitenaufrufe</strong>. Wie immer täuscht die Exaktheit der Ziffer eine Genauigkeit der Zahl nur vor, doch dafür, daß ich im letzten Monat ziemlich geschwächelt hatte, ist das immer noch eine ziemlich große Menge an Zugriffen. Daher freue ich mich über jede Besucherin und jeden Besucher und bedanke mich bei allen meinen Leserinnen und Lesern.</p>
<p>😎 &nbsp; <em>Bleibt mir gewogen!</em></p>
<p>Die <em>Top Five</em> des August ist der schwachen Artikel-Frequenz angemessen:</p>
<ol type="1">
<li>Dauerbrenner ist immer noch der Beitrag »<a href="https://kantel.github.io/posts/2024011002_ki_ohne_zensor/">Bildgeneratoren und Künstliche Intelligenz – ohne Zensoren</a>« vom 10.&nbsp;Januar&nbsp;2024.</li>
<li>Darauf folgt – aber schon weit abgeschlagen – der mittlerweile auch schon ein Jahr alte Artikel »<a href="https://kantel.github.io/posts/2024081201_anytype/">All about Anytype – meine neue, digitale Rumpelkammer?</a>« vom 12.&nbsp;August&nbsp;2024.</li>
<li>Jetzt folgen nur noch aktuelle Beiträge: Erstens die Frage »<a href="https://kantel.github.io/posts/2025081101_qownnotes/">Ein Schritt in die Digitale Souveränität mit QOwnNotes? Wohl eher nicht</a>« vom 11.&nbsp;August&nbsp;2025.</li>
<li>Dann mit überraschend vielen Zugriffen <em>(Sex sells</em> 🥸<em>)</em> der taufrische Bericht über das jüngste LibreOffice-Update: »<a href="https://kantel.github.io/posts/2025082301_libreoffice_25_8/">Es muß nicht immer Microsoft sein: LibreOffice 25.8 ist erschienen</a>« vom 23.&nbsp;August&nbsp;2025.</li>
<li>Und zum Schluß noch zwei mal Anytype: »<a href="https://kantel.github.io/posts/2025081301_anytype_048/">Aus meiner digitalen Rumpelkammer: Anytype Desktop 0.48 freigegeben</a>« vom 13.&nbsp;August&nbsp;2025, dicht gefolgt von der »<a href="https://kantel.github.io/posts/2025082001_anytype_tut/">Anytype-Lobhudelei: Schöner, sicherer, offline-first</a>« vom 20.&nbsp;August&nbsp;2025.</li>
</ol>
<p>Ich werde versuchen, im Herbst wieder fleißiger und bunter zu schreiben, damit die Zahlen nicht weiter so monothematisch wirken.</p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54758908363/">Dachs am Fenster (Herbst)</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>Colored Franco-Belgian Comic Style. Illustration of a badger in a red dressing gown sits in the afternoon at a café table in front of a large window with a laptop. There is a steaming pot of coffee on the table. The autumn sun shines golden through the window</em>«. Modell: Flux (Pro).</p>



 ]]></description>
  <category>Mediadaten</category>
  <category>Interna</category>
  <guid>https://kantel.github.io/posts/2025090101_mediadaten/</guid>
  <pubDate>Mon, 01 Sep 2025 15:35:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025090101_mediadaten/images/dachs.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Es muß nicht immer Microsoft sein: LibreOffice 25.8 ist erschienen</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025082301_libreoffice_25_8/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54355466457/"><img src="https://kantel.github.io/posts/2025082301_libreoffice_25_8/images/libreofficewoman-b.jpg" class="img-fluid"></a></p>
<p>Gerade in diesen Zeiten, wo es wichtig ist, seine digitale Souveränität zu verteidigen, macht für diejenigen, die nicht auf ein Office-Paket verzichten können (weil – aus welchen Gründen auch immer – zu Beispiel <a href="http://cognitiones.kantel-chaos-team.de/produktivitaet/latex/latex.html">LaT<sub>E</sub>X</a> keine Alternative ist), ein Umstieg auf <a href="https://de.wikipedia.org/wiki/LibreOffice">LibreOffice</a> Sinn. Denn hinter LibreOffice steht keine US-amerikanische Firma, sondern die <em><a href="https://de.wikipedia.org/wiki/LibreOffice#The_Document_Foundation">Document Foundation</a></em>, eine gemeinnützige Stiftung nach deutschem Recht.</p>
<p>Vor wenigen Tagen wurde von LibreOffice in neues Update freigegeben. <a href="https://www.deskmodder.de/blog/2025/08/20/libreoffice-25-8-ist-erschienen-windows-7-8-1-32-bit-wird-nicht-mehr-unterstuetzt/">Es handelt sich um die Version&nbsp;25.8</a> und sie kommt mit neuen Funktionen und auch einer verbesserten Leistung. So sollen gerade die Geschwindigkeitsverbesserungen auf weniger leistungsstarken Rechnern gewaltig sein. In den einigen Benchmarks sind Writer und Calc bis zu 30% schneller.</p>
<p>Aber wo Licht ist, da ist auch Schatten: LibreOffice 25.8 unterstützt Windows 7/8.1 nicht mehr und Windows&nbsp;10 32-Bit (x86) gilt als veraltet. Für macOS 10.15 ist es die letzte Version. Aber es werden damit immer noch weit ältere Betriebssystem-Versionen unterstützt, als beim Quasi-Monopolisten aus Redmond.</p>
<p>Den <a href="https://www.libreoffice.org/download/download-libreoffice/">Download</a> gibt es hier und alle Änderungen und die neuen Funktionen könnt ihr euch genauer in den <a href="https://wiki.documentfoundation.org/ReleaseNotes/25.8/de">Release Notes</a> anschauen.</p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54355466457/">(Libre-) Office Woman</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>Colored French Comic Style. A sexy young woman with long red hair, green eyes and red lipstick is sitting in an office at a desk in front of a monitor and a keyboard. She is wearing a white, open blouse with a low neckline and a rust-colored vest. She has a pencil in one hand. On the desk is an open notepad, a cup with writing utensils and a stack of books. There are shelves on the walls with many more books and files. The spring sun is shining through a window in the background.</em>«. Modell: Flux (Pro).</p>



 ]]></description>
  <category>LibreOffice</category>
  <category>Produktivität</category>
  <category>Digitale Souveränität</category>
  <guid>https://kantel.github.io/posts/2025082301_libreoffice_25_8/</guid>
  <pubDate>Sat, 23 Aug 2025 15:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025082301_libreoffice_25_8/images/libreofficewoman.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Noch mehr fraktale Bäume mit Python und der Schildkröte</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025082201_fractal_trees/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54695679963/"><img src="https://kantel.github.io/posts/2025082201_fractal_trees/images/fraktalerbaum-b.jpg" class="img-fluid"></a></p>
<p>Meine <a href="https://kantel.github.io/posts/2025073001_fraktaler_baum/">bisherigen</a>, recht gelungenen <a href="https://kantel.github.io/posts/2025080201_arbor_pythagorae/">Experimente</a> mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/turtlepython.html">CPythons Turtle</a> und nahezu identischem Quellcode mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/trinket.html">Trinkets Schildkröte</a> haben mich zu weiteren Versuchen animiert. Dieses Mal habe ich wieder einen fraktalen Baum konstruiert und sowohl in Trinket wie auch in Standard-Python implementiert:</p>
<iframe src="https://trinket.io/embed/python/08915dce7bd0?outputOnly=true&amp;runOption=run&amp;start=result" width="657" height="539" frameborder="0" marginwidth="0" marginheight="0" allowfullscreen="">
</iframe>
<p>Die Idee zu dieser Konstruktion habe ich von hier<sup>1</sup> und der rekursive Quellcode ist meinem <a href="https://kantel.github.io/posts/2025073001_fraktaler_baum/">ersten Beispielen mit fraktalen Bäumen</a> sehr ähnlich, nur daß der »Baum« nun absolut symmetrisch ist:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> turtle</span>
<span id="cb1-2"></span>
<span id="cb1-3">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">640</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span></span>
<span id="cb1-4">factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span></span>
<span id="cb1-5"></span>
<span id="cb1-6">wn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> turtle.Screen()</span>
<span id="cb1-7">wn.setup(width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> WIDTH, height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> HEIGHT, startx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>, starty <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb1-8">wn.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fractal Tree"</span>)   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Für Trinket auskommentieren</span></span>
<span id="cb1-9">wn.colormode(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>)          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Für Trinket auskommentieren</span></span>
<span id="cb1-10">wn.bgcolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">222</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">217</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">177</span>)</span>
<span id="cb1-11">wn.tracer(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-12"></span>
<span id="cb1-13">alice <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> turtle.Turtle()</span>
<span id="cb1-14">alice.speed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Schnelle Geschwindigkeit</span></span>
<span id="cb1-15">alice.hideturtle()</span>
<span id="cb1-16">alice.penup()</span>
<span id="cb1-17">alice.goto(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>)</span>
<span id="cb1-18">alice.left(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Nach oben ausrichten</span></span>
<span id="cb1-19">alice.pendown()</span>
<span id="cb1-20"></span>
<span id="cb1-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> fractal_tree(laenge, tiefe):</span>
<span id="cb1-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> tiefe <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> laenge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Basis der Rekursion</span></span>
<span id="cb1-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb1-24">    alice.pensize(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(laenge<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">42.0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb1-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Farben in Abängigkeit von der Dicke des Stammes</span></span>
<span id="cb1-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> laenge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>:</span>
<span id="cb1-27">        alice.pencolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">139</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">69</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>)</span>
<span id="cb1-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> laenge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:</span>
<span id="cb1-29">        alice.pencolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">107</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">47</span>)</span>
<span id="cb1-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-31">        alice.pencolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">139</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">69</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>)</span>
<span id="cb1-32"></span>
<span id="cb1-33">    alice.forward(laenge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb1-34">    alice.left(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Nach links drehen</span></span>
<span id="cb1-35">    fractal_tree(laenge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> factor, tiefe <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Rekursiver Aufruf</span></span>
<span id="cb1-36">    alice.right(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Nach rechts drehen</span></span>
<span id="cb1-37">    fractal_tree(laenge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> factor, tiefe <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Rekursiver Aufruf</span></span>
<span id="cb1-38">    alice.left(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Zurück zur Ausrichtung des Elternastes</span></span>
<span id="cb1-39">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Auf dem Rückweg durch die Rekursion</span></span>
<span id="cb1-40">    alice.backward(laenge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb1-41"></span>
<span id="cb1-42">fractal_tree(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">650</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb1-43">wn.update()</span>
<span id="cb1-44"></span>
<span id="cb1-45"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I did it, Babe!"</span>)</span>
<span id="cb1-46">wn.mainloop()</span></code></pre></div>
<p>Wie bei meinen anderen Beipielen auch müssen, damit der Code in Trinket lauffähig ist, lediglich die Code-Zeilen <img src="https://latex.codecogs.com/png.latex?7"> und <img src="https://latex.codecogs.com/png.latex?8"> auskommentiert werden.</p>
<p>Nur ist das Ergebnis ein wenig langweilig. Der Baum wirkt nicht sehr natürlich und Ihr könnt so oft den »Run«-Button drücken, wie Ihr wollt, es kommt immer der gleiche Baum dabei heraus.</p>
<p>Daher habe ich bei einem zweiten Versuch das Skript ein wenig aufgehübscht und – in Maßen – den Zufall ein wenig über das Aussehen des Baumes entscheiden lassen:</p>
<iframe src="https://trinket.io/embed/python/f47c933d23ba?outputOnly=true&amp;runOption=run&amp;start=result" width="657" height="539" frameborder="0" marginwidth="0" marginheight="0" allowfullscreen="">
</iframe>
<p>Nun wird der Verzweigungswinkel bei jedem rekusiven Durchlauf leicht abgewandelt und auch die Astlänge ändert sich für jeden Ast ein wenig:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> turtle</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> randint, uniform</span>
<span id="cb2-3"></span>
<span id="cb2-4">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">640</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span></span>
<span id="cb2-5">DELTA_ANGLE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span></span>
<span id="cb2-6"></span>
<span id="cb2-7">wn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> turtle.Screen()</span>
<span id="cb2-8">wn.setup(width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>WIDTH, height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>HEIGHT, startx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>, starty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb2-9">wn.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fractal Tree"</span>)   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Für Trinket auskommentieren</span></span>
<span id="cb2-10">wn.colormode(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>)          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Für Trinket auskommentieren</span></span>
<span id="cb2-11">wn.bgcolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">222</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">217</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">177</span>)</span>
<span id="cb2-12">wn.tracer(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb2-13"></span>
<span id="cb2-14">alice <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> turtle.Turtle()</span>
<span id="cb2-15">alice.speed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Schnelle Geschwindigkeit</span></span>
<span id="cb2-16">alice.hideturtle()</span>
<span id="cb2-17">alice.penup()</span>
<span id="cb2-18">alice.goto(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>)</span>
<span id="cb2-19">alice.left(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Nach oben ausrichten</span></span>
<span id="cb2-20">alice.pendown()</span>
<span id="cb2-21"></span>
<span id="cb2-22"></span>
<span id="cb2-23"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> fractal_tree(laenge, tiefe):</span>
<span id="cb2-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> tiefe <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> laenge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Basis der Rekursion</span></span>
<span id="cb2-25">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb2-26">    alice.pensize(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(laenge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">42.0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb2-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Farben in Abängigkeit von der Dicke des Stammes</span></span>
<span id="cb2-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> laenge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>:</span>
<span id="cb2-29">        alice.pencolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">139</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">69</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>)</span>
<span id="cb2-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> laenge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>:</span>
<span id="cb2-31">        alice.pencolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">107</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">47</span>)</span>
<span id="cb2-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb2-33">        alice.pencolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">139</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">69</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>)</span>
<span id="cb2-34"></span>
<span id="cb2-35">    delta_angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>DELTA_ANGLE, DELTA_ANGLE)</span>
<span id="cb2-36">    factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> uniform(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.55</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.65</span>)</span>
<span id="cb2-37">    alice.forward(laenge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb2-38">    alice.left(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> delta_angle)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Nach links drehen</span></span>
<span id="cb2-39">    fractal_tree(laenge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> factor, tiefe <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Rekursiver Aufruf</span></span>
<span id="cb2-40">    alice.right(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Nach rechts drehen</span></span>
<span id="cb2-41">    fractal_tree(laenge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> factor, tiefe <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Rekursiver Aufruf</span></span>
<span id="cb2-42">    alice.left(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> delta_angle)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Zurück zur Ausrichtung des Elternastes</span></span>
<span id="cb2-43">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Auf dem Rückweg durch die Rekursion</span></span>
<span id="cb2-44">    alice.backward(laenge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb2-45"></span>
<span id="cb2-46"></span>
<span id="cb2-47">fractal_tree(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">650</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb2-48">wn.update()</span>
<span id="cb2-49"></span>
<span id="cb2-50"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I did it, Babe!"</span>)</span>
<span id="cb2-51">wn.mainloop()</span></code></pre></div>
<p>Wenn Ihr nun den »Run«-Button betätigt, erhaltet Ihr bei jedem Durchlauf einen anders aussehenden Baum.</p>
<p>Mit der Konstante <code>DELTA_ANGLE</code> in Zeile&nbsp;<img src="https://latex.codecogs.com/png.latex?5"> könnt Ihr übrigens experimentieren: Je kleiner sie ist, desto mehr gleicht der Baum dem ersten Skript, je größer sie wird, desto bizarrer sieht der Baum aus. Wenn zum Beispiel <code>DELTA_ANGLE = 45</code> gesetzt wird, entstehen Bäume, die so aussehen, als hätte der Nordseewind sie arg zerrupft.</p>
<section id="verwendete-und-weiterführende-literatur" class="level3">
<h3 class="anchored" data-anchor-id="verwendete-und-weiterführende-literatur">Verwendete und weiterführende Literatur</h3>
<ul>
<li>David Peak, Michael Frame: <em>Komplexität – das gezähmte Chaos</em>, Basel (Birkhäuser Verlag) 1995</li>
<li>Daniel Shiffman: <em>The Nature of Code. Simulating Natural Systems with JavaScript</em>, San Francisco CA (no starch press) 2024</li>
<li>Al Sweigart: <em>The Recursive Book of Recursion. Ace the Coding Interview with Python and JavaScript</em>, San Francisco CA (no starch press) 2022</li>
</ul>
<p>Den Quellcode für die Trinket-Versionen <a href="https://trinket.io/python/08915dce7bd0">Fraktaler Baum</a> und <a href="https://trinket.io/python/f47c933d23ba">Fraktaler Baum (2)</a> könnt ihr in meinen Trinkets finden, die Quellcodes für CPython (<a href="https://github.com/kantel/turtlepy/blob/master/sources/trees/fraktaltree1.py">fraktaltree1.py</a> und <a href="https://github.com/kantel/turtlepy/blob/master/sources/trees/fraktaltree2.py">fraktaltree2.py</a>) findet Ihr auch in meinem GitHub-Repositorium.</p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54695679963/">Eine Python und eine Schildkröte unter Bäumen</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>Colored franco-belgian comic style. Illustration of a turte with motorcycle goggles and a python with glasses wandering through a surreal, hexagonal landscape</em>«. Modell: Flux Kontext.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Fußnoten</h2>

<ol>
<li id="fn1"><p>Daniel Shiffman: <em>The Nature of Code</em>, 2024, Seiten 398ff.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Python</category>
  <category>Turtle</category>
  <category>Trinket</category>
  <category>Creative Coding</category>
  <guid>https://kantel.github.io/posts/2025082201_fractal_trees/</guid>
  <pubDate>Fri, 22 Aug 2025 17:25:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025082201_fractal_trees/images/fraktalerbaum.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Anytype-Lobhudelei: Schöner, sicherer, offline-first</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025082001_anytype_tut/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54717881007/"><img src="https://kantel.github.io/posts/2025082001_anytype_tut/images/anytype2-b.jpg" class="img-fluid"></a></p>
<p>Wer – wie ich – nicht genug von <a href="https://anytype.io/">Anytype</a>, meiner digitalen Rumpelkammer und (fast) freien Notion-Alternative bekommen kann, dem sei das Video »<a href="https://www.youtube.com/watch?v=MKvDdsa6oyY">Endlich Leben im Griff 🤓 mit Anytype</a>« von c’t&nbsp;3003 empfohlen, das nicht nur Anytype mit Notion vergleicht und Anytype dabei besser abschneidet, sondern auch gleichzeitig eine Einführung und ein Tutorial in die grundlegenden Funktion des High-End-Zettelkasten ist. Durch dieses Video habe auch ich endlich den Unterschied zwischen <em>Sets</em> und <em>Collections</em> begriffen.</p>
<iframe class="if16_9" src="https://www.youtube.com/embed/MKvDdsa6oyY?si=vry1CFzRrhkyqF74" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p>Ansonsten ist es nicht nur eine ultimative Lobhudelei auf meine digitale Rumpelkammer, sondern vor allem ein Tutorial, das über viele Einstiegshürden hinweghilft. Und wer lieber liest, statt Filmchen zu schauen, kann alternativ das Transkript »<a href="https://www.heise.de/news/Notion-Alternative-Anytype-Schoener-sicherer-offline-first-10349463.html">Notion-Alternative Anytype: Schöner, sicherer, offline-first</a>« auf den Seiten von <em>heise online</em> nutzen.</p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54717881007/">Digitale Rumpelkammer</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>Colored belgian comic style, illustration of an clean shaven man, short white hair, blue eyes, glasses, sits at a desk in front of two huge monitors, there are a few open books on the desk, and large mug of steaming coffee next to them, and a computer keyboard in front of the monitor, on the wall there are many shelves with a lot of files and books, the shelves looks unorganized, the sun shines through a large window</em>«. Modell: Flux Kontext.</p>



 ]]></description>
  <category>Anytype</category>
  <category>Notion</category>
  <category>Digitale Souveränität</category>
  <category>Zettelkasten</category>
  <guid>https://kantel.github.io/posts/2025082001_anytype_tut/</guid>
  <pubDate>Wed, 20 Aug 2025 14:05:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025082001_anytype_tut/images/anytype2.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Aus meiner digitalen Rumpelkammer: Anytype Desktop 0.48 freigegeben</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025081301_anytype_048/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54719044550/"><img src="https://kantel.github.io/posts/2025081301_anytype_048/images/anytype-b.jpg" class="img-fluid"></a></p>
<p><a href="https://anytype.io/">Anytype</a>, die <a href="https://blog.anytype.io/our-open-philosophy/">freie</a>, außerhalb der USA, nämlich in der Schweiz (und damit DSGVO-konform) beheimatete Notion-Alternative, ist nicht nur bei mir, sondern – wenn ich meinem <del>Geißenpeter</del> <a href="https://www.goatcounter.com/">Neugiertool</a> trauen darf – auch bei Euch sehr beliebt. Daher will ich Euch die Nachricht nicht vorenthalten, daß von dem Teil gestern die Version 0.48 Desktop Beta (August&nbsp;2025) freigegeben wurde:</p>
<iframe class="if16_9" src="https://www.youtube.com/embed/iRUjGENs7eQ?si=yvB21Iqrdd8hTQsT" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p>Wie bei jedem Update gibt die fokussierte (und personifizierte) Neugier <em>(Focused Curiosity)</em> in <a href="https://www.youtube.com/watch?v=iRUjGENs7eQ">einem YouTube-Video</a> einen Überblick über die wichtigsten Neuerungen. Dieses Mal ging es um den Feinschliff der App. Bei der Überarbeitung wurde der Schwerpunkt auf die Stabilität und auf kleinere Verbesserungen gelegt.</p>
<p>Wer lieber liest, statt Filmchen zu schauen, findet die Änderung aber auch in <a href="https://community.anytype.io/t/anytype-desktop-0-48-0-released/28523">diesem Artikel</a> gelistet.</p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54719044550/">Digitale Rumpelkammer</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>Colored belgian comic style, illustration of an clean shaven man, short white hair, blue eyes, glasses, sits at a desk in front of two huge monitors, there are a few open books on the desk, and large mug of steaming coffee next to them, and a computer keyboard in front of the monitor, on the wall there are many shelves with a lot of files and books, the shelves looks unorganized, the sun shines through a large window</em>«. Modell: Flux Kontext.</p>



 ]]></description>
  <category>Anytype</category>
  <category>Digitale Souveränität</category>
  <category>Zettelkasten</category>
  <guid>https://kantel.github.io/posts/2025081301_anytype_048/</guid>
  <pubDate>Wed, 13 Aug 2025 18:20:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025081301_anytype_048/images/anytype.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Ein Schritt in die Digitale Souveränität mit QOwnNotes? Wohl eher nicht</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025081101_qownnotes/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54468940209/"><img src="https://kantel.github.io/posts/2025081101_qownnotes/images/qownnote-b.jpg" class="img-fluid"></a></p>
<p><a href="https://en.wikipedia.org/wiki/QOwnNotes">QOwnNotes</a> ist ein freier (GPL) und kostenloser Open-Source-Notizblock im Klartextformat. Das Programm unterstützt Markdown und enthält einen To-Do-Listen-Manager, der unter FreeBSD, Linux, macOS und Windows funktioniert. Das Programm hatte ich schon länger auf meiner Testliste und als vor ein paar Tagen mir die Meldung in meinen Feedreader schneite, daß es nun auch ein <em><a href="https://www.qownnotes.org/blog/2025-07-22-Universal-binary-for-macOS.html">Universal binary for macOS</a></em> gäbe, hatte ich mich endlich zu einem Test entschlossen.</p>
<p><a href="https://www.qownnotes.org/">QOwnNotes</a> ist nämlich vor allen deswegen interessant, weil es auch optional mit den Notiz-Anwendungen von ownCloud oder <a href="https://nextcloud.com/de/">Nextcloud</a> zusammenarbeiten soll. Und seit <a href="https://kantel.github.io/posts/2025042302_nextcloud/">April dieses Jahres</a> werkelt bei mir still und unauffällig, aber zuverlässig eine Nextcloud-Instanz von <a href="https://tab.digital/">Tab Digital</a> als <a href="http://cognitiones.kantel-chaos-team.de/webworking/webservices/dropbox.html">Dropbox</a>-Replacement im Hintergrund. <a href="https://cloud.tab.digital/companyprivacypolicy">Die Firma sitzt in Riga, der Hauptstadt von Lettland, ihre Server stehen in den Niederlanden</a> und die <a href="https://de.wikipedia.org/wiki/Nextcloud">Software</a> ist OpenSource und DSGVO-konform. Und als <a href="https://cloud.tab.digital/de">Cloud-Lösung</a> gibt es von Tab-Digital eine <a href="https://de.wikipedia.org/wiki/Nextcloud">kostenlose Tier mit 8&nbsp;Gigabyte Speicher</a>, das ist weit mehr, als sich in all den vergangenen Jahren in meiner Tropfenschachtel angesammelt hatte.</p>
<p>Wenn QOwnNotes das hält, was es verspricht, würde es doch prima in meine eigene, digital souveräne Cloud passen und könnte vielleicht auch das von mir bisher als <a href="https://kantel.github.io/posts/2025050203_joplin_3_3_9/">digitalen Zettelkasten</a> verwendete <a href="http://cognitiones.kantel-chaos-team.de/webworking/staticsites/joplin.html">Joplin</a> ablösen. Ja, wenn&nbsp;… erste Versuche verliefen jedenfalls enttäuschend:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/54713580322/"><img src="https://kantel.github.io/posts/2025081101_qownnotes/images/qownnotes.jpg" class="img-fluid figure-img" alt="Formeln und Fußnoten in QOwnNotes"></a></p>
<figcaption>Formeln und Fußnoten in QOwnNotes</figcaption>
</figure>
</div>
<p>QOwnNotes beherrscht weder Fußnoten noch mathematischen Formelsatz. Der Ehrlichkeit halber muß ich zugeben, daß das im <a href="https://www.qownnotes.org/getting-started/markdown.html">Handbuch von QOwnNotes</a> auch nirgendwo versprochen wird, auch wenn Googles KI da eine Integration von <a href="https://de.wikipedia.org/wiki/MathJax">MathJax</a> herbeihalluziniert, sogar mit konkreten Schritten, wie MathJax über das Einstellungs-Menü von QOwnNotes aktiviert werden kann. Nur, es gibt diese angesprochenen Checkboxen nirgendwo im Einstellungs-Menü. Ich hatte sowieso in den letzten Monaten die Erfahrung gemacht, daß Googles KI sehr gerne etwas nicht Vorhandenes herbeihalluziniert und somit ein schlechter Ratgeber ist.</p>
<p>Doch nun zum Vergleich: So sehen Formeln und Fußnoten in Joplin aus:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/54713580317/"><img src="https://kantel.github.io/posts/2025081101_qownnotes/images/joplin.jpg" class="img-fluid figure-img" alt="Formeln und Fußnoten in Joplin"></a></p>
<figcaption>Formeln und Fußnoten in Joplin</figcaption>
</figure>
</div>
<p>Wer – wie ich – weder auf mathematische Formeln noch auf Fußnoten verzichten kann, für den ist QOwnNotes daher kein Schritt in Richtung Digitale Souveränität. Das ist eigentlich kein Beinbruch, denn ich bin mit Joplin zufrieden. Auch wenn ich gerne die Möglichkeit von internen Links hätte und meine Notizen auch ebenso gerne in meiner NextCloud-Instanz ohne einen expliziten Markdown-Export aus Joplin, aber auch ohne den Joplin-eigenen Zusatzdateien-Overkill ablegen würde. Wenn also jemand von Euch da draußen eine Idee hat? <em>Still digging!</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54468940209/">A Man in an Office</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>colored belgian comic style, illustration of an clean shaven man, short white hair, blue eyes, glasses, sits at a desk in front of two huge monitors, there are a few open books on the desk, and large mug of steaming coffee next to them, and a computer keyboard in front of the monitor, on the wall there are many shelves with a lot of files and books, the shelves looks unorganized, the sun shines through a large window</em>«. Modell: Flux (Pro).</p>



 ]]></description>
  <category>Digitale Souveränität</category>
  <category>Joplin</category>
  <category>Zettelkasten</category>
  <category>Nextcloud</category>
  <category>QOwnNotes</category>
  <guid>https://kantel.github.io/posts/2025081101_qownnotes/</guid>
  <pubDate>Mon, 11 Aug 2025 18:20:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025081101_qownnotes/images/qownnote.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Arbor Pythagorae mit CPythons Schildkröte und mit Trinkets Turtle</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025080201_arbor_pythagorae/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54695317548/"><img src="https://kantel.github.io/posts/2025080201_arbor_pythagorae/images/arborpythagorae-b.jpg" class="img-fluid"></a></p>
<p>Nachdem mein <a href="https://kantel.github.io/posts/2025073001_fraktaler_baum/">letztes Experiment</a> mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/turtlepython.html">CPythons Turtle</a> und dem nahezu identischen Quellcode in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/trinket.html">Trinket</a> so erfolgreich verlaufen war, hatte ich Blut geleckt und wollte eines meiner Lieblingsobjekte, den <a href="https://de.wikipedia.org/wiki/Pythagoras-Baum">Pythagoras-Baum</a>, auch mit Pythons Turtle (und parallel dazu auch mit Trinkets Schildkröte) realisieren. Zwar hatte ich ihn <a href="https://kantel.github.io/posts/2025071101_pythagoras_baum_py5/">vor etwa drei Wochen</a> mit einem Algorithmus, der ohne Turtle-Kommandos auskommt, in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/py5.html">Py5</a>, dem Python3-Port von Processing, implementiert, und <a href="https://kantel.github.io/posts/2025060201_spass_mit_tigerjython/">davor auch schon einmal</a> mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/tigerjython.html">TigerJythons</a> Turtle, aber die Implementierung der Schildkröte in TigerJython weicht doch stark von Pythons Turtle ab. Daher wollte ich den Pythagoras-Baum einfach auch mal mit den Kommandos realisieren, die Python in seiner Standard-Bibliothek zur Verfügung stellt, ohne daß man zusätzliche Module installieren muß.</p>
<p>In den folgenden Abschnitten ist jeweils das Trinket-Skript in diese Seiten eingebettet, das Ihr mit »Run« neu starten könnt. Zwar habe ich noch keine weiteren Interaktionen eingeplant, aber »Weil es geht!« ist doch auch ein hinreichender Grund für dieses Experiment.&nbsp;🤓</p>
<section id="der-symmetrische-pythagoras-baum" class="level2">
<h2 class="anchored" data-anchor-id="der-symmetrische-pythagoras-baum">Der symmetrische Pythagoras-Baum</h2>
<iframe src="https://trinket.io/embed/python/6de8871e3e4d?outputOnly=true&amp;runOption=run&amp;start=result" width="657" height="539" frameborder="0" marginwidth="0" marginheight="0" allowfullscreen="">
</iframe>
<p>Der symmetrische Pythagoras-Baum ist die einfachste Form der Realisierung, weil hier die rechte wie die linke Seite gleichbehandelt werden, es also keine Unterscheidungen gibt. Daher ist der Quellcode auch entsprechend kurz geraten:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Symmetrischer Pythagorasbaum</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> turtle <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> t</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb1-4"></span>
<span id="cb1-5">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">640</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span></span>
<span id="cb1-6"></span>
<span id="cb1-7">palette <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">54</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">51</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">46</span>),</span>
<span id="cb1-8">           (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">105</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">215</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">158</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>),</span>
<span id="cb1-9">           (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">180</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">144</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">55</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">140</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">82</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">48</span>)]</span>
<span id="cb1-10"></span>
<span id="cb1-11">wn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> t.Screen()</span>
<span id="cb1-12">wn.setup(width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> WIDTH, height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> HEIGHT, startx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>, starty <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb1-13">wn.colormode(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>)               <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># für Trinket auskommentieren</span></span>
<span id="cb1-14">wn.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Arbor Pythagorae 1"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># für Trinket auskommentieren</span></span>
<span id="cb1-15">wn.bgcolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">230</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">226</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">204</span>)</span>
<span id="cb1-16"></span>
<span id="cb1-17">p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> t.Turtle()</span>
<span id="cb1-18">p.speed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-19">p.pencolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dunkles Grün</span></span>
<span id="cb1-20">p.setheading(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>)</span>
<span id="cb1-21"></span>
<span id="cb1-22"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> tree(s):</span>
<span id="cb1-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:</span>
<span id="cb1-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb1-25">    quadrat(s)</span>
<span id="cb1-26">    p.forward(s)</span>
<span id="cb1-27">    s1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>math.sqrt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-28">    p.left(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>)</span>
<span id="cb1-29">    tree(s1)</span>
<span id="cb1-30">    p.right(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>)</span>
<span id="cb1-31">    p.forward(s1)</span>
<span id="cb1-32">    tree(s1)</span>
<span id="cb1-33">    p.back(s1)</span>
<span id="cb1-34">    p.left(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>)</span>
<span id="cb1-35">    p.back(s)</span>
<span id="cb1-36"></span>
<span id="cb1-37"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> quadrat(s):</span>
<span id="cb1-38">    p.fillcolor(palette[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(palette) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)])</span>
<span id="cb1-39">    p.begin_fill()</span>
<span id="cb1-40">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>):</span>
<span id="cb1-41">        p.forward(s)</span>
<span id="cb1-42">        p.right(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>)</span>
<span id="cb1-43">    p.end_fill()</span>
<span id="cb1-44"></span>
<span id="cb1-45">p.penup()</span>
<span id="cb1-46">p.setpos(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>HEIGHT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb1-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bildschirm-Refresh ausschalten</span></span>
<span id="cb1-48">wn.tracer(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-49">p.pendown()</span>
<span id="cb1-50">tree(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>)</span>
<span id="cb1-51">p.hideturtle()</span>
<span id="cb1-52"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bildschirm-Refresh wieder einschalten</span></span>
<span id="cb1-53">wn.update()</span>
<span id="cb1-54"></span>
<span id="cb1-55"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I did it, Babe!"</span>)</span>
<span id="cb1-56"></span>
<span id="cb1-57">wn.mainloop()</span></code></pre></div>
<p>Die Implementierung in Trinket unterscheidet sich nur dadurch, daß die Zeilen <img src="https://latex.codecogs.com/png.latex?13"> und <img src="https://latex.codecogs.com/png.latex?14"> auskommentiert oder gelöscht werden müssen. Außerdem sind in Zeile <img src="https://latex.codecogs.com/png.latex?12"> die Parameter <code>startx</code> und <code>starty</code> sinnlos, denn sie sind nur dafür gedacht, die Position des Ausgabefenster festzulegen (in diesem Fall auf meinen zweiten Monitor). Aber Trinket ignoriert sie einfach, Ihr müsst sie also nicht löschen.</p>
</section>
<section id="der-asymmetrische-pythagoras-baum" class="level2">
<h2 class="anchored" data-anchor-id="der-asymmetrische-pythagoras-baum">Der asymmetrische Pythagoras-Baum</h2>
<iframe src="https://trinket.io/embed/python/73d448ee70e2?outputOnly=true&amp;runOption=run&amp;start=result" width="657" height="539" frameborder="0" marginwidth="0" marginheight="0" allowfullscreen="">
</iframe>
<p>Der Code für den asymmetrischen Pythagoras-Baum unterscheidet sich doch deutlich von dem des symmetrischen Baums (im Gegensatz zu der <a href="https://kantel.github.io/posts/2025071101_pythagoras_baum_py5/">Implementierung ohne Turtle in Py5</a>, wo im Prinzip nur die Winkelkonstanten geändert werden mußten – alle anderen Änderungen waren nur kosmetischer Natur).</p>
<p>Während der symmetrische Pythagorasbaum die Rekursion stoppte, wenn die Länge der einzelnen Schritte kleiner <img src="https://latex.codecogs.com/png.latex?2"> wurde (die Rekursionstiefe also von der Seitenlänge des Startquadrates abhing), wird beim asymmetrischen Baum die Rekursionstiefe explizit festgelegt und als Parameter der Funktion <code>tree()</code> mit übergeben. Das ist deshalb notwendig, weil die rechte und die linke Seite des Baumes unterschiedlich behandelt werden. Während der linken Seite bei jeder Rekursion eine Seitenlänge von <img src="https://latex.codecogs.com/png.latex?s%20%5Csqrt(%5Cfrac%7B3%7D%7B2%7D)"> zugewiesen wird, bekommt die rechte Seite jeweils eine neue Seitenlänge von <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7Bs%7D%7B2%7D">.</p>
<p>Da es für mich daher schwierig war, zu entscheiden, welche Seitenlänge (die rechte oder die linke?) für den Abbruch der Rekursion zuständig sein soll, habe ich mich entschieden, einen Rekursionslevel als Abbruchkriterium mitzugeben.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Asymmetrischer Pythagorasbaum</span></span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> turtle <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> t</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb2-4"></span>
<span id="cb2-5">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">640</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span></span>
<span id="cb2-6">REC_LEVEL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Rekursionstiefe</span></span>
<span id="cb2-7"></span>
<span id="cb2-8">palette <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">54</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">51</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">46</span>),</span>
<span id="cb2-9">           (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">105</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">215</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">158</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>),</span>
<span id="cb2-10">           (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">180</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">144</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">55</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">140</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">82</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">48</span>)]</span>
<span id="cb2-11"></span>
<span id="cb2-12">wn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> t.Screen()</span>
<span id="cb2-13">wn.setup(width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> WIDTH, height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> HEIGHT, startx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>, starty <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb2-14">wn.colormode(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>)               <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># für Trinket auskommentieren</span></span>
<span id="cb2-15">wn.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Arbor Pythagorae 2"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># für Trinket auskommentieren</span></span>
<span id="cb2-16">wn.bgcolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">230</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">226</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">204</span>)</span>
<span id="cb2-17"></span>
<span id="cb2-18">p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> t.Turtle()</span>
<span id="cb2-19">p.speed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb2-20">p.pencolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dunkles Grün</span></span>
<span id="cb2-21">p.setheading(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>)</span>
<span id="cb2-22"></span>
<span id="cb2-23"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> tree(s, level):</span>
<span id="cb2-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> level <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb2-25">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb2-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb2-27">        quadrat(s)</span>
<span id="cb2-28">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Linke Seite</span></span>
<span id="cb2-29">        ls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>math.sqrt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-30">        p.forward(s)</span>
<span id="cb2-31">        p.left(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>)</span>
<span id="cb2-32">        p.forward(s)</span>
<span id="cb2-33">        p.right(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>)</span>
<span id="cb2-34">        p.forward(ls)</span>
<span id="cb2-35">        p.left(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>)</span>
<span id="cb2-36">        tree(ls, level <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-37">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Rechte Seite</span></span>
<span id="cb2-38">        rs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-39">        p.right(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">180</span>)</span>
<span id="cb2-40">        p.forward(rs)</span>
<span id="cb2-41">        p.left(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>)</span>
<span id="cb2-42">        tree(rs, level <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-43">        p.left(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>)</span>
<span id="cb2-44">        p.back(s)</span>
<span id="cb2-45"></span>
<span id="cb2-46"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> quadrat(s):</span>
<span id="cb2-47">    p.fillcolor(palette[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(palette) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)])</span>
<span id="cb2-48">    p.begin_fill()</span>
<span id="cb2-49">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>):</span>
<span id="cb2-50">        p.forward(s)</span>
<span id="cb2-51">        p.left(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>)</span>
<span id="cb2-52">    p.end_fill()</span>
<span id="cb2-53"></span>
<span id="cb2-54">p.penup()</span>
<span id="cb2-55">p.setpos(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>HEIGHT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb2-56"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bildschirm-Refresh ausschalten</span></span>
<span id="cb2-57">wn.tracer(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb2-58">p.pendown()</span>
<span id="cb2-59"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Für eine Rekursionstiefe &gt; 14 braucht man schon sehr viel Geduld</span></span>
<span id="cb2-60">tree(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, REC_LEVEL)</span>
<span id="cb2-61">p.hideturtle()</span>
<span id="cb2-62"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bildschirm-Refresh wieder einschalten</span></span>
<span id="cb2-63">wn.update()</span>
<span id="cb2-64"></span>
<span id="cb2-65"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I did it, Babe!"</span>)</span>
<span id="cb2-66"></span>
<span id="cb2-67">wn.mainloop()</span></code></pre></div>
<p>Auch hier gilt für die Trinket-Version für die Zeilen <img src="https://latex.codecogs.com/png.latex?13">, <img src="https://latex.codecogs.com/png.latex?14"> und <img src="https://latex.codecogs.com/png.latex?15"> was ich oben schon für die Zeilen <img src="https://latex.codecogs.com/png.latex?12"> bis <img src="https://latex.codecogs.com/png.latex?14"> geschrieben hatte: Sie können auskommentiert werden, respektive bei der <code>wn.setup()</code>-Zeile werden die letzten beiden Parameter von Trinket einfach ignoriert.</p>
<p>Wie schon beim symmetrischen Pythagoras-Baum sind die Werte in <code>p.setpos()</code> und die Seitenlänge des Startquadrats in <code>tree()</code> kosmetischer Natur. Ich habe durch wildes Experimentieren herausgefunden, mit welchen Werten der Baum am Besten ins Fenster passt.</p>
</section>
<section id="die-farben" class="level2">
<h2 class="anchored" data-anchor-id="die-farben">Die Farben</h2>
<p>Damit meine Pythagoras-Skripte nicht immer gleich aussehen, habe ich dieses Mal eine <a href="http://cognitiones.kantel-chaos-team.de/multimedia/farbpaletten/malewitsch.html">andere Farbpalette</a> ausgewählt. Sie ist inspiriert von Werken des russisch-sowjetischen Malers <em><a href="https://de.wikipedia.org/wiki/Kasimir_Sewerinowitsch_Malewitsch">Kasimir Malewitsch</a></em> (1879-1935), eines Hauptvertreters der Russischen Avantgarde, Wegbereiter des Konstruktivismus und Begründer des Suprematismus. Ich finde die Farben passen sehr gut zum extrem künstlich konstruierten Pythagoras-Baum.</p>
<p>Den Quellcode findet Ihr natürlich wieder in meinem GitHub-Repositorium (<a href="https://github.com/kantel/turtlepy/blob/master/sources/trees/arborpythagorae1.py">arborpythagorae1.py</a> und <a href="https://github.com/kantel/turtlepy/blob/master/sources/trees/arborpythagorae2.py">arborpythagorae2.py</a>) und die Trinkets für <a href="https://trinket.io/python/6de8871e3e4d">Arbor Pythagorae 1</a> und <a href="https://trinket.io/python/73d448ee70e2">Arbor Pythagorae 2</a> könnt Ihr von meinem Trinket-Account remixen. Stellt damit an, was Ihr wollt und habt Spaß damit.</p>


</section>

 ]]></description>
  <category>Python</category>
  <category>Turtle</category>
  <category>Trinket</category>
  <category>Creative Coding</category>
  <guid>https://kantel.github.io/posts/2025080201_arbor_pythagorae/</guid>
  <pubDate>Sat, 02 Aug 2025 17:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025080201_arbor_pythagorae/images/arborpythagorae.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Die Zahlen für den verregneten Juli</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025080101_mediadaten/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54693501575/"><img src="https://kantel.github.io/posts/2025080101_mediadaten/images/regendachs-b.jpg" class="img-fluid"></a></p>
<p>Entgegen meiner <a href="https://kantel.github.io/posts/2025070101_mediadaten/">optimistischen Einschätzung zu Beginn des letzten Monats</a> hat uns der Juli nicht gerade mit hochsommerlichen Tagen verwöhnt. Dennoch ist es wieder Zeit für die Zahlen, die hochtrabend manches Mal auch <em>Mediadaten</em> genannt werden: Im Juli 2025 hatte der <em>Schockwellenreiter</em> laut seinem nicht immer wirklich zuverlässigen (er war auch schon mal für ein paar Tage ausgefallen), aber dafür (hoffentlich!) datenschutzkonformen <del>Geißenpeter</del> Neugiertool exakt <strong>6.821&nbsp;Seitenaufrufe</strong>. Wie immer täuscht die Exaktheit der Ziffer eine Genauigkeit der Zahl nur vor, trotzdem freue ich mich über jede Besucherin und jeden Besucher und bedanke mich bei allen meinen Leserinnen und Lesern.</p>
<p>😎 &nbsp; <em>Bleibt mir gewogen!</em></p>
<p>Die <em>Top Five</em> des verregneten Monats sind wenig überraschend:</p>
<ol type="1">
<li>Immer noch – wie schon seit Monaten – liegt der Beitrag »<a href="https://kantel.github.io/posts/2024011002_ki_ohne_zensor/">Bildgeneratoren und Künstliche Intelligenz – ohne Zensoren</a>« vom 10. Januar 2024 weit vorne.</li>
<li>Dann folgt – ebenfalls schon seit Monaten – der Artikel über meine <em>neue digitale Rumpelkammer</em> »<a href="https://kantel.github.io/posts/2024081201_anytype/">All about Anytype</a>« vom 12. August 2024.</li>
<li>Ebenfalls viele Freunde gefunden hatte mein Hinweis vom 1. Juli 2025, daß man »<a href="https://kantel.github.io/posts/2025070102_history_math_beauty/">Die Geschichte der Schönheit in der Mathematik</a>« für umme lesen kann.</li>
<li>Meine am 6. Juli 2025 gestellte Frage, ob <a href="https://kantel.github.io/posts/2025070601_escooter/">es denn nur noch Gehirnamputierte in Neukölln</a> gäbe, fand offensichtlich viel Zustimmung.</li>
<li>Und <em>last but not least</em> noch der Hinweis auf Lesefutter vom 9.&nbsp;Juli&nbsp;2025: »<a href="https://kantel.github.io/posts/2025070901_fraktale_dynamische_systeme/">Neu in meiner Bibliothek: Fraktale und Dynamische Systeme (2 Bände)</a>«.</li>
</ol>
<p>Dieser fünfte Platz im Ranking wird sicher meinen schon so oft zitierten »Freund aus Bremen« sehr freuen.</p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54693501575/">Ein Dachs im Regen</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>Colored Franco-Belgian Comic Style. Illustration of a badger in a red dressing gown sits in the afternoon at a café table in front of a large window with a laptop. There is a steaming pot of coffee on the table. Outside, it’s raining, and drops are falling on the windowpane and into large puddles on the street</em>«. Modell: Flux (Pro).</p>



 ]]></description>
  <category>Mediadaten</category>
  <category>Interna</category>
  <guid>https://kantel.github.io/posts/2025080101_mediadaten/</guid>
  <pubDate>Fri, 01 Aug 2025 16:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025080101_mediadaten/images/regendachs.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Ein fraktaler Baum mit Pythons Turtle</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025073001_fraktaler_baum/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54680488356/"><img src="https://kantel.github.io/posts/2025073001_fraktaler_baum/images/fractaltree2-b.jpg" class="img-fluid"></a></p>
<p>In diesem Beitrag möchte ich wieder Pythons Turtle bemühen, um damit fraktale, selbstähnliche Bäume zu erzeugen. Und auch wenn ich große Sympathien für die Turtle-Implementierung in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/tigerjython.html">TigerJython</a> habe, ihr Nachteil ist, daß sie große Unterschiede zu der <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/turtlepython.html">Turtle-Implementierung in Standard-Python</a> besitzt. Daher habe ich mich bei diesem Beispiel entschieden, <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/trinket.html">Trinkets</a>-Turtle wieder hervorzukramen, da ihre Implementierung sich – bis auf <a href="https://kantel.github.io/posts/2023031101_trinket_turtle_ontimer/">wenige Ausnahmen</a> – streng an CPythons Turtle orientiert. In der Regel können die Programme Eins-zu-Eins übernommen werden.</p>
<iframe src="https://trinket.io/embed/python/95628cb89c3f?outputOnly=true&amp;runOption=run&amp;start=result" width="657" height="539" frameborder="0" marginwidth="0" marginheight="0" allowfullscreen="">
</iframe>
<p>Also habe ich erst einmal einen perfekt selbstähnlichen Baum konstruiert. Es ist ein rekursiver Aufruf und bei der Implementierung habe ich mich an <em>Al Sweigarts</em> wunderbarem Buch<sup>1</sup> orientiert, allerdings konnte ich mit Hilfe von Trinket auch ohne JavaScript ein im Browser lauffähiges Programm erzeugen.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> turtle</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> randint</span>
<span id="cb1-3"></span>
<span id="cb1-4">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">640</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span></span>
<span id="cb1-5">LEFT_ANGLE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb1-6">LEFT_DECREASE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span>
<span id="cb1-7">RIGHT_ANGLE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb1-8">RIGHT_DECREASE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span>
<span id="cb1-9"></span>
<span id="cb1-10">wn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> turtle.Screen()</span>
<span id="cb1-11">wn.setup(width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> WIDTH, height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> HEIGHT)</span>
<span id="cb1-12">wn.setworldcoordinates(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, WIDTH, HEIGHT)</span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># wn.title("Fractal Tree")</span></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># wn.colormode(255)</span></span>
<span id="cb1-15">wn.bgcolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">210</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">219</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">142</span>)</span>
<span id="cb1-16">wn.tracer(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-17"></span>
<span id="cb1-18">alice <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> turtle.Turtle()</span>
<span id="cb1-19">alice.speed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-20">alice.hideturtle()</span>
<span id="cb1-21"></span>
<span id="cb1-22"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw_branch(start_position, direction, branch_length):</span>
<span id="cb1-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> branch_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:</span>
<span id="cb1-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb1-25">    </span>
<span id="cb1-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Startposition und initiale Richtung</span></span>
<span id="cb1-27">    alice.penup()</span>
<span id="cb1-28">    alice.goto(start_position)</span>
<span id="cb1-29">    alice.setheading(direction)</span>
<span id="cb1-30">    </span>
<span id="cb1-31">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Zeichne einen Zweig</span></span>
<span id="cb1-32">    alice.pendown()</span>
<span id="cb1-33">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Die Dicke des Zweiges beträgt 1/7 der Zweiglänge, aber mindestens 1</span></span>
<span id="cb1-34">    alice.pensize(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(branch_length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb1-35">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Farben in Abängigkeit von der Dicke des Stammes</span></span>
<span id="cb1-36">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> branch_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>:</span>
<span id="cb1-37">        alice.pencolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">139</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">69</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>)</span>
<span id="cb1-38">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> branch_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">65</span>:</span>
<span id="cb1-39">        alice.pencolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">139</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">115</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>)</span>
<span id="cb1-40">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> branch_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>:</span>
<span id="cb1-41">        alice.pencolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">139</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">134</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">78</span>)</span>
<span id="cb1-42">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> branch_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">55</span>:</span>
<span id="cb1-43">        alice.pencolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">189</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">183</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">110</span>)</span>
<span id="cb1-44">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> branch_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>:</span>
<span id="cb1-45">        alice.pencolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">107</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">47</span>)</span>
<span id="cb1-46">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> branch_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>:</span>
<span id="cb1-47">        alice.pencolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">107</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">142</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span>)</span>
<span id="cb1-48">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-49">        alice.pencolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-50">        </span>
<span id="cb1-51">    alice.forward(branch_length)</span>
<span id="cb1-52">    </span>
<span id="cb1-53">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Speichere die Position am Ende des Zweiges</span></span>
<span id="cb1-54">    end_position <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> alice.position()</span>
<span id="cb1-55">    left_direction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> direction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> LEFT_ANGLE</span>
<span id="cb1-56">    left_branch_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> branch_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> LEFT_DECREASE</span>
<span id="cb1-57">    right_direction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> direction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> RIGHT_ANGLE</span>
<span id="cb1-58">    right_branch_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> branch_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> RIGHT_DECREASE</span>
<span id="cb1-59">    </span>
<span id="cb1-60">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Rekursion</span></span>
<span id="cb1-61">    draw_branch(end_position, left_direction, left_branch_length)</span>
<span id="cb1-62">    draw_branch(end_position, right_direction, right_branch_length)</span>
<span id="cb1-63">    </span>
<span id="cb1-64"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (Pseudo-) Zufallswert für die Startlänge des Stamms</span></span>
<span id="cb1-65">start_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>)</span>
<span id="cb1-66"></span>
<span id="cb1-67"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Zeichne den Baum</span></span>
<span id="cb1-68">draw_branch((WIDTH<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, start_length)</span>
<span id="cb1-69">wn.update()</span>
<span id="cb1-70"></span>
<span id="cb1-71"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I did it, Babe!"</span>)</span>
<span id="cb1-72">wn.mainloop()</span></code></pre></div>
<p>Das Programm ist fast ohne Änderung auch in CPython lauffähig (siehe <a href="https://www.flickr.com/photos/schockwellenreiter/54680488356/">Screenshot</a> im Bannerbild oben), lediglich die beiden oben auskommentierten Zeilen</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1">wn.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fractal Tree"</span>)</span>
<span id="cb2-2">wn.colormode(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>)</span></code></pre></div>
<p>müssen in dem CPython-Skript aktiviert werden<sup>2</sup>.</p>
<p>Jeder Durchlauf erzeugt einen neuen Baum (einfach auf den »Run«-Button klicken). Die Paramenter zu Beginn des Programms (<code>LEFT_ANGLE</code>, <code>LEFT_DECREASE</code>, <code>RIGHT_ANGLE</code> und <code>RIGHT_DECREASE</code>) sind zwar zufällig, aber durch wildes Experimentieren so ausgewählt, daß die meisten Bäume in das Fenster passen.</p>
<p>Die Bäume sehen ja schon sehr nett, aber nicht sehr natürlich aus, da jede Verzweigung eine exakte, wenn auch verkleinerte Kopie der ursprünglichen Verzweigung ist. Das macht den Baum zwar perfekt selbstähnlich, aber solche perfekte Selbstähnlichkeit kommt in der Natur selten vor.</p>
<iframe src="https://trinket.io/embed/python/bcef87d53b36?outputOnly=true&amp;runOption=run&amp;start=result" width="657" height="539" frameborder="0" marginwidth="0" marginheight="0" allowfullscreen="">
</iframe>
<p>Um die erzeugten Bäume natürlicher aussehen zu lassen, habe ich in einer zweiten Version des Programms die Deklaration für <code>LEFT_ANGLE</code>, <code>LEFT_DECREASE</code>, <code>RIGHT_ANGLE</code> und <code>RIGHT_DECREASE</code> gelöscht und dafür den Abschnitt</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Speichere die Position am Ende des Zweiges</span></span>
<span id="cb3-2">    end_position <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> alice.position()</span>
<span id="cb3-3">    left_direction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> direction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb3-4">    left_branch_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> branch_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span>
<span id="cb3-5">    right_direction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> direction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb3-6">    right_branch_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> branch_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span></code></pre></div>
<p>wie oben geändert. Dadurch wird jede Verzweigung zufällig erzeugt und der Baum sieht schon viel natürlicher aus.</p>
<section id="verwendete-und-weiterführende-literatur" class="level3">
<h3 class="anchored" data-anchor-id="verwendete-und-weiterführende-literatur">Verwendete und weiterführende Literatur</h3>
<ul>
<li>Karl-Heinz Becker, Michael Dörfler: <em>Fraktale und Dynamische Systeme. Computergrafische Experimente mit Processing</em>, Bremen (Kindle Direct Publishing) 2025</li>
<li>David Peak, Michael Frame: <em>Komplexität – das gezähmte Chaos</em>, Basel (Birkhäuser Verlag) 1995</li>
<li>Heinz-Otto Peitgen, Hartmut Jürgens und Dietmar Saupe: <em>Bausteine des Chaos – Fraktale</em>, Berlin, Heidelberg (Springer) und Stuttgart (Klett-Cotta) 1992</li>
<li>Heinz-Otto Peitgen, Hartmut Jürgens und Dietmar Saupe: <em>Chaos – Bausteine der Ordnung</em>, Berlin, Heidelberg (Springer) und Stuttgart (Klett-Cotta) 1994</li>
<li>Al Sweigart: <em>The Recursive Book of Recursion. Ace the Coding Interview with Python and JavaScript</em>, San Francisco CA (no starch press) 2022</li>
</ul>
<p>Den Quellcode für die Trinket-Versionen <a href="https://trinket.io/python/95628cb89c3f">Recursive Tree 1</a> und <a href="https://trinket.io/python/bcef87d53b36">Recursive Tree 2</a> könnt ihr in meinen Trinkets finden, die Quellcodes für CPython (<a href="https://github.com/kantel/pythoncuriosa/blob/main/turtle/fractaltree1.py">fractatree1.py</a> und <a href="https://github.com/kantel/pythoncuriosa/blob/main/turtle/fractaltree2.py">fractaltree2.py</a>) findet Ihr in meinem GitHub-Repositorium.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Fußnoten</h2>

<ol>
<li id="fn1"><p>Al Sweigart: <em>The Recursive Book of Recursion. Ace the Coding Interview with Python and JavaScript</em>, San Francisco (no starch press) 2022, S. 187ff.↩︎</p></li>
<li id="fn2"><p>Die Zeile <code>wn.title("Fractal Tree")</code> ist optional, ohne die Zeile <code>wn.colormode(255)</code> bricht die CPython-Version aber mit einer Fehlermeldung ab.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Python</category>
  <category>Turtle</category>
  <category>Trinket</category>
  <category>Mathematik</category>
  <category>Dynamische Systeme</category>
  <category>Creative Coding</category>
  <guid>https://kantel.github.io/posts/2025073001_fraktaler_baum/</guid>
  <pubDate>Wed, 30 Jul 2025 15:25:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025073001_fraktaler_baum/images/fractaltree2.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Aus der Nachbarschaft: Schon wieder Verkehrschaos</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025072501_erneutes_verkehrschaos/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54600538825/"><img src="https://kantel.github.io/posts/2025072501_erneutes_verkehrschaos/images/verkehr-b.jpg" class="img-fluid"></a></p>
<p>Auch an diesem Wochenende wird zum fünften Mal seit Mai dieses Jahres die Autobahn mal wieder in unseren Kiez gekotzt. Zwar wird dieses Mal nicht – wie im <a href="https://kantel.github.io/posts/2025050702_verkehrschaos_im_kiez/">Mai</a> und <a href="https://kantel.github.io/posts/2025060701_verkehrschaos_ii/">Juni</a> – der Britzer Autobahntunnel dichtgemacht, sondern die <a href="https://www.rbb24.de/panorama/beitrag/2025/07/a100-autobahn-dreieck-neokoelln-berlin-gesperrt.html">A100 am Dreieck Neukölln bis Montagmorgen gesperrt</a>, doch die Folgen dürften die gleichen sein: Fußgängerinnen und Fußgänger, Radfahrerinnen und Radfahrer werden als Folge einer mißlungenen Verkehrsplanung durch die Auto(-bahn)-Lobby des Berliner Senats erneut an den Rand der Straßen gedrängt und müssen abgasgeschwängerte Luft atmen. Und auch die Busse der BVG werden wieder im Stau stecken, so daß die Menschen, die keinen PKW besitzen (und das ist in unserem Kiez die Mehrheit der Familien) in ihrem Quartier gefangen gehalten werden.</p>
<p>Von diesem Senat ist aber nichts anderes zu erwarten: Zu glauben, daß die PKW- und Parkplatz-Fetischisten der CDU und die der Autobahn-Lobby hörige SPD mit einer Vorsitzenden, die sich einen Doktortitel erschwindelt hat, die Interessen der Bürger wahrnehmen, ist mehr als naiv.</p>
<p>Also, liebe Mitbürgerinnen und Mitbürger, im September nächsten Jahres sind Wahlen. Wählt diese unfähige Bleifußkoalition dann doch einfach ab!</p>
<hr>
<p><strong>Bild</strong> <em><a href="https://www.flickr.com/photos/schockwellenreiter/54600538825/">Verkehrs-Chaos</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>Colored Franco-Belgian Comic Style: Illustration of a multitude of cars trudge through narrow city streets. The air is filled with exhaust fumes and Pedestrians are pushed to the side of the road by the cars</em>«. Modell: Flux (Pro), Style: None.</p>



 ]]></description>
  <category>Neukölln</category>
  <category>Städte für Menschen</category>
  <category>Verkehr</category>
  <category>Verkehrswende</category>
  <category>Failed State Berlin</category>
  <guid>https://kantel.github.io/posts/2025072501_erneutes_verkehrschaos/</guid>
  <pubDate>Fri, 25 Jul 2025 20:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025072501_erneutes_verkehrschaos/images/verkehr.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Anytype auf meinem Chromebook</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025072201_anytype_chromebook/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54672050399/"><img src="https://kantel.github.io/posts/2025072201_anytype_chromebook/images/anytypechrome-b.jpg" class="img-fluid"></a></p>
<p>Ich hatte ja schon lange nichts mehr über <a href="https://kantel.github.io/#category=Chromebook">mein Chromebook</a> auf diesen Seiten. Das lag vor allen daran, daß ich momentan fast alles von meinem Desktop in meinem Arbeitszimmer erledige. Nun hat sich allerdings ergeben, daß in der nächsten Zeit doch häufiger eine mobile Nutzung gefragt ist. Und da wollte ich wissen, ob ich meine digitale Rumpelkammer <a href="https://anytype.io/">Anytpye</a>, die <a href="https://blog.anytype.io/our-open-philosophy/">freie</a>, außerhalb der USA, nämlich in der Schweiz (und damit DSGVO-konform) beheimatete <a href="http://cognitiones.kantel-chaos-team.de/produktivitaet/notion.html">Notion</a>-Alternative nicht auch auf dem Chromebook installiert bekomme, und auch, ob sie genauso zuverlässig synchronisiert, wie mit meinem Android-Smartphone. Spoiler: Die Installation verlief schmerzfreier, als erwartet.</p>
<p>Zwar war die Installation nicht ganz so einfach mit einem Einzeiler in der Kommandozeile erledigt, wie das bei <a href="http://cognitiones.kantel-chaos-team.de/webworking/staticsites/joplin.html">Joplin</a> der <a href="https://kantel.github.io/posts/2024112502_joplin_chromebook/">Fall war</a>, ein wenig Mausschubserei war doch vonnöten. Zuerst einmal habe ich das <a href="https://download.anytype.io/">Linux Debian Paket von Anytypes Downloadseite</a> heruntergeladen. Dann genügte allerdings ein Doppelklick auf die heruntergeladene Datei und Anytype war installiert (inklusive Icon für das Dock – siehe <a href="https://www.flickr.com/photos/schockwellenreiter/54672050399/">Screenshot oben</a>).</p>
<p>Danach bekam ich allerdings erst einmal einen Schreck. Denn nach der Eingabe der aasig langen Anytype Passwort-Phrase behauptete das Programm, daß ich wohl noch keinen Vault angelegt hätte und legte mir erst einmal einen leeren <code>untitled</code> Vault an. Während ich dann minutenlang hektisch nach einer Möglichkeit suchte, Anytype mit meiner schon existierenden Vault bekannt zu machen, fand das Programm sie dann doch selber und sychronisierte sie. Erleichtert mußte ich dann nur noch die <code>untitled</code> Vault löschen und alles war schick.</p>
<p>Die Moral von der Geschichte? Manchmal muß man einem Programm einfach nur ein wenig Zeit geben, damit es sich im Netz umschauen kann. <em>Don’t Panic!</em></p>



 ]]></description>
  <category>Anytype</category>
  <category>Zettelkasten</category>
  <category>Chromebook</category>
  <guid>https://kantel.github.io/posts/2025072201_anytype_chromebook/</guid>
  <pubDate>Tue, 22 Jul 2025 16:50:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025072201_anytype_chromebook/images/anytypechrome.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Ein Partikelsystem mit Proceso und PyScript</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025072101_partikel_proceso/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54670075413/"><img src="https://kantel.github.io/posts/2025072101_partikel_proceso/images/stage2-b.jpg" class="img-fluid"></a></p>
<p>Das <a href="https://kantel.github.io/posts/2025071301_planetensystem_proceso/">kleine Planetensystem mit den rotierenden Kisten</a>, das ich vor etwa einer Woche mit <a href="https://proceso.cc/">Proceso</a> und <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/pyscript.html">PyScript</a> realisierte, erinnerte mich an das Partikelsystem in <a href="https://kantel.github.io/posts/2024042702_microstudio_partikel/">zwei Stufen</a>, an dem ich mich vor mehr als einem Jahr in <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/microstudio.html">microStudio</a> mit <a href="https://brython.info/">Brython</a> versucht hatte. Vor allem, da in der <a href="https://kantel.github.io/posts/2024042801_microstudio_particle2/">zweiten Stufe</a> die Partikel teilweise ebenfalls rotierende Quadrate waren.</p>
<iframe src="proceso/stage1/index.html" width="100%" height="360">
</iframe>
<p>Ähnliches müßte man doch auch in Proceso und PyScript programmieren können, dachte ich mir, vor allem da <em>Nick McIntyre</em>, der Kopf hinter Proceso, verspricht, daß die Vektor-Klasse von Proceso »lovingly borrowed« von <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/py5.html">Py5</a>, dem Python3-Port von Processing sei. Also habe ich als ersten Schritt erst einmal eine Version mit runden Partikeln erstellt, die noch nicht rotieren.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> proceso <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Sketch</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> uniform, choice</span>
<span id="cb1-3"></span>
<span id="cb1-4">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">640</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">360</span></span>
<span id="cb1-5">START_X, START_Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">450</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span></span>
<span id="cb1-6"></span>
<span id="cb1-7">p5 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Sketch()</span>
<span id="cb1-8"></span>
<span id="cb1-9">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">247</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">254</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">254</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">83</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">187</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">245</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">211</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb1-10">          (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">65</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">148</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">103</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">89</span>)]</span>
<span id="cb1-11"></span>
<span id="cb1-12">particles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> preload():</span>
<span id="cb1-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">global</span> bg1</span>
<span id="cb1-16">    bg1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.load_image(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"assets/bg1.jpg"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the image</span></span>
<span id="cb1-17"></span>
<span id="cb1-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> setup():</span>
<span id="cb1-19">    p5.create_canvas(WIDTH, HEIGHT)</span>
<span id="cb1-20"></span>
<span id="cb1-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw():</span>
<span id="cb1-22">    p5.image(bg1, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-23">    update_particles()</span>
<span id="cb1-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> particle <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> particles:</span>
<span id="cb1-25">       particle.display()</span>
<span id="cb1-26">    </span>
<span id="cb1-27"></span>
<span id="cb1-28"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update_particles():</span>
<span id="cb1-29">    particle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Particle(START_X, START_Y)</span>
<span id="cb1-30">    particles.append(particle)</span>
<span id="cb1-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> particle <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reversed</span>(particles):</span>
<span id="cb1-32">       <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> particle.done:</span>
<span id="cb1-33">          particles.remove(particle)</span>
<span id="cb1-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> particle <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> particles:</span>
<span id="cb1-35">       particle.update()</span>
<span id="cb1-36">          </span>
<span id="cb1-37"></span>
<span id="cb1-38"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Particle():</span>
<span id="cb1-39">  </span>
<span id="cb1-40">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, _x, _y):</span>
<span id="cb1-41">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.Vector(_x, _y)</span>
<span id="cb1-42">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.Vector(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.005</span>)</span>
<span id="cb1-43">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.Vector(uniform(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>), uniform(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>))</span>
<span id="cb1-44">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> choice(colors)</span>
<span id="cb1-45">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">255.0</span></span>
<span id="cb1-46">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> uniform(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span>
<span id="cb1-47">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.done <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb1-48">    </span>
<span id="cb1-49">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-50">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.acc</span>
<span id="cb1-51">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel</span>
<span id="cb1-52">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> uniform(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span></span>
<span id="cb1-53">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan</span>
<span id="cb1-54">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>:</span>
<span id="cb1-55">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.done <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb1-56">      </span>
<span id="cb1-57">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> display(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-58">    p5.fill(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.alpha)</span>
<span id="cb1-59">    p5.circle(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d)</span>
<span id="cb1-60"></span>
<span id="cb1-61">p5.run_sketch(preload<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>preload, setup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>setup, draw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>draw)</span></code></pre></div>
<p>Kern ist die Klasse <code>Particle()</code>, die neben dem Konstruktor die beiden Methoden <code>update()</code> und <code>display()</code> besitzt. Im Hauptprogramm wird innerhalb der <code>draw()</code>-Funktion dann mit <code>update_particles()</code> bei jedem Durchlaufes ein neues Partikel erzeugt und an die Liste <code>particles[]</code> angehängt. Jedes Partikel besitzt nur eine bestimmte Lebensdauer (<code>lifespan</code>). Geht diese zuende, wird das Partikel mit <code>particles.remove(particle)</code> aus der Liste enfernt. Damit es dabei nicht zu einem Schhluckauf beim Durcharbeiten der Liste kommt, wird diese mit</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> particle <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reversed</span>(particles):</span>
<span id="cb2-2">       <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> particle.done:</span>
<span id="cb2-3">          particles.remove(particle)</span></code></pre></div>
<p>rückwärts durchlaufen.</p>
<p>Wie <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/p5js.html">P5.js</a>, die JavaScript-Version von Processing, besitzt auch Proceso eine <code>preload()</code>-Funktion, in der in diesem Skript das Hintergrundbild geladen wird. Die <code>preload()</code>-Funktion sorgt dafür, daß das Skript erst dann <code>setup()</code> aufruft, wenn alle dort zu ladenden Assets tatsächlich geladen sind. Dadurch ist leider die Variable <code>bg1</code> lokal in <code>preload()</code> und muß explizit als <code>global</code> deklariert werden, damit sie in <code>draw()</code> auch verwendet werden kann.</p>
<p>Ich mag globale Deklarationen ja bekanntlich nicht, aber ich glaube in diesem Fall ist das zu verschmerzen.</p>
<p>Die verwendete, neonbunte Palette ist »<a href="http://cognitiones.kantel-chaos-team.de/multimedia/farbpaletten/mplcyberpunk.html">MPL Cyberpunk</a>«, die ich hier erstmalig <a href="https://kantel.github.io/posts/2024041201_neonbunt/">vorgestellt hatte</a>. Sie steht unter der MIT-Lizenz und kann daher auch von Euch verwendet werden.</p>
<iframe src="proceso/stage2/index.html" width="100%" height="360">
</iframe>
<p>Nun aber zum zweiten Sketch mit den rotierenden Quadraten. Die Python vom Hintergrundbild des ersten Sketches ist so stolz auf ihre Schöpfung, daß sie ihren Freund, das weiße Kaninchen mit der großen Uhr, mitgenommen hat, damit dieses gebührend das Schauspiel bewundert.</p>
<p>Im Skript selber mußten nur wenige Änderungen vorgenommen werden:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> proceso <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Sketch</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> uniform, choice</span>
<span id="cb3-3"></span>
<span id="cb3-4">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">640</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">360</span></span>
<span id="cb3-5">START_X, START_Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">450</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span></span>
<span id="cb3-6"></span>
<span id="cb3-7">p5 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Sketch()</span>
<span id="cb3-8"></span>
<span id="cb3-9">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">247</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">254</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">254</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">83</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">187</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">245</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">211</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb3-10">          (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">65</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">148</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">103</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">89</span>)]</span>
<span id="cb3-11"></span>
<span id="cb3-12">particles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb3-13"></span>
<span id="cb3-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> preload():</span>
<span id="cb3-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">global</span> bg2</span>
<span id="cb3-16">    bg2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.load_image(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"assets/bg2.jpg"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the image</span></span>
<span id="cb3-17"></span>
<span id="cb3-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> setup():</span>
<span id="cb3-19">    p5.create_canvas(WIDTH, HEIGHT)</span>
<span id="cb3-20">    p5.rect_mode(p5.CENTER)</span>
<span id="cb3-21"></span>
<span id="cb3-22"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw():</span>
<span id="cb3-23">    p5.image(bg2, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb3-24">    update_particles()</span>
<span id="cb3-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> particle <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> particles:</span>
<span id="cb3-26">       particle.display()</span>
<span id="cb3-27">    </span>
<span id="cb3-28"></span>
<span id="cb3-29"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update_particles():</span>
<span id="cb3-30">    particle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Particle(START_X, START_Y)</span>
<span id="cb3-31">    particles.append(particle)</span>
<span id="cb3-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> particle <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reversed</span>(particles):</span>
<span id="cb3-33">       <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> particle.done:</span>
<span id="cb3-34">          particles.remove(particle)</span>
<span id="cb3-35">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> particle <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> particles:</span>
<span id="cb3-36">       particle.update()</span>
<span id="cb3-37">          </span>
<span id="cb3-38"></span>
<span id="cb3-39"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Particle():</span>
<span id="cb3-40">  </span>
<span id="cb3-41">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, _x, _y):</span>
<span id="cb3-42">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.Vector(_x, _y)</span>
<span id="cb3-43">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.Vector(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.005</span>)</span>
<span id="cb3-44">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.Vector(uniform(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>), uniform(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>))</span>
<span id="cb3-45">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> choice(colors)</span>
<span id="cb3-46">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb3-47">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.delta_angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> uniform(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.1</span>)</span>
<span id="cb3-48">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">255.0</span></span>
<span id="cb3-49">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> uniform(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span>
<span id="cb3-50">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.done <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb3-51">    </span>
<span id="cb3-52">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-53">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.acc</span>
<span id="cb3-54">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel</span>
<span id="cb3-55">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.delta_angle</span>
<span id="cb3-56">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> uniform(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span></span>
<span id="cb3-57">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan</span>
<span id="cb3-58">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>:</span>
<span id="cb3-59">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.done <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb3-60">      </span>
<span id="cb3-61">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> display(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-62">    p5.fill(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.alpha)</span>
<span id="cb3-63">    p5.push()</span>
<span id="cb3-64">    p5.translate(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y)</span>
<span id="cb3-65">    p5.rotate(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.angle)</span>
<span id="cb3-66">    p5.rect(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d)</span>
<span id="cb3-67">    p5.pop()</span>
<span id="cb3-68"></span>
<span id="cb3-69">p5.run_sketch(preload<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>preload, setup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>setup, draw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>draw)</span></code></pre></div>
<p>Damit die Boxen um ihren eigenen Mittelpunkt rotieren habe ich ihnen im <code>setup()</code> den <code>rect_mode(CENTER)</code> verpasst. Die Rotation selber wird in der Methode <code>display()</code> der Klasse <code>Particle()</code> durchgeführt,</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> display(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-2">    p5.fill(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.alpha)</span>
<span id="cb4-3">    p5.push()</span>
<span id="cb4-4">    p5.translate(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y)</span>
<span id="cb4-5">    p5.rotate(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.angle)</span>
<span id="cb4-6">    p5.rect(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d)</span>
<span id="cb4-7">    p5.pop()</span></code></pre></div>
<p>die erst einmal mit <code>translate()</code> den Ursprung des Koordinatensystems in den Mittelpunkt des Quadrats legt und dann die Rotation um die eigenen Achse vornimmt. Natürlich muß diese Koordinaten-Transformation mit <code>push()</code> und <code>pop()</code> geklammert werden, damit nach jeder Rotation das Koordinatensystem wieder auf seinen ursprünglichen Zustand zurückgesetzt wird.</p>
<p>Jedes Partikel hat seinen eigenen Rotationswinkel, der mit <code>self.delta_angle = uniform(-.1, .1)</code> im Konstruktor festgelegt wird. Das sind eigentlich alle Änderungen gegenüber dem ersten Sketch.</p>
<section id="verwendete-und-weiterführende-quellen" class="level3">
<h3 class="anchored" data-anchor-id="verwendete-und-weiterführende-quellen">Verwendete und weiterführende Quellen:</h3>
<ul>
<li>Mia Dwyer: <em><a href="https://towardsdatascience.com/how-to-make-cyberpunk-dark-mode-data-visualizations-in-python-b28f82386e75/">How to Make Cyberpunk »Dark Mode« Data Visualizations in Python</a></em>, toward data science vom 8&nbsp;April&nbsp;2024 (Bezahlschranke)</li>
<li>Jörg Kantel: <em>MicroStudio und Python: Ein Partikelsystem, <a href="https://kantel.github.io/posts/2024042702_microstudio_partikel/">Part 1</a> und <a href="https://kantel.github.io/posts/2024042801_microstudio_particle2/">Part 2</a></em>, Der Schockwellenreiter vom 27. und 28.&nbsp;April&nbsp;2024</li>
<li>Nick McIntyre: <em><a href="https://proceso.cc/examples/creative_coding/load_display_image">Load and Display Image</a></em> und <em><a href="https://proceso.cc/examples/creative_coding/flocking">Flocking</a></em>, Proceso-Tutorial 2023</li>
<li>Patt Vira: <em><a href="https://www.youtube.com/watch?v=QlpadcXok8U">P5.js Coding Tutorial – Basics of Particle Systems</a></em>, YouTube 2024</li>
</ul>
<p>Die Programmierung mit Proceso und PyScript macht vor allem deshalb Spaß, weil man die Ergebnisse wie hier ziemlich schmerzfrei in die eigenen Seiten einbinden kann. Dies wird daher mit Sicherheit nicht das letzte Experiment sein, das ich mit Proceso durchführe. <em>Still digging!</em></p>
<hr>
<p><strong>Hintergrundbilder</strong>: <em>Planetenbeobachter <a href="https://www.flickr.com/photos/schockwellenreiter/54669818985/">Stage 1</a> und <a href="https://www.flickr.com/photos/schockwellenreiter/54668659117/">Stage 2</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>Colored Franco-Belgian comic style: A green python with glasses and a rabbit standing side by side on a distant planet, observing the night sky. The rabbit wears a dark blue vest and holds a large pocket watch. A few planets with their moons and gray clouds can be seen in the sky. A planetary base and two spaceships stand in the landscape</em>«. Modell: Flux (Pro), Style: None.</p>


</section>

 ]]></description>
  <category>Proceso</category>
  <category>Python</category>
  <category>PyScript</category>
  <category>Processing</category>
  <category>Nature of Code</category>
  <category>Creative Coding</category>
  <guid>https://kantel.github.io/posts/2025072101_partikel_proceso/</guid>
  <pubDate>Mon, 21 Jul 2025 19:35:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025072101_partikel_proceso/images/stage2.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Spandauer Spiegelung</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025071902_spandauer_spiegelung/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54658323768/"><img src="https://kantel.github.io/posts/2025071902_spandauer_spiegelung/images/spandauerspiegel-b.jpg" class="img-fluid"></a></p>
<p>Und wo ich gerade beim Bildchen veröffentlichen bin: Am Dienstag war ich <a href="https://kantel.github.io/posts/2025062501_spandau_bei_berlin/">mal wieder</a> mit der schon mehrfach auf diesen Seiten erwähnten netten jungen Dame in <a href="https://de.wikipedia.org/wiki/Berlin-Spandau">Spandau</a> an der <a href="https://de.wikipedia.org/wiki/Zitadelle_Spandau">Zitadelle</a>, dieses Mal im Landschaftsschutzgebiet neben der <a href="https://de.wikipedia.org/wiki/Schleuse_Spandau">Spandauer Schleuse</a> an der Westseite des Zitadellengrabens. Dabei geriet mir diese Spiegelung der Bastion Kronprinz vor die Linse meines Smartphones. Und dieses Photo wollte ich Euch ebenfalls nicht vorenthalten.</p>
<hr>
<p><strong>Photo</strong> (<a href="https://creativecommons.org/licenses/by-sa/4.0/deed.de">cc</a>) 2025: <em><a href="http://cognitiones.kantel-chaos-team.de/cv.html">Jörg Kantel</a></em></p>



 ]]></description>
  <category>Atlas Curiosa</category>
  <category>Parks und Gärten</category>
  <category>Photographie</category>
  <guid>https://kantel.github.io/posts/2025071902_spandauer_spiegelung/</guid>
  <pubDate>Sat, 19 Jul 2025 14:25:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025071902_spandauer_spiegelung/images/spandauerspiegel.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
