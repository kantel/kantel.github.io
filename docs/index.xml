<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Der Schockwellenreiter</title>
<link>https://kantel.github.io/</link>
<atom:link href="https://kantel.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description>Schockwellenreiter</description>
<generator>quarto-1.4.549</generator>
<lastBuildDate>Sun, 21 Apr 2024 19:50:00 GMT</lastBuildDate>
<item>
  <title>Legend of Lua: Recreating Zelda</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024042103_legend_of_lua/</link>
  <description><![CDATA[ 




<p><a href="https://opengameart.org/sites/default/files/big%20ol%20ssss_0.png"><img src="https://kantel.github.io/posts/2024042103_legend_of_lua/images/legendoflua-b.jpg" class="img-fluid"></a></p>
<p>Einen habe ich aber noch (weil mir gerade so retro zumute ist): <a href="https://www.youtube.com/playlist?list=PLqPLyUreLV8D3Ckd_9UFNvEpg4xCvbL1a">The Legend of Lua: Recreating Zelda</a> ist eine Playlist mit 21 im Schnitt fünfminütigen Tutorials, in denen der YouTube <em>Challacade</em> zu den Klassikern zurückkehrt und ein Spiel entwickelt, das an das 1986 erschienene Spiel »<a href="https://de.wikipedia.org/wiki/The_Legend_of_Zelda_(Computerspiel)">The Legend of Zelda</a>« erinnern soll.</p>
<iframe class="if16_9" src="https://www.youtube.com/embed/1rzyENB_Zws?si=415G2CEcm4z838yW" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p>Das Besondere daran ist, daß er die freie (zlib/libpng-Lizenz), auf <a href="http://cognitiones.kantel-chaos-team.de/programmierung/lua.html">Lua</a> basierende Spieleengine <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/loeve.html">LÖVE</a> (Love2D) verwendet, die bisher in der Welt der Spieleprogrammierung eher ein Schattendasein fristete, aber in der letzten Zeit einen Popularitätsschub erfahren hatte. Die Engine gibt es für Windows, macOS und Linux, aber auch für Android und iOS und ist auf <a href="https://github.com/love2d/love">GitHub zu finden</a>.</p>
<p>Vielleicht sollte ich dem Teil auch einmal einen Test gönnen (soviel zu meinen Vorsätzen aus dem <a href="https://kantel.github.io/posts/2024042102_tuesdayjs_47/">letzten Beitrag</a>). Der Ersteller der Tutorial-Reihe hat immerhin seit vier Jahren an dem Projekt gearbeitet und sein <a href="https://github.com/kyleschaub/legend-of-lua">Quellcode und die Assets</a> sind ebenfalls auf GitHub zu finden (bis zu den 2022 erschienenen Fassungen, danach hat er sich entschieden, das Projekt zu kommerzialisieren).</p>
<p>Die freie Version nutzt (unter anderem?) die in das 16x16&nbsp;Pixel-Raster passenden »<a href="https://opengameart.org/content/zelda-like-tilesets-and-sprites">Zelda-like Tilesets und Sprites</a>«, die der User <em>ArMM1998</em> unter der <a href="http://creativecommons.org/publicdomain/zero/1.0/">CC0</a> auf OpenGameArt veröffentlicht hat (siehe Screenshot im Bannerbild oben).</p>



 ]]></description>
  <category>Löve</category>
  <category>Lua</category>
  <category>Spieleprogrammierung</category>
  <category>Retrogaming</category>
  <category>Tiles und Sprites</category>
  <guid>https://kantel.github.io/posts/2024042103_legend_of_lua/</guid>
  <pubDate>Sun, 21 Apr 2024 19:50:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024042103_legend_of_lua/images/legendoflua.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Interaktive Geschichten für das Web: Tuesday JS Version 47 ist draußen</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024042102_tuesdayjs_47/</link>
  <description><![CDATA[ 




<p><a href="https://img.itch.zone/aW1nLzE1ODQxNTgzLnBuZw==/original/Ru%2FqnS.png"><img src="https://kantel.github.io/posts/2024042102_tuesdayjs_47/images/tuesdayjs47-b.jpg" class="img-fluid"></a></p>
<p>Nein, dieses Mal habe ich es nicht <a href="https://kantel.github.io/posts/2024033103_tuesdayjs_46/">übersehen</a>: Gestern wurde von <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/tuesdayjs.html">Tuesday JS</a>, der kleinen, plattformübergreifenden (webbasiert, Android, macOS und Windows) und freien (Apache 2.0-Lizenz), aber dennoch leistungsstarken Engine, die interaktive Geschichten (und mehr) für das Web erzeugen kann, die Version&nbsp;47 zum Download freigegeben.</p>
<p>Es ist ein größeres Update. Neu sind unter anderem eine verbesserte Nutzererfahrung für die Android-Version, ein verbesserter Code-Editor mit noch mehr Syntax-Highlighting und ein neuer Default-Style.</p>
<p>Da es momentan sowieso einen Bruch ein meinem Leben gibt, sollte ich vielleicht meine Beschäftigung mit <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/microstudio.html">microStudio</a>/Python ein wenig ruhen lassen und mich wieder dem Erzählen interaktiver Geschichten zuwenden. Denn das habe ich in den letzten Wochen sträflich vernachlässigt. Da kann die neue Tuesday-JS-Version ein willkommener Anlaß für einen Neustart sein.</p>



 ]]></description>
  <category>Tuesday JS</category>
  <category>Interactive Fiction</category>
  <category>Spieleprogrammierung</category>
  <guid>https://kantel.github.io/posts/2024042102_tuesdayjs_47/</guid>
  <pubDate>Sun, 21 Apr 2024 18:05:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024042102_tuesdayjs_47/images/tuesdayjs47.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Pygame/Pygbag ohne Umwege in die eigene Webseite einbinden</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024042101_pygbag_standalone/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53669079239/"><img src="https://kantel.github.io/posts/2024042101_pygbag_standalone/images/pygbagatlocalhost-b.jpg" class="img-fluid"></a></p>
<p>Das Leben muß ja weitergehen und so habe ich mich zur Ablenkung eines schon lange offenstehenden Problems angenommen: Wie bringe ich <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a>-Spielen, die ich mit Hilfe von <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygbag.html">Pygbag</a> webtauglich gemacht habe, bei, daß sie sich direkt in Webseiten einbinden lassen, ohne den Umweg über spezielle Dienste wie zum Beispiel <a href="https://kantel.itch.io/">Itch.io</a> nehmen zu müssen?</p>
<p>Ich glaube, ich habe einen Weg gefunden (als Beispiel habe ich mein altes <a href="https://kantel.github.io/posts/2023060804_pygbag_oop/">Pygbag-OOP-Template</a> wieder ausgegraben):</p>
<iframe src="pygbag_template/index.html" class="if16_9" name="Pygbag-Template">
</iframe>
<p>Den ersten Schritt habe ich der <a href="https://github.com/pygame-web/pygbag">Dokumentation</a> entnommen. Man muß nach der Installation von Pygbag zusätzlich</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pygbag</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>your.app.folder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
<p>aufrufen (<code>&lt;your.app.folder&gt;</code> ist natürlich das Verzeichnis Eures Pygame/Pygbag-Spiels). Wie oft man dies machen muß, weiß ich leider nicht, aber wenn nach einer Änderung das Spiel nicht mehr im Browser startet, schadet es zumindest nach meiner Erfahrung nicht, das Kommando noch einmal zu wiederholen<sup>1</sup>.</p>
<p>Das zweite Problem war, daß die Webversion nicht meine Assets (in diesem Fall das Bildchen) laden konnte. Hier war die Ursache schnell ausgemacht: WebAssembly kommt mit den (Python-) Befehlen</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1">DATAPATH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(os.getcwd(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>)</span>
<span id="cb2-2">img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.image.load(os.path.join(DATAPATH, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"platformchar_idle.png"</span>)).convert_alpha()</span></code></pre></div>
<p>nicht zurecht. Diese beiden Zeilen einfach durch die Zeile</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1">img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.image.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data/platformchar_idle.png"</span>).convert_alpha()</span></code></pre></div>
<p>zu ersetzen, löste auch dieses Problem.</p>
<p>Jetzt waren nur noch die von Pygbag erzeugten und im Ordner <code>web</code> abgelegten Dateien auf meinen Server hochzuladen und die dort abgelegte Datei <code>index.html</code> (wie <a href="https://kantel.github.io/posts/2024021801_iframe_respnonsive/">hier beschrieben</a>) in einem <code>Iframe</code> aufzurufen<sup>2</sup>.</p>
<p>Noch nicht gelöst ist das Problem, daß die Browser einige Tasten gierig an sich reißen (in diesem Fall die Pfeiltasten <code>UP</code>, <code>DOWN</code>, <code>RIGHT</code> und <code>LEFT</code>). Ob man dieses lösen kann oder ob man nach alter Väter Sitte besser auf die Tasten <code>a</code>, <code>s</code>, <code>w</code> und <code>d</code> ausweicht, steht als nächstes auf meiner Agenda. <em>Still digging!</em></p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Fußnoten</h2>

<ol>
<li id="fn1"><p>Der Sinn dieses Aufrufs hat sich mir leider nicht erschlossen. Ob er tatsächlich notwendig ist, weiß ich auch nicht wirklich (ich hatte den Aufruf getätigt, <strong>bevor</strong> ich irgend etwas anderes probiert hatte). Aber er scheint – wie ich oben schon schrieb – zumindest nicht zu schaden.↩︎</p></li>
<li id="fn2"><p>Pygbag erzeugt zusätzlich noch einen Folder <code>web-cache</code>, der nach jedem Aufruf immer »fetter« wird. Ich hielt daher ein Hochladen dieses Verzeichnisses nicht für sinnvoll.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Python</category>
  <category>Pygame</category>
  <category>Pygbag</category>
  <category>Spieleprogrammierung</category>
  <guid>https://kantel.github.io/posts/2024042101_pygbag_standalone/</guid>
  <pubDate>Sun, 21 Apr 2024 17:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024042101_pygbag_standalone/images/pygbagatlocalhost.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Gabriele Kantel (4. Januar 1959 – 19. April 2024)</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024041901_rip_gabi/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53663996486/"><img src="https://kantel.github.io/posts/2024041901_rip_gabi/images/gabi-b.jpg" class="img-fluid"></a></p>
<p>Heute gegen 8:00 Uhr in der Früh ist meine Partnerin und Ehefrau <em><a href="http://www.gabi-kantel.de/Website/Willkommen.html">Gabriele (Gabi) Kantel</a> (geb. Strauchfuß)</em> nach kurzer, aber heftiger Krankheit im Klinikum Neukölln friedlich eingeschlafen. Sie war der bessere Teil unseres Kantel-Chaos-Teams.</p>
<p>Ihr herzliches Lachen, das alle fröhlich stimmte, ist für immer verstummt, ihre Energie, die mich ständig antrieb, ist erloschen und ihre Liebe, die mich umfloß, wird mir unendlich fehlen. Doch was bleibt ist die dankbare Erinnerung an 37&nbsp;gemeinsame Jahre, die mir niemand nehmen kann.</p>
<p>Ich bin unendlich traurig.</p>



 ]]></description>
  <category>Interna</category>
  <guid>https://kantel.github.io/posts/2024041901_rip_gabi/</guid>
  <pubDate>Fri, 19 Apr 2024 12:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024041901_rip_gabi/images/gabi.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Google korrigiert mit Version 124 seines Browsers Chrome kritische Sicherheitslücken</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024041702_chrome_update/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53559703530/"><img src="https://kantel.github.io/posts/2024041702_chrome_update/images/datenkrakeseaart1-b.jpg" class="img-fluid"></a></p>
<p>Unser aller Datenkrake liefert auch wieder die wöchentlichen Sicherheitskorrekturen für sein Flagschiff aus: Google veröffentlicht das Update der Version 124 (124.0.6367.60/61) seines Browsers Chrome und schließt damit <a href="https://chromereleases.googleblog.com/2024/04/stable-channel-update-for-desktop_16.html">kritische Sicherheitslücken</a>.</p>
<p>Chrome aktualisiert sich (außer bei Linux) über die integrierte Update-Funktion, kann aber – wenn es pressiert – auch <a href="https://www.google.com/intl/de/chrome/browser/">hier geladen</a> werden. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/53559703530/">Octopussy</a></em>, erstellt mit <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/seaart.html">SeaArt AI</a>. Prompt: »<em>A sexy female robot flees from a gigantic data octopus, colored french comic style</em>«. Modell: Stable Diffusion XL, Style: Realistic Fantasy Mix SDXL.</p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2024041702_chrome_update/</guid>
  <pubDate>Wed, 17 Apr 2024 16:50:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024041702_chrome_update/images/datenkrakeseaart1.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Mozilla Thunderbird Version 115.10 freigegeben</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024041701_thunderbird_update/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53539789685/"><img src="https://kantel.github.io/posts/2024041701_thunderbird_update/images/donnervogel3-b.jpg" class="img-fluid"></a></p>
<p>Wie fast immer folgt der Donnervogel dem <a href="https://kantel.github.io/posts/2024041601_firefox_update/">Feuerfuchs auf dem Fuß</a>: Die Entwickler des <a href="http://www.mozillamessaging.com/">Mozilla Thunderbird</a> haben das Update auf die Version 115.10 freigegeben und damit auch wieder <a href="https://www.thunderbird.net/en-US/thunderbird/115.10.0/releasenotes/">Sicherheitslücken</a> behoben.</p>
<p>Thunderbird weist selbst auf dieses Update hin. Diese Prozedur kann aber auch wie immer über das Menü <code>Hilfe &gt; Über Thunderbird</code> angestoßen werden. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/53539789685/">Bunter Donnervogel</a></em>, erstellt mit <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/scenario.html">Scenario</a>. Prompt: »<em>A huge colorful+ thunderbird, in a clearing, in an enchanted spring forest</em>«. Modell: Stable Diffusion XL, Style: Creepy Nordic Fairytale.</p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2024041701_thunderbird_update/</guid>
  <pubDate>Wed, 17 Apr 2024 16:20:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024041701_thunderbird_update/images/donnervogel3.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Damit ich es nicht vergesse: NetLogo (Video-) Tutorials</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024041602_netlogo_tuts/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53589779258/"><img src="https://kantel.github.io/posts/2024041602_netlogo_tuts/images/altemannlogo-b.jpg" class="img-fluid"></a></p>
<p>Ich weiß ja nicht, ob ich alter Mann in diesem Leben noch jemals etwas mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/netlogo.html">NetLogo</a> anstellen werde, der Multi-Agenten-Programmiersprache mit integrierter Modellierungsumgebung. Aber das Teil ist ein faszinierendes Spielzeug, das mir immer wieder in <a href="https://kantel.github.io/posts/2023110301_agenten_archaeologie/">diversen Anwendungsszenarien</a> unterkommt und mir dabei jedes Mal ins Gesicht schreit: »Stell doch etwas mit mir an!«</p>
<p>Darum habe ich – damit ich im Fall der Fälle einen Einstiegspunkt besitze – mir ein paar vielversprechende Playlisten mit Video-Tutorials zu NetLogo herausgesucht und sie hier aufgeführt, damit sie für mich wiederauffindbar sind.</p>
<ul>
<li><p>»<a href="https://www.youtube.com/playlist?list=PLsv8cj_Tu8KuF54jMWP576wmRy6Obigww">NetLogo - The ultimate tutorial</a>« des Kanals <em>Social Complexity/Computational Social Science</em> besteht aus dreizehn maximal zehnminütigen Videos und überschneidet sich teilweise mit der Reihe »<a href="https://www.youtube.com/playlist?list=PLsv8cj_Tu8Ks_JKH9ZshfA6C6DO3MAG_q">Agent-based modeling - All you wanted to know</a>« (elf Videos).</p></li>
<li><p>Die »<a href="https://www.youtube.com/playlist?list=PL8D7C9C2B47090E80">NetLogo Tutorials</a>« von <em>Ralph Abraham</em> bestehen aus vierzehn Videos, die zwischen fünf und fünfzehn Minuten lang sind.</p></li>
<li><p><em>José Vidal</em> hatte schon vor über zehn Jahren die Playlist »<a href="https://www.youtube.com/playlist?list=PLSx7bGPy9gbHivKzRg2enzdABgKUd3u-E">Agent-Based Modeling and Multiagent Systems using NetLogo</a>« (34 Videos mit je zwischen zehn Minuten und einer Stunde Laufzeit) erstellt. Eine komprimierte Zusammenfassung findet Ihr in seinen »<a href="https://www.youtube.com/playlist?list=PLSx7bGPy9gbFCWOQ6bAb_4ASLIrblXhqP">NetLogo Programming Tutorials</a>« (zwölf Videos).</p></li>
<li><p>Und da Modellbildung und Simulation immer auch eine Schnittstelle zur Spieleprogrammierung besitzt, zum Schluß noch die NetLogo-Tutorial-Reihe »<a href="https://www.youtube.com/playlist?list=PLJTCLffaZ2Ztxx1Pzp1qTkBX9hphS1YsZ">Agent Based Model to Make a Video Game</a>« des Kanals <em>Thaprobane Interactive</em>, die aus achtzehn eher kürzeren Videos besteht und gerade einmal zwei Jahre jung ist (das ist für NetLogo-Verhältnisse bestenfalls ein »Grünschnabel«-Alter).</p></li>
</ul>
<p>So, wenn es mich jetzt überkommen sollte, bin ich gerüstet. Und vielleicht sind einige der Links ja auch für Euch da draußen von Interesse?</p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/53589779258/">Alter Mann am Computer</a></em>, erstellt mit <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/scenario.html">Scenario</a>. Prompt: »<em>An old man, white hair, clean-shaven, without beard+, blue eyes, glasses, sits at a desk in front of huge monitors with lots of colorful diagrams, there are other open books on the desk, and there is a large mug of steaming coffee next to them, and a computer keyboard in front of the monitor, on the wall there are shelves with files and books, the spring sun shines through a large window, colored french comic style</em>«, Negative Prompt: »<em>ugly, beard, deformed, noisy, blurry, distorted, out of focus, bad anatomy, extra limbs, poorly drawn face, poorly drawn hands, missing fingers, tie</em>«. Modell: Stable Diffusion XL, Style: Scifi Magic + Belgian School.</p>



 ]]></description>
  <category>NetLogo</category>
  <category>Simulation</category>
  <category>Modellbildung</category>
  <category>Dynamische Systeme</category>
  <guid>https://kantel.github.io/posts/2024041602_netlogo_tuts/</guid>
  <pubDate>Tue, 16 Apr 2024 19:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024041602_netlogo_tuts/images/altemannlogo.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Mozilla veröffentlicht neue Firefox-Versionen</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024041601_firefox_update/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53658687030/"><img src="https://kantel.github.io/posts/2024041601_firefox_update/images/firefoxspring-b.jpg" class="img-fluid"></a></p>
<p>Die Entwickler des Mozilla Firefox haben die neue <a href="https://www.mozilla.org/en-US/firefox/125.0.1/releasenotes/">Version 125.0.1</a> und die <a href="https://www.mozilla.org/en-US/firefox/115.10.0/releasenotes/">Version ESR 115.10</a> veröffentlicht und darin auch wieder Sicherheitslücken behoben. In die Updates sind auch wieder viele Veränderungen geflossen.</p>
<p>Firefox weist selbst auf dieses Update hin. Diese Prozedur kann aber auch wie immer über das Menü <code>Hilfe &gt; Über Firefox</code> angestoßen werden. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/53658687030/">Feuerfuchs im Frühling</a></em>, erstellt mit <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/scenario.html">Scenario</a>. Prompt: »<em>a naked nymph bathing in a stream in an enchanted garden and watching two fire foxes playing in the spring sunshine</em>«, Negative Prompt: »<em>ugly, deformed, noisy, blurry, distorted, out of focus, bad anatomy, extra limbs, poorly drawn face, poorly drawn hands, missing fingers, extra legs, extra tail</em>«. Modell: Stable Diffusion XL, Style: Detailed RPG Anime Characters.</p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2024041601_firefox_update/</guid>
  <pubDate>Tue, 16 Apr 2024 16:10:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024041601_firefox_update/images/firefoxspring.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Es ist ja alles so neonbunt hier – neue Farbpalette in meinem Wiki</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024041201_neonbunt/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53649386211/"><img src="https://kantel.github.io/posts/2024041201_neonbunt/images/cyberpunk-b.jpg" class="img-fluid"></a></p>
<p>Eher zufällig spülte der Artikel »<a href="https://towardsdatascience.com/how-to-make-cyberpunk-dark-mode-data-visualizations-in-python-b28f82386e75">How to Make Cyberpunk »Dark Mode« Data Visualizations in Python</a>« von <em>Mia Dwyer</em> in meinen Feedreader. Der war zwar hinter einer Bezahlschranke versteckt, aber der verwendete <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/matplotlib.html">Matplotlib</a>-Stil »mplcyberpunk« ist unter einer MIT-Lizenz auf <a href="https://github.com/dhaitz/mplcyberpunk/tree/main">GitHub zu finden</a>.</p>
<p>Und da man ja bekanntlich niemals zu viele Farbpaletten kennen kann, auf die man für Visualisierungen oder kreative Programme zurückgreifen möchte, habe ich aus dem Quellcode die Farben extrahiert und sie als Farbpalette <strong><a href="http://cognitiones.kantel-chaos-team.de/multimedia/farbpaletten/mplcyberpunk.html">MPL Cyberpunk</a></strong> in <a href="http://cognitiones.kantel-chaos-team.de/index.html">meinem Wiki</a> veröffentlicht, damit auch Ihr Kreatives damit anstellen könnt. Habt Spaß damit&nbsp;…</p>



 ]]></description>
  <category>Farbpaletten</category>
  <category>Visualisierung</category>
  <category>Creative Coding</category>
  <guid>https://kantel.github.io/posts/2024041201_neonbunt/</guid>
  <pubDate>Fri, 12 Apr 2024 19:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024041201_neonbunt/images/cyberpunk.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Microsoft veröffentlicht Update für Office for Mac</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024041102_office_update_mac/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53581510203/"><img src="https://kantel.github.io/posts/2024041102_office_update_mac/images/officelady2-b.jpg" class="img-fluid"></a></p>
<p>Microsoft liefert mit dem Update auf 16.83.3 für Office 365, 2021 und 2019 for Mac natürlich auch wieder <a href="https://docs.microsoft.com/en-us/officeupdates/release-notes-office-for-mac">aktuelle Sicherheitskorrekturen</a>.</p>
<p>Sofern Office nicht schon von sich aus darauf hinweist, erhält man die Korrekturen am einfachsten über Microsofts AutoUpdate – in einem beliebigen Office-Programm über Menü: <code>Hilfe &gt; Auf Updates überprüfen</code>.</p>
<p><strong>Wichtig zu beachten</strong>: <a href="https://support.microsoft.com/de-de/office/aktualisieren-sie-macos-um-weiterhin-microsoft-365-und-office-f%C3%BCr-mac-updates-zu-erhalten-16b8414f-08ec-4b24-8c91-10a918f649f8">Microsoft Office unterstützt stets nur die drei Hauptversion von macOS</a>. Momentan sind dies Sonoma, Monterey und Ventura. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/53581510203/">Office Lady</a></em>, erstellt mit <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/scenario.html">Scenario</a>. Prompt: »<em>A young lady sits in an office at a desk in front of a huge monitor with lots of colorful diagrams. There is a cup of coffee next to her and a computer keyboard in front of the monitor. On the wall there are shelves with files and books. The spring sun shines through a large window. colored french comic style</em>«. Negative Prompt: »<em>ugly, deformed, noisy, blurry, distorted, out of focus, bad anatomy, extra limbs, poorly drawn face, poorly drawn hands, missing fingers</em>«. Modell: Stable Diffusion XL, Style: Scifi Magic + Belgian School.</p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2024041102_office_update_mac/</guid>
  <pubDate>Thu, 11 Apr 2024 15:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024041102_office_update_mac/images/officelady2.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Google korrigiert wieder kritische Sicherheitslücken in Chrome</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024041101_octopussy/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53561754944/"><img src="https://kantel.github.io/posts/2024041101_octopussy/images/octopussyrosa-b.jpg" class="img-fluid"></a></p>
<p>Und wieder steht das wöchentliche Update unserer allseits beliebten wie auch gehaßten Datenkrake an, denn Google schließt mit einer neuen Version 123 (123.0.6312.122/123) seines Browsers Chrome auch wieder <a href="https://chromereleases.googleblog.com/2024/04/stable-channel-update-for-desktop_10.html">kritische Sicherheitslücken</a>.</p>
<p>Chrome aktualisiert sich (außer bei Linux) über die integrierte Update-Funktion, kann aber – wenn es pressiert – auch <a href="https://www.google.com/intl/de/chrome/browser/">hier geladen</a> werden. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/53561754944/">Octopussy in pink</a></em>, erstellt mit <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/scenario.html">Scenario</a>. Prompt: »<em>A sexy female robot flees from a gigantic data octopus, colored french comic style</em>«. Negative Prompt: »<em>ugly, deformed, noisy, blurry, distorted, out of focus, bad anatomy, extra limbs, poorly drawn face, poorly drawn hands, missing fingers</em>«. Modell: Stable Diffusion XL, Style: Illustrated Anime + Ethereal Realism.</p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2024041101_octopussy/</guid>
  <pubDate>Thu, 11 Apr 2024 14:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024041101_octopussy/images/octopussyrosa.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Vorher – Nachher (trotz Berliner S-Bahn-Chaos)</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024041001_vorher_nachher/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53645277164/"><img src="https://kantel.github.io/posts/2024041001_vorher_nachher/images/selfiefriseur-b.jpg" class="img-fluid"></a></p>
<p>Jetzt habe ich wieder die Haare schön – dank <a href="https://www.facebook.com/coiffeuremarinaundteam/?locale=de_DE">Coiffeure Marina &amp; Team</a>. Auch wenn die Reise von Neukölln nach <del>Schweineöde</del> Schöneweide dank der kaputtgesparten Berliner S-Bahn mal wieder der blanke Horror war. Daß zwischen Südkreuz und Tempelhof ein Baum aufs Gleis fällt, darf eigentlich nicht passieren, es sei denn, man hat fahrlässig an der Böschungssicherung gespart. Und daß irgendwo mal ein Polizeieinsatz den Fahrplan durcheinanderbringt: Geschenkt. Aber daß man während eines zwanzigminütigen Zwangsaufenthalts auf dem Bahnhof Baumschulenweg nicht in der Lage ist, die Fahrgäste zu informieren, das nehme ich den S-Bahn-Oberen übel.</p>
<p>Darauf gibt es nur eine Antwort: Wegen eklatanten Marktversagens eine sofortige, entschädigungslose Enteignung und Rekommunalisierung der S-Bahn. Denn als ich noch Beförderungsfall und noch nicht Fahrgast war, hatte die S-Bahn noch funktioniert.</p>
<p>Aber genug gemeckert, auch wenn ich meinen Termin nicht halten konnte, hat <em>Marina B.</em> meinen wilden, grauen Locken wieder Schliff verpaßt. Die beiden obigen <a href="https://www.flickr.com/photos/schockwellenreiter/53639396277/">Vorher</a>-<a href="https://www.flickr.com/photos/schockwellenreiter/53645277164/">Nachher</a>-Photos beweisen es. Dafür geht mein Dank in die Fließstraße, denn was Friseurinnen können, können nur Friseurinnen.&nbsp;💇‍♂️</p>



 ]]></description>
  <category>Modernes Leben</category>
  <category>Photographie</category>
  <category>Verkehr</category>
  <guid>https://kantel.github.io/posts/2024041001_vorher_nachher/</guid>
  <pubDate>Wed, 10 Apr 2024 16:45:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024041001_vorher_nachher/images/selfiefriseur.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>MicroStudio und Python: Kollisionserkennung (2)</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024040701_rect_collision/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53637881438/"><img src="https://kantel.github.io/posts/2024040701_rect_collision/images/mstudio_rect_col-b.jpg" class="img-fluid"></a></p>
<p>Dies ist ein weiterer Beitrag meiner kleinen Serie zur Spiele- und zur kreativen Programmierung mit <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/microstudio.html">microStudio</a> und Python/<a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/brython.html">Brython</a>. Auf die <a href="https://kantel.github.io/posts/2024040201_collision_detection_1/">Kollisionserkennung zweier Kreise</a> folgt nun die Kollisionserkennung zweier Rechtecke:</p>
<iframe src="pythontutorial9/index.html" class="if16_9" name="Rechteck-Kollision">
</iframe>
<p>Bei der Kollisionserkennung zweier Rechtecke ist es – speziell bei Spielen – oftmals sinnvoll, zu unterscheiden, ob die Kollision von oben oder unten (Plattformer!) oder von rechts oder links erfolgt. In diesem Beispiel untersuche ich jedoch nur den einfachsten Fall: Eine Kollision wird gemeldet, egal von welcher Richtung sie stattfindet<sup>1</sup>:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> is_rect_collision(obj1, obj2):</span>
<span id="cb1-2">  distance_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> obj1.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> obj2.x</span>
<span id="cb1-3">  distance_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> obj1.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> obj2.y</span>
<span id="cb1-4">  half_w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> obj1.w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> obj2.w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb1-5">  half_h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> obj1.h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> obj2.h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb1-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(distance_x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> half_w):</span>
<span id="cb1-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(distance_y) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> half_h):</span>
<span id="cb1-8">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb1-9">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span></code></pre></div>
<p>Diese einfach Kollisionserkennung läßt sich jedoch – da sie schon die horizontale von der vertikalen Kollision unterscheidet – leicht aufbohren. Und auch daß im Beispielskript die Rechtecke Quadrate sind (Kenney hatte leider <a href="https://kenney.nl/assets/animal-pack-redux">neben den kreisrunden nur quadratische</a> und keine rechteckigen Viecher im Portfolio), ist keine Einschränkung der Allgemeingültigkeit, denn die obige Funktion prüft Weite und Höhe der Objekte separat ab.</p>
<p>Das Skript ist dem bisherigen Beispiel ziemlich ähnlich. Zuerst habe ich die einzelnen Klassen <code>Back</code> (für den Hintergrund) und <code>Parrot</code> und <code>Whal</code> (für die <del>rechteckigen</del> quadratischen Tiere) definiert:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Back:</span>
<span id="cb2-2">  </span>
<span id="cb2-3">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-4">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bg_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(234, 218, 184)"</span></span>
<span id="cb2-5">    </span>
<span id="cb2-6">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> display(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-7">    screen.fillRect(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, screen.width, screen.height, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bg_col)</span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Parrot:</span>
<span id="cb2-10">  </span>
<span id="cb2-11">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-12">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span></span>
<span id="cb2-13">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span></span>
<span id="cb2-14">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span></span>
<span id="cb2-15">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span></span>
<span id="cb2-16">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"parrot"</span></span>
<span id="cb2-17">    </span>
<span id="cb2-18">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> move(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-19">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mouse.x</span>
<span id="cb2-20">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mouse.y</span>
<span id="cb2-21">  </span>
<span id="cb2-22">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> display(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-23">    screen.drawSprite(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h)</span>
<span id="cb2-24"></span>
<span id="cb2-25"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Whal:</span>
<span id="cb2-26">  </span>
<span id="cb2-27">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-28">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-29">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-30">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span></span>
<span id="cb2-31">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span></span>
<span id="cb2-32">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"narwhal"</span></span>
<span id="cb2-33">    </span>
<span id="cb2-34">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> display(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-35">    screen.drawSprite(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h)</span></code></pre></div>
<p>Im Hauptprogramm versucht dann der Papagei (unterstützt von der Maus) auf dem Rücken des Wals zu landen. Jedesmal, wenn er auf den Wal trifft, verändert sich die Farbe des Hintergrunds:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> init():</span>
<span id="cb3-2">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">global</span> back, parrot, whal</span>
<span id="cb3-3">  back <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Back()</span>
<span id="cb3-4">  whal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Whal()</span>
<span id="cb3-5">  parrot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Parrot()</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update():</span>
<span id="cb3-8">  parrot.move()</span>
<span id="cb3-9">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> is_rect_collision(parrot, whal):</span>
<span id="cb3-10">    back.bg_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(243, 156, 18)"</span></span>
<span id="cb3-11">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb3-12">    back.bg_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(234, 218, 184)"</span></span>
<span id="cb3-13"></span>
<span id="cb3-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> draw():</span>
<span id="cb3-15">  back.display()</span>
<span id="cb3-16">  whal.display()</span>
<span id="cb3-17">  parrot.display()</span>
<span id="cb3-18">  </span>
<span id="cb3-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> is_rect_collision(obj1, obj2):</span>
<span id="cb3-20">  distance_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> obj1.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> obj2.x</span>
<span id="cb3-21">  distance_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> obj1.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> obj2.y</span>
<span id="cb3-22">  half_w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> obj1.w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> obj2.w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb3-23">  half_h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> obj1.h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> obj2.h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb3-24">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(distance_x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> half_w):</span>
<span id="cb3-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(distance_y) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> half_h):</span>
<span id="cb3-26">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb3-27">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span></code></pre></div>
<p>Die Funktion <code>is_rect_collision()</code> hier zu implementieren, war eine reine Design-Entscheidung. Ebensogut hätte sie als Methode zum Beispiel der Klasse <code>Parrot</code> implementiert werden können.</p>
<p>Meine kleine Tutorial-Reihe zu microStudio mit Python ist mittlerweile schon auf neun Beiträge angewachsen. Hier noch einmal alle bisherigen Artikel, damit Ihr und auch ich nicht die Übersicht verliert:</p>
<ul>
<li>MicroStudio und Python (Teil 1): <a href="https://kantel.github.io/posts/2024032201_microstudio_python_1/">Hallo Brython</a>!</li>
<li>MicroStudio und Python (Teil 2): <a href="https://kantel.github.io/posts/2024032401_microstudio_python_2/">Zombie Apokalypse</a></li>
<li>MicroStudio und Python (Teil 3): <a href="https://kantel.github.io/posts/2024032502_microstudio_python_3/">Dancing Crab</a></li>
<li>MicroStudio und Python (Teil 4): <a href="https://kantel.github.io/posts/2024032703_flying_badger_python/">Flying Badger</a></li>
<li>MicroStudio und Python (Teil 5): <a href="https://kantel.github.io/posts/2024032801_microstudio_noc_1/">PVector2 und »The Nature of Code«</a></li>
<li>MicroStudio und Python (Teil 6): <a href="https://kantel.github.io/posts/2024033102_bouncing_balls_microstudio/">Bouncing Balls</a></li>
<li>MicroStudio und Python (Teil 7): <a href="https://kantel.github.io/posts/2024040201_collision_detection_1/">Kollisionserkennung mit Kreisen</a></li>
<li>MicroStudio und Python (Teil 8): <a href="https://kantel.github.io/posts/2024040401_bouncing_birds/">Bouncing Birds</a></li>
<li>MicroStudio und Python (Teil 9): Kollisionserkennung mit Rechtecken</li>
</ul>
<p>Und natürlich habe ich auch dieses Tutorial wieder auf meinem <a href="https://microstudio.dev/i/kantel/pythontutorial9/">microStudio-Account hochgeladen</a> (dieses Mal hoffentlich mit korrektem Link), damit Ihr damit spielen und experimentieren könnt. Weitere Tutorials habe ich ebenfalls schon in der Planung. <em>Still digging!</em></p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Fußnoten</h2>

<ol>
<li id="fn1"><p>Ich folge hier einem Beispielskript, das ich im <a href="http://blog.schockwellenreiter.de/2019/11/2019112002.html">November 2019</a> schon einmal in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processingpy.html">Processing.py</a> wie auch in JavaScript (<a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/p5js.html">P5.js</a>) implementiert hatte.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>microStudio</category>
  <category>Python</category>
  <category>Creative Coding</category>
  <category>Spieleprogrammierung</category>
  <guid>https://kantel.github.io/posts/2024040701_rect_collision/</guid>
  <pubDate>Sun, 07 Apr 2024 16:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024040701_rect_collision/images/mstudio_rect_col.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Kenney 1-Bit Pack: Neue Farbpaletten braucht das Land</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024040501_1bit_farbpalette/</link>
  <description><![CDATA[ 




<p><a href="http://cognitiones.kantel-chaos-team.de/multimedia/farbpaletten/kenney1bit.html"><img src="https://kantel.github.io/posts/2024040501_1bit_farbpalette/images/kenney1bit-b.jpg" class="img-fluid"></a></p>
<p>Weil man ja bekanntlich nie genug Farbpaletten <em>in petto</em> haben kann, weil ich bei meiner Erkundung von <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/microstudio.html">microStudio</a> endlich mal etwas mit <a href="https://kenney.nl/assets/1-bit-pack">Kenneys 1-Bit Pack</a> anstellen wollte (denn das steht schon ewig auf meiner Agenda) und weil microStudios Sprite-Editor keine Farbpipette besitzt, habe ich mich hingesetzt und mit Hilfe des <a href="http://cognitiones.kantel-chaos-team.de/multimedia/computergraphik/gc.html">Graphikprogramm meines Vertrauens</a> aus dem Pack die Farben extrahiert und mir daraus selber eine Farbpalette gebastelt.</p>
<p>Und weil ich dies nicht nur für mich und meine Schublade basteln wollte, habe ich diese Farbpalette unter dem Namen <a href="http://cognitiones.kantel-chaos-team.de/multimedia/farbpaletten/kenney1bit.html">Kenney 1-Bit Pack</a> auf <a href="http://cognitiones.kantel-chaos-team.de/index.html">mein Wiki</a> zur Nutzung für Euch alle da draußen hochgeladen. Stellt was Schickes damit an&nbsp;…</p>



 ]]></description>
  <category>Creative Coding</category>
  <category>Farbpaletten</category>
  <category>microStudio</category>
  <guid>https://kantel.github.io/posts/2024040501_1bit_farbpalette/</guid>
  <pubDate>Fri, 05 Apr 2024 18:45:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024040501_1bit_farbpalette/images/kenney1bit.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>MicroStudio und Python: Bouncing Birds</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024040401_bouncing_birds/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53627951378/"><img src="https://kantel.github.io/posts/2024040401_bouncing_birds/images/bouncingbirds-b.jpg" class="img-fluid"></a></p>
<p>Nun ist es an der Zeit, daß ich mit den neu gewonnenen Erkenntnissen zur <a href="https://kantel.github.io/posts/2024040201_collision_detection_1/">Kollisionserkennung von Kreisen</a> in <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/microstudio.html">microStudio</a> und Python/<a href="https://brython.info/">Brython</a> auch etwas anstelle. Ich habe daber eine Anzahl von kreisrunden Vögeln (in meiner Spielewelt sind nicht nur Schlangen und Kaninchen, sondern auch Vögel kugelrund) über den Bildschirm flattern lassen, die sich – in der Regel (dazu weiter unten mehr) – bei einer Kollision gegenseitig abstoßen und in entgegengesetzter Richtung weiter fliegen.</p>
<iframe src="pythontutorial8/index.html" class="if16_9" name="Bouncing Birds">
</iframe>
<p>Dazu habe ich erst einmal eine Klasse <code>Bird</code> implementiert:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> randint, uniform, choice</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb1-3"></span>
<span id="cb1-4">bird_im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chick"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chicken"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"duck"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"owl"</span>,</span>
<span id="cb1-5">           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"parrot"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"penguin"</span>]</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Bird:</span>
<span id="cb1-8">  </span>
<span id="cb1-9">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-10">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb1-11">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb1-12">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>)</span>
<span id="cb1-13">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb1-14">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PVector2(x, y)</span>
<span id="cb1-15">    vel_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> uniform(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>) </span>
<span id="cb1-16">    vel_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> uniform(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>)</span>
<span id="cb1-17">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PVector2(vel_x, vel_y)</span>
<span id="cb1-18">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> choice(bird_im)</span>
<span id="cb1-19"></span>
<span id="cb1-20">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> move(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-21">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.add(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel)</span>
<span id="cb1-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check border</span></span>
<span id="cb1-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w:</span>
<span id="cb1-24">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>screen.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> screen.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h:</span>
<span id="cb1-26">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-27">      </span>
<span id="cb1-28">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> display(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-29">    screen.drawSprite(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h)</span>
<span id="cb1-30"></span>
<span id="cb1-31">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> is_circle_collision(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, other):</span>
<span id="cb1-32">    distance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> math.dist([<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y], [other.loc.x, other.loc.y])</span>
<span id="cb1-33">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> distance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> other.r:</span>
<span id="cb1-34">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb1-35">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span></code></pre></div>
<p>Diese Klasse besitzt eine etwas erweiterte Methode <code>is_circle_collision()</code>, die überprüft, ob die eigene Instanz des Vogels mit einem anderen Objekt kollidiert. Die Vögel werden durch Vektoren für ihren Standort (<code>Bird.loc</code>) und ihre Bewegung (<code>Bird.vel</code>) repräsentiert. Dafür habe ich wieder meine <a href="https://kantel.github.io/posts/2024032801_microstudio_noc_1/">hier vorgestellte</a>, eigene Vektorenklasse <code>PVector2</code> eingesetzt (ich sollte sie wirklich als <em>Library</em> implementieren).</p>
<p>Dann gibt es nur noch das Hauptskript, das das Spiel steuert:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1">birds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-2">NUM_BIRDS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span></span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> init():</span>
<span id="cb2-5">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">global</span> b</span>
<span id="cb2-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(NUM_BIRDS):</span>
<span id="cb2-7">    b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Bird()</span>
<span id="cb2-8">    birds.append(b)</span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update():</span>
<span id="cb2-11">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> b <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> birds:</span>
<span id="cb2-12">    b.move()</span>
<span id="cb2-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> b2 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> birds:</span>
<span id="cb2-14">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> b2 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> b.is_circle_collision(b2):</span>
<span id="cb2-15">        b.vel.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-16">        b.vel.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-17">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> check_input(keyboard.press, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SPACE"</span>):</span>
<span id="cb2-18">    birds.clear()</span>
<span id="cb2-19">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RESTART"</span>)</span>
<span id="cb2-20">    init()</span>
<span id="cb2-21"></span>
<span id="cb2-22"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> draw():</span>
<span id="cb2-23">  screen.clear()</span>
<span id="cb2-24">  screen.fillRect(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, screen.width, screen.height, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(234, 218, 184)"</span>)</span>
<span id="cb2-25">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> b <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> birds:</span>
<span id="cb2-26">    b.display()</span>
<span id="cb2-27"></span>
<span id="cb2-28"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> check_input(obj, val):</span>
<span id="cb2-29">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">hasattr</span>(obj, val):</span>
<span id="cb2-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> obj[val] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-31">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span></code></pre></div>
<p>Die Kollisionsbehandlung ist in <code>update()</code> implementiert. Da vermieden werden muß, daß der eigene Vogel prüft, ob er mit sich selber kollidiert (denn das tut er immer), war eine zweite Schleife in der ersten Schleife notwendig. In dieser wird einmal nachgeprüft, daß der eigene Vogel <code>b</code> nicht mit dem überprüften anderen Vogel <code>b2</code> identisch ist, <strong>und</strong> ob eine Kollision vorliegt:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> b2 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> birds:</span>
<span id="cb3-2">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> b2 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> b.is_circle_collision(b2):</span>
<span id="cb3-3">        b.vel.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-4">        b.vel.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
<p>Dann und nur dann wird die Bewegungsrichtung des Vogels umgekehrt. Diese Vorgehensweise habe ich von <em>Daniel Shiffman</em> aus seinen Videos »Checking Objects Intersection« (<a href="https://www.youtube.com/watch?v=uAfw-ko3kB8">Part 1</a> und <a href="https://www.youtube.com/watch?v=GY-c2HO2liA">Part 2</a>) gelernt.</p>
<p>Gelegentlich kommt es vor, daß bei der Initialisierung schon zwei Vögel so weit überlappen, daß sie sich auch wenn sie von anderen Vögeln angestuppst werden, nicht mehr voneinander trennen können. Um dies zu vermeiden, müßte im <code>init()</code> schon bei der Positionierung der Vögel darauf geachtet werden, daß keine Kollisionen vorliegen. Um den Code des Tutorials nicht zu überfrachten, habe ich darauf verzichtet (die <code>for</code>-Schleife müßte dafür in eine <code>while</code>-Schleife geändert werden, die eine Initialisierung eines neuen Vogels nur dann vornimmt, wenn sich seine Posiiton mit keiner Position der schon vorher erstellten Vögel überlappt). Stattdessen kann der Nutzer, wenn sich die Vögel zu sehr ineinander verkeilen, mit der Leertaste (<code>SPACE</code>) einen Neustart anstoßen. Dafür habe ich in <code>main</code> auch wieder die Brython-spezifische Funtion <code>check_input()</code> implementiert.</p>
<p>Die kreisrunden Vögel stammen wieder von <em>Kenney</em>, dieses Mal aus seinem freien (<a href="https://creativecommons.org/publicdomain/zero/1.0/">CC0</a>) Paket <a href="https://kenney.nl/assets/animal-pack-redux">Animal Pack Redux</a>. Und hier sind wieder – um die Übersicht nicht zu verlieren – alle bisher im <em>Schockwellenreiter</em> erschienenen Tutorials zu microStudio mit Python:</p>
<ul>
<li>MicroStudio und Python (Tel 1): <a href="https://kantel.github.io/posts/2024032201_microstudio_python_1/">Hallo Brython</a>!</li>
<li>MicroStudio und Python (Teil 2): <a href="https://kantel.github.io/posts/2024032401_microstudio_python_2/">Zombie Apokalypse</a></li>
<li>MicroStudio und Python (Teil 3): <a href="https://kantel.github.io/posts/2024032502_microstudio_python_3/">Dancing Crab</a></li>
<li>MicroStudio und Python (Teil 4): <a href="https://kantel.github.io/posts/2024032703_flying_badger_python/">Flying Badger</a></li>
<li>MicroStudio und Python (Teil 5): <a href="https://kantel.github.io/posts/2024032801_microstudio_noc_1/">PVector2 und »The Nature of Code«</a></li>
<li>MicroStudio und Python (Teil 6): <a href="https://kantel.github.io/posts/2024033102_bouncing_balls_microstudio/">Bouncing Balls</a></li>
<li>MicroStudio und Python (Teil 7): <a href="https://kantel.github.io/posts/2024040201_collision_detection_1/">Kollisionserkennung mit Kreisen</a></li>
<li>MicroStudio und Python (Teil 8): Bouncing Birds</li>
</ul>
<p>Ein aufmerksamer Leser hat mich darauf hingewiesen, daß viele der bisher publizierten Links auf <a href="https://microstudio.io/kantel/">meinen microStudio-Account</a> nur für mich zugänglich waren. Ich habe sie daher (hoffentlich alle) korrigiert, so auch der für dieses Tutorial, das hier mit Quellcode und allen Assets <a href="https://microstudio.dev/i/kantel/pythontutorial8/">hier finden solltet</a>. Wenn es damit dennoch Probleme gibt, schreibt es bitte in meine Kommentare.</p>



 ]]></description>
  <category>microStudio</category>
  <category>Python</category>
  <category>Spieleprogrammierung</category>
  <guid>https://kantel.github.io/posts/2024040401_bouncing_birds/</guid>
  <pubDate>Thu, 04 Apr 2024 17:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024040401_bouncing_birds/images/bouncingbirds.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Google korrigiert mit neuer Version 123 seines Browsers Chrome kritische Sicherheitslücken</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024040301_chrome_update/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53561598848/"><img src="https://kantel.github.io/posts/2024040301_chrome_update/images/datenkrakemittwoch-b.jpg" class="img-fluid"></a></p>
<p>Immer wieder Mittwochs liefert unser aller Datenkrake ein weiteres Sicherheitsupdate seines Flagschiffs aus: Google veröffentlicht das Update der Version 123 (123.0.6312.105/106/107) seines Browsers Chrome und schließt damit <a href="https://chromereleases.googleblog.com/2024/04/stable-channel-update-for-desktop.html">kritische Sicherheitslücken</a>.</p>
<p>Chrome aktualisiert sich (außer bei Linux) über die integrierte Update-Funktion, kann aber – wenn es pressiert – auch <a href="https://www.google.com/intl/de/chrome/browser/">hier geladen</a> werden. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/53561598848/">Octopussy</a></em>, erstellt mit <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/scenario.html">Scenario</a>. Prompt: »<em>A sexy female robot flees from a gigantic data octopus, colored french comic style</em>«. Negative Prompt: »<em>ugly, deformed, noisy, blurry, distorted, out of focus, bad anatomy, extra limbs, poorly drawn face, poorly drawn hands, missing fingers</em>«. Modell: Stable Diffusion XL, Style: Scifi Magic + Belgian School.</p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2024040301_chrome_update/</guid>
  <pubDate>Wed, 03 Apr 2024 16:45:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024040301_chrome_update/images/datenkrakemittwoch.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Google schließt am »April-Patchday« wieder Sicherheitslücken in Android</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024040202_android_update/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53561962164/"><img src="https://kantel.github.io/posts/2024040202_android_update/images/androidsandgoats-b.jpg" class="img-fluid"></a></p>
<p>Google hat mit seinem monatlichen <a href="https://source.android.com/docs/security/bulletin/2024-04-01?hl=de">Sicherheitsupdate für Android</a> (und damit auch auf seinen <a href="https://source.android.com/docs/security/bulletin/pixel/2024-04-01?hl=de">Pixel-Geräten</a>) wieder Sicherheitslücken geschlossen.</p>
<p>Die Updates werden so nach und nach per OTA <em>(over the air)</em> auf Pixel 8/8 pro, Pixel Tablet, Pixel Fold, Pixel 7a, Pixel 7/7 pro, Pixel 6a, Pixel 6/6 pro verteilt.</p>
<p>Die anderen Hersteller werden wie üblich in Bälde nachziehen, sofern sie überhaupt noch entsprechenden Support leisten. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/53561962164/">Androiden und Ziegen</a></em>, erstellt mit <a href="https://ideogram.ai/">Ideogram</a>. Prompt: »<em>Three little green robots dance on a colorful meadow in front of a small garden house, two goats in checkered vests watch them, the sun shines on the scenery, colored french comic style, illustration</em>«. Modell: Ideogram 1.0, Style: Illustration.</p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2024040202_android_update/</guid>
  <pubDate>Tue, 02 Apr 2024 18:45:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024040202_android_update/images/androidsandgoats.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>MicroStudio und Python: Kollisionserkennung (1)</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024040201_collision_detection_1/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53624779637/"><img src="https://kantel.github.io/posts/2024040201_collision_detection_1/images/pythontutorial7-b.jpg" class="img-fluid"></a></p>
<p>Meine Expedition durch das Land der Spieleprogrammierung mit <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/microstudio.html">microStudio</a> und Python/<a href="https://brython.info/">Brython</a> geht in die nächste Runde. Nachdem ich im letzten Ausflug ein paar <a href="https://kantel.github.io/posts/2024033102_bouncing_balls_microstudio/">Kreise über den Bildschirm hüpfen</a> ließ, steht nun die nächste Frage im Raum: Wie erkennt man, wenn die Kreise miteinander kollidieren?</p>
<p><a href="https://de.wikipedia.org/wiki/Kollisionserkennung_(algorithmische_Geometrie)">Kollisionserkennung</a> ist ein <a href="https://happycoding.io/tutorials/processing/collision-detection">großes Thema</a>, denn kaum eine Computersimulation oder ein -spiel kommt ohne aus. Für den Anfang möchte ich erst einmal den einfachsten Fall behandeln, die Kollision zweier Kreise:</p>
<iframe src="pythontutorial7/index.html" class="if16_9" name="Collision Detection Circle">
</iframe>
<p>Ich hatte diese Kollisionserkennung schon einmal (in Python (<a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processingpy.html">Processing.py</a>) und JavaScript (<a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/p5js.html">P5.js</a>)) im <em>Schockwellenreiter</em> <a href="http://blog.schockwellenreiter.de/2019/11/2019111103.html">behandelt</a>. Es ist wirklich die einfachste Form, denn zwei Kreise kollidieren dann und nur dann, wenn die Distanz der beiden Mittelpunkte der Kreise gleich oder kleiner der Länge der beiden Radii ist. In Python kann man das so abfragen:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> is_circle_collision(obj1, obj2):</span>
<span id="cb1-2">  distance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> math.dist([obj1.x, obj1.y], [obj2.x, obj2.y])</span>
<span id="cb1-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> distance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> obj1.r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> obj2.r:</span>
<span id="cb1-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb1-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span></code></pre></div>
<p>Der Abstand ist der <a href="https://de.wikipedia.org/wiki/Euklidischer_Abstand">euklidische Abstand</a>, der (auch in obiger <code>math.dist()</code>-Funktion) nach dem guten alten Satz des Pythagoras berechnet wird.</p>
<p>In meinem Beispielprogramm lasse ich ein kreisrundes Kaninchen vom Spieler mit der Maus steuern. Berührt das Kaninchen die (ebenfalls kreisrunde) Schlange, färbt sich der Hintergrund blutrot. Das ist doch alles recht einleuchtend und auch schnell implementiert. Zuerst die Schlange:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Snake:</span>
<span id="cb2-2">  </span>
<span id="cb2-3">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-4">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-5">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-6">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span></span>
<span id="cb2-7">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span></span>
<span id="cb2-8">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span></span>
<span id="cb2-9">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"snake"</span></span>
<span id="cb2-10">    </span>
<span id="cb2-11">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> display(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-12">    screen.drawSprite(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h)</span></code></pre></div>
<p>Die Klasse ist fast schon ein wenig <em>overkill</em>. Da die Schlange im Spiel unbeweglich ist, besitzt sie nur ein paar Eigenschaften und die Methode <code>display()</code>, die sie auf den Bildschirm zeichnet.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Rabbit:</span>
<span id="cb3-2">  </span>
<span id="cb3-3">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-4">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span></span>
<span id="cb3-5">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span></span>
<span id="cb3-6">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span></span>
<span id="cb3-7">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span></span>
<span id="cb3-8">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span></span>
<span id="cb3-9">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rabbit"</span></span>
<span id="cb3-10">    </span>
<span id="cb3-11">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> move(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-12">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mouse.x</span>
<span id="cb3-13">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mouse.y</span>
<span id="cb3-14">  </span>
<span id="cb3-15">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> display(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-16">    screen.drawSprite(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h)</span></code></pre></div>
<p>Viel komplexer ist aber auch die Klasse des Kaninchens nicht, außer das sie zusätzlich noch die Methode <code>move()</code> besitzt, die dafür verantwortlich ist, daß das Kaninchen dem Mauszeiger folgt.</p>
<p>Um die Objektorientierung auf die Spitze zu treiben (aber in der Hauptsache, um die Verwendung globaler Variablen zu minimieren), habe ich dem Bildschirmhintergrund auch eine eigene Klasse spendiert:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Back:</span>
<span id="cb4-2">  </span>
<span id="cb4-3">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-4">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bg_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(234, 218, 184)"</span></span>
<span id="cb4-5">    </span>
<span id="cb4-6">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> display(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-7">    screen.fillRect(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, screen.width, screen.height, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bg_col)</span></code></pre></div>
<p>Bei soviel OOP kann die Hauptroutine ja nur noch übersichtlich kurz geraten sein:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> init():</span>
<span id="cb5-4">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">global</span> rabbit, snake, back</span>
<span id="cb5-5">  back <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Back()</span>
<span id="cb5-6">  rabbit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Rabbit()</span>
<span id="cb5-7">  snake <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Snake()</span>
<span id="cb5-8"></span>
<span id="cb5-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update():</span>
<span id="cb5-10">  rabbit.move()</span>
<span id="cb5-11">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> is_circle_collision(rabbit, snake):</span>
<span id="cb5-12">    back.bg_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(250, 25, 25)"</span></span>
<span id="cb5-13">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb5-14">    back.bg_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(234, 218, 184)"</span>   </span>
<span id="cb5-15">    </span>
<span id="cb5-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> draw():</span>
<span id="cb5-17">  back.display()</span>
<span id="cb5-18">  snake.display()</span>
<span id="cb5-19">  rabbit.display()</span>
<span id="cb5-20">  </span>
<span id="cb5-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> is_circle_collision(obj1, obj2):</span>
<span id="cb5-22">  distance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> math.dist([obj1.x, obj1.y], [obj2.x, obj2.y])</span>
<span id="cb5-23">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> distance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> obj1.r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> obj2.r:</span>
<span id="cb5-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb5-25">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span></code></pre></div>
<p>Hier findet dann endlich die oben erwähnte Kollisionserkennung der beiden Kreise statt.</p>
<p>Den kreisrunden Schlangen- wie auch den (ebenfalls kreisrunden) Kaninchenkopf (in meiner Spielewelt habe Tiere nun einmal die Form einer Kugel) habe ich dem freien (<a href="https://creativecommons.org/publicdomain/zero/1.0/">CC0</a>) <a href="https://kenney.nl/assets/animal-pack">Animal Pack</a> von Kenney entnommen, denn es gibt nahezu nichts, was es bei Kenney nicht gibt. Und auch dieses kleine Skript habe ich wieder auf meinem <a href="https://microstudio.dev/i/kantel/pythontutorial7/">microStudio-Account</a> zu Eurer Erbauung hochgeladen.</p>
<ul>
<li>MicroStudio und Python (Tel 1): <a href="https://kantel.github.io/posts/2024032201_microstudio_python_1/">Hallo Brython</a>!</li>
<li>MicroStudio und Python (Teil 2): <a href="https://kantel.github.io/posts/2024032401_microstudio_python_2/">Zombie Apokalypse</a></li>
<li>MicroStudio und Python (Teil 3): <a href="https://kantel.github.io/posts/2024032502_microstudio_python_3/">Dancing Crab</a></li>
<li>MicroStudio und Python (Teil 4): <a href="https://kantel.github.io/posts/2024032703_flying_badger_python/">Flying Badger</a></li>
<li>MicroStudio und Python (Teil 5): <a href="https://kantel.github.io/posts/2024032801_microstudio_noc_1/">PVector2 und »The Nature of Code«</a></li>
<li>MicroStudio und Python (Teil 6): <a href="https://kantel.github.io/posts/2024033102_bouncing_balls_microstudio/">Bouncing Balls</a></li>
<li>MicroStudio und Python (Teil 7): Kollisionserkennung mit Kreisen</li>
</ul>
<p>Das ist dann das siebte Tutorial dieser kleinen Reihe. Macht was daraus …</p>



 ]]></description>
  <category>microStudio</category>
  <category>Python</category>
  <category>Spieleprogrammierung</category>
  <guid>https://kantel.github.io/posts/2024040201_collision_detection_1/</guid>
  <pubDate>Tue, 02 Apr 2024 12:45:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024040201_collision_detection_1/images/pythontutorial7.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Breaking News: Py5 v0.10.1a1 freigegeben</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024040102_py5_v010_1a1/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53625613169/"><img src="https://kantel.github.io/posts/2024040102_py5_v010_1a1/images/py5jupyterlabdesktop-b.jpg" class="img-fluid"></a></p>
<p>Das ist kein Aprilscherz, denn schon gestern spülte die Meldung in meinen Feedreader, daß <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/py5.html">Py5</a> in der <a href="https://ixora.io/blog/new-release-0101a1/">Version v0.10.1a1 freigegeben</a> sei. Py5 ist ja bekanntlich eine Python-3-Variante von <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processing.html">Processing</a>, die mit allen CPython-Modulen zusammenspielt (darunter auch den <em>Scientific Stack</em> mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/numpy.html">NumPy</a>, <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/scipy.html">SciPy</a> und der <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/matplotlib.html">Matplotlib</a>, aber auch mit anderen, wichtigen Bibliotheken, wie zum Beispiel <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/pillow.html">Pillow</a> oder <a href="http://cognitiones.kantel-chaos-team.de/mathematik/sympy.html">SymPy</a>).</p>
<p>Das bedeutet vor allem aber, daß Py5 auch in das <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/jupyter.html">Jupyter</a>-Ökosystem (auch mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/jupyterlabdesktop.html">JupyterLab Desktop</a>) passt. Natürlich habe ich das Update sofort installieren müssen – und zwar nicht nur in meiner <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/thonny.html">Thonny</a>-Umgebung, sondern auch – da ich mich von <a href="https://kantel.github.io/posts/2024022002_jupyterlabdesktop_thonny/">Thonny emanziperen</a> möchte – in meiner JupyterLab-Desktop-Umgebung. Während das Update in Thonny gewohnt einfach mit den Thonny-eigenen Bordmitteln lief, habe ich für das Update in meiner Jupyter-<a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/anaconda.html">Anaconda</a>-Umgebung das Terminal anwerfen und dort</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--upgrade</span> py5 py5jupyter</span></code></pre></div>
<p>eingeben müssen. (Das steht hier nur, damit ich beim nächsten Mal nicht wieder in <a href="https://py5coding.org/content/install.html#keeping-py5-updated">danach suchen</a> muß.) Danach arbeitete aber auch mein <a href="https://kantel.github.io/posts/2024031403_jld_update_zen_mode/">brandneues</a> JupyterLab-Desktop anstandslos mit dem neuen Py5 zusammen – wie obiger <a href="https://www.flickr.com/photos/schockwellenreiter/53625613169/">Screenshot</a> beweist.</p>
<p>Hauptgrund für dieses Update waren Vorbereitungen, um Py5 für das neue, bald erscheinende Numpy&nbsp;2.0 fit zu machen. Und es gab ein paar neue Features, die die Performance von Py5 erhöhen wollen. Außerdem wurden auch ein paar kleinere Fehler behoben.</p>
<p>Ich weiß, ich nehme mir immer zu viel vor. Aber ich werde sicher bald ein paar Dinge mit Py5 und JupyterLab Desktop ausprobieren. Diese Kombination fühlt sich nämlich ziemlich gut an und kann mich mit den Notebooks versöhnen. <em>Still digging!</em></p>



 ]]></description>
  <category>Py5</category>
  <category>Python</category>
  <category>Creative Coding</category>
  <category>JupyterLab Desktop</category>
  <category>Thonny</category>
  <guid>https://kantel.github.io/posts/2024040102_py5_v010_1a1/</guid>
  <pubDate>Mon, 01 Apr 2024 16:25:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024040102_py5_v010_1a1/images/py5jupyterlabdesktop.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Ein neuer Monat bringt neue Zahlen</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024040101_neuer_monat_neue_zahlen/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53560418152/"><img src="https://kantel.github.io/posts/2024040101_neuer_monat_neue_zahlen/images/amfenster-b.jpg" class="img-fluid"></a></p>
<p>Der April bringt nicht nur (hoffentlich!) den Frühling, sondern – wie zu jedem Ersten – auch die Zahlen des Vormonats, die manchmal hochtrabend auch <em>Mediadaten</em> genannt werden: Im März 2024 hatte der <em>Schockwellenreiter</em> laut seinem nicht immer zuverlässigen, aber dafür datenschutzkonformen <em><del>Geißenpeter</del></em> <em><a href="https://www.goatcounter.com/">GoatCounter</a></em> exakt <strong>4.693 Seitenaufrufe</strong>. Auch wenn diese Exaktheit der Ziffern eine Genauigkeit der Zahlen nur vortäuscht, freue ich mich über jede Besucherin und jeden Besucher und bedanke mich bei allen meinen Leserinnen und Lesern.</p>
<p>😎 &nbsp; <em>Bleibt mir gewogen!</em></p>
<p>Die <em>Top Five</em> des Vormonats bringen (für mich) einige Überraschungen:</p>
<ol type="1">
<li><a href="https://kantel.github.io/posts/2024011002_ki_ohne_zensor/index.html">Bildgeneratoren und Künstliche Intelligenz – ohne Zensoren</a> – 10. Januar 2024</li>
<li><a href="https://kantel.github.io/posts/2023052401_brauhaus_rixdorf/index.html">Was wird aus dem Brauhaus Rixdorf</a>? – 24. Mai <strong>2023</strong></li>
<li><a href="https://kantel.github.io/posts/2024031501_atom_wird_pulsar/">Der Atom-Editor lebt – und heißt jetzt Pulsar</a> – 15. März 2024</li>
<li><a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/microstudio.html">microStudio</a> in meinem Wiki</li>
<li>Writing for Games: <a href="https://kantel.github.io/posts/2024031202_writing_for_games/">Narrative Geschichten und Spiele</a> – 12. März 2024</li>
</ol>
<p>Daß zwei ältere Beiträge (davon einer sogar aus dem Vorjahr) ganz oben auftauchen, läßt mich vermuten, daß sich mein Umstieg auf <a href="http://cognitiones.kantel-chaos-team.de/webworking/staticsites/quarto.html">Quarto</a> und das damit verbundene, mobilfreundliche Design gelohnt hat. Google hat mich wieder lieb.&nbsp;🤓</p>
<hr>
<p><strong>Bild</strong>; <em><a href="https://www.flickr.com/photos/schockwellenreiter/53560418152/">Frühling am Fenster</a></em>, erstellt mit <a href="https://beta.dreamstudio.ai/generate">DreamStudio</a>. Prompt: »<em>An old man, white hair, no beard+, blue eyes, glasses, sits at a desk in front of a notebook and writes, there are other open books on the desk, and there is a large mug of steaming coffee next to them, the walls are lined with bookshelves, the spring sun shines through a window, colored french comic style</em>«. Negative Prompt: »<em>ugly, deformed, noisy, blurry, distorted, out of focus, bad anatomy, extra limbs, poorly drawn face, poorly drawn hands, missing fingers, beard, tie</em>«. Modell: Stable Diffusion XL, Style: Comic Book.</p>



 ]]></description>
  <category>Interna</category>
  <category>Quarto</category>
  <guid>https://kantel.github.io/posts/2024040101_neuer_monat_neue_zahlen/</guid>
  <pubDate>Mon, 01 Apr 2024 13:40:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024040101_neuer_monat_neue_zahlen/images/amfenster.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
