<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Der Schockwellenreiter</title>
<link>https://kantel.github.io/index.html</link>
<atom:link href="https://kantel.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description>Schockwellenreiter</description>
<generator>quarto-1.3.340</generator>
<lastBuildDate>Tue, 20 Jun 2023 15:25:00 GMT</lastBuildDate>
<item>
  <title>Pygame objektorientiert: Braucht es die Klasse GameWorld?</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023062001_gameworld_yes_no/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52962509456/"><img src="https://kantel.github.io/posts/2023062001_gameworld_yes_no/images/platformer1-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Da ich letzte Nacht wegen der sommerlichen Schwüle nicht richtig einschlafen konnte, ging mir im Halbschlaf mein Projekt »<a href="https://kantel.github.io/posts/2023010701_pygame_oop/">Pygame (sauber) objektorientiert</a>« nicht aus dem Kopf, für das ja mein von <em><a href="https://www.youtube.com/playlist?list=PLk64HPu_u_NOD0hC2XFZfDu1ZOr7OF1qB">Jonathan Cooper</a></em> inspiertes <a href="https://kantel.github.io/posts/2023061701_platformer_pygame_pygbag_1/">Jump-and-Run-Spiel</a> eine Art Referenz-Implementierung für <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a> in <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygbag.html">Pygbag</a> (damit es auch im Browser zu spielen ist) werden soll.</p>
<p>Mich beschäftigte dabei in der Hauptsache die Frage, ob die Klasse <code>GameWorld</code> wirklich notwendig und sinnvoll sei? Denn schon bei meinen ersten Überlegungen stand sie ziemlich einsam und eigentlich funktionslos im Raum,</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://kantel.github.io/posts/2023062001_gameworld_yes_no/images/gameworldpygame.jpg" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">GameWorld in Pygame</figcaption>
</figure>
</div>
<p>während sie in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/greenfoot.html">Greenfoot</a>, das ja die Blaupause für meine Implementierung war, eher eine Klasse ist, <strong>in</strong> der die anderen Klassen leben:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://kantel.github.io/posts/2023062001_gameworld_yes_no/images/gameworldgreenfoot.jpg" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">GameWorld in Greenfot</figcaption>
</figure>
</div>
<p>Daher fragte ich mich, ob Pygames Hauptprogramm nicht selber schon die Funktion besitzt, die die Klasse <code>World</code> (oder <code>GameWorld</code>) in Greenfoot besitzt? Zumal zum einen die Objektorientierung in Java strenger behandelt wird als in Python, und zum zweiten ich die <code>run()</code>-Methode wegen der Eigenheiten der Pygbag-Implementierung sowieso aus <code>GameWorld</code> herauslösen und in die <code>main()</code>-Funktion (und dort in die <code>while True</code>-Hauptschleife) auslagern mußte.</p>
<p>Das trägt sicher nicht zur Klarheit bei, die ich mit (m)einem OOP-Ansatz eigentllich erreichen wollte. Daher sollte ich bei dem sowieso geplanten Refaktoring diesen Ansatz noch einmal überdenken.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/uWvb3QzA48c" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Wenn ich mich recht erinnere, hatte <em>KidsCanCode</em> in seinem <a href="https://www.youtube.com/playlist?list=PLsk-HSGFjnaG-BwZkuAOcVwWldfCLu1pq">Platformer-Projekt</a>« schon vor etlichen Jahren eine Art <code>GameWorld</code>-Klasse in Pygame eingeführt. Ich sollte mir also die Playlist noch einmal reinziehen, vielleicht finde ich dort eine Begründung, die meine Zweifel ausräumt.</p>
<p>Ein Seiteneffekt dieser Überlegungen: Die Beschäftigung mit Greenfoot hat mir Spaß gemacht (obwohl ich Java eigentlich nicht mag). Ich habe große Lust bekommen, damit auch einmal etwas absolut Verrücktes und Sinnloses anzustellen. <em>Still digging!</em></p>
<p><strong>War sonst noch was?</strong> Ach ja, unser aller Datenkrake spülte mir noch zwei Videos zu Pygame mit Pygbag in meinen Feedreader:</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=LB7dAlIDnDw">How to Export Pygame Projects into the Web</a>.</li>
<li><a href="https://www.youtube.com/watch?v=RDkfbASO-gM">Pygame in the BROWSER with pygbag on Github</a> (<a href="https://pythonprogramming.altervista.org/pygame-in-the-browser-with-pygbag-and-github/">Blogpost</a> dazu).</li>
</ul>
<p>Die wollte ich Euch nicht vorenthalten.</p>



 ]]></description>
  <category>Pygame</category>
  <category>Greenfoot</category>
  <category>Spieleprgrammierung</category>
  <category>OOP</category>
  <guid>https://kantel.github.io/posts/2023062001_gameworld_yes_no/index.html</guid>
  <pubDate>Tue, 20 Jun 2023 15:25:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023062001_gameworld_yes_no/images/platformer1.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Atlas Curiosa: Brunnenlandschaft Kranoldplatz (Neukölln)</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023061801_brunnenlandschaft_kranoldplatz/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52983314573/"><img src="https://kantel.github.io/posts/2023061801_brunnenlandschaft_kranoldplatz/images/brunnenlandschaftkranoldplatz-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>An der östlichen Stirnseite des Neuköllner Kranoldplatzes, auf dem Sonnabends immer der Regionalmarkt »<a href="https://www.flickr.com/photos/schockwellenreiter/52983314573/">Die Dicke Linda</a>« und im Sommer jeden zweiten Sonntag der »<a href="https://www.nkflohmarkt.de/">NK Flohmarkt</a>« stattfindet, steht ein geheimnisumwittertes Skulpturenensemble, über das scheinbar niemand genau Bescheid weiß (außer vielleicht das <a href="https://schloss-gutshof-britz.de/museum-neukoelln/geschichtsspeicher/archive">Riesenarchiv</a> des <a href="https://schloss-gutshof-britz.de/museum-neukoelln">Neuköllner Heimatmuseums</a>). Wie von einem Riesen ausgestreut, liegt ein Mix abstrakter Bildhauerarbeiten auf dem Pflaster.</p>
<p>Nur der <a href="https://www.tagesspiegel.de/kultur/ein-brunnen-der-kein-wasser-spendet-5726230.html">Tagesspiegel</a> und die <a href="https://www.friedenau-aktuell.de/friedhof-stubenrauchstra%C3%9Fe/gerson-fehrenbach/">Friedenauer Gedenkseiten</a> des am Projekt beteiligten Bildhauers <em><a href="https://de.wikipedia.org/wiki/Gerson_Fehrenbach">Gerson Fehrenbach</a></em> wissen mehr: Die Anlage entstand von 1983 bis 1986 im Rahmen eines Bildhauersymposiums, an dem sich neben <em><a href="https://bildhauerei-in-berlin.de/bildwerk/skulptur-kranoldplatz-4753/">Gerson Fehrenbach</a></em> die Bildhauer <em><a href="https://bildhauerei-in-berlin.de/bildwerk/steinskulptur-4550/">Mehmet Aksoy</a></em>, <em><a href="https://bildhauerei-in-berlin.de/bildwerk/steinskulptur-4700/">Justus Chrukin</a></em>, <em><a href="https://bildhauerei-in-berlin.de/bildwerk/wasserstein-4765/">Peter Fromlowitz</a></em>, <em><a href="https://bildhauerei-in-berlin.de/bildwerk/wasserstein-4765/">Makoto Fujiwara</a></em>, <em><a href="https://bildhauerei-in-berlin.de/bildwerk/steinskulptur-4884/">Peter Herbrich</a></em> und <em><a href="https://bildhauerei-in-berlin.de/bildwerk/steinskulptur-5277/">Maciej Szankowski</a></em> beteiligten. Vorgegeben war als gemeinsames Material hellgraugeäderter Bardiglio-Marmor. Die Einzelskulpturen der Bildhauer sollten sich bei aller Individualität zu einem Ganzen zusammenfügen. Sie war als Brunnen geplant, wovon das Loch im abgetreppten Mittelstein heute noch zeugt. Doch hat das durchbrochene Rondell nie Wasser geführt.</p>
<p>Denn die damals 400.000 Mark teuren Arbeiten auf dem seinerzeit noch sehr aktiven Wochenmarkt ernteten bei der Politik nicht immer nur Zustimmung, sondern einige Politiker zeigten sich auch »persönlich erschüttert« und die Berliner Morgenpost schlagzeilte »Bürger und Künstler fühlen sich verschaukelt«.</p>
<p>Angeblich wollten Anwohner und Marktbesucher keine Steine, sondern Blumen und Büsche. Und die Künstler ärgerten sich über die »massive Ablehnung« und das »beziehungslose Herumstehen« ihrer Steine. An dem sinnlosen Herumstehen des wasserlosen Brunnens hat sich auch nach fast 40 Jahren bis heute nichts geändert. Immerhin wurden vor ein paar Monaten die Steine von Bemoosung und Farbschmierereien befreit und glänzen nun zwar immer noch wasserlos, aber in vollem marmorweiß. Bis dem Bezirk wieder das Geld für die Pflege ausgeht. <em>(Photos (<a href="http://creativecommons.org/licenses/by-nc-nd/2.0/">cc</a> 2023): <a href="http://cognitiones.kantel-chaos-team.de/cv.html">Jörg Kantel</a>)</em></p>



 ]]></description>
  <category>Atlas Curiosa</category>
  <category>Neukölln</category>
  <guid>https://kantel.github.io/posts/2023061801_brunnenlandschaft_kranoldplatz/index.html</guid>
  <pubDate>Sun, 18 Jun 2023 14:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023061801_brunnenlandschaft_kranoldplatz/images/brunnenlandschaftkranoldplatz.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Ein Jump and Run (Mario Style) in Pygame und Pygbag (Stage 1)</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023061701_platformer_pygame_pygbag_1/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52979473305/"><img src="https://kantel.github.io/posts/2023061701_platformer_pygame_pygbag_1/images/platformerv02-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Ich habe es getan! Genauer gesagt, ich habe damit angefangen. Wie <a href="https://kantel.github.io/posts/2023060901_pygame_python_tuts/">hier schon angedroht</a>, habe ich mich durch die ersten Video-Tutorials der Playlist »<a href="https://www.youtube.com/playlist?list=PLk64HPu_u_NOD0hC2XFZfDu1ZOr7OF1qB">Platformer</a>« von <em>Jonathan Cooper</em> gewühlt und davon inspiriert angefangen, mein eigenes <a href="https://de.wikipedia.org/wiki/Jump_%E2%80%99n%E2%80%99_Run">Jump ‘n’ Run</a> in <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a> zu schreiben. Der Sinn der Übung ist, eben keine sklavische Kopie des Spiels von <em>Jonathan Cooper</em> zu programmieren, sondern es sollte meiner Vorstellung von objektorientierter Programmierung folgen, mithilfe von <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygbag.html">Pygbag</a> auch im Browser zu spielen sein und <em>last but not least</em> die freien (<a href="https://creativecommons.org/share-your-work/public-domain/cc0/">CC0</a>) Assets von <a href="https://www.kenney.nl/">Kenneys</a> niedlichem <em><a href="https://www.kenney.nl/assets/pixel-platformer">Pixel Platformer</a></em> (<em><a href="https://www.kenney.nl/assets/pixel-platformer-farm-expansion">Farm Expansion</a></em>, <em><a href="https://www.kenney.nl/assets/pixel-platformer-industrial-expansion">Industrial Expansion</a></em>) verwenden. Diese basieren zwar auf ein unübliches Raster von 18x18 Pixeln, aber man wächst ja mit seinen Aufgaben<sup>1</sup>.</p>
<p>Beim derzeitigen Stand der Entwicklung habe ich noch recht wenige Bildchen verwendet, aber ich habe ja noch vor, das Spiel ganz gewaltig aufzuhübschen. Aber es ist selbst in diesem frühen Stadium schon (dank <a href="https://kantel.itch.io/simple-pygame-platformer">Itch.io</a>) im Browser zu spielen<sup>2</sup>:</p>
<iframe frameborder="0" src="https://itch.io/embed-upload/8120238?color=ede4d4" allowfullscreen="" width="720" height="290">
<a href="https://kantel.itch.io/simple-pygame-platformer">Play Simple Pygame Platformer on itch.io</a>
</iframe>
<p>Da die Browser in ihrer Gier nach Input die Pfeiltasten und auch die Leertaste in Beschlag genommen haben, wird das Spiel wie in den 80er Jahren üblich mit den Tasten <code>a</code>, <code>d</code> und <code>w</code> gesteuert: <code>a</code> bewegt die Spielerfigur (das kleine, grüne Alien) nach links, <code>d</code> nach rechts und bei <code>w</code> hüpft sie nach oben.</p>
<p>Was habe ich nun angestellt? Ich habe mir das <a href="https://kantel.github.io/posts/2023060804_pygbag_oop/">hier vorgestellte Template</a> geschnappt und es behutsam ausgebaut. Damit das Alien nicht ins Bodenlose fällt, habe ich als erstes eine Klasse <code>Platform</code> erstellt:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Platform(pg.sprite.Sprite):</span>
<span id="cb1-2"></span>
<span id="cb1-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, _x, _y, _image):</span>
<span id="cb1-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb1-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _image</span>
<span id="cb1-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image.get_rect()</span>
<span id="cb1-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>GRIDSIZE</span>
<span id="cb1-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>GRIDSIZE</span></code></pre></div>
<p>Da die Klasse von <code>pygame.sprite.Sprite</code> erbt, ist die Initialisierung alles, was sie benötigt. Für die Positionierung wird die Konstante <code>GRIDSIZE</code> verwendet (hier 18 Pixel), die es erlaubt, die Sprites im Raster zu positionieren. In meinem Fall ist das Raster 40 Einheiten weit und 15&nbsp;Einheiten hoch. Das ist leichter auszuzählen, als die Pixel (720x290).</p>
<p>Um den Boden für das Alien zu zeichnen, habe ich erst einmal das Bild geladen</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1">        grass_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.image.load(os.path.join(IMAGEPATH, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grass_02.png"</span>))</span>
<span id="cb2-2">        .convert_alpha()</span></code></pre></div>
<p>und die Tiles dann positioniert:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1">        grass_locations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb3-2">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(GRID_WIDTH):</span>
<span id="cb3-3">            grass_loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (i, GRID_HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-4">            grass_locations.append(grass_loc)</span>
<span id="cb3-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.all_sprites <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.sprite.Group()</span>
<span id="cb3-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.platforms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.sprite.Group()</span>
<span id="cb3-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> loc <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> grass_locations:</span>
<span id="cb3-8">            x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb3-9">            y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb3-10">            p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Platform(x, y, grass_image)</span>
<span id="cb3-11">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.platforms.add(p)</span>
<span id="cb3-12">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.all_sprites.add(p)</span></code></pre></div>
<p>Da alle Sprites in der Klasse <code>GameWorld</code> meines Templates gezeichnet werden, mußte ich mir über die <code>draw()</code>-Methode keine Gedanken machen, das erledigt Pygame für mich.</p>
<p>Dann habe ich eine Klasse <code>Player</code> spezifiziert:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Player(pg.sprite.Sprite):</span>
<span id="cb4-2"></span>
<span id="cb4-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, _x, _y):</span>
<span id="cb4-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb4-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb4-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>):</span>
<span id="cb4-7">            player_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.image.load(os.path.join(IMAGEPATH,</span>
<span id="cb4-8">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"alien_green_0"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(i) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".png"</span>)).convert_alpha()</span>
<span id="cb4-9">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.img.append(player_image)</span>
<span id="cb4-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.img[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb4-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image.get_rect()</span>
<span id="cb4-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>GRIDSIZE</span>
<span id="cb4-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.bottom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>GRIDSIZE</span>
<span id="cb4-14">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># self.rect.topleft = (self.rect.x, self.rect.y)</span></span>
<span id="cb4-15">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.speed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PLAYER_SPEED</span>
<span id="cb4-16">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.jump_power <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> JUMP_POWER</span>
<span id="cb4-17">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb4-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb4-19">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gems <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span></code></pre></div>
<p>Das zweite Bild benötige ich beim derzeitigen Stand der Entwicklung noch nicht, aber alles andere wird benötigt. Die Klasse hat diverse Hilfsmethoden, die in Summe alle in der Methode <code>update()</code> aufgerufen werden. Für das Verständnis der Implementierung notwendig ist die (Hilfs-) Methode <code>move()</code>, die auf die Tastatursteuerung reagiert und eine Kollisionserkennung besitzt:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> move(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb5-2">        keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.key.get_pressed()</span>
<span id="cb5-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> keys[pg.K_a]:        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># LEFT</span></span>
<span id="cb5-4">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb5-5">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.speed</span>
<span id="cb5-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> keys[pg.K_d]:      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># RIGHT</span></span>
<span id="cb5-7">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> WIDTH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> PLAYER_WIDTH:</span>
<span id="cb5-8">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.speed</span>
<span id="cb5-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> keys[pg.K_w]:      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># JUMP</span></span>
<span id="cb5-10">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.jump()</span>
<span id="cb5-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb5-12">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb5-13">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Horizonfale Kollision</span></span>
<span id="cb5-14">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vx</span>
<span id="cb5-15">        hits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.sprite.spritecollide(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, world.platforms, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb5-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> hit <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> hits:</span>
<span id="cb5-17">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb5-18">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.right <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hit.rect.left</span>
<span id="cb5-19">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb5-20">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hit.rect.right</span>
<span id="cb5-21">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Vertikale Kollision</span></span>
<span id="cb5-22">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vy</span>
<span id="cb5-23">        hits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.sprite.spritecollide(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, world.platforms, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb5-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> hit <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> hits:</span>
<span id="cb5-25">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb5-26">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.bottom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hit.rect.top</span>
<span id="cb5-27">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb5-28">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.top <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hit.rect.bottom</span>
<span id="cb5-29">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span></code></pre></div>
<p>Die Geschwindigkeit des Spielers wird mit den Variablen für <em>Velocity</em> (<code>vx</code>, <code>vy</code>) gesteuert, die unter anderem nur dann zu der x- oder y-Position des Spielers aufaddiert wird, wenn keine Kollision registriert wird. Kollisionen werden, je nachdem ob eine horizontale (<code>vx != 0</code>) oder vertikale (<code>vy != 0</code>) Kollision vorliegt, separat abgehandelt. Trifft der Spieler horizontal von rechts auf ein Hindernis gilt <code>self.rect.right = hit.rect.left</code> und umgekehrt (<code>self.rect.left = hit.rect.right</code>). Ähnliches gilt für die vertikale Kollision von oben (<code>self.rect.bottom = hit.rect.top)</code> oder unten (<code>self.rect.top = hit.rect.bottom</code>).</p>
<p>Damit eine vertikale Kollision überhaupt stattfinden kann, müssen natürlich noch ein paar Plattformen installiert werden. Wie gewohnt wird erst das Bildchen geladen</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1">        block_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.image.load(os.path.join(IMAGEPATH, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"block_00.png"</span>))</span>
<span id="cb6-2">        .convert_alpha()</span></code></pre></div>
<p>und dann die Blöcke positioniert:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1">        block_locations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>),                         </span>
<span id="cb7-2">                           (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>),</span>
<span id="cb7-3">                           (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">26</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>),</span>
<span id="cb7-4">                           (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>),</span>
<span id="cb7-5">                           (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">38</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">38</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>)]</span>
<span id="cb7-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> loc <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> block_locations:</span>
<span id="cb7-7">            x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb7-8">            y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb7-9">            p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Platform(x, y, block_image)</span>
<span id="cb7-10">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.platforms.add(p)</span>
<span id="cb7-11">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.all_sprites.add(p)</span></code></pre></div>
<p>Als letztes habe ich die Klasse <code>Gem</code> implementiert, die der Klasse <code>Platform</code> sehr ähnelt, aber zusätzlich noch die Methode <code>apply()</code> besitzt:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Gem(pg.sprite.Sprite):</span>
<span id="cb8-2"></span>
<span id="cb8-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, _x, _y, _image):</span>
<span id="cb8-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb8-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _image</span>
<span id="cb8-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image.get_rect()</span>
<span id="cb8-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>GRIDSIZE</span>
<span id="cb8-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>GRIDSIZE</span>
<span id="cb8-9">    </span>
<span id="cb8-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, character):</span>
<span id="cb8-11">        character.gems <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
<p>Die Methode <code>apply</code> in <code>Gem</code> und nicht in <code>Player</code> zu implementieren, war eine Designentscheidung, damit in zukünftigen Versionen die Klasse auch auf andere Spielfiguren, wie zum Beispiel Gegner des Spielers, reagieren kann.</p>
<p>Dazu braucht die Klasse <code>Player</code> aber auch eine Methode, die auf eine Kollision mit den Edelsteinen reagiert. Ich habe sie <code>check_items()</code> genannt:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb9-1">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> check_items(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb9-2">        hits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.sprite.spritecollide(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, world.items, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb9-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> hits:</span>
<span id="cb9-4">            item.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>)</span></code></pre></div>
<p>Hier ist der letzte Parameter von <code>pygame.sprite.spritecollide()</code> zum ersten Mal auf <code>True</code> gesetzt. Das bedeutet, das bei einer Kollision das Item aus allen <code>sprite.Group</code> gelöscht wird und im Spiel nicht mehr existiert.</p>
<p>Bevor ich Euch komplett verwirre, hier der vollständige Quellcode dieser Version 0.2, damit Ihr alles nachvollziehen und auch nachprogrammieren könnt:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pygame <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pg</span>
<span id="cb10-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> asyncio</span>
<span id="cb10-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pygame.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">locals</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb10-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os, sys</span>
<span id="cb10-5"></span>
<span id="cb10-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Settings</span></span>
<span id="cb10-7">GRIDSIZE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span></span>
<span id="cb10-8">GRID_WIDTH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span></span>
<span id="cb10-9">GRID_HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span></span>
<span id="cb10-10">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> GRID_WIDTH<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>GRIDSIZE, GRID_HEIGHT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>GRIDSIZE</span>
<span id="cb10-11">TITLE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Simple Platformer"</span></span>
<span id="cb10-12">FPS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>                     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Frames per second</span></span>
<span id="cb10-13">PLAYER_WIDTH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span></span>
<span id="cb10-14">PLAYER_HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span></span>
<span id="cb10-15">PLAYER_START_X, PLAYER_START_Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb10-16">PLAYER_SPEED <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb10-17"></span>
<span id="cb10-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Physikalische Konstanten</span></span>
<span id="cb10-19">GRAVITY <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span></span>
<span id="cb10-20">JUMP_POWER <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb10-21"></span>
<span id="cb10-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Hier wird der Pfad zum Verzeichnis der Assets gesetzt</span></span>
<span id="cb10-23">IMAGEPATH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(os.getcwd(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data/images"</span>)</span>
<span id="cb10-24"></span>
<span id="cb10-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Farben</span></span>
<span id="cb10-26">BG_COLOR <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">65</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">166</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">246</span>)     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Himmelblau</span></span>
<span id="cb10-27"></span>
<span id="cb10-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Class GameWorld</span></span>
<span id="cb10-29"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> GameWorld:</span>
<span id="cb10-30"></span>
<span id="cb10-31">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb10-32">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pygame und das Fenster initialisieren</span></span>
<span id="cb10-33">        pg.init()</span>
<span id="cb10-34">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.screen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.display.set_mode((WIDTH, HEIGHT))</span>
<span id="cb10-35">        pg.display.set_caption(TITLE)</span>
<span id="cb10-36"></span>
<span id="cb10-37">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.clock <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.time.Clock()</span>
<span id="cb10-38">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.keep_going <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb10-39"></span>
<span id="cb10-40">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> reset(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb10-41">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Neustart oder Status zurücksetzen</span></span>
<span id="cb10-42">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Hier werden alle Elemente der GameWorld initialisiert</span></span>
<span id="cb10-43">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Load Assets</span></span>
<span id="cb10-44">        grass_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.image.load(os.path.join(IMAGEPATH, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grass_02.png"</span>)).convert_alpha()</span>
<span id="cb10-45">        block_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.image.load(os.path.join(IMAGEPATH, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"block_00.png"</span>)).convert_alpha()</span>
<span id="cb10-46">        gem_image   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.image.load(os.path.join(IMAGEPATH, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gem.png"</span>)).convert_alpha()</span>
<span id="cb10-47"></span>
<span id="cb10-48">        grass_locations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb10-49">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(GRID_WIDTH):</span>
<span id="cb10-50">            grass_loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (i, GRID_HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb10-51">            grass_locations.append(grass_loc)</span>
<span id="cb10-52">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.all_sprites <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.sprite.Group()</span>
<span id="cb10-53">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.platforms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.sprite.Group()</span>
<span id="cb10-54">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> loc <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> grass_locations:</span>
<span id="cb10-55">            x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb10-56">            y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb10-57">            p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Platform(x, y, grass_image)</span>
<span id="cb10-58">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.platforms.add(p)</span>
<span id="cb10-59">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.all_sprites.add(p)</span>
<span id="cb10-60">    </span>
<span id="cb10-61">        block_locations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>),                         </span>
<span id="cb10-62">                           (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>),</span>
<span id="cb10-63">                           (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">26</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>),</span>
<span id="cb10-64">                           (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>),</span>
<span id="cb10-65">                           (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">38</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">38</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>)]</span>
<span id="cb10-66">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> loc <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> block_locations:</span>
<span id="cb10-67">            x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb10-68">            y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb10-69">            p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Platform(x, y, block_image)</span>
<span id="cb10-70">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.platforms.add(p)</span>
<span id="cb10-71">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.all_sprites.add(p)</span>
<span id="cb10-72"></span>
<span id="cb10-73">        gem_locations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">26</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">36</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>)]</span>
<span id="cb10-74">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.items <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.sprite.Group()</span>
<span id="cb10-75">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> loc <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gem_locations:</span>
<span id="cb10-76">            x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb10-77">            y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb10-78">            g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Gem(x, y, gem_image)</span>
<span id="cb10-79">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.items.add(g)</span>
<span id="cb10-80">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.all_sprites.add(g)</span>
<span id="cb10-81"></span>
<span id="cb10-82">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Player(PLAYER_START_X, PLAYER_START_Y)</span>
<span id="cb10-83">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player_sprite_group <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.sprite.GroupSingle()</span>
<span id="cb10-84">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player_sprite_group.add(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player)</span>
<span id="cb10-85">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.all_sprites.add(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player)</span>
<span id="cb10-86">  </span>
<span id="cb10-87">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> events(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb10-88">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> event <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> pg.event.get():</span>
<span id="cb10-89">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> ((event.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pg.QUIT)</span>
<span id="cb10-90">                <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> (event.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pg.KEYDOWN</span>
<span id="cb10-91">                <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> event.key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pg.K_ESCAPE)):</span>
<span id="cb10-92">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.keep_going <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb10-93">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.game_over()</span>
<span id="cb10-94"></span>
<span id="cb10-95">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb10-96">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.all_sprites.update()</span>
<span id="cb10-97"></span>
<span id="cb10-98">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb10-99">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.screen.fill(BG_COLOR)</span>
<span id="cb10-100">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.all_sprites.draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.screen)</span>
<span id="cb10-101">        pg.display.flip()</span>
<span id="cb10-102"></span>
<span id="cb10-103">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> start_screen(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb10-104">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb10-105">    </span>
<span id="cb10-106">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> win_screen(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb10-107">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb10-108">    </span>
<span id="cb10-109">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> loose_screen(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb10-110">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb10-111"></span>
<span id="cb10-112">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> game_over(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb10-113">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print("Bye, Bye, Baby!")</span></span>
<span id="cb10-114">        pg.quit()</span>
<span id="cb10-115">        sys.exit()</span>
<span id="cb10-116"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Ende Class GameWorld</span></span>
<span id="cb10-117"></span>
<span id="cb10-118"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Class Platform</span></span>
<span id="cb10-119"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Platform(pg.sprite.Sprite):</span>
<span id="cb10-120"></span>
<span id="cb10-121">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, _x, _y, _image):</span>
<span id="cb10-122">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb10-123">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _image</span>
<span id="cb10-124">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image.get_rect()</span>
<span id="cb10-125">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>GRIDSIZE</span>
<span id="cb10-126">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>GRIDSIZE</span>
<span id="cb10-127"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## End Class Platform</span></span>
<span id="cb10-128"></span>
<span id="cb10-129"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Gem(pg.sprite.Sprite):</span>
<span id="cb10-130"></span>
<span id="cb10-131">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, _x, _y, _image):</span>
<span id="cb10-132">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb10-133">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _image</span>
<span id="cb10-134">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image.get_rect()</span>
<span id="cb10-135">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>GRIDSIZE</span>
<span id="cb10-136">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>GRIDSIZE</span>
<span id="cb10-137">    </span>
<span id="cb10-138">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, character):</span>
<span id="cb10-139">        character.gems <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb10-140"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## End Class Gem</span></span>
<span id="cb10-141"></span>
<span id="cb10-142"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Class Player</span></span>
<span id="cb10-143"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Player(pg.sprite.Sprite):</span>
<span id="cb10-144"></span>
<span id="cb10-145">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, _x, _y):</span>
<span id="cb10-146">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb10-147">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb10-148">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>):</span>
<span id="cb10-149">            player_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.image.load(os.path.join(IMAGEPATH, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"alien_green_0"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(i) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".png"</span>)).convert_alpha()</span>
<span id="cb10-150">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.img.append(player_image)</span>
<span id="cb10-151">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.img[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb10-152">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image.get_rect()</span>
<span id="cb10-153">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>GRIDSIZE</span>
<span id="cb10-154">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.bottom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>GRIDSIZE</span>
<span id="cb10-155">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.speed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PLAYER_SPEED</span>
<span id="cb10-156">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.jump_power <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> JUMP_POWER</span>
<span id="cb10-157">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb10-158">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb10-159">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gems <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb10-160">    </span>
<span id="cb10-161">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> jump(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb10-162">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb10-163">        hits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.sprite.spritecollide(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, world.platforms, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb10-164">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb10-165">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(hits) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb10-166">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.jump_power</span>
<span id="cb10-167"></span>
<span id="cb10-168">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> apply_gravity(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb10-169">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> GRAVITY</span>
<span id="cb10-170"></span>
<span id="cb10-171">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> move(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb10-172">        keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.key.get_pressed()</span>
<span id="cb10-173">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> keys[pg.K_a]:        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># LEFT</span></span>
<span id="cb10-174">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb10-175">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.speed</span>
<span id="cb10-176">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> keys[pg.K_d]:      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># RIGHT</span></span>
<span id="cb10-177">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> WIDTH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> PLAYER_WIDTH:</span>
<span id="cb10-178">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.speed</span>
<span id="cb10-179">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> keys[pg.K_w]:      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># JUMP</span></span>
<span id="cb10-180">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.jump()</span>
<span id="cb10-181">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb10-182">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb10-183">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Horizonfale Kollision</span></span>
<span id="cb10-184">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vx</span>
<span id="cb10-185">        hits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.sprite.spritecollide(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, world.platforms, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb10-186">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> hit <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> hits:</span>
<span id="cb10-187">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb10-188">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.right <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hit.rect.left</span>
<span id="cb10-189">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb10-190">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hit.rect.right</span>
<span id="cb10-191">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Vertikale Kollision</span></span>
<span id="cb10-192">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vy</span>
<span id="cb10-193">        hits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.sprite.spritecollide(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, world.platforms, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb10-194">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> hit <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> hits:</span>
<span id="cb10-195">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb10-196">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.bottom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hit.rect.top</span>
<span id="cb10-197">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb10-198">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.top <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hit.rect.bottom</span>
<span id="cb10-199">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb10-200"></span>
<span id="cb10-201">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> check_edges(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb10-202">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb10-203">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb10-204">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.right <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> WIDTH:</span>
<span id="cb10-205">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.right <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> WIDTH</span>
<span id="cb10-206">    </span>
<span id="cb10-207">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> check_items(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb10-208">        hits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.sprite.spritecollide(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, world.items, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb10-209">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> hits:</span>
<span id="cb10-210">            item.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>)</span>
<span id="cb10-211"></span>
<span id="cb10-212">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb10-213">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.apply_gravity()</span>
<span id="cb10-214">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.move()</span>
<span id="cb10-215">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.check_edges()</span>
<span id="cb10-216">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.check_items()</span>
<span id="cb10-217"></span>
<span id="cb10-218"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## End Class Player</span></span>
<span id="cb10-219"></span>
<span id="cb10-220"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Hauptprgramm</span></span>
<span id="cb10-221">world <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> GameWorld()</span>
<span id="cb10-222">world.start_screen()</span>
<span id="cb10-223">world.reset()</span>
<span id="cb10-224"></span>
<span id="cb10-225"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Hauptschleife</span></span>
<span id="cb10-226"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">async</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> main():</span>
<span id="cb10-227">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> world.keep_going:</span>
<span id="cb10-228">        world.clock.tick(FPS)</span>
<span id="cb10-229">        world.events()</span>
<span id="cb10-230">        world.update()</span>
<span id="cb10-231">        world.draw()</span>
<span id="cb10-232">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">await</span> asyncio.sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Very important, and keep it 0</span></span>
<span id="cb10-233"></span>
<span id="cb10-234">asyncio.run(main())</span></code></pre></div>
<p>Das Spiel habe ich auf <a href="https://kantel.itch.io/simple-pygame-platformer">Itch.io hochgeladen</a>, Ihr könnt es also auch dort spielen. Allerdings wird es dort immer nur die letzte, gerade aktuelle Version geben – jede neue Version überschreibt die vorherige Version. Ich will schließlich meinen Account nicht vollmüllen.</p>
<p>Und wie immer gibt es den <a href="https://github.com/kantel/pygameprojects/tree/master/platformer">Quellcode mit allen Assets</a> auch in meinem Github-Repositorium. Aber auch hier wird es immer nur die aktuelle Fassung geben, frühere Versionen könnt Ihr Euch ja notfalls aus der <em>History</em> ziehen (wozu hat man denn eine <strong>Versionskontrolle</strong>?).</p>
<p>Als nächstes werde ich erst einmal ein <em>Refactoring</em> des bisher implmentierten vornehmen. Es sind mir nämlich zuviel Doppelungen im Quellcode vorhanden und auch ein paar Zeilen sind von früheren Versuchen noch funktions- und nutzlos im Code verblieben. Ich lasse Euch an den Fortschritten weiter teilhaben. <em>Still digging!</em></p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Fußnoten</h2>

<ol>
<li id="fn1"><p>Ich wollte ein recht kleines Pixelraster verwenden, damit das Spielfeld – zumindest in den ersten Versionen – auch problemlos in ein Browserfenster paßt. Das 64x64 große Pixelraster des <em><a href="https://www.kenney.nl/assets/simplified-platformer-pack">Simplified Platformer Pack</a></em> (ebenfalls von Kenney.nl) schien mir dafür zu wuchtig (bei aller Sympathie, die ich für die kleine, animiert und gelbe Spielekonsole des Packs hege).↩︎</p></li>
<li id="fn2"><p>Wenn man, nachdem das Spiel gestartet ist, die Seite neu lädt oder verläßt, gibt der Browser eine Warnmeldung heraus, daß eventuelle Änderungen nicht gespeichert werden. Ich weiß nicht, ob das gewollt ist und ob oder wie man das abstellen kann. Momentan müßt Ihr und muß ich damit leben.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Pygame</category>
  <category>Pygbag</category>
  <category>Spieleprogrammierung</category>
  <category>Retrogaming</category>
  <guid>https://kantel.github.io/posts/2023061701_platformer_pygame_pygbag_1/index.html</guid>
  <pubDate>Sat, 17 Jun 2023 14:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023061701_platformer_pygame_pygbag_1/images/platformerv02.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Ren’Py, Remove BG, Tkinter: Video-Tutorials (und mehr) zum Wochenende</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023061601_renpy_tkinter_removebg/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52978598354/"><img src="https://kantel.github.io/posts/2023061601_renpy_tkinter_removebg/images/kastanien-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Da es zum einen ein verregnetes Wochenende werden soll (sagen zumindest die chronisch danebentippenden Wetterfrösche) und ich zum anderen nicht nur (und immer noch – dazu in einem späteren Beitrag mehr) von <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygbag.html">Pygbag</a>, dem kleinen Tool, das <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a>-Spiele im Browser laufen läßt, sondern auch von der neuen Möglichkeit, <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/renpy.html">Ren’Py</a>-Anwendungen <a href="https://kantel.github.io/posts/2023061001_renpy_81_web/">auch für das Web zu entwickeln</a>, total begeistert bin, habe ich für Euch eine Riesen-Playlist zu Ren’Py herausgesucht:</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/Zbr2MGkEmYg" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Sie heißt einfach »<a href="https://www.youtube.com/playlist?list=PL0WLCTtC1EYUibimxDGhkPQin7bo39PlV">Ren’Py Visual Novel Engine</a>«, ist einziger Bestandteil des YouTube-Kanals <em>RenPy Start Tutorials</em> und der Name ist Programm. Denn sie besteht derzeit aus 101 meist kürzeren Videos, die jeweils einzelne Aspekte der Engine behandeln (Ihr könnt sie Euch daher in nahezu beliebiger Reihenfolge reinziehen). Da das jüngste Update erst wenige Tage alt ist, erwarte ich noch weitere Folgen. Ein Abonnement des Kanals ist daher zu empfehlen.</p>
<p>In einer Email-Diskussion (mein <a href="https://kantel.github.io/posts/2022120901_giscus/">Giskus</a> war für ein paar Stunden ausgefallen) kam die Frage nach den Assets für Ren’Py auf. Für Menschen wie mich, denen jegliche künstlerische Begabung fehlt, ist die wirklich nicht leicht zu beantworten. Zwar kann man sich auf Seiten wie <a href="https://itch.io/game-assets/free/genre-visual-novel">dieser auf Itch.io mit freien Visual Novell Ressourcen</a> durchwühlen, aber die meisten sind in einem süßlichen <em>Anime Style</em> und daher nicht jedermans Geschmack. Ich nutze bei <a href="https://kantel.itch.io/alien-attack-renpy-test">meinem Projekt</a> zur <a href="https://kantel.github.io/posts/2022122102_alien_invasion_stage_1/">Zeit</a> ja Avatare, die ich mit dem freien <a href="https://framiq.com/">Avatar-Generator von Framic</a> zusammengestoppelt habe, und für die Hintergründe behelfe ich mich mit einem Mix aus ebenfalls freien <em>Visual Novel Backgrounds</em> (da kann man in der oben erwähnten Sammlung auf Itch.io eine Menge finden) und eigenen Photos.</p>
<p>Nun steht aber auch schon seit geraumer Zeit der Dienst »<a href="https://www.remove.bg/de">Remove BG</a> auf der Liste der zu testenden Applikationen. Angeregt durch diese Diskussion habe ich erste Tests gewagt und das Ergebnis ist recht vielversprechend. Ich habe ein paar Bilder aus <em>Alice im Wunderland</em> genommen und mal geschaut, wie Remove BG mit diesen Illustrationen klar kommt. Die Ergebnisse sind durchaus brauchbar, wie der <a href="https://www.flickr.com/photos/schockwellenreiter/52978598354/">obige verrückte Hutmacher</a>, den ich freigestellt und in ein Photo vom heimischen <em>Carl-Weder-Park</em> im Frühling hereinkopiert habe, beweist.</p>
<p>Allerdings kann man bei der kostenlosen Nutzung nur ein größenlimitiertes Vorschaubild herunterladen. Das kann für viele Anwendungen durchaus ausreichend sein, wer jedoch mehr will, muß zahlen, Das kann entweder mit <em>Pay-as-you-go</em> »Credits« (für gelegentliche/geringe Nutzung die einzige Alternative, allerdings kostet dann ein Bild im Extremfall 1,99 €) oder mit einem <a href="https://www.remove.bg/de/pricing">Monatsabo</a> erfolgen. Die Kosten liegen hier bei dem kleinsten Abo (40 Credits (Bilder) pro Monat, nur nichtkommerzielle Nutzung) bei 23 Cent je Bild.</p>
<p>Bevor ich hier also in den sauren Apfel beiße und ein Abo abschließe, werde ich erst noch ein paar weitere Tests fahren. Aber ich halte das Angebot für durchaus fair.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/1itG8q-sCGY" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p><strong>War sonst noch was?</strong> Ach ja, manchmal braucht man ja doch ein GUI für sein Python-Projekt. Und da ist Tkinter immer noch das Werkzeug meiner Wahl (vor allem, weil es in der Grundversion zum Standardumfang von Python gehört, also ohne zusätzliche Installationen auskommt). Und der YouTube-Kanal <em>Code First with Hala</em> bietet eine Playlist »<a href="https://www.youtube.com/playlist?list=PLs3IFJPw3G9IiHm9PEP1UaMtuvACmxVMj">Tkinter GUI Projects</a>«, die zur Zeit aus 15 Videos zwischen etwa einer viertelstünden und einer Spieldauer von einer Stunde besteht. Auch hier ist das jüngste Video erst wenige Wochen alt, die Playlist sollte also hinreichend aktuell sein und man darf auf weitere Updates hoffen. Daher habe ich auch diesen Kanal abonniert.</p>



 ]]></description>
  <category>RenPy</category>
  <category>Interactive Fiction</category>
  <category>Python</category>
  <category>Tkinter</category>
  <category>Remove BG</category>
  <guid>https://kantel.github.io/posts/2023061601_renpy_tkinter_removebg/index.html</guid>
  <pubDate>Fri, 16 Jun 2023 13:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023061601_renpy_tkinter_removebg/images/kastanien.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Landgericht Berlin: Klimablockaden sind keine Nötigung</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023061502_klimanlockaden_sind_keine_noetigung/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/17563122701/"><img src="https://kantel.github.io/posts/2023061502_klimanlockaden_sind_keine_noetigung/images/herrmanstrassenverkehr-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Da wird die Bleifußlobby aber aufheulen: Das Landgericht Berlin hat in einer neuen Entscheidung zu Klimablockaden erstmals den Vorwurf der Nötigung gegen Klimaaktivisten der Gruppe »Letzte Generation« abgelehnt. Stattdessen erklärte es, <strong><a href="http://localhost:7151/posts/2023061502_klimanlockaden_sind_keine_noetigung/index.html">daß angesichts angekündigter Blockaden Autofahrern »ein Umsteigen auf den öffentlichen Nahverkehr oder das Einplanen von mehr Zeit (…) generell möglich« sei</a></strong>. Zudem sei eine Blockade von etwas mehr als einer halben Stunde »hinsichtlich der üblichen Stauzeiten« in Berlin »moderat«.</p>
<p>Wenn man sich zum Beispiel die täglichen Staus auf der Neuköllner Herrmannstraße anschaut, die durch eine verpeilte Verkehrspolitik (Autobahnbau) und eine steigenden Unvernunft der Autofahrer hervorgerufen werden (in fast jedem PKW sitz eine einzelne Person), fragt man sich, warum das Gericht seine Urteilsbegründung nicht noch schärfer formulierte. Denn das Autofahrer im Stau stecken, damit kann ich leben – aber daß dann auch die Busse des ÖPNV nicht durchkommen, damit nicht.</p>
<p>Meiner Meinung nach sollte man, sobald auf einer Straße ein Stau droht, diese umgehend für den motorisierten Individualverkehr komplett sperren, damit wenigstens die Busse und (Straßen-) Bahnen des ÖPNV noch durchkommen. Denn der motorisierte Individualverkehr ist egoistisch (in einer Großstadt muß <strong>niemand</strong> mit dem Auto fahren!), umweltschädlich und verantwortungslos, daher sollte der ÖPNV eindeutig die Priorität besitzen. <em>(Photo (<a href="http://creativecommons.org/licenses/by-nc-nd/2.0/">cc</a>): <a href="http://cognitiones.kantel-chaos-team.de/cv.html">Jörg Kantel</a>)</em></p>



 ]]></description>
  <category>Verkehr</category>
  <category>Verkehrswende</category>
  <category>Failed State Berlin</category>
  <guid>https://kantel.github.io/posts/2023061502_klimanlockaden_sind_keine_noetigung/index.html</guid>
  <pubDate>Thu, 15 Jun 2023 13:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023061502_klimanlockaden_sind_keine_noetigung/images/herrmanstrassenverkehr.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Microsoft veröffentlicht Update 16.74 für Office for Mac</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023061501_office_for_mac_update/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://upload.wikimedia.org/wikipedia/commons/0/0e/Zorn_Love_nymph.jpg"><img src="https://kantel.github.io/posts/2023061501_office_for_mac_update/images/lovenymph-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Microsoft liefert mit dem Update auf 16.74 für Office 365, 2021 und 2019 for Mac natürlich auch wieder <a href="https://docs.microsoft.com/en-us/officeupdates/release-notes-office-for-mac">aktuelle Sicherheitskorrekturen</a>.</p>
<p>Sofern Office nicht schon von sich aus darauf hinweist, erhält man die Korrekturen am einfachsten über Microsofts AutoUpdate – in einem beliebigen Office-Programm über Menü <code>Hilfe &gt; Auf Updates überprüfen</code>. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<p><em>(Bild: Anders Zorn (1860-1920): Kärleksnymf (The Love Nymph), 1885. Bildquelle (CC0): <a href="https://commons.wikimedia.org/wiki/File:Zorn_Love_nymph.jpg">Wikimedia Commons</a>)</em></p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2023061501_office_for_mac_update/index.html</guid>
  <pubDate>Thu, 15 Jun 2023 12:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023061501_office_for_mac_update/images/lovenymph.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Google korrigiert erneut in Version 114 seines Browsers Chrome kritische Sicherheitslücken</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023061401_chrome_update/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://upload.wikimedia.org/wikipedia/commons/thumb/4/44/Anders_Zorn_-_The_First_Time_-_A_II_1516_-_Finnish_National_Gallery.jpg/1192px-Anders_Zorn_-_The_First_Time_-_A_II_1516_-_Finnish_National_Gallery.jpg"><img src="https://kantel.github.io/posts/2023061401_chrome_update/images/anderszorndaserstemal1888-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Google veröffentlicht ein weiteres Update der Version 114 (114.0.5735.133/134) seines Browsers Chrome und schließt erneut <a href="https://chromereleases.googleblog.com/2023/06/stable-channel-update-for-desktop_13.html">kritische Sicherheitslücken</a>.</p>
<p>Chrome aktualisiert sich (außer bei Linux) über die integrierte Update-Funktion, kann aber – wenn es pressiert – auch <a href="https://www.google.com/intl/de/chrome/browser/">hier geladen</a> werden. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<p><em>(Bild: Anders Zorn (1860-1920): <a href="https://en.wikipedia.org/wiki/En_premi%C3%A4r">En premiär</a> (The First Time), 1888. Bildquelle (CC0): <a href="https://commons.wikimedia.org/wiki/File:Anders_Zorn_-_The_First_Time_-_A_II_1516_-_Finnish_National_Gallery.jpg">Wikimedia Commons</a>)</em></p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2023061401_chrome_update/index.html</guid>
  <pubDate>Wed, 14 Jun 2023 15:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023061401_chrome_update/images/anderszorndaserstemal1888.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Gnuplot mit Aquaterm und Visual Studio Code</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023061301_gnuplot_revisited/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52972457315/"><img src="https://kantel.github.io/posts/2023061301_gnuplot_revisited/images/gnuplottest-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Heute morgen fiel mir eher zufällig das »<a href="https://www.packtpub.com/product/gnuplot-cookbook/9781849517249">Gnuplot Cookbook</a>« von <em>Lee Phillips</em> in die Finger und erinnerte mich an ein bisher noch ungelöstes Problem: Schon seit einer geraumen Weile konnte ich <a href="http://cognitiones.kantel-chaos-team.de/mathematik/gnuplot.html">Gnuplot</a> auf meinem Mac nicht mehr zur Zusammenarbeit mit <a href="http://cognitiones.kantel-chaos-team.de/mathematik/aquaterm.html">Aquaterm</a> bewegen. Spontan beschloß ich, das Problem anzugehen.</p>
<p>Eine kurze Recherche mit <del>der Suchmaschine meines Vertrauens</del> unser aller Datenkrake brachte auch so <a href="https://gist.github.com/scuxiayiqian/c8ea9452f86dc1918de92b136e772c80">etwas wie eine Lösung</a> (Kommentare beachten): Schuld an dem Dilemma waren ausnahmsweise weder Gnuplot noch Aquaterm, sondern <a href="https://gist.github.com/scuxiayiqian/c8ea9452f86dc1918de92b136e772c80">Homebrew</a> – der Installer lieferte einfach kein aktuelles Paket von Gnuplot, das mit Aquaterm zusammen spielt. Als Lösung wurde die Installation via <a href="https://de.wikipedia.org/wiki/MacPorts">MacPorts</a> vorgeschlagen. Obwohl ich bei MacPorts eigentlich immer skeptisch bin (bei jeder noch so kleinen Installation lädt die Paketverwaltung einem das halbe Internet auf die Festplatte), habe ich es gewagt – ich wollte mit Gnuplot unbedingt mal wieder spielen und das mit Aquaterm.</p>
<p>Die Installation verlief problemlos, aber wie erwartet: Ich hatte wieder das Gefühl, daß das halbe Internet (zumindest ein weiteres Python) auf meinem Rechner versenkt wird. Aber als Belohnung hatte ich danach ein weiteres Gnuplot auf meiner Festplatte<sup>1</sup>. Die Betonung liegt auf ein »weiteres«, denn das alte, mit Homebrew installierte Programm wird nicht überschrieben, MacPorts installiert alle »seine« Installationen gesondert im Verzeichnis <code>/opt/local/</code>.</p>
<p>Dann wollte ich auch noch wissen, ob ich Gnuplot zur Zusammenarbeit mit <a href="http://cognitiones.kantel-chaos-team.de/produktivitaet/visualstudiocode.html">Visual Studio Code</a> bewegen kann, denn das Editieren im Editor ist für mich immer noch einfacher, als das Herumhantieren mit der Kommandozeile. Es war einfacher, als ich dachte: Die Dateiendung <code>.gnu</code> wurde vom Editor anstandslos als Gnuplot-Datei akzeptiert und mit dem <em>Shebang</em></p>
<div style="float: right; margin-left: 12px; margin-top: 6px;">
<a href="https://www.manning.com/books/gnuplot-in-action-second-edition"><img src="https://kantel.github.io/posts/2023061301_gnuplot_revisited/images/gnuplotaction.jpg" class="img-fluid"></a>
</div>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/opt/local/bin/gnuplot</span></span></code></pre></div>
<p>konnte ich ihn auch mit dem gewünschten Gnuplot-Interpreter vermählen.</p>
<p>Jetzt bin ich erst einmal zufrieden: Ich habe wieder ein Gnuplot, das so funktioniert, wie ich es mir wünsche (siehe <a href="https://www.flickr.com/photos/schockwellenreiter/52972457315/">Screenshot</a>). Und mit Gnuplot kann man oft einfacher und schneller publikationsreife Abbildungen erstellen, ohne vorher einen Python-Interpreter mit der <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/matplotlib.html">Matplotlib</a> anwerfen zu müssen. Außerdem ist Gnuplot ein weiteres, nerdiges Spielzeug, das man einfach in seinem Werkzeugkasten haben muß.</p>
<p>Ich habe daher auch noch »<a href="https://www.manning.com/books/gnuplot-in-action-second-edition">Gnuplot in Action</a>« von <em>Philipp K. Janert</em> aus meinem begehbaren Zettelkasten (also aus meinen Bücherregalen) hervorgekramt und werde mit dem Programm und diesen 400 Seiten sicher noch viel Spaß haben. <em>Still digging!</em></p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Fußnoten</h2>

<ol>
<li id="fn1"><p>Wer es mir nachmachen will, sollte nicht vergessen, <strong>vorher</strong> Aquaterm zu installieren, der Gnuplot-Installer muß Aquaterm nämlich finden können.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Gnuplot</category>
  <category>Visual Studio Code</category>
  <category>Visualisierung</category>
  <guid>https://kantel.github.io/posts/2023061301_gnuplot_revisited/index.html</guid>
  <pubDate>Tue, 13 Jun 2023 17:45:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023061301_gnuplot_revisited/images/gnuplottest.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Mathematik, KI und Algorithmen: Für umme lesen</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023061201_umme_lesen/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.artprinta.com/cdn/shop/products/AL3DLGHKZ_1800x1400.jpg?v=1579023012"><img src="https://kantel.github.io/posts/2023061201_umme_lesen/images/aktmitbuch-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Ich muß meinen <a href="https://kantel.github.io/posts/2023061001_renpy_81_web/">selbstauferlegten Hiatus</a> mal kurz unterbrechen, weil mir zwei Links zu Büchern untergekommen sind, die Ihr kostenlos herunterladen könnt und die ich für so interessant halte, daß ich sie Euch auf gar keinen Fall vorenthalten möchte.</p>
<p>Da ist erst einmal das Buch »<a href="https://mml-book.github.io/">Mathematics for Machine Learning</a>« von <em>Marc Peter Deisenroth</em>, <em>A. Aldo Faisal</em> und <em>Cheng Soon Ong</em>. Sie wollen Euch mit diesem Buch motivieren, mathematische Konzepte zu lernen. Es sei ist nicht dazu gedacht, fortgeschrittene Techniken des maschinellen Lernens zu behandeln, da es bereits zahlreiche Bücher dazu gibt. Stattdessen wollen sie die notwendigen mathematischen Fähigkeiten vermitteln, um diese anderen Bücher lesen zu können. Ihr könnt das Buch <a href="https://mml-book.github.io/book/mml-book.pdf">hier kostenlos als PDF</a> herunterladen.</p>
<p>Sehr schön ist auch das Buch »<a href="https://jeffe.cs.illinois.edu/teaching/algorithms/">Algorithms</a>« von <em>Jeff Erickson</em>, das auf seinen Vorlesungen beruht, die er für diverse Informatik-Veranstaltungen an der Universität von Urbana-Champaign, Illinois, seit 1998 gehalten hat. Die Schwarte ist 472 Seiten fett und meist farbig illustriert. Wer es nicht sofort herunterladen möchte, kann sich auch online <a href="https://archive.org/details/Algorithms-Jeff-Erickson">auf den Seiten des Internet Archives</a> einen ersten Eindruck verschaffen.</p>
<p>Das Buch setzt keine spezielle Programmiersprache voraus, sondern benutzt einen einfachen, leicht verständlichen Pseudo-Code, der es Euch erlaubt, die Algorithmen und Konzepte in der Programmiersprache Eures Vertrauens umzusetzen.</p>
<p><em>(Bild: Anders Zorn (1860-1920): Studie eines Aktes, 1892)</em></p>



 ]]></description>
  <category>Mathematik</category>
  <category>Künstliche Intelligenz</category>
  <category>Informatik</category>
  <guid>https://kantel.github.io/posts/2023061201_umme_lesen/index.html</guid>
  <pubDate>Mon, 12 Jun 2023 16:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023061201_umme_lesen/images/aktmitbuch.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Alien Attack: Ren’Py 8.1 im Web (und noch mehr Video-Tutorials)</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023061001_renpy_81_web/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52963842341/"><img src="https://kantel.github.io/posts/2023061001_renpy_81_web/images/alienattackweb-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Auch das <a href="https://kantel.github.io/posts/2023060803_renpy_8_1/">Update auf Ren’Py 8.1</a>, das ich vor zwei Tagen vorgestellt hatte, ließ mir keine Ruhe. Ich wollte unbedingt testen, ob die versprochene Rückkehr zu der Möglichkeit, mit <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/renpy.html">Ren’Py</a> auch für das Web zu entwickeln, funtioniert. Spoiler: Es funktioniert tatsächlich!</p>
<p>Dazu hatte ich einfach die bisher fertiggestellt (Test-) Version meiner geplanten »Räuberpistole« <a href="https://kantel.itch.io/alien-attack-renpy-test">Alien Attack</a> aus Ren’Py heraus als Web-Applikation exportiert. Heraus kam ein Ordner, der alle Dateien enthielt, die die Webversion benötigt und die hinter einem Webserver (lokal getestet mit <a href="http://cognitiones.kantel-chaos-team.de/webworking/mamp.html">MAMP</a>) auch einfach funktioniert, indem man die <code>index.html</code> aufruft. Die Dateien sind so organisiert, daß man zum Beispiel den Splash-Screen oder das Favicon einfach ersetzten kann, indem man die Dateien <code>web-presplash.jpg</code> oder <code>web-icon.png</code> austauscht.</p>
<p>Dadurch inspiriert, habe ich <em>stante pede</em> noch ein paar aktuelle Video-Tutorials herausgesucht, die mir helfen sollen, mein Ren’Py-Experimente fortzusetzen. Denn wenn nicht nur <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a> mit <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygbag.html">Pygbag</a>, sondern auch Ren’Py ins Web drängt, dann will ich doch mitspielen.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/PZRaYqhlPF8" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Als erstes fiel mir der Kanal von <em>Ivan’s Quest</em> auf. Er besitzt eine bislang 14-teilige <a href="https://www.youtube.com/playlist?list=PLfsxhEJYoqXsFzCUogDHuSFn2REJOf56z">Tutorial-Reihe zu Ren’Py</a>. Die einzelnen Videos sind je zwischen fünf Minuten und einer halben Stunde lang. Und die Reihe ist aktuell, das jüngste Video ist gerade mal wenige Tage alt. Das läßt nicht nur auf weitere Fortsetzungen hoffen (ich habe den Kanal deswegen abonniert), sondern es werden auch die neuesten Ren’Py-Updates berücksichtigt.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/zlDrcxUc8v8" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Daneben kann ich auch noch die <em>Basics of Ren’Py (How I Make My Games)</em> aus der 14-teiligen Playlist »<a href="https://www.youtube.com/playlist?list=PL8Y8sYrRR6yA9u0npsOGsaPFdtGENH-A2">My Ren’Py</a>« (im Schnitt etwa je halbstündige Videos) empfehlen. Auf die hatte ich zwar – glaube ich (ich finde den Link nicht mehr) – vor etwa einem Jahr schon einmal hingewiesen, aber mittlerweile gibt es etliche Updates (auch diese Playlist wird noch regelmäßig aktualisiert), so daß sich ein erneuter Besuch lohnt.</p>
<p>So, wenn Ihr jetzt die nächsten Tage nichts oder nur sehr wenig hier im <em>Schockwellenreiter</em> von mir lest – ich habe zu tun. Denn neben Ren’Py und Pygame gibt es ja auch noch <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/p5js.html">P5.js</a>, das auf die <a href="https://kantel.github.io/posts/2023060401_wochenendausklang/">Erstellung von Web-Anwendungen durch mich wartet</a>. Ich kann mich daher nur wiederholen: <em>So viel zu spielen, so wenig Zeit!</em></p>



 ]]></description>
  <category>RenPy</category>
  <category>Interactive Fiction</category>
  <category>Spieleprogrammierung</category>
  <guid>https://kantel.github.io/posts/2023061001_renpy_81_web/index.html</guid>
  <pubDate>Sat, 10 Jun 2023 12:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023061001_renpy_81_web/images/alienattackweb.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Für das Wochenende: Pygame und Python Tutorials</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023060901_pygame_python_tuts/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.kenney.nl/media/pages/assets/pixel-platformer/30068b9022-1668793752/samplea.png"><img src="https://kantel.github.io/posts/2023060901_pygame_python_tuts/images/pixelplatformer-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Zwar versprechen die Wetterfrösche zumindest für Berlin und Brandenburg für die nächsten Tage sehr sommerliches, sonniges und heißes Wetter, so daß Ihr (und ich) vermutlich eher zu Freiluftaktivitäten neigt, denn dazu, Eure (oder meine) Zeit vor dem Monitor zu verbringen. Dennoch möchte ich Euch ein paar Video-Tutorials vorstellen, die ich für interessant halte. Anschauen könnt Ihr sie dann ja immer noch, sie werden schließlich durch langes liegen nicht schlecht.</p>
<p>Da <a href="https://kantel.github.io/posts/2023060501_pygame_im_browser/">meine Faszination</a> für <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygbag.html">Pygbag</a>, dem kleinen Tool, das <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a>-Spiele nach WebAssembly (WASM) kompiliert, so daß diese auch im Browser laufen können, immer noch <a href="https://kantel.github.io/posts/2023060804_pygbag_oop/">ungebrochen</a> ist, beginne ich mit zwei Tutorialreihen zu Pygame:</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/UxJ2E3ZEKr0" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Die Playlist »<a href="https://www.youtube.com/playlist?list=PLk64HPu_u_NOD0hC2XFZfDu1ZOr7OF1qB">Platformer</a>« von <em>Jonathan Cooper</em> behandelt in 32 maximal etwa viertelstündigen Videos genau das, was der Name verspricht: Die Programmierung eines guten, alten Side-Scrollers im <em>Mario Style</em> mit allem drum und dran (mehrere Level, Start- und Ende-Bildschirm, scrollender Bildschirmhintergrund). Hervorzuheben ist, daß die Leveldaten in JSON-Dateien gespeichert werden und <em>Jonathan Cooper</em> auch zeigt, wie man in Python/Pygame damit umgeht.</p>
<p>Wer davon noch nicht genug hat, kann sich ja auch noch die Playlist »<a href="https://www.youtube.com/playlist?list=PLk64HPu_u_NPUInmSC4Ax0RwBAkoZZNB0">Space Wars</a>« (23 Videos) des gleichen Autors reinziehen. Auch hier wird ein klassisches Videospiel programmiert.</p>
<p>In beiden Reihen wird auf Assets von <a href="https://www.kenney.nl/assets">Kenney.nl</a> zurückgegriffen. Im ersten Fall auf das <a href="https://www.kenney.nl/assets/simplified-platformer-pack">Simplified Platformer Pack</a> mit der netten, kleinen, gelben Spielekonsole als Helden und in der zweiten Playlist auf das <a href="https://www.kenney.nl/assets/space-shooter-redux">Space Shooter Pack</a> (<a href="https://www.kenney.nl/assets/space-shooter-extension">Extensions</a>). Beide Pakete scheinen echte Renner von Kenney zu sein.</p>
<p>Sollte ich einen Platformer programmieren wollen (und ich will!), tendiere ich hingegen momentan zu Kenneys <a href="https://www.kenney.nl/assets/pixel-platformer">Pixel Platformer</a> (<a href="https://www.kenney.nl/assets/pixel-platformer-farm-expansion">Farm Expansion</a>, <a href="https://www.kenney.nl/assets/pixel-platformer-industrial-expansion">Industrial Expansion</a>). Diese Bildchen haben zwar das etwas ungewöhnliche Rasterformat von 18x18 Pixeln, aber auch damit sollte ich umgehen können.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/INlog9EDd24" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Sollte dann noch etwas Zeit übrig bleiben, empfehle ich die Playlist »<a href="https://www.youtube.com/playlist?list=PLeLGx0BaYD6bsy5mfwo0mxONYWfR1VVbO">Python for Data Science</a>« des Kanals <em>Python Coding</em> (13 Videos je zwischen einer viertel- bis einer halbstündigen Laufzeit).</p>
<p>Auch auf diesem Kanal gibt es noch weitere Playlists, die vermutlich einen Blick wert sind. Ins Auge gefallen sind mir:</p>
<ul>
<li>»<a href="https://www.youtube.com/playlist?list=PLeLGx0BaYD6aKZo6qUg3a6OmeSJjGLtZI">Image Processing using Python</a>« (14 sehr kurze Videos)</li>
<li>»<a href="https://www.youtube.com/playlist?list=PLeLGx0BaYD6bOe65-bgdFzeWy_7rpqxuC">Turtle Programs</a>« (26 (meist) ebenfalls sehr kurze Videos)</li>
</ul>
<p>Damit dürfte zumindest mein Videobedarf für das Wochenende gedeckt sein. <em>Still watching!</em></p>



 ]]></description>
  <category>Python</category>
  <category>Pygame</category>
  <category>Data Science</category>
  <category>Tiles und Sprites</category>
  <guid>https://kantel.github.io/posts/2023060901_pygame_python_tuts/index.html</guid>
  <pubDate>Fri, 09 Jun 2023 11:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023060901_pygame_python_tuts/images/pixelplatformer.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Pygbag objektorientiert – ein Template</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023060804_pygbag_oop/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52958185609/"><img src="https://kantel.github.io/posts/2023060804_pygbag_oop/images/pygbagoop-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Immer noch läßt mich <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygbag.html">Pygbag</a>, das kleine Tool, das <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a>-Spiele nach WebAssembly (WASM) kompiliert, so daß diese <a href="https://kantel.github.io/posts/2023060501_pygame_im_browser/">auch im Browser</a> laufen <a href="https://kantel.github.io/posts/2023060602_pygbag_nachschlag/">können</a>, nicht los. Und da mein Ziel momentan sowohl in <a href="https://kantel.github.io/posts/2023010701_pygame_oop/">Python und Pygame</a>, wie auch in <a href="https://kantel.github.io/posts/2023050203_javascript_oop_es6_p5js/">P5.js und P5.play</a> (JavaScript) auf einer sauberen, objektorientierten Implementierung ausgerichtet ist, hatte ich mich gestern hingesetzt und ein Template erstellt, daß meiner Vorstellung von Onjektorientierung in Python entspricht und das als Basis für weitere Programme gedacht ist.</p>
<p>Ich habe mich dabei weitestgehend an mein an <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/greenfoot.html">Greenfoot</a> angelehntes Pygame Framework gehalten, das ich im Januar schon einmal <a href="https://kantel.github.io/posts/2023010701_pygame_oop/">vorgestellt hatte</a>. Lediglich die Hauptschleife verlangte eine Abweichung von der reinen Lehre, da Pygbag nicht mitspielte. Denn ursprünglich hatte ich – analog zu der Pure-Pygame-Implementierung – in der Klasse <code>GameWorld</code> eine Methode <code>run()</code> vorgesehen, die die Hauptschleife wie folgt implementierte,</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> run(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-2">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Hauptschleife des Spiels</span></span>
<span id="cb1-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.keep_going:</span>
<span id="cb1-4">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.clock.tick(FPS)</span>
<span id="cb1-5">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.events()</span>
<span id="cb1-6">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.update()</span>
<span id="cb1-7">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.draw()</span>
<span id="cb1-8">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">await</span> asyncio.sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Very important, and keep it 0</span></span></code></pre></div>
<p>die ich im Programm (nachdem ich mit <code>world = GameWorld</code> eine Instanz der Spielewelt initalisiert hatte) wie folgt aufrufen wollte:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">async</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> main():</span>
<span id="cb2-2">    world.run()</span>
<span id="cb2-3"></span>
<span id="cb2-4">asyncio.run(main())</span></code></pre></div>
<p>Das funktionierte seltsamerweise zwar im Python-Interpreter, aber nicht mehr im Browser. Also habe ich die <code>run()</code>-Methode wieder gelöscht und die einzelnen <code>GameWorld</code>-Methoden hintereinander in der <code>main()</code>-Schleife aufgerufen:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">async</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> main():</span>
<span id="cb3-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> world.keep_going:</span>
<span id="cb3-3">        world.clock.tick(FPS)</span>
<span id="cb3-4">        world.events()</span>
<span id="cb3-5">        world.update()</span>
<span id="cb3-6">        world.draw()</span>
<span id="cb3-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">await</span> asyncio.sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Very important, and keep it 0</span></span>
<span id="cb3-8"></span>
<span id="cb3-9">asyncio.run(main())</span></code></pre></div>
<p>Das funktionierte dann sowohl im Python-Interpreter wie auch im Browser, wie Ihr an meinem auf <a href="https://itch.io/embed-upload/8067264?color=0484d1">Itch.io hochgeladenen Template</a> ausprobieren könnt.</p>
<iframe frameborder="0" src="https://itch.io/embed-upload/8067264?color=0484d1" allowfullscreen="" width="640" height="380">
<a href="https://kantel.itch.io/pygbag-oop-template">Play Pygbag OOP Template on itch.io</a>
</iframe>
<p>Es passiert noch nicht viel – es ist ja nur ein Template, aber mit den Tasten <code>a</code> (= Links), <code>d</code> (=&nbsp;rechts), <code>w</code> (= hoch) und <code>s</code> (= runter) könnt Ihr die kleine Spielekonsole durch das Fenster steuern. Damit habe ich (hoffentlich!) die Grundlagen gelegt, um mit den (teilweisen noch leeren) implementierten Methoden ein vollständiges Spiel zu entwickeln:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pygame <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pg</span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> asyncio</span>
<span id="cb4-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pygame.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">locals</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb4-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os, sys</span>
<span id="cb4-5"></span>
<span id="cb4-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Settings</span></span>
<span id="cb4-7">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">640</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 16x16: 40, 30; 32x32: 20, 15</span></span>
<span id="cb4-8">TITLE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pygame OOP Template"</span></span>
<span id="cb4-9">FPS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>                   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Frame per second</span></span>
<span id="cb4-10">PLAYER_WIDTH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span></span>
<span id="cb4-11">PLAYER_HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span></span>
<span id="cb4-12">PLAYER_SPEED <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb4-13"></span>
<span id="cb4-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Hier wird der Pfad zum Verzeichnis der Assets gesetzt</span></span>
<span id="cb4-15">DATAPATH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(os.getcwd(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>)</span>
<span id="cb4-16"></span>
<span id="cb4-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Farben</span></span>
<span id="cb4-18">BG_COLOR <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>)</span>
<span id="cb4-19"></span>
<span id="cb4-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Klassen</span></span>
<span id="cb4-21"></span>
<span id="cb4-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Class GameWorld</span></span>
<span id="cb4-23"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> GameWorld:</span>
<span id="cb4-24"></span>
<span id="cb4-25">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pygame und das Fenster initialisieren</span></span>
<span id="cb4-27">        pg.init()</span>
<span id="cb4-28">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.screen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.display.set_mode((WIDTH, HEIGHT))</span>
<span id="cb4-29">        pg.display.set_caption(TITLE)</span>
<span id="cb4-30"></span>
<span id="cb4-31">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.clock <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.time.Clock()</span>
<span id="cb4-32">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.keep_going <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb4-33"></span>
<span id="cb4-34">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> reset(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-35">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Neustart oder Status zurücksetzen</span></span>
<span id="cb4-36">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Hier werden alle Elemente der GameWorld initialisiert</span></span>
<span id="cb4-37">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.all_sprites <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.sprite.Group()</span>
<span id="cb4-38">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Player()</span>
<span id="cb4-39">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.all_sprites.add(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player)</span>
<span id="cb4-40">  </span>
<span id="cb4-41">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> events(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-42">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> event <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> pg.event.get():</span>
<span id="cb4-43">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> ((event.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pg.QUIT)</span>
<span id="cb4-44">                <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> (event.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pg.KEYDOWN</span>
<span id="cb4-45">                <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> event.key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pg.K_ESCAPE)):</span>
<span id="cb4-46">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.keep_going <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb4-47">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.game_over()</span>
<span id="cb4-48"></span>
<span id="cb4-49">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-50">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.all_sprites.update()</span>
<span id="cb4-51"></span>
<span id="cb4-52">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-53">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.screen.fill(BG_COLOR)</span>
<span id="cb4-54">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.all_sprites.draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.screen)</span>
<span id="cb4-55">        pg.display.flip()</span>
<span id="cb4-56"></span>
<span id="cb4-57">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> start_screen(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-58">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb4-59">    </span>
<span id="cb4-60">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> win_screen(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-61">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb4-62">    </span>
<span id="cb4-63">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> loose_screen(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-64">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb4-65"></span>
<span id="cb4-66">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> game_over(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-67">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print("Bye, Bye, Baby!")</span></span>
<span id="cb4-68">        pg.quit()</span>
<span id="cb4-69">        sys.exit()</span>
<span id="cb4-70"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Ende Class GameWorld</span></span>
<span id="cb4-71"></span>
<span id="cb4-72"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Class Player</span></span>
<span id="cb4-73"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Player(pg.sprite.Sprite):</span>
<span id="cb4-74"></span>
<span id="cb4-75">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-76">        pg.sprite.Sprite.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>)</span>
<span id="cb4-77">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load Image</span></span>
<span id="cb4-78">        img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.image.load(os.path.join(DATAPATH, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"platformchar_idle.png"</span>)).convert_alpha()</span>
<span id="cb4-79">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img</span>
<span id="cb4-80">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image.get_rect()</span>
<span id="cb4-81">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> WIDTH<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, HEIGHT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb4-82">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.speed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PLAYER_SPEED</span>
<span id="cb4-83">    </span>
<span id="cb4-84">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-85">        keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.key.get_pressed()</span>
<span id="cb4-86">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> keys[pg.K_w]:     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># UP</span></span>
<span id="cb4-87">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> PLAYER_HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>:</span>
<span id="cb4-88">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.speed</span>
<span id="cb4-89">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> keys[pg.K_s]:   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># DOWN</span></span>
<span id="cb4-90">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> PLAYER_HEIGHT:</span>
<span id="cb4-91">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.speed</span>
<span id="cb4-92">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> keys[pg.K_a]:   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># LEFT</span></span>
<span id="cb4-93">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> PLAYER_WIDTH:</span>
<span id="cb4-94">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.speed</span>
<span id="cb4-95">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> keys[pg.K_d]:   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># RIGHT</span></span>
<span id="cb4-96">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> WIDTH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> PLAYER_WIDTH:</span>
<span id="cb4-97">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.speed</span>
<span id="cb4-98">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb4-99">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb4-100">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb4-101">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.center <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y)</span>
<span id="cb4-102"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## End Class Player</span></span>
<span id="cb4-103"></span>
<span id="cb4-104"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Hauptprgramm</span></span>
<span id="cb4-105">world <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> GameWorld()</span>
<span id="cb4-106">world.start_screen()</span>
<span id="cb4-107">world.reset()</span>
<span id="cb4-108"></span>
<span id="cb4-109"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Hauptschleife</span></span>
<span id="cb4-110"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">async</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> main():</span>
<span id="cb4-111">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> world.keep_going:</span>
<span id="cb4-112">        world.clock.tick(FPS)</span>
<span id="cb4-113">        world.events()</span>
<span id="cb4-114">        world.update()</span>
<span id="cb4-115">        world.draw()</span>
<span id="cb4-116">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">await</span> asyncio.sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Very important, and keep it 0</span></span>
<span id="cb4-117"></span>
<span id="cb4-118">asyncio.run(main())</span></code></pre></div>
<p>Denn <a href="https://github.com/kantel/pygameprojects/tree/master/pygbagoop_template">Quellcode für dieses Template (mit den Assets und dem <code>build</code>-Folder)</a> habe ich auch wieder auf mein GitHub-Repositorium hochgeladen und das fertige Skript könnt Ihr – wie ich oben schon erwähnte – auch <a href="https://kantel.itch.io/pygbag-oop-template">auf Itch.io spielen</a>.</p>
<p>Die kleine gelbe Spielekonsole entstammt dem <a href="https://kantel.github.io/posts/2023060702_kenney_game_jam_2023/">gestern schon erwähnten</a> freien (<a href="https://creativecommons.org/share-your-work/public-domain/cc0/">CC0</a>) »<a href="https://kenney.nl/assets/simplified-platformer-pack">Simplified Platformer Pack</a>« von Kenney.nl.</p>
<p>Jetzt habe ich die Grundlagen für weitere Experimente mit Pygame im Browser gelegt. Schaun wir mal, was sich daraus noch entwickeln wird. <em>Still digging!</em></p>



 ]]></description>
  <category>Python</category>
  <category>Pygame</category>
  <category>Pygbag</category>
  <category>Spieleprogrammierung</category>
  <category>OOP</category>
  <guid>https://kantel.github.io/posts/2023060804_pygbag_oop/index.html</guid>
  <pubDate>Thu, 08 Jun 2023 16:10:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023060804_pygbag_oop/images/pygbagoop.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Das dritte Update für heute: Ren’Py 8.1</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023060803_renpy_8_1/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.renpy.org/static/8.1.jpg"><img src="https://kantel.github.io/posts/2023060803_renpy_8_1/images/renpy81-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Da habe ich lange darauf gewartet (und dann doch beinahe übersehen, weil mich die Ankündigung nur über das Gesichtsbuch erreichte): Von <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/renpy.html">Ren’Py</a>, der freien (MIT-Lizenz) Python basierten Engine für <em>Visual Novels</em>, interaktiver Geschichten und sonstiger Spielereien (zum Beispiel Präsentationen und <em>Edu-Games</em>) ist – zusammen mit der Version 7.6 für die, die nicht upgraden können – endlich die <a href="https://www.renpy.org/release/8.1.1">Version 8.1.1 erschienen</a>.</p>
<p>Warum ist das so wichtig und warum habe ich so lange darauf gewartet? Ren’Py 8.1 bringt die Möglichkeit zurück, auch direkt für das Web zu entwickeln. Diese Publikationsmöglichkeit war beim Update von 7.x auf die Version 8.0 vorübergehend eingestellt worden. Jetzt habe ich endlich wieder die Möglichkeit, meine geplante und leider schon etwas länger ruhende »Räuberpistole« <a href="https://kantel.github.io/posts/2022122102_alien_invasion_stage_1/">Alien Invasion</a> nicht nur als downloadbare Binaries für macOS, Linux und Windows auf <a href="https://kantel.itch.io/alien-attack-renpy-test">Itch.io hochzuladen</a>, sondern sie dort auch als »im Browser spielbar« zu veröffentlichen.</p>
<div style="float: right; margin-left: 12px; margin-top: 6px;">
<img src="https://kantel.github.io/posts/2023060803_renpy_8_1/images/renpy-logo.png" class="img-fluid">
</div>
<p>Da ich finde, daß Räuberpistolen auch ein großes Potential <a href="https://kantel.github.io/posts/2023060702_kenney_game_jam_2023/">für Game Jams haben</a>, freut mich dies natürlich ungemein.</p>
<p><strong>Was gibt es sonst noch Neues?</strong> Neben verbesserten Synchronisationsmöglichkeiten zwischen Desktop-Computern, Mobiltelephonen und Web-Versionene sind die Macher sehr stolz darauf, daß mit Ren’Py nun <em>out of the box</em> Sprechblasen möglich sind (damit muß auch ich auf jeden Fall als nächstes spielen). Daneben gibt es viele weiteren kleinen Neuerungen und Bug-Fixes, die Ihr alle im <a href="https://www.renpy.org/doc/html/changelog.html">Change Log</a> nachlesen könnt.</p>
<p>Ich habe die neue Version heruntergeladen und kann es kaum erwarten, damit loszulegen. Doch wie ich schon im <a href="https://kantel.github.io/posts/2023060802_jupyterlab_4/">letzten Beitrag schrieb</a>: So viel zu spielen, so wenig Zeit.</p>



 ]]></description>
  <category>RenPy</category>
  <category>Interactive Fiction</category>
  <category>Spieleprogrammierung</category>
  <guid>https://kantel.github.io/posts/2023060803_renpy_8_1/index.html</guid>
  <pubDate>Thu, 08 Jun 2023 13:50:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023060803_renpy_8_1/images/renpy81.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Noch ein Update: JupyterLab (Desktop) 4.0.1 ist draußen</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023060802_jupyterlab_4/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*Y3aNGoRED2q0pWjlHmr9wg.png"><img src="https://kantel.github.io/posts/2023060802_jupyterlab_4/images/jupyterlab401-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Die <em>Jupyter Community</em> ist stolz darauf, <a href="https://blog.jupyter.org/jupyterlab-4-0-is-here-388d05e03442">JupyterLab 4.0 anzukündigen</a>, die nächste große Version dieser voll ausgestatteten Entwicklungsumgebung für <em>Scientific Computing</em> mit Python. Das Paket ist jetzt auf PyPI und Conda-Forge verfügbar. Ihr könnt ein Upgrade durchführen, indem Ihr <code>pip install --upgrade jupyterlab</code> oder <code>conda install -c conda-forge jupyterlab</code> ausführt (mein JupyterLab Desktop hat automatisch im Hintergrund die neue Version heruntergeladen und verlangte nur noch per Klick einen Neustart, um das Update zu installieren). Auch die <a href="https://jupyterlab.readthedocs.io/en/latest/index.html">JupyterLab Documentation</a> wurde für diese neue Version angepaßt.</p>
<p>Neu sind vor allen Dingen eine massive <em>Performance</em>-Verbesserung und ein Update des Texteditors auf <a href="https://codemirror.net/">Code Mirror 6</a>. Neben der höheren Geschwindigkeit erwarten die Macher dadurch eine Verbesserung der <em>Accessibility</em> und flexiblere Anpassungsmöglichkeiten.</p>
<p>Daneben erfuhr unter anderem auch der Erweiterungs-Manager ein großes Update und die Suchfunktion und das Nutzer-Interface wurden verbessert. Außerdem wurden eine Reihe von <a href="https://github.com/jupyterlab/jupyterlab/releases/tag/v4.0.0rc0">Bugs ausgemerzt</a>.</p>
<p>Ich habs ja schon lange auf meiner Liste, ich sollte auch endlich mal etwas mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/jupyterlabdesktop.html">JupyterLab Desktop</a> anstellen. So viel zu spielen, so wenig Zeit!</p>



 ]]></description>
  <category>Jupyter</category>
  <category>JupyterLab Desktop</category>
  <guid>https://kantel.github.io/posts/2023060802_jupyterlab_4/index.html</guid>
  <pubDate>Thu, 08 Jun 2023 12:45:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023060802_jupyterlab_4/images/jupyterlab401.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Mozilla Thunderbird Version 102.12 freigegeben</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023060801_thunderbird_update/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.mutualart.com/Artwork/Lutspelerska/7872CDFD4C460AC2"><img src="https://kantel.github.io/posts/2023060801_thunderbird_update/images/lautenspielerin1918-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Wie so häufig folgt <a href="https://kantel.github.io/posts/2023060701_firefox_114/">einen Tag nach dem roten Panda</a> der Donnervogel: Die Entwickler des <a href="http://www.mozillamessaging.com/">Mozilla Thunderbird</a> haben das Update auf die Version 102.12 freigegeben und damit auch <a href="https://www.thunderbird.net/en-US/thunderbird/102.12.0/releasenotes/">Sicherheitslücken</a> behoben.</p>
<p>Thunderbird weist selbst auf dieses Update hin. Diese Prozedur kann aber auch wie immer über das Menü <code>Hilfe &gt; Über Thunderbird</code> angestoßen werden. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<p><em>(Bild: Anders Zorn (1860-1920): Lutspelerska (Die Lautenspielerin), 1918)</em></p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2023060801_thunderbird_update/index.html</guid>
  <pubDate>Thu, 08 Jun 2023 12:05:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023060801_thunderbird_update/images/lautenspielerin1918.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Kenney Game Jam 2023 – soll ich da teilnehmen?</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023060702_kenney_game_jam_2023/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://kenney.nl/media/pages/assets/simplified-platformer-pack/d5bb44c767-1677693195/preview.png"><img src="https://kantel.github.io/posts/2023060702_kenney_game_jam_2023/images/simple_platformer-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Mit der <a href="https://kantel.github.io/posts/2023060501_pygame_im_browser/">Entdeckung</a> von <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygbag.html">Pygbag</a> eröffnen sich mir ganz neue Möglichkeiten. Da es nun möglich ist, meine <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a>-Experimente im Browser spielbar zum Beispiel auf <a href="https://kantel.itch.io/">Itch.io</a> zu veröffentlichen, warum sollte ich dann nicht an einer der dort regelmäßig stattfindenden <a href="https://de.wikipedia.org/wiki/Game_Jam">Game Jams</a> teilnehmen?</p>
<p>Diese Frage stellte sich mir, nachdem ich über diese Ankündigung der <a href="https://itch.io/jam/kenney-jam-2023">Kenney Jam 2023</a> gestolpert bin. Sie findet vom 21. Juli 2023, 12:00 Uhr bis 23. Juli 2023, 12:00 Uhr, also über 48 Stunden, statt. Das Thema des Jam wird beim Start bekanntgegeben und die »Einschränkung« ist, daß nur <a href="https://kenney.nl/assets">Assets von Kenney.nl</a> verwendet werden dürfen.</p>
<p>Wenn das Thema irgendwie mein Interesse trifft, würde mich das schon reizen. Ich bin ja sowieso ein Fan von Kenney und ich finde die kleine gelbe, roboterähnliche Spielekonsole aus dem »<a href="https://kenney.nl/assets/simplified-platformer-pack">Simplified Platformer Pack</a>« ja extrem niedlich. Mit der würde ich gerne mal etwas anstellen. Ich habe ja noch nie an einer Game Jam teilgenommen (es wäre also eine Premiere für mich), aber ich habe auf jeden Fall den Termin der Jam schon einmal in meinem Kalender vermerkt. <em>Schaun wir mal.</em></p>
<p>Schon vor einem Jahr hatte Kenney in seinem Blog den Beitrag »<a href="https://kenney.nl/learn/improving-the-presentation-of-jam-games">Improving the presentation of jam games</a>« veröffentlicht, eine Kurzanleitung, wie man mit (s)einem Spiel auf einer Game Jam Eindruck schindet. Sicher nicht ohne Hintergedanken hat er auf diesen Beitrag auf Twitter vor ein paar Tagen noch einmal hingewiesen.</p>



 ]]></description>
  <category>Spieleprogrammierung</category>
  <category>Tiles und Sprites</category>
  <category>Pygame</category>
  <category>Pygbag</category>
  <guid>https://kantel.github.io/posts/2023060702_kenney_game_jam_2023/index.html</guid>
  <pubDate>Wed, 07 Jun 2023 13:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023060702_kenney_game_jam_2023/images/simple_platformer.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Mozilla veröffentlicht neue Firefox-Version</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023060701_firefox_114/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://upload.wikimedia.org/wikipedia/commons/thumb/1/15/Outdoors_%28Anders_Zorn%29_-_Gothenburg_Museum_of_Art_-_GKM_0256.tif/lossy-page1-1024px-Outdoors_%28Anders_Zorn%29_-_Gothenburg_Museum_of_Art_-_GKM_0256.tif.jpg"><img src="https://kantel.github.io/posts/2023060701_firefox_114/images/outdoors-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Die Entwickler des Mozilla Firefox haben die neue <a href="https://www.mozilla.org/en-US/firefox/114.0/releasenotes/">Version 114.0</a> und die <a href="https://www.mozilla.org/en-US/firefox/102.12.0/releasenotes/">Version ESR 192.12</a> veröffentlicht und darin auch wieder Sicherheitslücken behoben.</p>
<p>Firefox weist selbst auf dieses Update hin. Diese Prozedur kann aber auch wie immer über das Menü <code>Hilfe &gt; Über Firefox</code> angestoßen werden. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<p><em>(Bild: Anders Zorn (1860-1920): Outdoors, 1888, Bildquelle (<a href="https://creativecommons.org/licenses/by/4.0/deed.en">CC BY 4.0</a>): Gothenburg Museum of Art via <a href="https://commons.wikimedia.org/wiki/File:Outdoors_(Anders_Zorn)_-_Gothenburg_Museum_of_Art_-_GKM_0256.tif">Wikimedia Commons</a>)</em></p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2023060701_firefox_114/index.html</guid>
  <pubDate>Wed, 07 Jun 2023 12:35:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023060701_firefox_114/images/outdoors.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Wie man eine Zombie-Apokalypse überlebt – mit Pygame</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023060603_pygame_zombie_attacke/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="http://kidscancode.org/img/zombie_sample.gif"><img src="https://kantel.github.io/posts/2023060603_pygame_zombie_attacke/images/zombie_sample-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Die Playlist »<a href="https://www.youtube.com/playlist?list=PLsk-HSGFjnaGQq7ybM8Lgkh5EMxUWPm2i">Tile-based Game</a>« des Youtube-Kanals <em><a href="https://www.youtube.com/@Kidscancode">KidsCanCode</a></em> hat zwar schon einige Jahre auf dem Buckel (sechs um genau zu sein), aber dieser Zombie-Shooter gehörte seinerzeit zu den besten Tutorialreihen zu <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a>, die mir untergekommen waren. Zusätzlich gab es eine <a href="http://kidscancode.org/lessons/">Webseite</a> für alle Python-Tutorials, teilweise noch einmal als Textversion (leider nicht für das »Tile-based Game«).</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/3UxnelT9aCo" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Da ich durch meine <a href="https://kantel.github.io/posts/2023060501_pygame_im_browser/">jüngste Entdeckung</a> von <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygbag.html">Pygbag</a> motiviert bin, etwas mit Pygame anzustellen, das im Web lauffähig ist, habe ich diese Tutorials wieder hervorgekramt: Eine modernisierte, objektorientierte Fassung dieses Spiels zu programmieren (eventuell auch mit anderen Tiles und Sprites), ist seit gestern genau die Herausforderung, die ich brauche.</p>
<p>Wieso ich genau auf dieses Thema komme? Vor ein paar Tagen veröffentlichte die Berliner Zeitung, <a href="https://www.berliner-zeitung.de/panorama/marzahn-top-neukoelln-flop-die-sichersten-bezirke-waehrend-einer-zombie-apokalypse-in-berlin-li.354528">welche Berliner Ortsteile im Falle einer Zombie-Aokalypse sicher seien und welche nicht</a>. Das Marzahn der sicherste Berliner Ort sei, überraschte mich ein wenig, daß die Überlebenschancen in Neukölln nahe Null liegen, hingegen eher nicht. Und da will man doch vorbereitet sein.</p>



 ]]></description>
  <category>Pygame</category>
  <category>Spieleprogrammierung</category>
  <guid>https://kantel.github.io/posts/2023060603_pygame_zombie_attacke/index.html</guid>
  <pubDate>Tue, 06 Jun 2023 17:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023060603_pygame_zombie_attacke/images/zombie_sample.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Pygbag (2): Nachschlag zu »Pygame im Browser«</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023060602_pygbag_nachschlag/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52955310235/"><img src="https://kantel.github.io/posts/2023060602_pygbag_nachschlag/images/pizzaplaneitchioupdate-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Natürlich hat mich das <a href="https://kantel.github.io/posts/2023060501_pygame_im_browser/">gestern vorgestellte</a> Paket »<a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygbag.html">Pygbag</a>«, mit dem es möglich ist, <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a>-Skripte im Browser auszuführen, nicht in Ruhe gelassen, ich mußte noch ein wenig damit spielen. Dabei sind mir noch folgende Einzelheiten aufgefallen:</p>
<iframe frameborder="0" src="https://itch.io/embed-upload/8059129?color=00507d" allowfullscreen="" width="640" height="380">
<a href="https://kantel.itch.io/pygbag-test">Play Pygbag Test on itch.io</a>
</iframe>
<p>Die einfachste Möglichkeit, die Skripte in den eigenen Seiten – wie hier in diesem <del>Blog</del> Kritzelheft – auszuführen, ist die, nach dem <a href="https://kantel.itch.io/pygbag-test">Hochladen auf Itch.io</a> das dortige <em>Embed</em>-Widget zu nutzen (unter <code>Widgets -&gt; Embed Game</code>). Wer einen <a href="http://cognitiones.kantel-chaos-team.de/webworking/webservices/githubpages.html">GitHub Pages</a>-Account besitzt, kann sie auch von dort hosten (hier eine <a href="https://pygame-web.github.io/wiki/pygbag/github.io/">Anleitung</a>). Wie man sie ohne einen Dienst dazwischen zu schalten direkt in seine Webseite einbindet, habe ich noch nicht herausgefunden (einfach den Folder <code>web</code> hochzuladen und dann die dortige <code>index.html</code> per HTTP(S) aufzurufen, funktioniert nicht). Hier muß ich noch recherchieren, aber das Einbetten des Itch.io-Widgets hat ja auch seinen Charme (siehe oben).</p>
<p>Ähnlich wie bei <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/p5js.html">P5.js</a> und <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/trinket.html">Trinket</a> gibt es auch bei von Pygbag erzeugten Skripten bei bestimmten Tasten (Pfeiltasten, Space, etc.) Konflikte mit dem Browsern, die diese Tastatureingaben einfach an sich reißen. Ich habe daher für den kleinen Pizzaflieger oben die Tasten <code>a</code> (für <strong>aufwärts</strong>) und <code>d</code> (für <strong>down</strong>) als Steuerung implementiert (später soll auch noch <code>s</code> (für <strong>shoot</strong>) hinzukommen). Es empfiehlt sich, bevor man Tastatur- oder Mauskommandos implementiert, zu testen, ob sie sich mit den Browsern vertragen.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/tLsi2DeUsak" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Einer Fußnote habe ich entnommen, daß die Unterstützung der Physikbibliothek <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/pymunk.html">Pymunk</a> schon in Pygbag implementiert sein soll. In diesem Zusammenhang ist daher das Video »<a href="https://www.youtube.com/watch?v=tLsi2DeUsak">Physics Simulations With Python and PyMunk</a>« von großem Interesse, denn dann wären nicht nur Spiele, sondern auch Physik-Simulationen mit Pygame und Pymunk im Browser möglich.</p>
<p><strong>War sonst noch was?</strong> Ach ja, auch <a href="http://cognitiones.kantel-chaos-team.de/produktivitaet/visualstudiocode.html">Visual Studio Code</a> möchte in seiner <a href="https://vscode.dev/">Browser-Version</a> WebAssembly und die Ausführung von <a href="https://github.com/brettcannon/cpython-wasi-build/releases">Python-Code via WASM</a> unterstützen. Dazu gibt es in dem Beitrag »<a href="https://code.visualstudio.com/blogs/2023/06/05/vscode-wasm-wasi">Run WebAssemblies in VS Code for the Web</a>« so etwas wie eine Roadmap und eine Beschreibung, was aktuell schon möglich ist. Sicher nicht nur für Chromebook-Nutzer eine hochinteressante Entwicklung.</p>



 ]]></description>
  <category>Pygame</category>
  <category>Spieleprogrammierung</category>
  <category>Pygbag</category>
  <category>WASM</category>
  <guid>https://kantel.github.io/posts/2023060602_pygbag_nachschlag/index.html</guid>
  <pubDate>Tue, 06 Jun 2023 12:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023060602_pygbag_nachschlag/images/pizzaplaneitchioupdate.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Google Updates zum Juni-Patchday</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023060601_google_juni_patchday/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://arthive.net/res/media/img/oy800/work/619/544059.webp"><img src="https://kantel.github.io/posts/2023060601_google_juni_patchday/images/grauessofa-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Zum üblichen, monatlichen Google-Patchday trudelten dieses Mal die Updates sowohl für Android wie auch für den Chrome-Browser kurz hintereinander in meiner Mailbox ein, so daß ich sie auch einmal <em>en bloc</em> abhandeln kann:</p>
<section id="google-schließt-am-juni-patchday-wieder-sicherheitslücken-in-android" class="level3">
<h3 class="anchored" data-anchor-id="google-schließt-am-juni-patchday-wieder-sicherheitslücken-in-android">Google schließt am »Juni-Patchday« wieder Sicherheitslücken in Android</h3>
<p>Google hat mit seinem <a href="https://source.android.com/docs/security/bulletin/2023-06-01?hl=en">monatlichen Sicherheitsupdate</a> für Android (und damit auch auf seinen Pixel-Geräten) wieder Sicherheitslücken geschlossen.</p>
<p>Die Updates werden so nach und nach per OTA <em>(over the air)</em> auf Pixel 7a, Pixel 7/7 pro, Pixel 6a, Pixel 6/6 pro, Pixel 5,Pixel 4a 5G, Pixel 4a verteilt.</p>
<p>Die anderen Hersteller werden wie üblich in Bälde nachziehen, sofern sie überhaupt noch entsprechenden Support leisten.</p>
</section>
<section id="google-korrigiert-erneut-version-114-114.0.5735.106110-seines-browsers-chrome-kritische-sicherheitslücken" class="level3">
<h3 class="anchored" data-anchor-id="google-korrigiert-erneut-version-114-114.0.5735.106110-seines-browsers-chrome-kritische-sicherheitslücken">Google korrigiert erneut Version 114 (114.0.5735.106/110) seines Browsers Chrome kritische Sicherheitslücken</h3>
<p>Google veröffentlicht ein weiteres Update der Version 114 (114.0.5735.106/110) seines Browsers Chrome und schließt damit erneut <a href="https://chromereleases.googleblog.com/2023/06/stable-channel-update-for-desktop.html">kritische Sicherheitslücken</a>.</p>
<p>Chrome aktualisiert sich (außer bei Linux) über die integrierte Update-Funktion, kann aber – wenn es pressiert – auch <a href="https://www.google.com/intl/de/chrome/browser/">hier geladen</a> werden.</p>
<p><em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<p><em>(Bild: <a href="https://de.wikipedia.org/wiki/Anders_Zorn">Anders Zorn</a> (1860-1920): <a href="https://arthive.com/de/anderszorn/works/527757~Nackt_auf_einem_grauen_Sofa">Nackt auf einem grauen Sofa</a>, 1916)</em></p>


</section>

 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2023060601_google_juni_patchday/index.html</guid>
  <pubDate>Tue, 06 Jun 2023 10:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023060601_google_juni_patchday/images/grauessofa.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
