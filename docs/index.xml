<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Der Schockwellenreiter</title>
<link>https://kantel.github.io/index.html</link>
<atom:link href="https://kantel.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description>Schockwellenreiter</description>
<generator>quarto-1.2.269</generator>
<lastBuildDate>Sat, 11 Mar 2023 18:45:00 GMT</lastBuildDate>
<item>
  <title>Bug in Trinkets Turtle: Kein »ontimer()«</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023031101_trinket_turtle_ontimer/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52739945807/"><img src="https://kantel.github.io/posts/2023031101_trinket_turtle_ontimer/images/mazegameturtlethonny-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Es hatte seinen Grund, warum es die letzten zwei Tage hier im <del>Blog</del> Kritzelheft so ruhig war. Ich hatte nämlich weiter mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/trinket.html">Trinkets</a> Turtle an meinem <a href="https://kantel.github.io/posts/2023030601_maze_game_2/">Maze Game</a> gebastelt und bin über einen fetten Bug gestolpert, der sich leider auch nicht fixen ließ. Denn die Methode <code>turtle.ontimer()</code> ist zwar implementiert, funktioniert aber nicht, wie sie sollte.</p>
<p>Setzt man zum Beispiel mit</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="cf" style="color: #003B4F;">for</span> enemy <span class="kw" style="color: #003B4F;">in</span> enemies:</span>
<span id="cb1-2">  screen.ontimer(enemy.move, random.randint(<span class="dv" style="color: #AD0000;">100</span>, <span class="dv" style="color: #AD0000;">300</span>))</span></code></pre></div>
<p>einen Timer, dann sollte dieser für <strong>alle</strong> Enemies in dieser Liste funktionieren. Aber in Trinket wirkt er nur auf das erste Element der Liste, das diesen Timer aufruft, während alle anderen Enemies bewegungslos verharren. Natürlich habe ich mit</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1">    <span class="co" style="color: #5E5E5E;"># Reset timer  </span></span>
<span id="cb2-2">    screen.ontimer(<span class="va" style="color: #111111;">self</span>.move, random.randint(<span class="dv" style="color: #AD0000;">100</span>, <span class="dv" style="color: #AD0000;">300</span>))</span></code></pre></div>
<p>jeden Timer auch wieder zurückgesetzt, nachdem er konsumiert wurde, aber Trinkets Schildkröte ließ sich davon nicht beeindrucken. Sie dachte wohl: Einmal konsumiert, ist konsumiert, was kümmern mich die anderen Elemente der Liste.</p>
<p>Ich habe Stunden gebraucht, weil ich verständlicherweise den Fehler bei mir vermutete. Erst nachdem ich das Programm Eins-zu-Eins nach Thonny übertragen hatte und es dort (nachdem ich vorher noch alle <code>.png</code> nach <code>.gif</code> konvertierte) mit Pythons <a href="https://docs.python.org/3/library/turtle.html">System-Turtle</a> problemlos ohne weitere Änderungen lief (siehe <a href="https://www.flickr.com/photos/schockwellenreiter/52739945807/">Screenshot</a>), glaubte ich daran, daß der Fehler doch bei Trinket liegt.</p>
<p>Das ist natürlich ein absoluter Game-Stopper. Auf der anderen Seite hatte mir aber die Spielerei mit der Turtle riesigen Spaß gemacht und ich möchte sie fortführen. Daher werde ich mich erst einmal von Trinket abwenden und wieder mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/thonny.html">Thonny</a> und der Schildkröte in meinem Systempython spielen. Schließlich habe ich auch diese Kombination auf <a href="http://blog.schockwellenreiter.de/2021/12/2021120701.html">meinem Chromebook</a> zur <a href="http://blog.schockwellenreiter.de/2022/07/2022071501.html">Mitarbeit bewegen</a> können. Dafür muß ich in meinen Trinket-Dateien eigentlich nur die Einrückungen korrigieren (Trinket rückt immer nur um zwei statt der Python-üblichen vier Stellen ein).</p>
<p>Auf der anderen Seite sollte ich aber auch den <a href="https://kantel.github.io/posts/2023030902_codeguppy_alternative/">vorgestern vorgestellten</a> Webeditor von <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/p5js.html">P5.js</a> nicht aus den Augen verlieren. Schaun wir daher mal, was die Zukunft bringen wird. <em>Still digging!</em></p>



 ]]></description>
  <category>Python</category>
  <category>Trinket</category>
  <category>Turtle</category>
  <category>Thonny</category>
  <category>Spieleprogrammierung</category>
  <guid>https://kantel.github.io/posts/2023031101_trinket_turtle_ontimer/index.html</guid>
  <pubDate>Sat, 11 Mar 2023 18:45:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023031101_trinket_turtle_ontimer/images/mazegameturtlethonny.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Alternative zu CodeGuppy: P5.js-Webeditor mit P5.js-Widget</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023030902_codeguppy_alternative/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://editor.p5js.org/kantel/sketches/fxCUP6-9N"><img src="https://kantel.github.io/posts/2023030902_codeguppy_alternative/images/aliensidescroller-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Nachdem ich mir nun ein paar weitere Video-Tutorials des <a href="http://cognitiones.kantel-chaos-team.de/programmierung/ides/codeguppy.html">CodeGuppy</a> Evangelisten <em>Marian Veteanu</em> reingezogen habe, weiß ich nun auch, welche <em>Game Engine</em> hinter CodeGuppy werkelt. Es ist die ebenfalls freie, auf <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/p5js.html">P5.js</a> aufsetzende Engine <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/p5play.html">P5.play</a>. Jetzt fehlt mir nur noch die Turtle-Bibliothek des programmierenden Fisches, aber ich bin mir sicher, dieses Geheimnis ebenfalls in den Video-Tutorials von <em>Marian Veteanu</em> gelüftet werden wird. Und es sollte mich nicht wundern, wenn diese Bibliothek dann ebenfalls auf P5.js aufsetzt.</p>
<p>Es stellt sich mir aber schon jetzt die Frage nach einer Alternative zu CodeGuppy, die die Einschränkungen dieser Online-IDE (keine benutzereigenen Assets) umschifft. Und da bietet sich natürlich als erstes der <a href="https://editor.p5js.org/">P5.js Webeditor</a> an. Er ist eine vollständige P5.js-Entwicklungsumgebung mit Zugriff auf das Dateisystem (also die <code>index.html</code>, CSS-Dateien, Zusatz-Bibliotheken und Module sowie Dateien und Ordner für Assets). Das sind natürlich Features, die die angestrebte Einsteiger-Zielgruppe von CodeGuppy unter Umständen verwirren, aber das Fehlen dieser Features schänkt fortgeschrittene Anwender unnötig ein (auch wenn in der Beschränkung manchmal doch die Kraft liegt).</p>
<p>Ich habe also – speziell zur Nutzung mit <a href="http://blog.schockwellenreiter.de/2021/12/2021120701.html">meinem Chromebook</a> – meinen P5.js-Webeditor-Account wieder reaktiviert. Zwar bietet dieser auch beschränkt die Möglichkeit, ähnlich wie CodeGuppy oder <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/trinket.html">Trinket</a>, die Sketche in die eigene Webseite einzubinden, aber die volle Power bietet erst das <a href="https://toolness.github.io/p5.js-widget/">P5.js Widget</a>, das ich vor einem Jahr schon einmal im <em>Schockwellenreiter</em> <a href="http://blog.schockwellenreiter.de/2022/05/2022050701.html">vorgestellt hatte</a>. Daher habe ich auch dieses Teil nicht nur wieder hervorgekramt, sondern ihm auch <strong><a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/p5xjswidget.html">eine Seite</a></strong> in <a href="http://cognitiones.kantel-chaos-team.de/">meinem Wiki</a> spendiert.</p>
<p>Auch wenn ich zuerst meine Trinket-Experimente fortführen möchte, werde ich sicher bald etwas mit P5.js auf diesen Seiten anstellen. Und das nicht nur, weil – wie ich nicht müde werde zu betonen – JavaScript das nächste, große Ding ist. <em>Still digging!</em></p>



 ]]></description>
  <category>P5.js</category>
  <category>CodeGuppy</category>
  <category>P5.play</category>
  <guid>https://kantel.github.io/posts/2023030902_codeguppy_alternative/index.html</guid>
  <pubDate>Thu, 09 Mar 2023 17:10:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023030902_codeguppy_alternative/images/aliensidescroller.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Sicherheitsupdate des Foxit Reader</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023030901_foxit_update/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.lambiek.net/artists/image/c/cruikshank_george/cruikshank_monstrosities.jpg"><img src="https://kantel.github.io/posts/2023030901_foxit_update/images/cruikshankmonstrosities1825-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Mit der Version 12.1.1 des nicht nur unter Windows beliebten PDF Betrachters Foxit Reader haben die Entwickler auch <a href="https://www.foxit.com/support/security-bulletins.html">Schwachstellen</a> behoben.</p>
<p>Die neue Version kann <a href="https://www.foxitsoftware.com/downloads/#Foxit-Reader/">hier geladen</a> werden. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<p><em>(Bild: »Monstrosities of 1825« (1825): A cartoon ridiculing fashions of that year, Karikatur von <a href="https://www.lambiek.net/artists/c/cruikshank_george.htm">George Cruikshank</a>, 1825.)</em></p>



 ]]></description>
  <category>News</category>
  <guid>https://kantel.github.io/posts/2023030901_foxit_update/index.html</guid>
  <pubDate>Thu, 09 Mar 2023 15:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023030901_foxit_update/images/cruikshankmonstrosities1825.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Neu in meinem Wiki: CodeGuppy – JavaScript (nicht nur) für Kids</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023030802_codeguppy_online_ide/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52734214151/"><img src="https://kantel.github.io/posts/2023030802_codeguppy_online_ide/images/codeguppy-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Nachdem ich mir nun ein paar der <a href="https://kantel.github.io/posts/2023030701_code_guppy/">gestern vorgestellten</a> Videos reingezogen habe, muß ich ein paar Angaben präzisieren: Der Mensch hinter dem YouTube-Kanal »<a href="https://www.youtube.com/@CodingAdventures">Coding Adventures</a>« ist nicht der <em>Code Guppy</em> (auch wenn er unter diesem Namen in der Processing-Mailingliste auftritt), sondern es ist <em><a href="https://mveteanu.me/">Marian Veteanu</a></em>, ein Programmierer aus Florida und er ist so etwas wie der Botschafter der (freien) Online-IDE »<a href="https://codeguppy.com/">CodeGuppy</a>«, die es sich zur Aufgabe gemacht hat, Kindern und Jugendlichen sowie allen anderen an Informatik interessierten das Programmieren auf spielerische Weise beizubringen.</p>
<p>Dafür setzt CodeGuppy auf JavaScript, und zwar ein JavaScript, bei dem – soweit ich das bisher herausbekommen habe – eine aufgeborte Version von <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/p5js.html">P5.js</a>, eine JavaScript Turtle-Bibliothek und eine ziemich ausgefeilte Game Engine (welche weiß ich noch nicht) werkelt. Der CodeGuppy kann als Online-IDE für JavaScript ungefähr das, was auch <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/trinket.html">Trinket</a> für HTML5 und Python kann, auch die Benutzeroberfläche ist ähnlich gestrickt.</p>
<p>Nur eines scheint nicht möglich zu sein: CodeGuppy besitzt eine große Sammlung an Assets (Bilder, Sprites und Sounds), die man in den Projekten nutzen kann, aber ich habe bisher noch keinen Weg gefunden, eigene Assets hochzuladen und mit CodeGuppy zu nutzen. Zwar könnte man die Bilder und Töne irgendwo sonst im Netz hochladen und dann via HTTP(S) in seine Skripte einbinden, aber dafür müßte man die <em>same origin policy</em> von JavaScript aushebeln, ein Vorgehen, das ich guten Gewissens nicht empfehlen kann.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/a4nNNF4SWj8" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Aber vielleicht habe ich hier nur etwas übersehen? Was auf jeden Fall geht: CodeGuppy besitzt ein Modul, mit dem man eigene Sprites und Bilder als <strong>Code</strong> Pixel für Pixel erstellen und nutzen kann. Und zwar wird dafür ein Format benötigt, das offensichtlich auch auf <a href="https://arcade.makecode.com/">anderen Plattformen</a> Verwendung findet. Nähere Einzelheiten findet Ihr in dem Video »<a href="https://www.youtube.com/watch?v=a4nNNF4SWj8">Makes games with custom sprites</a>« aus der gestern schon vorgestellten Playlist »<a href="https://www.youtube.com/playlist?list=PLZld0zbNGbZRfjut6JI7ZLx8ZbTDa5zn-">JavaScript Coding Course</a>«.</p>
<p>Der CodeGuppy muß früher schon mal durch meinen Feedreader geschwommen sein, denn ich hatte dort schon einen Account, dessen Existenz ich aber völlig vergessen hatte. Aber ich habe ihm heute <strong><a href="http://cognitiones.kantel-chaos-team.de/programmierung/ides/codeguppy.html">eine Seite</a></strong> in <a href="http://cognitiones.kantel-chaos-team.de/">meinem Wiki</a> spendiert, denn im Rahmen <a href="http://blog.schockwellenreiter.de/2021/12/2021120701.html">meiner Chromebook-Nutzung</a> bekommen Online-IDEs wie Trinket oder eben der CodeGuppy einen ganz neuen Stellenwert.</p>



 ]]></description>
  <category>CodeGuppy</category>
  <category>JavaScript</category>
  <category>P5.js</category>
  <category>Creative Coding</category>
  <category>Spieleprgrammierung</category>
  <guid>https://kantel.github.io/posts/2023030802_codeguppy_online_ide/index.html</guid>
  <pubDate>Wed, 08 Mar 2023 18:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023030802_codeguppy_online_ide/images/codeguppy.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Google stopft wieder Sicherheitslöcher in Chrome</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023030801_chrome_update/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.gallery.ca/sites/default/files/50025847_0.jpg"><img src="https://kantel.github.io/posts/2023030801_chrome_update/images/ahsoeinpaar-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Google veröffentlicht ein neues Update der Version 111 (111.0.5563.64/65) seines Browsers Chrome und schließt erneut kritische <a href="https://chromereleases.googleblog.com/2023/03/stable-channel-update-for-desktop.html">Sicherheitslücken</a>.</p>
<p>Chrome aktualisiert sich (außer bei Linux) über die integrierte Update-Funktion, kann aber – wenn es pressiert – auch <a href="https://www.google.com/intl/de/chrome/browser/">hier geladen</a> werden. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<p><em>Bild: »Ah! Sure Such a Pair …«, Karikatur von <a href="https://de.wikipedia.org/wiki/George_Cruikshank">George Cruikshank</a>, 1820, Quelle: <a href="https://www.gallery.ca/collection/artwork/ah-sure-such-a-pair">National Gallery of Canada</a>.</em></p>



 ]]></description>
  <category>News</category>
  <guid>https://kantel.github.io/posts/2023030801_chrome_update/index.html</guid>
  <pubDate>Wed, 08 Mar 2023 15:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023030801_chrome_update/images/ahsoeinpaar.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Nord-Stream-Anschlag: Ach, es war doch nicht der Russe?</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023030702_nord_stream-anschlag/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://bostonraremaps.com/wp-content/uploads/2019/12/BRM3466-Cruikshank-Lacing-in-Style-1819_lowres-3000x1938.jpg"><img src="https://kantel.github.io/posts/2023030702_nord_stream-anschlag/images/dandiesnavy-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p><strong>Alle Spuren führen in die Ukraine</strong>: <a href="https://www.tagesschau.de/investigativ/nord-stream-explosion-101.html">Deutsche Ermittlungsbehörden haben bei der Aufklärung der Anschläge auf die Nord-Stream-Pipeline offenbar einen Durchbruch erzielt</a>. Nach einer gemeinsamen Recherche des ARD-Hauptstadtstudios, des ARD-Politikmagazins <em>Kontraste</em>, des <em>SWR</em> und der <em>ZEIT</em> konnte im Zuge der Ermittlungen weitgehend rekonstruiert werden, wie und wann der Sprengstoffanschlag vorbereitet wurde. Demnach führen Spuren in Richtung Ukraine.</p>
<p>Ach, es war also doch nicht der pöse Putin? Westliche Politiker wußten wohl schon lange von dem Verdacht, denn bereits im Herbst, also kurz nach der Zerstörung, soll ein westlicher Geheimdienst einen Hinweis an europäische Partnerdienste übermittelt haben, wonach ein ukrainisches Kommando für die Zerstörung verantwortlich sei. Danach soll es weitere geheimdienstliche Hinweise gegeben haben, die darauf hindeuten, daß eine pro-ukrainische Gruppe verantwortlich sein könnte.</p>
<p>Die Ukraine spielt derweil Hase: Angeblich wohne sie im Walde und <a href="https://www.tagesschau.de/newsticker/liveblog-ukraine-dienstag-223.html#Selenskyj-Berater-Ukraine-vollkommen-unbeteilgt">weiß von nichts</a>, so ein Selenskyj-Berater. Denn der erste Verlierer im Krieg ist immer die Wahrheit.</p>



 ]]></description>
  <category>Ukraine</category>
  <guid>https://kantel.github.io/posts/2023030702_nord_stream-anschlag/index.html</guid>
  <pubDate>Tue, 07 Mar 2023 19:40:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023030702_nord_stream-anschlag/images/dandiesnavy.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Der Code Guppy lehrt uns (und Euch) JavaScript mit P5.js</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023030701_code_guppy/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.youtube.com/watch?v=a4nNNF4SWj8"><img src="https://kantel.github.io/posts/2023030701_code_guppy/images/p5sharks-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Ich hatte ja schon lange keine Video-Tutorials mehr (mir war einfach nichts Interessantes in meinen Feedreader gespült worden), aber heute kam mir der <em>Code Guppy</em> unter. Der betreibt den Kanal »<a href="https://www.youtube.com/@CodingAdventures">Coding Adventures</a>« und dieser besteht ausschließlich aus Video-Tutorials zu JavaScript im Allgemeinen und der JavaScript-Processing-Variante <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/p5js.html">P5.js</a> im Besonderen, die er in drei Playlists zusammengefaßt hat:</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/CIBKUC4TR18" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<ol type="1">
<li>»<a href="https://www.youtube.com/playlist?list=PLZld0zbNGbZT9p6CjPR4wWJ1rHoq2YKMf">LeetCode in JavaScript</a>« (bisher drei Videos).</li>
<li>Das <a href="https://www.youtube.com/watch?v=CIBKUC4TR18">obige Video</a> entstammt aus der Playlist »<a href="https://www.youtube.com/playlist?list=PLZld0zbNGbZSLmJhOam5QRKn7xGHgK0c0">Coding Projects</a>«, die aus 16 Video-Tutorials besteht.</li>
<li>Die umfagreichste Playlist heißt »<a href="https://www.youtube.com/playlist?list=PLZld0zbNGbZRfjut6JI7ZLx8ZbTDa5zn-">JavaScript Coding Course</a>« und besteht aus sagenhaften 24 Videos.</li>
</ol>
<p>Ihr seht schon, bis auf die erste Playlist sind die anderen sehr umfangreich (Laufzeiten von mehr als eine Stunde je Tutorial sind keine Seltenheit) – Ihr solltet Euch daher für die Erkundung Zeit reservieren.</p>
<p>Zwar ist das jüngste Update schon fünf Monate alt, aber der programmierende Guppy ist in der Processing-Playlist sehr aktiv, daher hoffe ich bald auf weitere Updates.</p>
<p>Und ich habe große Lust, einige seiner Beispielprogramme nach Python mit der <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/trinket.html">Trinket</a>-Version von Processing zu portieren. Daher <em>still digging!</em></p>



 ]]></description>
  <category>P5.js</category>
  <category>Processing</category>
  <category>Creative Coding</category>
  <category>Spieleprogrammierung</category>
  <guid>https://kantel.github.io/posts/2023030701_code_guppy/index.html</guid>
  <pubDate>Tue, 07 Mar 2023 18:40:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023030701_code_guppy/images/p5sharks.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Abenteuer Trinket geht weiter: Maze Game Stage 2</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023030601_maze_game_2/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52730484104/"><img src="https://kantel.github.io/posts/2023030601_maze_game_2/images/mazegametrinketstage2-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Es ging kein Weg daran vorbei – ich mußte heute weiter mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/trinket.html">Trinket</a> spielen und meine <a href="https://kantel.github.io/posts/2023030501_maze_game_1/">gestern begonnenen Experimente</a> mit der Turtle und dem Labyrinth fortsetzen. Ich habe dem Spiel einen Ausgang und einen Schlüssel spendiert. Nimmt der Spieler diesen magischen Schlüssel, öffnet sich die Tür und er kann dem Irrgarten entkommen. Damit kann das Spiel gewonnen werden.</p>
<iframe src="https://trinket.io/embed/python/51a1daf8f0?toggleCode=true&amp;start=result" width="100%" height="600" frameborder="0" marginwidth="0" marginheight="0" allowfullscreen="">
</iframe>
<p>Ich habe dieses mal das Trinket komplett eingebunden (ich möchte testen, was sinnvoller ist). Wenn Ihr auf den Stift oben in der Menüleiste klickt, könnt Ihr Euch den Quellcode anschauen und auch editieren. Das Symbol rechts daneben (entweder ein Quadrat oder ein Dreick) startet und stoppt das Spiel.</p>
<p>Den <a href="https://github.com/kantel/trinket/tree/main/maze_game/stage2">Quellcode und alle bisher verwendeten Assets</a> gibt es auch in meinem GitHub-Repositorium und wie immer könnt Ihr auch <a href="https://trinket.io/python/51a1daf8f0">auf Trinket</a> das Spiel kopieren und Eure eigene Version erstellen. Habt Spaß damit.</p>
<p>Ich selber möchte als nächstes dem Zauberer einige Gegner in den Weg stellen, damit die Flucht aus dem Irrgarten auch eine echte Herausforderung darstellt. <em>Still digging!</em></p>



 ]]></description>
  <category>Trinket</category>
  <category>Python</category>
  <category>Turtle</category>
  <category>Spieleprogrammierung</category>
  <guid>https://kantel.github.io/posts/2023030601_maze_game_2/index.html</guid>
  <pubDate>Mon, 06 Mar 2023 19:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023030601_maze_game_2/images/mazegametrinketstage2.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Abenteuer Trinket: Maze Game Stage 1</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023030501_maze_game_1/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52727313297/"><img src="https://kantel.github.io/posts/2023030501_maze_game_1/images/mazegame1-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Das Abenteuer <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/trinket.html">Trinket</a> geht weiter, denn die Beschäftigung mit dieser extrem leistungsfähigen Online-IDE macht einfach Spaß. Daher habe ich ein weiteres Spiel hervorgekramt, das ich <a href="http://blog.schockwellenreiter.de/2022/04/2022041901.html">schon vor einem Jahr</a> in <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygamezero.html">Pygame Zero</a> implementiert hatte. Damals sollte es eigentlich als künftige Blaupause für mein Projekt »<a href="http://blog.schockwellenreiter.de/2022/04/2022041401.html">Retrogaming und Künstliche Intelligenz</a>« dienen. Dann war ich jedoch zu der Überzeugung gekommen, daß Pygame Zero doch nicht die richtige Umgebung dafür sei. Eigentlich tendierte ich dann zu <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a>, ohne die Idee jedoch weiter zu verfolgen. Vielleicht bringt nun Trinket (das ja sowohl eine Art von <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processing.html">Processing</a>(<a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processingpy.html">.py</a>) wie auch eine Turtle bewegen kann) wieder neuen Schwung in die Angelegenheit.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/inocKE13DEA" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Auf jeden Fall habe ich mir dafür zum wiederholten Male die Playlist »<a href="https://www.youtube.com/playlist?list=PLlEgNdBJEO-lNDJgg90fmfAq9RzORkQWP">Python Maze Game Tutorial</a>« von <em>Christian Thompson</em><sup>1</sup> hereingezogen und begonnen, daraus eine Version in Trinket zu erstellen. Während mein <a href="https://kantel.github.io/posts/2023030201_space_war_trinket/">letzter Versuch mit Trinket und der Turtle</a> alles rausholte, was aus Trinket rauszuholen war, sollte es diesmal etwas anfängerfreundlicher und übersichtlicher werden. Daher sind auch mehrere Lieferungen geplant.</p>
<iframe src="https://trinket.io/embed/python/46a2d36061?outputOnly=true&amp;runOption=run&amp;start=result" width="100%" height="600" frameborder="0" marginwidth="0" marginheight="0" allowfullscreen="">
</iframe>
<p>Die heutige erste Lieferung zeigt ein kleines Labyrinth<sup>2</sup>, durch das der mit den Pfeiltasten gesteuerte Spieler irren kann. Er kann auf seinem Irrweg drei Schatzkästlein leeren und schließlich auch unten rechts den Irrgarten verlassen. Damit endet dann auch das Spiel.</p>
<p>Im Gegensatz zu der Version von <em>Christian Thompson</em>, der – bedingt durch die Einschränkungen von Pythons Standard-Turtle – nur 24x24 Pixel große Sprites vewenden konnte, konnte ich – da Trinket hier keine Einschränkungen besitzt – auf 16x16 große Tiles und Sprites zurückgreifen. In der momentanen Version habe ich für die Mauern ein Tile aus Kenneys – wie immer freien (<a href="https://creativecommons.org/publicdomain/zero/1.0/">CCO 1.0 Universal</a>) – <a href="https://www.kenney.nl/assets/bit-pack">1-Bit-Pack</a> verwendet, da es zwischen den einzelnen Elementen jeweils einen Rand läßt, so daß man den Aufbau des Irrgarten nachvollziehen kann. Später möchte ich jedoch – wie hier schon <a href="https://kantel.github.io/posts/2023022701_turtle_trinket/">angekündigt</a> – auf Kenneys ebenfalls unter <em>CCO 1.0 Universal</em> stehende <a href="https://kenney.nl/assets/tiny-dungeon">Tiny Dungeon Tileset</a> nebst der dazugehörenden <a href="https://kenney.nl/assets/tiny-town">Tiny Town Erweiterung</a> zurückgreifen. Die Figur des Zauberers wie auch die Schatzkästlein habe ich jedenfalls schon aus diesem Tile- und Spriteset entnommen<sup>3</sup>.</p>
<p>Doch jetzt erst einmal den kompletten Quellcode, damit Ihr das Spiel nachvollziehen und auf Wunsch auch eweitern könnt:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> turtle, math</span>
<span id="cb1-2"></span>
<span id="cb1-3">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">440</span>, <span class="dv" style="color: #AD0000;">440</span></span>
<span id="cb1-4">WALL   <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">63</span></span>
<span id="cb1-5">DOOR   <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">62</span></span>
<span id="cb1-6">CHEST  <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">22</span></span>
<span id="cb1-7">PLAYER <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb1-8">TILESIZE <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">16</span></span>
<span id="cb1-9"></span>
<span id="cb1-10">maze_map_0 <span class="op" style="color: #5E5E5E;">=</span> [[<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>],</span>
<span id="cb1-11">            [<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">10</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>],</span>
<span id="cb1-12">            [<span class="dv" style="color: #AD0000;">63</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>],</span>
<span id="cb1-13">            [<span class="dv" style="color: #AD0000;">63</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>],</span>
<span id="cb1-14">            [<span class="dv" style="color: #AD0000;">63</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>],</span>
<span id="cb1-15">            [<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>],</span>
<span id="cb1-16">            [<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>],</span>
<span id="cb1-17">            [<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>],</span>
<span id="cb1-18">            [<span class="dv" style="color: #AD0000;">63</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">22</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>],</span>
<span id="cb1-19">            [<span class="dv" style="color: #AD0000;">63</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>],</span>
<span id="cb1-20">            [<span class="dv" style="color: #AD0000;">63</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>],</span>
<span id="cb1-21">            [<span class="dv" style="color: #AD0000;">63</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>],</span>
<span id="cb1-22">            [<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">22</span>,<span class="dv" style="color: #AD0000;">63</span>],</span>
<span id="cb1-23">            [<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">63</span>],</span>
<span id="cb1-24">            [<span class="dv" style="color: #AD0000;">63</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">63</span>],</span>
<span id="cb1-25">            [<span class="dv" style="color: #AD0000;">63</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">63</span>],</span>
<span id="cb1-26">            [<span class="dv" style="color: #AD0000;">63</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>],</span>
<span id="cb1-27">            [<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>],</span>
<span id="cb1-28">            [<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">63</span>],</span>
<span id="cb1-29">            [<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">22</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">63</span>],</span>
<span id="cb1-30">            [<span class="dv" style="color: #AD0000;">63</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>],</span>
<span id="cb1-31">            [<span class="dv" style="color: #AD0000;">63</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>],</span>
<span id="cb1-32">            [<span class="dv" style="color: #AD0000;">63</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">63</span>],</span>
<span id="cb1-33">            [<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">62</span>],</span>
<span id="cb1-34">            [<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>,<span class="dv" style="color: #AD0000;">63</span>]]</span>
<span id="cb1-35"></span>
<span id="cb1-36">screen <span class="op" style="color: #5E5E5E;">=</span> turtle.Screen()</span>
<span id="cb1-37">screen.setup(WIDTH, HEIGHT)</span>
<span id="cb1-38">screen.bgcolor(<span class="st" style="color: #20794D;">"#2b3e50"</span>)</span>
<span id="cb1-39"></span>
<span id="cb1-40"><span class="co" style="color: #5E5E5E;"># Bildschirm-Refresh ausschalten</span></span>
<span id="cb1-41">screen.tracer(<span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb1-42"></span>
<span id="cb1-43"><span class="co" style="color: #5E5E5E;"># Die Turtle-Bilder registrieren</span></span>
<span id="cb1-44">images <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">"wall1.png"</span>, <span class="st" style="color: #20794D;">"wizard.png"</span>, <span class="st" style="color: #20794D;">"chest.png"</span>, <span class="st" style="color: #20794D;">"key.png"</span>]</span>
<span id="cb1-45"><span class="cf" style="color: #003B4F;">for</span> image <span class="kw" style="color: #003B4F;">in</span> images:</span>
<span id="cb1-46">  screen.addshape(image)</span>
<span id="cb1-47"></span>
<span id="cb1-48"><span class="kw" style="color: #003B4F;">class</span> Player(turtle.Turtle):</span>
<span id="cb1-49">  </span>
<span id="cb1-50">  <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-51">    turtle.Turtle.<span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>)</span>
<span id="cb1-52">    <span class="va" style="color: #111111;">self</span>.penup()</span>
<span id="cb1-53">    <span class="va" style="color: #111111;">self</span>.right(<span class="dv" style="color: #AD0000;">270</span>)</span>
<span id="cb1-54">    <span class="va" style="color: #111111;">self</span>.shape(<span class="st" style="color: #20794D;">"wizard.png"</span>)</span>
<span id="cb1-55">    <span class="va" style="color: #111111;">self</span>.speed(<span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb1-56">    <span class="va" style="color: #111111;">self</span>.gold <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb1-57">    </span>
<span id="cb1-58">  <span class="co" style="color: #5E5E5E;"># Player Movement</span></span>
<span id="cb1-59">  <span class="kw" style="color: #003B4F;">def</span> go_up(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-60">    next_x, next_y <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.xcor(), <span class="va" style="color: #111111;">self</span>.ycor() <span class="op" style="color: #5E5E5E;">+</span> TILESIZE</span>
<span id="cb1-61">    <span class="cf" style="color: #003B4F;">if</span> (next_x, next_y) <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> walls:</span>
<span id="cb1-62">      <span class="va" style="color: #111111;">self</span>.goto(next_x, next_y)</span>
<span id="cb1-63">    </span>
<span id="cb1-64">  <span class="kw" style="color: #003B4F;">def</span> go_down(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-65">    next_x, next_y <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.xcor(), <span class="va" style="color: #111111;">self</span>.ycor() <span class="op" style="color: #5E5E5E;">-</span> TILESIZE</span>
<span id="cb1-66">    <span class="cf" style="color: #003B4F;">if</span> (next_x, next_y) <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> walls:</span>
<span id="cb1-67">      <span class="va" style="color: #111111;">self</span>.goto(next_x, next_y)</span>
<span id="cb1-68">    </span>
<span id="cb1-69">  <span class="kw" style="color: #003B4F;">def</span> go_left(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-70">    next_x, next_y <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.xcor() <span class="op" style="color: #5E5E5E;">-</span> TILESIZE, <span class="va" style="color: #111111;">self</span>.ycor()</span>
<span id="cb1-71">    <span class="cf" style="color: #003B4F;">if</span> (next_x, next_y) <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> walls:</span>
<span id="cb1-72">      <span class="va" style="color: #111111;">self</span>.goto(next_x, next_y)</span>
<span id="cb1-73">    </span>
<span id="cb1-74">  <span class="kw" style="color: #003B4F;">def</span> go_right(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-75">    next_x, next_y <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.xcor() <span class="op" style="color: #5E5E5E;">+</span> TILESIZE, <span class="va" style="color: #111111;">self</span>.ycor()</span>
<span id="cb1-76">    <span class="cf" style="color: #003B4F;">if</span> (next_x, next_y) <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> walls:</span>
<span id="cb1-77">      <span class="va" style="color: #111111;">self</span>.goto(next_x, next_y)</span>
<span id="cb1-78">      </span>
<span id="cb1-79">  <span class="co" style="color: #5E5E5E;"># Kollisionserkennung (Pythagoras)</span></span>
<span id="cb1-80">  <span class="kw" style="color: #003B4F;">def</span> is_collision(<span class="va" style="color: #111111;">self</span>, other):</span>
<span id="cb1-81">    a <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.xcor() <span class="op" style="color: #5E5E5E;">-</span> other.xcor()</span>
<span id="cb1-82">    b <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.ycor() <span class="op" style="color: #5E5E5E;">-</span> other.ycor()</span>
<span id="cb1-83">    distance <span class="op" style="color: #5E5E5E;">=</span> math.sqrt((a<span class="op" style="color: #5E5E5E;">**</span><span class="dv" style="color: #AD0000;">2</span>) <span class="op" style="color: #5E5E5E;">+</span> (b<span class="op" style="color: #5E5E5E;">**</span><span class="dv" style="color: #AD0000;">2</span>))</span>
<span id="cb1-84">    <span class="cf" style="color: #003B4F;">if</span> distance <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">5</span>:</span>
<span id="cb1-85">      <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">True</span></span>
<span id="cb1-86">    <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb1-87">      <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">False</span></span>
<span id="cb1-88"></span>
<span id="cb1-89"><span class="kw" style="color: #003B4F;">class</span> Wall(turtle.Turtle):</span>
<span id="cb1-90">  </span>
<span id="cb1-91">  <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-92">    turtle.Turtle.<span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>)</span>
<span id="cb1-93">    <span class="va" style="color: #111111;">self</span>.penup()</span>
<span id="cb1-94">    <span class="va" style="color: #111111;">self</span>.shape(<span class="st" style="color: #20794D;">"wall1.png"</span>)</span>
<span id="cb1-95">    <span class="va" style="color: #111111;">self</span>.speed(<span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb1-96"></span>
<span id="cb1-97"><span class="kw" style="color: #003B4F;">class</span> Chest(turtle.Turtle):</span>
<span id="cb1-98">  </span>
<span id="cb1-99">  <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, _x, _y):</span>
<span id="cb1-100">    turtle.Turtle.<span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>)</span>
<span id="cb1-101">    <span class="va" style="color: #111111;">self</span>.penup()</span>
<span id="cb1-102">    <span class="va" style="color: #111111;">self</span>.right(<span class="dv" style="color: #AD0000;">270</span>)</span>
<span id="cb1-103">    <span class="va" style="color: #111111;">self</span>.shape(<span class="st" style="color: #20794D;">"chest.png"</span>)</span>
<span id="cb1-104">    <span class="va" style="color: #111111;">self</span>.speed(<span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb1-105">    <span class="va" style="color: #111111;">self</span>.gold <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">100</span></span>
<span id="cb1-106">    <span class="va" style="color: #111111;">self</span>.goto(_x, _y)</span>
<span id="cb1-107">  </span>
<span id="cb1-108">  <span class="kw" style="color: #003B4F;">def</span> destroy(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-109">    <span class="va" style="color: #111111;">self</span>.goto(<span class="dv" style="color: #AD0000;">2000</span>, <span class="dv" style="color: #AD0000;">2000</span>)</span>
<span id="cb1-110">    <span class="va" style="color: #111111;">self</span>.hideturtle()</span>
<span id="cb1-111">  </span>
<span id="cb1-112">levels <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb1-113">levels.append(maze_map_0)</span>
<span id="cb1-114"></span>
<span id="cb1-115"><span class="kw" style="color: #003B4F;">def</span> setup_maze(level):</span>
<span id="cb1-116">  <span class="cf" style="color: #003B4F;">for</span> y <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="bu" style="color: null;">len</span>(level)):</span>
<span id="cb1-117">    <span class="cf" style="color: #003B4F;">for</span> x <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="bu" style="color: null;">len</span>(level[y])):</span>
<span id="cb1-118">      <span class="co" style="color: #5E5E5E;"># Get the mumber of every item in the mace</span></span>
<span id="cb1-119">      item_number <span class="op" style="color: #5E5E5E;">=</span> level[y][x]</span>
<span id="cb1-120">      <span class="co" style="color: #5E5E5E;"># Berechne die Bildschirmkoordinaten</span></span>
<span id="cb1-121">      screen_x <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">192</span> <span class="op" style="color: #5E5E5E;">+</span> (x<span class="op" style="color: #5E5E5E;">*</span>TILESIZE)</span>
<span id="cb1-122">      screen_y <span class="op" style="color: #5E5E5E;">=</span>  <span class="dv" style="color: #AD0000;">192</span> <span class="op" style="color: #5E5E5E;">-</span> (y<span class="op" style="color: #5E5E5E;">*</span>TILESIZE)</span>
<span id="cb1-123">      </span>
<span id="cb1-124">      <span class="co" style="color: #5E5E5E;"># Prüfe, ob Item ein Wall ist</span></span>
<span id="cb1-125">      <span class="cf" style="color: #003B4F;">if</span> item_number <span class="op" style="color: #5E5E5E;">==</span> WALL:</span>
<span id="cb1-126">        wall.goto(screen_x, screen_y)</span>
<span id="cb1-127">        wall.stamp()</span>
<span id="cb1-128">        walls.append((screen_x, screen_y))</span>
<span id="cb1-129">        </span>
<span id="cb1-130">      <span class="co" style="color: #5E5E5E;"># Prüfe, ob Item der Spieler ist</span></span>
<span id="cb1-131">      <span class="cf" style="color: #003B4F;">if</span> item_number <span class="op" style="color: #5E5E5E;">==</span> PLAYER:</span>
<span id="cb1-132">        player.goto(screen_x, screen_y)</span>
<span id="cb1-133">        </span>
<span id="cb1-134">      <span class="co" style="color: #5E5E5E;"># Prüfe, ob Item eine Schatztrue ist</span></span>
<span id="cb1-135">      <span class="cf" style="color: #003B4F;">if</span> item_number <span class="op" style="color: #5E5E5E;">==</span> CHEST:</span>
<span id="cb1-136">        chests.append(Chest(screen_x, screen_y))</span>
<span id="cb1-137"></span>
<span id="cb1-138">wall <span class="op" style="color: #5E5E5E;">=</span> Wall()</span>
<span id="cb1-139">walls <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb1-140">chests <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb1-141">player <span class="op" style="color: #5E5E5E;">=</span> Player()</span>
<span id="cb1-142"></span>
<span id="cb1-143"><span class="co" style="color: #5E5E5E;"># Level Setup</span></span>
<span id="cb1-144">setup_maze(levels[<span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb1-145"></span>
<span id="cb1-146"><span class="co" style="color: #5E5E5E;"># Das Spiel beenden</span></span>
<span id="cb1-147"><span class="kw" style="color: #003B4F;">def</span> exit_game():</span>
<span id="cb1-148">  <span class="kw" style="color: #003B4F;">global</span> keep_going</span>
<span id="cb1-149">  <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Bye, bye, Baby"</span>)</span>
<span id="cb1-150">  keep_going <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">False</span></span>
<span id="cb1-151"></span>
<span id="cb1-152"><span class="co" style="color: #5E5E5E;"># Auf Tastaturereignisse lauschen</span></span>
<span id="cb1-153">screen.listen()</span>
<span id="cb1-154">screen.onkey(player.go_up, <span class="st" style="color: #20794D;">"Up"</span>)</span>
<span id="cb1-155">screen.onkey(player.go_down, <span class="st" style="color: #20794D;">"Down"</span>)</span>
<span id="cb1-156">screen.onkey(player.go_left, <span class="st" style="color: #20794D;">"Left"</span>)</span>
<span id="cb1-157">screen.onkey(player.go_right, <span class="st" style="color: #20794D;">"Right"</span>)</span>
<span id="cb1-158"></span>
<span id="cb1-159">screen.onkey(exit_game, <span class="st" style="color: #20794D;">"q"</span>)   <span class="co" style="color: #5E5E5E;"># Das Spiel beenden</span></span>
<span id="cb1-160"></span>
<span id="cb1-161"><span class="co" style="color: #5E5E5E;"># Spiel starten</span></span>
<span id="cb1-162"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"🧙 Simple Maze Game Stage 1 🧙"</span>)</span>
<span id="cb1-163">keep_going <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">True</span></span>
<span id="cb1-164"><span class="cf" style="color: #003B4F;">while</span> keep_going:</span>
<span id="cb1-165">  <span class="co" style="color: #5E5E5E;"># Hat der Spieler eine Schatzkiste gefunden?</span></span>
<span id="cb1-166">  <span class="cf" style="color: #003B4F;">for</span> chest <span class="kw" style="color: #003B4F;">in</span> chests:</span>
<span id="cb1-167">    <span class="cf" style="color: #003B4F;">if</span> player.is_collision(chest):</span>
<span id="cb1-168">      player.gold <span class="op" style="color: #5E5E5E;">+=</span> chest.gold</span>
<span id="cb1-169">      <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Player Gold: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">"</span>.<span class="bu" style="color: null;">format</span>(player.gold))</span>
<span id="cb1-170">      <span class="co" style="color: #5E5E5E;"># Verberge die Schatzkiste</span></span>
<span id="cb1-171">      chest.destroy()</span>
<span id="cb1-172">      <span class="co" style="color: #5E5E5E;"># Lösche die Schatzkiste aus der Liste</span></span>
<span id="cb1-173">      chests.remove(chest)</span>
<span id="cb1-174">  <span class="co" style="color: #5E5E5E;"># Ist der Spieler dem Labyrint entkommen?</span></span>
<span id="cb1-175">  <span class="cf" style="color: #003B4F;">if</span> player.xcor() <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">192</span>:</span>
<span id="cb1-176">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"**Gewonen!**"</span>)</span>
<span id="cb1-177">    exit_game()</span>
<span id="cb1-178">    </span>
<span id="cb1-179">  screen.update()   <span class="co" style="color: #5E5E5E;"># den gesamten Bildschirm neu zeichnen</span></span></code></pre></div>
<p>Natürlich gibt es das <a href="https://trinket.io/library/trinkets/46a2d36061">Spiel als Trinket</a> und den <a href="https://github.com/kantel/trinket/tree/main/maze_game/stage1/mazegame1">Quellcode und alle bisher benutzten Bildchen</a> habe ich auch auf GitHub hochgeladen.</p>
<p>Bisher habe ich nur eine vage Vorstellung davon, wie ich weitermachen soll. Ich bin daher mindestens genau so gespannt wie Ihr, wohin die Reise geht. <em>Still digging!</em></p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Fußnoten</h2>

<ol>
<li id="fn1"><p>Ich kann auch dies nicht oft genug wiederholen: <em><a href="https://christianthompson.com/">Christian Thompson</a></em> aka <em>Tokyo Edtech</em> ist der Mann, der Unglaubliches mit <a href="https://docs.python.org/3/library/turtle.html">Pythons (Standard-) Turtle</a> anstellt.↩︎</p></li>
<li id="fn2"><p>Ich weiß, es ist strenggenommen kein <a href="https://de.wikipedia.org/wiki/Labyrinth">Labyrint</a>, sondern ein <a href="https://de.wikipedia.org/wiki/Irrgarten">Irrgarten</a>. Aber da im Deutschen beide Begriffe oft synonym verwendet werden, habe auch ich mir diese kleine, sprachliche Ungenauigkeit erlaubt.↩︎</p></li>
<li id="fn3"><p>Falls mir dann dennoch die Bildchen ausgehen sollten: Auch Kenneys <a href="https://www.kenney.nl/assets/pixel-platformer">Pixel Plattformer</a> paßt von der Anmutung her noch gut in diese Sammlung.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Trinket</category>
  <category>Python</category>
  <category>Turtle</category>
  <category>Spieleprogrammierung</category>
  <guid>https://kantel.github.io/posts/2023030501_maze_game_1/index.html</guid>
  <pubDate>Sun, 05 Mar 2023 19:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023030501_maze_game_1/images/mazegame1.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Godot 4.0 ist draußen</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023030402_godot_4/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://news.itsfoss.com/content/images/size/w1000/2023/03/Godot_4.0_2D_Improv.jpg"><img src="https://kantel.github.io/posts/2023030402_godot_4/images/godot402d-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p><strong>Das Warten auf <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/godot.html">Godot</a> hat ein Ende</strong>: Nach gut drei Jahren Entwicklungsarbeit ist die <a href="https://www.heise.de/news/Game-Engine-Godot-4-0-Rundum-erneute-Open-Source-Engine-mit-Vulkan-Backend-7532625.html">rundum erneuerte vierte Hauptversion der Open-Source-Game-Engine erschienen</a>. Ich habe ja ein gespaltenes Verhältnis zu solchen Game Engines, die mich mit ihrem GUI-Overkill meinem Texteditor entfremden, aber speziell der rundum erneuerte 2D-Renderer, die eingebaute Physik-Engine und der neue <a href="https://news.itsfoss.com/godot-4-0-release/">Tilemap-Editor</a> lassen mich mal wieder schwach werden.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/chXAjMQrcZk" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Und da die verwendete (und ebenfalls runderneuerte) Skriptsprache <a href="https://gdscript.com/articles/godot-4-gdscript/">GDScript in der Version 2.0</a> hinreichend Python-ähnlich ist und außerdem Godot <em>out of the box</em> nicht nur fertige Binaries nach Windows, macOS, Linux, Android und HTML5 erzeugen kann, sondern auch externe Export-Templates (unterschiedlicher Qualität und Lizenz) zu anderen Welten wie Playstation, Nintendo oder iOS existieren, solltet Ihr Euch nicht wundern, wenn auch ich mein Warten auf Godot ein- und etwas mit der Game-Engine anstelle. Neugierig bin ich ja schon. <em>Still digging!</em></p>



 ]]></description>
  <category>Godot</category>
  <category>Spieleprogrammierung</category>
  <guid>https://kantel.github.io/posts/2023030402_godot_4/index.html</guid>
  <pubDate>Sat, 04 Mar 2023 19:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023030402_godot_4/images/godot402d.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Die Berliner SPD geht zum Teufel</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023030401_berliner_spd_teufel/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://upload.wikimedia.org/wikipedia/commons/thumb/5/52/The_IMPERIAL_FAMILY_Going_to_the_Devil_%28NAPOLEON_163%29.jpeg/1024px-The_IMPERIAL_FAMILY_Going_to_the_Devil_%28NAPOLEON_163%29.jpeg"><img src="https://kantel.github.io/posts/2023030401_berliner_spd_teufel/images/berlinerspd-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p><strong>Wer noch der SPD vertraut, hat seine Sache auf Sand gebaut</strong>: Denn der Berliner CDU-Chef <a href="https://www.rbb24.de/politik/wahl/abgeordnetenhaus/agh-2023/beitraege/wegner-cdu-plan-berlin-tempelhofer-feld-bebauen.htm/alt=amp.html">Wegner will über Tempelhofer Feld und A100 abstimmen lassen</a>. Er will die Berlinerinnen und Berliner so lange über eine Randbebauung des Tempelhofer Feldes abstimmen lassen, bis sie ihr zustimmen. Das sagte der Politiker der »<a href="https://www.morgenpost.de/berlin/article237806291/berlin-wahl-wegner-tempelhofer-feld-a100.html">Berliner Morgenpost</a>« und dem »<a href="https://www.tagesspiegel.de/berlin/wegner-zu-schwarz-rot-der-regierende-muss-nicht-auf-jedem-bild-sein-9449792.html">Tagesspiegel</a>«. Mittendrin und voll dabei der designierte Koalitionspartner SPD, deren Chefin <em>Franziska Giffey</em>, die Frau mit dem erschwindelten Doktortitel, schon immer das Tempelhofer Feld bebauen und die A100 verlängern lassen wollte – nur ihre bisherigen Koalitionspartner Grüne und LINKE hinderten sie daran.</p>
<p>Zwar sind solche »Befragungen von oben« im Landesrecht bislang nicht vorgesehen, aber was kümmert CDU und SPD die Verfassung? Denn gemeinsam in einer großen Koalition wäre der Weg frei, die Bevölkerung weiter zu verarschen und ihren erklärten Willen zu konterkarieren (Stichwort: Volksentscheid zur Enteignung der Wohnungsbaukonzerne).</p>
<p>Bleibt nur zu hoffen, daß durch diese Politik die SPD bald erhobenen Hauptes unter die Fünf-Prozent-Hürde durchmarschieren kann. Damit der Spuk endlich vorbei ist.</p>
<p>Banner: Die SPD geht <del>in die große Koalition</del> zum Teufel (Symbolbild von <em><a href="https://de.wikipedia.org/wiki/George_Cruikshank">George Cruikshank</a></em> (1792–1878), der diesen März »Künstler des Monats« im <em>Schockwellenreiter</em> ist). Links unten die <a href="https://www.rbb24.de/politik/wahl/abgeordnetenhaus/agh-2023/beitraege/newsblog-wahl-berlin-agh-bvv-1402.html">Neuköllner Jusos</a>. <em>(Bildquelle: <a href="https://commons.wikimedia.org/wiki/File:The_IMPERIAL_FAMILY_Going_to_the_Devil_(NAPOLEON_163).jpeg">Wikimedia Commons</a>)</em></p>



 ]]></description>
  <category>SPD</category>
  <category>Failed State Berlin</category>
  <guid>https://kantel.github.io/posts/2023030401_berliner_spd_teufel/index.html</guid>
  <pubDate>Sat, 04 Mar 2023 17:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023030401_berliner_spd_teufel/images/berlinerspd.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Space War mit Trinkets Turtle</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023030201_space_war_trinket/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52721015097/"><img src="https://kantel.github.io/posts/2023030201_space_war_trinket/images/spacewartrinket-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Es hat ein paar Tage gebraucht, aber ich habe es geschafft: Ich bin in <em>Christian Thompsons</em> (aka TokyoEdtech) Fußstapfen getreten und habe ebenfalls versucht, in Python mit der Turtle ernsthaft ein Spiel zu programmieren. Allerdings nicht mit der <a href="https://docs.python.org/3/library/turtle.html">Turtle aus Pythons Standardbibliothek</a>, sondern mit der Schildkröte, die in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/trinket.html">Trinket</a> eingebaut ist.</p>
<p>Dafür habe ich mir ein Ballerspiel, <a href="http://blog.schockwellenreiter.de/2018/01/2018011301.html">das ich schon im Januar 2018 mit Pythons Turtle gebaut hatte</a>, geschnappt und die Portierung nach Trinket gewagt. Es ging einfacher, als ich dachte und das Ergebnis kann sich durchaus sehen lassen (ein Klick auf »Run«/»Stop« startet/beendet das Spiel):</p>
<iframe src="https://trinket.io/embed/python/25ebd4a9c6?outputOnly=true&amp;runOption=run&amp;start=result" width="620" height="800" frameborder="0" marginwidth="0" marginheight="0" allowfullscreen="">
</iframe>
<p>In dem Spiel irrt eine kleine, blaue Rakete durch das Weltall (mit einem hämisch grinsendem Mond im Hintergrund), die von gefährlichen Kürbissen bedroht wird. Die Rakete wird mit dem Pfeiltasten gesteuert (»rechts« und »links« bewirken eine Drehung in die jeweilige Richtung, mit »up« und »down« wird die Geschindigkeit erhöht oder reduziert). und mit der Leertaste kann sie Geschosse auf die Kürbisse abfeuern. Trifft sei einen Kürbis, wird wie mit zehn Bonuspunkten belohnt, kollidiert jedoch ein Kürbis mit der Rakete, bekommt sie fünf Punkte abgezogen.</p>
<p>Ich bin ein schlechter Spieler, daher habe ich das Spiel recht leicht gehalten. Jedoch ist es Euch überlassen, entweder die Punktezahl so zu ändern, daß die Rakete leichter verlieren kann oder die Anzahl der feindlichen Kürbisse im Spiel zu erhöhen. Aßerdem könnt Ihr den Spieler sterben lassen (das Spiel beenden), wenn die Punktezahl unter Null sinkt.</p>
<p>Ich habe noch die Taste »q« mit dem Stop des Spiels belegt, das aber in der Hauptsache nur, um Screenshots anfertigen zu können. Doch hier erst einmal für Euren Überblick den vollständigen Quellcode:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> turtle</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> math</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">from</span> random <span class="im" style="color: #00769E;">import</span> randint, choice</span>
<span id="cb1-4"></span>
<span id="cb1-5">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">600</span>, <span class="dv" style="color: #AD0000;">600</span></span>
<span id="cb1-6">ROCKETSIZE <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">52</span></span>
<span id="cb1-7">NUM_PUMPKINS <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">6</span></span>
<span id="cb1-8">NUM_PARTICLES <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">20</span></span>
<span id="cb1-9"></span>
<span id="cb1-10">screen <span class="op" style="color: #5E5E5E;">=</span> turtle.Screen()</span>
<span id="cb1-11">screen.setup(WIDTH, HEIGHT)</span>
<span id="cb1-12">screen.bgcolor(<span class="st" style="color: #20794D;">"#2b3e50"</span>)</span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;"># Bildschirm-Refresh ausschalten</span></span>
<span id="cb1-15">screen.tracer(<span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb1-16"></span>
<span id="cb1-17">screen.bgpic(<span class="st" style="color: #20794D;">"moon.jpg"</span>)</span>
<span id="cb1-18">screen.addshape(<span class="st" style="color: #20794D;">"rocket2.png"</span>)</span>
<span id="cb1-19">screen.addshape(<span class="st" style="color: #20794D;">"alien.png"</span>)</span>
<span id="cb1-20">screen.addshape(<span class="st" style="color: #20794D;">"pumpkin.png"</span>)</span>
<span id="cb1-21">screen.addshape(<span class="st" style="color: #20794D;">"missileup.png"</span>)</span>
<span id="cb1-22">screen.addshape(<span class="st" style="color: #20794D;">"particle.png"</span>)</span>
<span id="cb1-23"></span>
<span id="cb1-24"><span class="kw" style="color: #003B4F;">class</span> Sprite(turtle.Turtle):</span>
<span id="cb1-25">  </span>
<span id="cb1-26">  <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, _tshape):</span>
<span id="cb1-27">    turtle.Turtle.<span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>)</span>
<span id="cb1-28">    <span class="va" style="color: #111111;">self</span>.penup()</span>
<span id="cb1-29">    <span class="va" style="color: #111111;">self</span>.speed(<span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb1-30">    <span class="va" style="color: #111111;">self</span>.shape(_tshape)</span>
<span id="cb1-31">    <span class="va" style="color: #111111;">self</span>.speed <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb1-32">    <span class="va" style="color: #111111;">self</span>.max_speed <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">15</span></span>
<span id="cb1-33">    </span>
<span id="cb1-34">  <span class="kw" style="color: #003B4F;">def</span> move(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-35">    <span class="va" style="color: #111111;">self</span>.forward(<span class="va" style="color: #111111;">self</span>.speed)</span>
<span id="cb1-36"></span>
<span id="cb1-37">    <span class="co" style="color: #5E5E5E;"># Ränder checken und ausweichen</span></span>
<span id="cb1-38">    <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.xcor() <span class="op" style="color: #5E5E5E;">&gt;=</span> WIDTH<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">-</span> ROCKETSIZE <span class="kw" style="color: #003B4F;">or</span> <span class="va" style="color: #111111;">self</span>.xcor() <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="op" style="color: #5E5E5E;">-</span>WIDTH<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">+</span> ROCKETSIZE:</span>
<span id="cb1-39">      <span class="va" style="color: #111111;">self</span>.forward(<span class="op" style="color: #5E5E5E;">-</span><span class="va" style="color: #111111;">self</span>.speed)</span>
<span id="cb1-40">      <span class="va" style="color: #111111;">self</span>.left(randint(<span class="dv" style="color: #AD0000;">95</span>, <span class="dv" style="color: #AD0000;">265</span>))</span>
<span id="cb1-41">    <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.ycor() <span class="op" style="color: #5E5E5E;">&gt;=</span> HEIGHT<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">-</span> ROCKETSIZE <span class="kw" style="color: #003B4F;">or</span> <span class="va" style="color: #111111;">self</span>.ycor() <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="op" style="color: #5E5E5E;">-</span>HEIGHT<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">+</span> ROCKETSIZE:</span>
<span id="cb1-42">      <span class="va" style="color: #111111;">self</span>.forward(<span class="op" style="color: #5E5E5E;">-</span><span class="va" style="color: #111111;">self</span>.speed)</span>
<span id="cb1-43">      <span class="va" style="color: #111111;">self</span>.left(randint(<span class="dv" style="color: #AD0000;">95</span>, <span class="dv" style="color: #AD0000;">265</span>))</span>
<span id="cb1-44">    </span>
<span id="cb1-45">  <span class="kw" style="color: #003B4F;">def</span> collides(<span class="va" style="color: #111111;">self</span>, obj):</span>
<span id="cb1-46">    a <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.xcor() <span class="op" style="color: #5E5E5E;">-</span> obj.xcor()</span>
<span id="cb1-47">    b <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.ycor() <span class="op" style="color: #5E5E5E;">-</span> obj.ycor()</span>
<span id="cb1-48">    distance <span class="op" style="color: #5E5E5E;">=</span>  math.sqrt((a<span class="op" style="color: #5E5E5E;">**</span><span class="dv" style="color: #AD0000;">2</span>) <span class="op" style="color: #5E5E5E;">+</span> (b<span class="op" style="color: #5E5E5E;">**</span><span class="dv" style="color: #AD0000;">2</span>))</span>
<span id="cb1-49">    <span class="cf" style="color: #003B4F;">if</span> distance <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">20</span>:</span>
<span id="cb1-50">      <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">True</span></span>
<span id="cb1-51">    <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb1-52">      <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">False</span></span>
<span id="cb1-53">    </span>
<span id="cb1-54">  <span class="kw" style="color: #003B4F;">def</span> jump(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-55">    <span class="va" style="color: #111111;">self</span>.goto(randint(<span class="op" style="color: #5E5E5E;">-</span>WIDTH<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">60</span>, WIDTH<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">60</span>),</span>
<span id="cb1-56">              randint(<span class="op" style="color: #5E5E5E;">-</span>HEIGHT<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">60</span>, HEIGHT<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">60</span>))</span>
<span id="cb1-57">    <span class="va" style="color: #111111;">self</span>.setheading(randint(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">360</span>))</span>
<span id="cb1-58">    <span class="va" style="color: #111111;">self</span>.speed <span class="op" style="color: #5E5E5E;">=</span> randint(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">7</span>)</span>
<span id="cb1-59"></span>
<span id="cb1-60"><span class="kw" style="color: #003B4F;">class</span> GameWorld(turtle.Turtle):</span>
<span id="cb1-61">    </span>
<span id="cb1-62">  <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-63">    turtle.Turtle.<span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>)</span>
<span id="cb1-64">    <span class="va" style="color: #111111;">self</span>.penup()</span>
<span id="cb1-65">    <span class="va" style="color: #111111;">self</span>.hideturtle()</span>
<span id="cb1-66">    <span class="va" style="color: #111111;">self</span>.speed(<span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb1-67">    <span class="va" style="color: #111111;">self</span>.color(<span class="st" style="color: #20794D;">"white"</span>)</span>
<span id="cb1-68">    <span class="va" style="color: #111111;">self</span>.pensize(<span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb1-69">    </span>
<span id="cb1-70">  <span class="kw" style="color: #003B4F;">def</span> draw_border(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-71">    <span class="va" style="color: #111111;">self</span>.penup()</span>
<span id="cb1-72">    <span class="va" style="color: #111111;">self</span>.goto(<span class="op" style="color: #5E5E5E;">-</span>WIDTH<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">40</span>, <span class="op" style="color: #5E5E5E;">-</span>HEIGHT<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">40</span>)</span>
<span id="cb1-73">    <span class="va" style="color: #111111;">self</span>.pendown()</span>
<span id="cb1-74">    <span class="va" style="color: #111111;">self</span>.goto(<span class="op" style="color: #5E5E5E;">-</span>WIDTH<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">40</span>, HEIGHT<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">40</span>)</span>
<span id="cb1-75">    <span class="va" style="color: #111111;">self</span>.goto(WIDTH<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">40</span>, HEIGHT<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">40</span>)</span>
<span id="cb1-76">    <span class="va" style="color: #111111;">self</span>.goto(WIDTH<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">40</span>, <span class="op" style="color: #5E5E5E;">-</span>HEIGHT<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">40</span>)</span>
<span id="cb1-77">    <span class="va" style="color: #111111;">self</span>.goto(<span class="op" style="color: #5E5E5E;">-</span>WIDTH<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">40</span>, <span class="op" style="color: #5E5E5E;">-</span>HEIGHT<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">40</span>)</span>
<span id="cb1-78">    </span>
<span id="cb1-79"><span class="kw" style="color: #003B4F;">class</span> HeadUpDisplay(turtle.Turtle):</span>
<span id="cb1-80">    </span>
<span id="cb1-81">  <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-82">    turtle.Turtle.<span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>)</span>
<span id="cb1-83">    <span class="va" style="color: #111111;">self</span>.penup()</span>
<span id="cb1-84">    <span class="va" style="color: #111111;">self</span>.hideturtle()</span>
<span id="cb1-85">    <span class="va" style="color: #111111;">self</span>.speed(<span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb1-86">    <span class="va" style="color: #111111;">self</span>.color(<span class="st" style="color: #20794D;">"white"</span>)</span>
<span id="cb1-87">    <span class="va" style="color: #111111;">self</span>.goto(<span class="op" style="color: #5E5E5E;">-</span>WIDTH<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">40</span>, HEIGHT<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">30</span>)</span>
<span id="cb1-88">    <span class="va" style="color: #111111;">self</span>.score <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb1-89">    </span>
<span id="cb1-90">  <span class="kw" style="color: #003B4F;">def</span> update_score(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-91">    <span class="va" style="color: #111111;">self</span>.clear()</span>
<span id="cb1-92">    <span class="va" style="color: #111111;">self</span>.write(<span class="st" style="color: #20794D;">"Punkte: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">"</span>.<span class="bu" style="color: null;">format</span>(<span class="va" style="color: #111111;">self</span>.score), <span class="va" style="color: #111111;">False</span>, align <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"left"</span>,</span>
<span id="cb1-93">                font <span class="op" style="color: #5E5E5E;">=</span> (<span class="st" style="color: #20794D;">"Arial"</span>, <span class="dv" style="color: #AD0000;">14</span>, <span class="st" style="color: #20794D;">"normal"</span>))</span>
<span id="cb1-94">    </span>
<span id="cb1-95">  <span class="kw" style="color: #003B4F;">def</span> change_score(<span class="va" style="color: #111111;">self</span>, points):</span>
<span id="cb1-96">    <span class="va" style="color: #111111;">self</span>.score <span class="op" style="color: #5E5E5E;">+=</span> points</span>
<span id="cb1-97">    <span class="va" style="color: #111111;">self</span>.update_score()</span>
<span id="cb1-98"></span>
<span id="cb1-99"><span class="kw" style="color: #003B4F;">class</span> Player(Sprite):</span>
<span id="cb1-100">  </span>
<span id="cb1-101">  <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-102">    Sprite.<span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, <span class="st" style="color: #20794D;">"rocket2.png"</span>)</span>
<span id="cb1-103">    <span class="va" style="color: #111111;">self</span>.speed <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb1-104">    <span class="va" style="color: #111111;">self</span>.max_speed <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb1-105">    </span>
<span id="cb1-106">  <span class="kw" style="color: #003B4F;">def</span> turnleft(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-107">    <span class="va" style="color: #111111;">self</span>.left(<span class="dv" style="color: #AD0000;">15</span>)</span>
<span id="cb1-108">    </span>
<span id="cb1-109">  <span class="kw" style="color: #003B4F;">def</span> turnright(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-110">    <span class="va" style="color: #111111;">self</span>.right(<span class="dv" style="color: #AD0000;">15</span>)</span>
<span id="cb1-111">    </span>
<span id="cb1-112">  <span class="kw" style="color: #003B4F;">def</span> move_faster(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-113">    <span class="va" style="color: #111111;">self</span>.speed <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb1-114">    <span class="co" style="color: #5E5E5E;"># Geschwindigkeitsbegrenzug</span></span>
<span id="cb1-115">    <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">abs</span>(<span class="va" style="color: #111111;">self</span>.speed) <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="va" style="color: #111111;">self</span>.max_speed:</span>
<span id="cb1-116">      <span class="va" style="color: #111111;">self</span>.speed <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.max_speed</span>
<span id="cb1-117">    </span>
<span id="cb1-118">  <span class="kw" style="color: #003B4F;">def</span> move_slower(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-119">    <span class="co" style="color: #5E5E5E;"># Geschwindigkeitsbegrenzung</span></span>
<span id="cb1-120">    <span class="va" style="color: #111111;">self</span>.speed <span class="op" style="color: #5E5E5E;">-=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb1-121">    <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.speed <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb1-122">      <span class="va" style="color: #111111;">self</span>.speed <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb1-123"></span>
<span id="cb1-124"><span class="kw" style="color: #003B4F;">class</span> Missile(Sprite):</span>
<span id="cb1-125">    </span>
<span id="cb1-126">  <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-127">    Sprite.<span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, <span class="st" style="color: #20794D;">"missileup.png"</span>)</span>
<span id="cb1-128">    <span class="va" style="color: #111111;">self</span>.speed <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">20</span>    <span class="co" style="color: #5E5E5E;"># So ein Geschoß sollte schon schnell sein :o)</span></span>
<span id="cb1-129">    <span class="va" style="color: #111111;">self</span>.status <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"ready"</span></span>
<span id="cb1-130">    <span class="va" style="color: #111111;">self</span>.goto(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">5000</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">5000</span>)</span>
<span id="cb1-131">    </span>
<span id="cb1-132">  <span class="kw" style="color: #003B4F;">def</span> fire(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-133">    <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.status <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"ready"</span>:</span>
<span id="cb1-134">        <span class="va" style="color: #111111;">self</span>.goto(player.xcor(), player.ycor())</span>
<span id="cb1-135">        <span class="va" style="color: #111111;">self</span>.setheading(player.heading())</span>
<span id="cb1-136">        <span class="va" style="color: #111111;">self</span>.status <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"firing"</span></span>
<span id="cb1-137">        </span>
<span id="cb1-138">  <span class="kw" style="color: #003B4F;">def</span> move(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-139">    <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.status <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"ready"</span>:</span>
<span id="cb1-140">      <span class="va" style="color: #111111;">self</span>.goto(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">5000</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">5000</span>)</span>
<span id="cb1-141">    <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.status <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"firing"</span>:</span>
<span id="cb1-142">      <span class="va" style="color: #111111;">self</span>.forward(<span class="va" style="color: #111111;">self</span>.speed)</span>
<span id="cb1-143">      <span class="co" style="color: #5E5E5E;"># Ränder checken und ausweichen</span></span>
<span id="cb1-144">      <span class="cf" style="color: #003B4F;">if</span> (<span class="va" style="color: #111111;">self</span>.xcor() <span class="op" style="color: #5E5E5E;">&gt;=</span> WIDTH<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">50</span> <span class="kw" style="color: #003B4F;">or</span> <span class="va" style="color: #111111;">self</span>.xcor() <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="op" style="color: #5E5E5E;">-</span>WIDTH<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">50</span></span>
<span id="cb1-145">          <span class="kw" style="color: #003B4F;">or</span> <span class="va" style="color: #111111;">self</span>.ycor() <span class="op" style="color: #5E5E5E;">&gt;=</span> HEIGHT<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">50</span> <span class="kw" style="color: #003B4F;">or</span> <span class="va" style="color: #111111;">self</span>.ycor() <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="op" style="color: #5E5E5E;">-</span>HEIGHT<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">50</span>):</span>
<span id="cb1-146">        <span class="va" style="color: #111111;">self</span>.goto(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">5000</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">5000</span>)</span>
<span id="cb1-147">        <span class="va" style="color: #111111;">self</span>.status <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"ready"</span></span>
<span id="cb1-148"></span>
<span id="cb1-149"><span class="kw" style="color: #003B4F;">class</span> Particle(Sprite):</span>
<span id="cb1-150">    </span>
<span id="cb1-151">  <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-152">    Sprite.<span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, <span class="st" style="color: #20794D;">"particle.png"</span>)</span>
<span id="cb1-153">    <span class="va" style="color: #111111;">self</span>.goto(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">5000</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">5000</span>)</span>
<span id="cb1-154">    <span class="va" style="color: #111111;">self</span>.frame <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb1-155">    <span class="va" style="color: #111111;">self</span>.speed <span class="op" style="color: #5E5E5E;">=</span> randint(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">20</span>)</span>
<span id="cb1-156">    </span>
<span id="cb1-157">  <span class="kw" style="color: #003B4F;">def</span> explode(<span class="va" style="color: #111111;">self</span>, x, y):</span>
<span id="cb1-158">    <span class="va" style="color: #111111;">self</span>.goto(x, y)</span>
<span id="cb1-159">    <span class="va" style="color: #111111;">self</span>.setheading(randint(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">360</span>))</span>
<span id="cb1-160">    </span>
<span id="cb1-161">  <span class="kw" style="color: #003B4F;">def</span> move(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-162">    <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.frame <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">20</span>:</span>
<span id="cb1-163">      <span class="va" style="color: #111111;">self</span>.forward(<span class="va" style="color: #111111;">self</span>.speed)</span>
<span id="cb1-164">      <span class="co" style="color: #5E5E5E;"># self.speed -= 1</span></span>
<span id="cb1-165">      <span class="va" style="color: #111111;">self</span>.frame <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb1-166">      <span class="co" style="color: #5E5E5E;"># Ränder checken</span></span>
<span id="cb1-167">      <span class="cf" style="color: #003B4F;">if</span> (<span class="va" style="color: #111111;">self</span>.xcor() <span class="op" style="color: #5E5E5E;">&gt;=</span> WIDTH<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">50</span> <span class="kw" style="color: #003B4F;">or</span> <span class="va" style="color: #111111;">self</span>.xcor() <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="op" style="color: #5E5E5E;">-</span>WIDTH<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">50</span> <span class="kw" style="color: #003B4F;">or</span></span>
<span id="cb1-168">          <span class="va" style="color: #111111;">self</span>.ycor() <span class="op" style="color: #5E5E5E;">&gt;=</span> HEIGHT<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">50</span> <span class="kw" style="color: #003B4F;">or</span> <span class="va" style="color: #111111;">self</span>.ycor() <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="op" style="color: #5E5E5E;">-</span>HEIGHT<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">50</span>):</span>
<span id="cb1-169">        <span class="va" style="color: #111111;">self</span>.frame <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb1-170">        <span class="va" style="color: #111111;">self</span>.goto(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">5000</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">5000</span>)</span>
<span id="cb1-171">    <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb1-172">      <span class="va" style="color: #111111;">self</span>.frame <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb1-173">      <span class="va" style="color: #111111;">self</span>.goto(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">5000</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">5000</span>)</span>
<span id="cb1-174"></span>
<span id="cb1-175"><span class="kw" style="color: #003B4F;">class</span> Pumpkin(Sprite):</span>
<span id="cb1-176">    </span>
<span id="cb1-177">  <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-178">    Sprite.<span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, <span class="st" style="color: #20794D;">"pumpkin.png"</span>)</span>
<span id="cb1-179">    <span class="va" style="color: #111111;">self</span>.goto(randint(<span class="op" style="color: #5E5E5E;">-</span>WIDTH<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">60</span>, WIDTH<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">60</span>),</span>
<span id="cb1-180">              randint(<span class="op" style="color: #5E5E5E;">-</span>HEIGHT<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">60</span>, HEIGHT<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">60</span>))</span>
<span id="cb1-181">    <span class="va" style="color: #111111;">self</span>.setheading(randint(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">360</span>))</span>
<span id="cb1-182"></span>
<span id="cb1-183">world <span class="op" style="color: #5E5E5E;">=</span> GameWorld()</span>
<span id="cb1-184">world.draw_border()  </span>
<span id="cb1-185">hud <span class="op" style="color: #5E5E5E;">=</span> HeadUpDisplay()</span>
<span id="cb1-186"></span>
<span id="cb1-187"><span class="co" style="color: #5E5E5E;"># Enmies</span></span>
<span id="cb1-188">pumpkins <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb1-189"><span class="cf" style="color: #003B4F;">for</span> _ <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(NUM_PUMPKINS):</span>
<span id="cb1-190">  pumpkin <span class="op" style="color: #5E5E5E;">=</span> Pumpkin()</span>
<span id="cb1-191">  pumpkin.speed <span class="op" style="color: #5E5E5E;">=</span> randint(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">4</span>)</span>
<span id="cb1-192">  pumpkins.append(pumpkin)</span>
<span id="cb1-193"></span>
<span id="cb1-194">player <span class="op" style="color: #5E5E5E;">=</span> Player()</span>
<span id="cb1-195">missile <span class="op" style="color: #5E5E5E;">=</span> Missile()</span>
<span id="cb1-196"></span>
<span id="cb1-197"><span class="co" style="color: #5E5E5E;"># Die Partikel erzeugen</span></span>
<span id="cb1-198">particles <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb1-199"><span class="cf" style="color: #003B4F;">for</span> _ <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(NUM_PARTICLES):</span>
<span id="cb1-200">  particles.append(Particle())</span>
<span id="cb1-201"></span>
<span id="cb1-202"><span class="co" style="color: #5E5E5E;"># Das Spiel beenden</span></span>
<span id="cb1-203"><span class="kw" style="color: #003B4F;">def</span> exit_game():</span>
<span id="cb1-204">  <span class="kw" style="color: #003B4F;">global</span> keep_going</span>
<span id="cb1-205">  keep_going <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">False</span></span>
<span id="cb1-206"></span>
<span id="cb1-207"><span class="co" style="color: #5E5E5E;"># Auf Tastaturereignisse lauschen</span></span>
<span id="cb1-208">screen.onkey(player.turnleft, <span class="st" style="color: #20794D;">"Left"</span>)</span>
<span id="cb1-209">screen.onkey(player.turnright, <span class="st" style="color: #20794D;">"Right"</span>)</span>
<span id="cb1-210">screen.onkey(player.move_faster, <span class="st" style="color: #20794D;">"Up"</span>)</span>
<span id="cb1-211">screen.onkey(player.move_slower, <span class="st" style="color: #20794D;">"Down"</span>)</span>
<span id="cb1-212">screen.onkey(missile.fire, <span class="st" style="color: #20794D;">"space"</span>)</span>
<span id="cb1-213"></span>
<span id="cb1-214">screen.onkey(exit_game, <span class="st" style="color: #20794D;">"q"</span>)   <span class="co" style="color: #5E5E5E;"># Das Spiel beenden</span></span>
<span id="cb1-215">screen.listen()</span>
<span id="cb1-216"></span>
<span id="cb1-217"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"🚀 Space War – 🎃 Halloween-Version"</span>)</span>
<span id="cb1-218"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"»Up«/»Down«: Schneller/Langesamer"</span>)</span>
<span id="cb1-219"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"»Left«/»Right«: Rechts/Links"</span>)</span>
<span id="cb1-220"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"»q« beendet das Spiel"</span>)</span>
<span id="cb1-221">keep_going <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">True</span></span>
<span id="cb1-222"><span class="cf" style="color: #003B4F;">while</span> keep_going:</span>
<span id="cb1-223">  screen.update()   <span class="co" style="color: #5E5E5E;"># den gesamten Bildschirm neu zeichnen</span></span>
<span id="cb1-224">  <span class="cf" style="color: #003B4F;">for</span> pumpkin <span class="kw" style="color: #003B4F;">in</span> pumpkins:</span>
<span id="cb1-225">    pumpkin.move()</span>
<span id="cb1-226">    <span class="cf" style="color: #003B4F;">if</span> missile.collides(pumpkin):</span>
<span id="cb1-227">      pumpkin.jump()</span>
<span id="cb1-228">      missile.status <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"ready"</span></span>
<span id="cb1-229">      hud.change_score(<span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb1-230">      <span class="cf" style="color: #003B4F;">for</span> particle <span class="kw" style="color: #003B4F;">in</span> particles:</span>
<span id="cb1-231">        particle.explode(missile.xcor(), missile.ycor())</span>
<span id="cb1-232">    <span class="cf" style="color: #003B4F;">if</span> player.collides(pumpkin):</span>
<span id="cb1-233">      pumpkin.jump()</span>
<span id="cb1-234">      hud.change_score(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">5</span>)</span>
<span id="cb1-235">      <span class="cf" style="color: #003B4F;">for</span> particle <span class="kw" style="color: #003B4F;">in</span> particles:</span>
<span id="cb1-236">        particle.explode(player.xcor(), player.ycor())</span>
<span id="cb1-237">  </span>
<span id="cb1-238">  player.move()</span>
<span id="cb1-239">  missile.move()</span>
<span id="cb1-240">  <span class="cf" style="color: #003B4F;">for</span> particle <span class="kw" style="color: #003B4F;">in</span> particles:</span>
<span id="cb1-241">    particle.move()</span>
<span id="cb1-242">  </span>
<span id="cb1-243"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Bye, bye, Baby"</span>)</span></code></pre></div>
<p>Es ist schon erstaunlich, daß man mit weniger als 250 Zeilen Python-Code doch solch ein recht komplexes Spiel auf die Beine stellen kann.</p>
<p>Getreu meinem <a href="https://kantel.github.io/posts/2023010701_pygame_oop/">Vorsatz</a>, weitestgehend objektorientiert zu programmieren, habe ich auch diese Implementierung aus Objekten zusammengebaut. Das Spiel findet in der Klasse <code>GameWorld()</code> statt, zu der auch die Klasse <code>HeadUpDisplay()</code> gehört<sup>1</sup>.</p>
<p>Für die Akteure wiederum habe ich eine Oberklasse <code>Sprite()</code> implementiert, von der alle beweglichen Elemente erben, also sowohl die Klassen <code>Player()</code> und <code>Pumpkin()</code> für den Spieler und seine Gegener, wie auch die Klasse <code>Missile()</code> für die Geschosse und die Klasse <code>Particles()</code> für die Explosionen bei Treffern. Dabei werden Instanzen der Klasse <code>Missile()</code> durch die Betätigung der Leertaste erzeugt, während die Explosionen der Klasse <code>Particle()</code> durch Kollisionen ausgelöst werden.</p>
<p>Die Methode zur Kollisionserkennung <code>collide()</code> und zum Reset der Gegner nach einer Kollision <code>jump()</code> habe ich wie die <code>move()</code>-Methode ebenfalls in der Oberklasse <code>Sprite()</code> implementiert, so daß eine Erweiterung um andere Gegner als Kürbisse einfach möglich ist (testweise hatte ich auch noch eine weitere Klasse <code>Alien()</code> erstellt).</p>
<p>Wie schon <a href="https://kantel.github.io/posts/2023022701_turtle_trinket/">vermutet</a>, unterscheidet sich die Trinket-Turtle nur in Nuancen von der Turtle aus Pythons Standardbibliothek. Der bisher auffallendste Unterschied war, daß sich eigene Shapes aus Bildchen ebenfalls auf <code>turtle.heading()</code> und <code>turtle.setheading()</code> reagieren. Überhapt scheint die Unterstützung eigener Sprites für die Schildkröten umfangreicher zu sein. Das habe ich soweit ausgenutzt, daß alle Akteure mit eigenen Bildern implementiert wurden, die ich aus den frei verwendbaren <a href="http://cognitiones.kantel-chaos-team.de/multimedia/twemoji.html">Twemojis von Twitter</a> zusammengebastelt habe. Lediglich bei den Geschossen und den Explsionspartikeln habe ich auf das <a href="https://kantel.github.io/posts/2023011401_freie_tiles_und_sprites/">hier erwähnten</a> für nichtkommerzielle Anwendungen frei verwendbare <a href="https://bdragon1727.itch.io/fire-pixel-bullet-16x16">Artpack von <em>BDragon1727</em></a> zurückgegriffen.</p>
<p>Außerdem scheint es nicht möglich zu sein, ein Hintergrundbild mittig auf dem Screen zu zentrieren und den restlichen Hintergrund mit einer Hintergrundfarbe zu versehen. Daher habe ich dem Bild des Mondes einen breiten Rand spendiert.</p>
<p>Es gibt sicher noch weitere Differenzen zwischen der Trinket- und der Standard-Python-Turtle, aber das waren die Unterschiede, die mir bisher untergekommen waren. Aber während die Implementierung mit Pythons Standard-Turtle mein betagtes MacBook Pro schon ziemlich ins Schwitzen brachte, läuft die Browser-Implementierung von Trinket dort recht flüssig.</p>
<p>Das <a href="https://trinket.io/python/25ebd4a9c6">fertige Trinket</a> findet Ihr hier. Habt Spaß damit.</p>
<p>Ich bin recht stolz auf das bisher erreichte und werde sicher mit Trinket noch einiges anstellen. <em>Still digging!</em></p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Fußnoten</h2>

<ol>
<li id="fn1"><p>Dem Headup-Display eine eigene Klasse zu spendieren, war eine einsame Designentscheidung. Genausogut hätte es Teil von <code>GameWorld()</code>sein können.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Python</category>
  <category>Trinket</category>
  <category>Turtle</category>
  <category>Spieleprogrammierung</category>
  <guid>https://kantel.github.io/posts/2023030201_space_war_trinket/index.html</guid>
  <pubDate>Thu, 02 Mar 2023 17:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023030201_space_war_trinket/images/spacewartrinket.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Die Zahlen für den Februar 2023</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023030101_mediadaten_februar_2023/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52719402346/"><img src="https://kantel.github.io/posts/2023030101_mediadaten_februar_2023/images/mediadaten202302-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Schon wieder ist ein Monat vorüber und mit dem Ende dieses Monats steigt die Hoffnung auch auf ein baldiges Ende dieses Winters, denn langsam habe ich von ihm genug und wünsche mir den Frühling herbei. Doch auf jeden Fall sind zu Beginn des Monats wieder ein paar Zahlen fällig, die hochtrabend maches Mal auch <em>Mediadaten</em> genannt werden.</p>
<p>Nun denn, hier sind sie: Im Februar 2023 hatte der <em>Schockwellenreiter</em> laut dem fleißig mitzählenden und (hoffentlich!) datenschutzkonformen <del>Geißenpeter</del> <a href="https://www.goatcounter.com/">GoatCounter</a> exakt <strong>4.236 Seitenzugriffe</strong>. Das sind für solch einen kurzen Monat wie den Februar doch recht schöne Zahlen, vor allem, wenn man berücksichtigt, daß der <em>Geißenpeter</em> erst seit Anfang Dezember des letzten Jahres auf diesen Seiten werkelt und daher noch auf keinen Backkatalog zurückgreifen kann.</p>
<p>Und wie immer täuscht die Exaktheit der Ziffern eine Genauigkeit der Zahlen nur vor. Aber ich freue mich dennoch über jede Besucherin und jeden Besucher und bedanke mich bei allen meinen Leserinnen und Lesern.</p>
<p>😎 &nbsp; <em>Bleibt mir gewogen!</em></p>
<p>Es gibt auch wieder eine <em>Top Five</em> des Vormonats, die wegen des Berliner Wahlkrampfes und einiger sonstiger Rants leicht monothematisch geraten ist:</p>
<ol type="1">
<li><a href="https://kantel.github.io/posts/2023021802_ricarda_lang_und_der_dreizack/">Ricarda Lang und der Dreizack</a> oder: Warum selbst »Zelda« politisch sein kann.</li>
<li>Aus meinem Wiki: Das <a href="http://cognitiones.kantel-chaos-team.de/utopien/verkehr/pedalpower/fahrradcamper02.html">Camper Bike</a> – ich habe keine Ahnung über welchen obskuren Pinterest-Link diese Seite so hochgepusht wurde.</li>
<li>Der Rant des Monats: <a href="https://kantel.github.io/posts/2023022301_phototan_deutsche_bank/">Das PhotoTAN-Verfahren der Deutschen Bank ist absurdes Sicherheitstheater</a>.</li>
<li>Wahlsonntag in Dystopia: <a href="https://kantel.github.io/posts/2023021101_send_in_the_clowns/">Send in the Clowns</a>.</li>
<li><a href="https://kantel.github.io/posts/2023021201_berlin_hat_gewaehlt/">Berlin hat gewählt – und nun?</a></li>
</ol>
<p>Das Ranking für diesen Monat zeigt: Meckern schlägt technische Information.&nbsp;👻</p>



 ]]></description>
  <category>Interna</category>
  <guid>https://kantel.github.io/posts/2023030101_mediadaten_februar_2023/index.html</guid>
  <pubDate>Wed, 01 Mar 2023 15:45:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023030101_mediadaten_februar_2023/images/mediadaten202302.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Trinket, die Turtle und die Bildchen</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023022701_turtle_trinket/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://kenney.nl/assets/tiny-dungeon"><img src="https://kantel.github.io/posts/2023022701_turtle_trinket/images/dungeonsample-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Wie <a href="https://kantel.github.io/posts/2023022601_aquarium_trinket/">gestern angekündigt</a>, erkunde ich gerade die Möglichkeiten, die <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/trinket.html">Trinkets</a> Turtle bietet. Die gute Nachricht ist, daß sie sich anscheinend wenn überhaupt, dann nur in Nuancen von <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/turtlepython.html">Pythons Standard-Turtle</a> unterscheidet (irgendwo muß sie es vermutlich, denn Pythons Turtle basiert auf Tkinter, während Trinkets Schildkröte in den Canvas von HTML5 zeichnet). Denn so wie es auf den ersten Blick aussieht, sind die Befehle Eins-zu-Eins von Python nach Trinket übersetzt, so daß ich auf Pythons <a href="https://docs.python.org/3/library/turtle.html">Turtle-Dokumentation</a> zurückgreifen kann.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/inocKE13DEA" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Das gibt mir Mut für mein Vorhaben, <em>Christian Thompsons</em> (aka <em>Tokyo Edtech</em>) Turtle-Programme nach Trinket zu portieren. Einmal, um Trinket besser kennenzulernen, aber auch, um mein Projekt »<a href="http://blog.schockwellenreiter.de/2022/04/2022041401.html">Retrogaming und Künstliche Intelligenz</a>« wieder aufzunehmen. Denn dafür mußte ja schon einmal das »<a href="https://www.youtube.com/playlist?list=PLlEgNdBJEO-lNDJgg90fmfAq9RzORkQWP">Python Maze Game</a>« von <em>Tokyo Edtech</em> herhalten und genau dafür habe ich es auch wieder hervorgekramt.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/GLQ0Ord1TRI" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Nur mit dem Unterschied, daß dieses Mal die Implementierung des Templates nicht in <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygamezero.html">Pygame Zero</a>, sondern eben in Trinkets Turtle stattfinden soll. Und da ich aus nostalgischen Gründen das freie (<a href="https://creativecommons.org/publicdomain/zero/1.0/">CC0 1.0 Universal</a>) <a href="https://kenney.nl/assets/tiny-dungeon">Tiny Dungeon Tileset</a> inklusive der <a href="https://kenney.nl/assets/tiny-town">Tiny Town Erweiterung</a> von <a href="https://kenney.nl/">Kenney.nl</a> einsetzen möchte, sind Anpassungen an <em>Christian Thompsons</em> Code notwendig. Denn bei ihm sind die einzelnen Sprites, Tiles, Akteure oder Turtles je 25x25 Pixel groß, während die Tiny Sprites von Kenney eine Größe von je 16x16&nbsp;Pixel aufweisen.</p>
<p>Doch wie man dies in Trinket handelt, wird in dem Video »<a href="https://www.youtube.com/watch?v=GLQ0Ord1TRI">An Intro to Trinket</a>« erklärt, auf das ich daher hier <a href="https://kantel.github.io/posts/2023012801_trinket_in_space/">noch einmal</a> hinweisen möchte.</p>
<p>Doch jetzt muß ich wieder zu meinen Experimenten mit Trinket und der Schildkröte zurückkehren. Denn ich habe zu tun. <em>Still digging!</em></p>



 ]]></description>
  <category>Python</category>
  <category>Processing</category>
  <category>Trinket</category>
  <category>Turtle</category>
  <guid>https://kantel.github.io/posts/2023022701_turtle_trinket/index.html</guid>
  <pubDate>Mon, 27 Feb 2023 19:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023022701_turtle_trinket/images/dungeonsample.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Mein kleines, bonbonbuntes Aquarium als Trinket</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023022601_aquarium_trinket/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52710952709/"><img src="https://kantel.github.io/posts/2023022601_aquarium_trinket/images/aquariumtrinket-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Als vorläufigen Höhepunkt meiner Erkundung der Möglichkeiten des <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processing.html">Processing</a>/Python-Modes in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/trinket.html">Trinket</a> habe ich mein schon in vielen Versionen (zum Beispiel <a href="http://blog.schockwellenreiter.de/2022/01/2022010802.html">hier</a> in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/tigerjython.html">TigerJython</a> und <a href="http://blog.schockwellenreiter.de/2022/11/2022112002.html">hier</a> in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/py5.html">Py5</a>) impementiertes, kleines, bonbonbuntes Aquarium auch nach Trinket portiert.</p>
<p>Dabei habe ich weitestgehend die Py5-Version übernommen, denn außer dem Hinzufügen der trinketüblichen <code>import</code>-Anweisung und der letzten <code>run()</code>-Zeile konnte ich nach der Umwandlung der Processing-Befehle vom <code>snake_case</code> in den <code>camelCase</code> den Sketch nahezu Eins-zu-Eins übernehmen:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">from</span> processing <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;">from</span> random <span class="im" style="color: #00769E;">import</span> randint</span>
<span id="cb1-3"></span>
<span id="cb1-4">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">640</span>, <span class="dv" style="color: #AD0000;">416</span></span>
<span id="cb1-5">N_FISHES <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">15</span></span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="kw" style="color: #003B4F;">class</span> Background():</span>
<span id="cb1-8">  </span>
<span id="cb1-9">  <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, _img):</span>
<span id="cb1-10">    <span class="va" style="color: #111111;">self</span>.img <span class="op" style="color: #5E5E5E;">=</span> loadImage(_img)</span>
<span id="cb1-11">    </span>
<span id="cb1-12">  <span class="kw" style="color: #003B4F;">def</span> display(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-13">    image(<span class="va" style="color: #111111;">self</span>.img, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="kw" style="color: #003B4F;">class</span> Fish():</span>
<span id="cb1-16">  </span>
<span id="cb1-17">  <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, _idx, _x, _y, _dir, _speed):</span>
<span id="cb1-18">    <span class="va" style="color: #111111;">self</span>.imgr0 <span class="op" style="color: #5E5E5E;">=</span> loadImage(<span class="st" style="color: #20794D;">"fish"</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="bu" style="color: null;">str</span>(_idx) <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">"r_0.png"</span>)</span>
<span id="cb1-19">    <span class="va" style="color: #111111;">self</span>.imgl0 <span class="op" style="color: #5E5E5E;">=</span> loadImage(<span class="st" style="color: #20794D;">"fish"</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="bu" style="color: null;">str</span>(_idx) <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">"l_0.png"</span>)</span>
<span id="cb1-20">    <span class="va" style="color: #111111;">self</span>.imgr1 <span class="op" style="color: #5E5E5E;">=</span> loadImage(<span class="st" style="color: #20794D;">"fish"</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="bu" style="color: null;">str</span>(_idx) <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">"r_1.png"</span>)</span>
<span id="cb1-21">    <span class="va" style="color: #111111;">self</span>.imgl1 <span class="op" style="color: #5E5E5E;">=</span> loadImage(<span class="st" style="color: #20794D;">"fish"</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="bu" style="color: null;">str</span>(_idx) <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">"l_1.png"</span>)</span>
<span id="cb1-22">    <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">=</span> _x</span>
<span id="cb1-23">    <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">=</span> _y</span>
<span id="cb1-24">    <span class="va" style="color: #111111;">self</span>.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">=</span> _dir</span>
<span id="cb1-25">    <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"rt"</span>:</span>
<span id="cb1-26">      <span class="va" style="color: #111111;">self</span>.img <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.imgr0</span>
<span id="cb1-27">    <span class="cf" style="color: #003B4F;">elif</span> <span class="va" style="color: #111111;">self</span>.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"lt"</span>:</span>
<span id="cb1-28">      <span class="va" style="color: #111111;">self</span>.img <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.imgl0</span>
<span id="cb1-29">    <span class="va" style="color: #111111;">self</span>.speed <span class="op" style="color: #5E5E5E;">=</span> _speed<span class="op" style="color: #5E5E5E;">*</span>randint(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">3</span>)</span>
<span id="cb1-30">    <span class="va" style="color: #111111;">self</span>.switch <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb1-31">    <span class="va" style="color: #111111;">self</span>.timer <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.switch</span>
<span id="cb1-32">    </span>
<span id="cb1-33">  <span class="kw" style="color: #003B4F;">def</span> update(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-34">    <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">+=</span> <span class="va" style="color: #111111;">self</span>.speed</span>
<span id="cb1-35">    <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.timer <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb1-36">      <span class="va" style="color: #111111;">self</span>.timer <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.switch</span>
<span id="cb1-37">      <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.img <span class="op" style="color: #5E5E5E;">==</span> <span class="va" style="color: #111111;">self</span>.imgr0:</span>
<span id="cb1-38">        <span class="va" style="color: #111111;">self</span>.img <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.imgr1</span>
<span id="cb1-39">      <span class="cf" style="color: #003B4F;">elif</span> <span class="va" style="color: #111111;">self</span>.img <span class="op" style="color: #5E5E5E;">==</span> <span class="va" style="color: #111111;">self</span>.imgr1:</span>
<span id="cb1-40">        <span class="va" style="color: #111111;">self</span>.img <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.imgr0</span>
<span id="cb1-41">      <span class="cf" style="color: #003B4F;">elif</span> <span class="va" style="color: #111111;">self</span>.img <span class="op" style="color: #5E5E5E;">==</span> <span class="va" style="color: #111111;">self</span>.imgl0:</span>
<span id="cb1-42">        <span class="va" style="color: #111111;">self</span>.img <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.imgl1</span>
<span id="cb1-43">      <span class="cf" style="color: #003B4F;">elif</span> <span class="va" style="color: #111111;">self</span>.img <span class="op" style="color: #5E5E5E;">==</span> <span class="va" style="color: #111111;">self</span>.imgl1:</span>
<span id="cb1-44">        <span class="va" style="color: #111111;">self</span>.img <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.imgl0</span>
<span id="cb1-45">    <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">&gt;</span> width <span class="op" style="color: #5E5E5E;">+</span> randint(<span class="dv" style="color: #AD0000;">40</span>, <span class="dv" style="color: #AD0000;">200</span>):</span>
<span id="cb1-46">      <span class="va" style="color: #111111;">self</span>.img <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.imgl0</span>
<span id="cb1-47">      <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">=</span> randint(<span class="dv" style="color: #AD0000;">20</span>, <span class="dv" style="color: #AD0000;">300</span>)</span>
<span id="cb1-48">      <span class="va" style="color: #111111;">self</span>.speed <span class="op" style="color: #5E5E5E;">=</span> randint(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">3</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb1-49">    <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">&lt;</span> randint(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">200</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">40</span>):</span>
<span id="cb1-50">      <span class="va" style="color: #111111;">self</span>.img <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.imgr0</span>
<span id="cb1-51">      <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">=</span> randint(<span class="dv" style="color: #AD0000;">20</span>, <span class="dv" style="color: #AD0000;">300</span>)</span>
<span id="cb1-52">      <span class="va" style="color: #111111;">self</span>.speed <span class="op" style="color: #5E5E5E;">=</span> randint(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">3</span>)</span>
<span id="cb1-53">    <span class="va" style="color: #111111;">self</span>.timer <span class="op" style="color: #5E5E5E;">-=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb1-54"> </span>
<span id="cb1-55">  <span class="kw" style="color: #003B4F;">def</span> display(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-56">    image(<span class="va" style="color: #111111;">self</span>.img, <span class="va" style="color: #111111;">self</span>.x, <span class="va" style="color: #111111;">self</span>.y)</span>
<span id="cb1-57"></span>
<span id="cb1-58">fishes <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb1-59"></span>
<span id="cb1-60"><span class="kw" style="color: #003B4F;">def</span> setup():</span>
<span id="cb1-61">  <span class="kw" style="color: #003B4F;">global</span> bg</span>
<span id="cb1-62">  size(WIDTH, HEIGHT)</span>
<span id="cb1-63">  <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"🐠 Jörgs kleines, bonbonbuntes Aquarium 🐡"</span>)</span>
<span id="cb1-64">  bg <span class="op" style="color: #5E5E5E;">=</span> Background(<span class="st" style="color: #20794D;">"background.png"</span>)</span>
<span id="cb1-65">  <span class="cf" style="color: #003B4F;">for</span> _ <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(N_FISHES):</span>
<span id="cb1-66">    direction <span class="op" style="color: #5E5E5E;">=</span> randint(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb1-67">    <span class="cf" style="color: #003B4F;">if</span> direction <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb1-68">      dr <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"rt"</span></span>
<span id="cb1-69">      speed <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb1-70">    <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb1-71">      dr <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"lt"</span></span>
<span id="cb1-72">      speed <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb1-73">    x <span class="op" style="color: #5E5E5E;">=</span> randint(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">100</span>, width <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">200</span>)</span>
<span id="cb1-74">    y <span class="op" style="color: #5E5E5E;">=</span> randint(<span class="dv" style="color: #AD0000;">20</span>, <span class="dv" style="color: #AD0000;">300</span>)</span>
<span id="cb1-75">    fish <span class="op" style="color: #5E5E5E;">=</span> Fish(randint(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">7</span>), x, y, dr, speed)</span>
<span id="cb1-76">    fishes.append(fish)</span>
<span id="cb1-77"></span>
<span id="cb1-78"><span class="kw" style="color: #003B4F;">def</span> draw():</span>
<span id="cb1-79">  background(<span class="dv" style="color: #AD0000;">49</span>, <span class="dv" style="color: #AD0000;">197</span>, <span class="dv" style="color: #AD0000;">244</span>) <span class="co" style="color: #5E5E5E;"># Hellblau</span></span>
<span id="cb1-80">  bg.display()</span>
<span id="cb1-81">  <span class="cf" style="color: #003B4F;">for</span> fish <span class="kw" style="color: #003B4F;">in</span> fishes:</span>
<span id="cb1-82">    fish.update()</span>
<span id="cb1-83">    fish.display()</span>
<span id="cb1-84"></span>
<span id="cb1-85">run()</span></code></pre></div>
<p>Lediglich die Pfadangaben für die Bildchen, die – immer noch – aus dem freien (<a href="https://creativecommons.org/publicdomain/zero/1.0/">CC0 1.0 Universal</a>) <a href="https://www.kenney.nl/assets/fish-pack">FishPack</a> von <em>Kenney.nl</em> stammen, mußte ich, nachdem ich sie in mein Trinket hochgeladen hatte, anpassen (sie liegen dort per Default im gleichen Verzeichnis wie das Skript). Danach wuselten die Fische durch das Aquarium, als hätte es gar keinen Umzug gegeben:</p>
<iframe src="https://trinket.io/embed/python/182652f95f?outputOnly=true&amp;runOption=run&amp;start=result" width="670" height="570" frameborder="0" marginwidth="0" marginheight="0" allowfullscreen="">
</iframe>
<p>Geil ist natürlich auch, daß man das fertige Trinket relativ einfach in die eigene Website einbinden kann (man verliert aber dadurch eventuell das responsive Verhalten der Seite). Und daß Trinket Emojis beherrscht, hatte ich erwartet, aber hier noch einmal getestet.</p>
<p>Hier findet Ihr das <a href="https://trinket.io/python/182652f95f">fertige Trinket</a> zum Kopieren/Nachvollziehen und für eigene Experimente.</p>
<p>Jetzt habe ich erst einmal genug mit dem Processing-Mode von Trinket experimentiert. Bis zu meinem <a href="http://blog.schockwellenreiter.de/2022/10/2022103001.html">Abschied von TigerJython</a> (wegen der seltsamen proprietären Lizenz) war ich jedoch auch von dem Turtle-Mode des Tigers fasziniert. Trinket soll ebenfalls eine leistungsfähige Schildkröten-Implementierung besitzen. Die werde ich mir als nächstes mal vorknöpfen. Dafür werde ich zum wiederholten Mal die <a href="https://www.youtube.com/@TokyoEdTech">Videos von TokyoEdtech</a> (aka <em><a href="https://christianthompson.com/">Christian Thompson</a></em>) plündern. (Ihr erinnert Euch? Das ist der Mann, der Unglaubliches mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/turtlepython.html">Pythons Turtle</a> anstellt. Die kann man sich daher gar nicht oft genug anschauen.) Ihr seht, ich habe zu tun. <em>Still digging!</em></p>



 ]]></description>
  <category>Python</category>
  <category>Processing</category>
  <category>Trinket</category>
  <category>Turtle</category>
  <guid>https://kantel.github.io/posts/2023022601_aquarium_trinket/index.html</guid>
  <pubDate>Sun, 26 Feb 2023 16:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023022601_aquarium_trinket/images/aquariumtrinket.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Trinket cont.: Amöben in der Petrischale (2)</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023022402_amoeben_2/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52709094890/"><img src="https://kantel.github.io/posts/2023022402_amoeben_2/images/amoeba2-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Meine Erkundungen von <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/trinket.html">Trinket</a> und der darin eingebauten Python-Version von <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processing.html">Processing</a> sind zu einem vorläufigen Abschluß gekommen: Ich habe weiter mit den virtuellen Amöben aus dem wunderbaren Buch »<a href="https://nostarch.com/Learn-Python-Visually">Learn Python Visually</a>« (Seiten 207 ff.) von <em>Tristan Bunn</em> experimentiert.</p>
<iframe src="https://trinket.io/embed/python/a2752d8550?runOption=run&amp;start=result" width="100%" height="600" frameborder="0" marginwidth="0" marginheight="0" allowfullscreen="">
</iframe>
<p>Das entsprechende Trinket <a href="https://trinket.io/library/trinkets/a2752d8550">findet Ihr hier</a>.</p>
<p>Als erstes Zwischenergebnis kann ich sagen, daß der Processing-Mode in Trinket tatsächlich sehr brauchbar ist. In der Performance kann er durchaus mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/py5.html">Py5</a>, dem freundlichen Python3-Port von Processing, mithalten. Und wenn ich aus dem obigen Code die erste und die letzte Zeile entferne und den <em>CamelCase</em> der Processing-internen Befehle und Variablen in den <em>SnakeCase</em> von Python 3 umwandle (also zum Beispiel <code>strokeWeight</code> zu <code>stroke_weight</code>), dann läuft der Sketch auch ohne Probleme mit Py5.</p>
<p>Allerdings fehlt das von mir so geliebte <code>with</code> zum <em>pythonischen</em> Klammern von Transformationen und Zuständen. So ist zum Beispiel in obigem Code</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="cf" style="color: #003B4F;">with</span> beginShape():  <span class="co" style="color: #5E5E5E;"># in Py5: with begin_shape():</span></span>
<span id="cb1-2">  befehle()</span></code></pre></div>
<p>nicht möglich, sondern es muß stattdessen wie in obigem Beispiel in</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1">beginShape()</span>
<span id="cb2-2">befehle</span>
<span id="cb2-3">endShape()</span></code></pre></div>
<p>ohne Einrückung (!) geklammert werden. Da dies jedoch sowohl in Py5 wie auch in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processingpy.html">Processing.py</a> alternativ ebenfalls möglich ist, ist es nicht schön, aber ich kann damit leben.</p>
<p>Testweise habe ich auch ein wenig mit der Trinket/Processing-Implementierung von <code>PVector()</code> gespielt. Hier scheint ähnliches zu gelten wie für <code>beginShape</code> … <code>endShape</code> oder <code>pushMatrix</code> … <code>popMatrix</code>. Zwar ist die Klasse <code>PVector()</code> vorhanden, aber sie scheint sehr stark an die Java-Implementierung angelehnt. Die meisten der schönen Python-typischen Shortcuts funktionieren nicht. Zur Orientierung sollte man sich daher an die <a href="https://processing.org/reference/PVector.html">Processing-Referenz</a> halten.</p>
<p>Da die Klasse aber <code>PVector()</code> und nicht <a href="https://p5js.org/reference/#/p5.Vector">wie in P5.js</a> <code>p5.Vector()</code> heißt, läßt dies jedoch keine Rückschlüsse zu, welche JavaScript-Implementierung von Python und/oder Processing hinter Trinket werkelt. Hier tappe ich leider immer noch völlig im Dunkeln. Aber egal, solange es funktioniert …</p>
<p>Und es funktioniert ziemlich gut. Daher werde ich erst einmal mit Trinket weiterbasteln. <em>Still digging!</em></p>
<section id="literatur" class="level3">
<h3 class="anchored" data-anchor-id="literatur">Literatur</h3>
<p>Tristan Bunn: <em>Learn Python Visually. Creative Coding with Processing.py</em>, San Francisco CA (no starch press) 2021</p>


</section>

 ]]></description>
  <category>Python</category>
  <category>Processing</category>
  <category>Trinket</category>
  <guid>https://kantel.github.io/posts/2023022402_amoeben_2/index.html</guid>
  <pubDate>Fri, 24 Feb 2023 19:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023022402_amoeben_2/images/amoeba2.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Google korrigiert wieder Sicherheitslücken in Chrome</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023022401_chrome_update/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.metmuseum.org/art/collection/search/373924"><img src="https://kantel.github.io/posts/2023022401_chrome_update/images/pooloftears-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Google veröffentlicht ein neues Update der Version 110 (110.0.5481.177/.178) seines Browsers Chrome und schließt erneut <a href="https://chromereleases.googleblog.com/2023/02/stable-channel-desktop-update_22.html">kritische Sicherheitslücken</a>.</p>
<p>Chrome aktualisiert sich (außer bei Linux) über die integrierte Update-Funktion, kann aber – wenn es pressiert – auch hier <a href="https://www.google.com/intl/de/chrome/browser/">geladen werden</a>. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>



 ]]></description>
  <category>News</category>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2023022401_chrome_update/index.html</guid>
  <pubDate>Fri, 24 Feb 2023 16:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023022401_chrome_update/images/pooloftears.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Das PhotoTAN-Verfahren der Deutschen Bank ist absurdes Sicherheitstheater</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023022301_phototan_deutsche_bank/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://kantel.github.io/posts/2023022301_phototan_deutsche_bank/images/phototan.jpg"><img src="https://kantel.github.io/posts/2023022301_phototan_deutsche_bank/images/phototan-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Das PhotoTAN-Verfahren der Deutschen Bank (und vermutlich auch anderer Banken) ist ein abstruses Sicherheitstheater aus dem Tollhaus. Mir war mein altes Mobilphone vor einigen Monaten abgeraucht und ich hatte mir ein neues zugelegt – SIM-Karte und Telephonnummer hatte ich aber behalten. Nun kam ich in die Verlegenheit, eine Kreditkartentransaktion bestätigen zu müssen (im Klartext: Ich wollte heißen Scheiß über das Internet einkaufen). Diese Bestätigung sollte laut Anbieter einfach und schnell zu erledigen sein. Aber sie war der Beginn einer absurden Odyssee.</p>
<p>Sie begann damit, daß mir auf der Bestätigungsseite eine TAN angezeigt wurde, die ich mit meiner Deutschen Bank PhotoTAN-App einscannen sollte. Dafür mußte ich aber erst einmal diese App herunterladen und installieren (Ihr seht schon – ich kaufe nur sehr selten im Internet ein). Nach der Installation verlangte diese App aber, daß ich erst die TAN meines »Aktivierungsbriefes« einscannen müsse, sonst verweigere sie die Arbeit. Also kramte ich den Aktivierungsbrief hervor und scannte die dortige TAN. Mit dem Ergebnis, daß mir die App mitteilte, daß diese TAN – wegen dem neuen Telephon – ungültig sei und ich doch auf der Webseite der Deutschen Bank einen neuen Aktivierungsbrief anfordern möchte.</p>
<p>Also versuchte ich, mich auf der Website einzuloggen, doch nach Eingabe meiner Login-Daten tauchte wieder eine Seite mit einer TAN auf, die ich mit meiner – wegen fehlender Aktivierungs-TAN die Zusammenarbeit verweigernden – PhotoTAN-App einscannen sollte. Also noch einmal und zum Mitschreiben: Um eine neue Aktivierungs-TAN zu bekommen, die die PhotoTAN-App freischaltet, muß man eine TAN mit eben dieser wegen fehlender Aktivierungs-TAN nicht funktionierenden PhotoTAN-App einscannen, da man sonst die PhotoTAN-App nicht freigeschaltet bekommt, die – und nur die – das Freischalten der PhotoTAN-App ermöglicht.</p>
<p>Ich wollte diesen Irrsinn nicht glauben und habe Stunden damit verbracht, das System auszutricksen um den Aktivierungsbrief doch noch online anfordern zu können. Danach habe ich es altväterlich mit einem Telephonat versucht: Nach drei verschiedenen Hotlines, die sich alle für nicht zuständig erklärten und mich weiterleiteten, erreichte ich schließlich jemanden bei der Deutschen Bank, der diese Absurdität bestätigte und für völlig normal hielt, und – nach einer komplizierten Authentifizierungsprozedur – mir versprach, einen neuen Aktivierungsbrief zuzuschicken.</p>
<p>Jetzt harre ich erst einmal der Dinge, die da kommen werden. Den »heißen Scheiß« werde ich mir aber nicht mehr online, sondern in einem der vielbeschworenen kleinen Läden vor Ort besorgen. Denn mit Bus und Bahn fahre ich schneller in die Innenstadt als im Internet durch das Sicherheitstollhaus der Deutschen Bank.</p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2023022301_phototan_deutsche_bank/index.html</guid>
  <pubDate>Thu, 23 Feb 2023 18:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023022301_phototan_deutsche_bank/images/phototan.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Amöben in der Petrischale (1)</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023022001_amoeben_1/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52700329802/"><img src="https://kantel.github.io/posts/2023022001_amoeben_1/images/amoeba1-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Ich habe meine <a href="https://kantel.github.io/posts/2023021601_my_first_trinket/">hier begonnenen</a> Experimente mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/trinket.html">Trinket</a> und dem dort unterstützten Python/<a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processing.html">Processing</a>-Mode fortgesetzt. Dazu habe ich angefangenen, die Amöben-Kultur aus <em>Tristan Bunns</em> Buch »<a href="https://nostarch.com/Learn-Python-Visually">Learn Python Visually</a>« (Seite 207 ff) als Trinket zu implementieren. Die Portierung ist noch nicht vollständig und besteht bisher aus diesem Code:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">from</span> processing <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;">from</span> random <span class="im" style="color: #00769E;">import</span> randint, uniform</span>
<span id="cb1-3"></span>
<span id="cb1-4">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">600</span>, <span class="dv" style="color: #AD0000;">600</span></span>
<span id="cb1-5">MIN_DIA <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">50</span></span>
<span id="cb1-6">MIN_DIA2 <span class="op" style="color: #5E5E5E;">=</span> MIN_DIA<span class="op" style="color: #5E5E5E;">//</span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb1-7">MAX_DIA <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">150</span></span>
<span id="cb1-8">MAX_DIA2  <span class="op" style="color: #5E5E5E;">=</span> MAX_DIA<span class="op" style="color: #5E5E5E;">//</span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="kw" style="color: #003B4F;">class</span> Amoeba():</span>
<span id="cb1-11">  </span>
<span id="cb1-12">  <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, _x, _y, _diameter):</span>
<span id="cb1-13">    <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">=</span> _x</span>
<span id="cb1-14">    <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">=</span> _y</span>
<span id="cb1-15">    <span class="va" style="color: #111111;">self</span>.d <span class="op" style="color: #5E5E5E;">=</span> _diameter</span>
<span id="cb1-16">    <span class="va" style="color: #111111;">self</span>.nucleus <span class="op" style="color: #5E5E5E;">=</span> {</span>
<span id="cb1-17">      <span class="st" style="color: #20794D;">"fill"</span>: [<span class="st" style="color: #20794D;">"#FF0000"</span>, <span class="st" style="color: #20794D;">"#FF9900"</span>, <span class="st" style="color: #20794D;">"#FF00FF"</span>,</span>
<span id="cb1-18">               <span class="st" style="color: #20794D;">"#00FF00"</span>, <span class="st" style="color: #20794D;">"#0099FF"</span>][<span class="bu" style="color: null;">int</span>(randint(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">4</span>))],</span>
<span id="cb1-19">      <span class="st" style="color: #20794D;">"x"</span>: <span class="va" style="color: #111111;">self</span>.d<span class="op" style="color: #5E5E5E;">*</span>uniform(<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.15</span>, <span class="fl" style="color: #AD0000;">0.15</span>),</span>
<span id="cb1-20">      <span class="st" style="color: #20794D;">"y"</span>: <span class="va" style="color: #111111;">self</span>.d<span class="op" style="color: #5E5E5E;">*</span>uniform(<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.15</span>, <span class="fl" style="color: #AD0000;">0.15</span>),</span>
<span id="cb1-21">      <span class="st" style="color: #20794D;">"d"</span>: <span class="va" style="color: #111111;">self</span>.d<span class="op" style="color: #5E5E5E;">/</span>uniform(<span class="fl" style="color: #AD0000;">2.5</span>, <span class="dv" style="color: #AD0000;">4</span>)</span>
<span id="cb1-22">    }</span>
<span id="cb1-23">    </span>
<span id="cb1-24">  <span class="kw" style="color: #003B4F;">def</span> display(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-25">    <span class="co" style="color: #5E5E5E;"># Cell Nucleus</span></span>
<span id="cb1-26">    fill(<span class="va" style="color: #111111;">self</span>.nucleus[<span class="st" style="color: #20794D;">"fill"</span>])</span>
<span id="cb1-27">    noStroke()</span>
<span id="cb1-28">    ellipse(<span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">+</span> <span class="va" style="color: #111111;">self</span>.nucleus[<span class="st" style="color: #20794D;">"x"</span>], <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">+</span> <span class="va" style="color: #111111;">self</span>.nucleus[<span class="st" style="color: #20794D;">"y"</span>],</span>
<span id="cb1-29">            <span class="va" style="color: #111111;">self</span>.nucleus[<span class="st" style="color: #20794D;">"d"</span>], <span class="va" style="color: #111111;">self</span>.nucleus[<span class="st" style="color: #20794D;">"d"</span>])</span>
<span id="cb1-30">    <span class="co" style="color: #5E5E5E;"># Cell Membrane</span></span>
<span id="cb1-31">    fill(<span class="bn" style="color: #AD0000;">0x880099AA</span>)</span>
<span id="cb1-32">    stroke(<span class="st" style="color: #20794D;">"#FFFFFF"</span>)</span>
<span id="cb1-33">    strokeWeight(<span class="dv" style="color: #AD0000;">3</span>)</span>
<span id="cb1-34">    ellipse(<span class="va" style="color: #111111;">self</span>.x, <span class="va" style="color: #111111;">self</span>.y, <span class="va" style="color: #111111;">self</span>.d, <span class="va" style="color: #111111;">self</span>.d)</span>
<span id="cb1-35"></span>
<span id="cb1-36">amoebas <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb1-37"></span>
<span id="cb1-38"><span class="kw" style="color: #003B4F;">def</span> setup():</span>
<span id="cb1-39">  size(WIDTH, HEIGHT)</span>
<span id="cb1-40">  <span class="cf" style="color: #003B4F;">for</span> _ <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">15</span>):</span>
<span id="cb1-41">    amoeba <span class="op" style="color: #5E5E5E;">=</span> Amoeba(randint(MAX_DIA2, width <span class="op" style="color: #5E5E5E;">-</span> MAX_DIA2),</span>
<span id="cb1-42">                    randint(MAX_DIA2, height <span class="op" style="color: #5E5E5E;">-</span> MAX_DIA2),</span>
<span id="cb1-43">                    randint(MIN_DIA, MAX_DIA))</span>
<span id="cb1-44">    amoebas.append(amoeba)</span>
<span id="cb1-45">  </span>
<span id="cb1-46"><span class="kw" style="color: #003B4F;">def</span> draw():</span>
<span id="cb1-47">  background(<span class="st" style="color: #20794D;">"#004477"</span>)</span>
<span id="cb1-48">  <span class="cf" style="color: #003B4F;">for</span> amoeba <span class="kw" style="color: #003B4F;">in</span> amoebas:</span>
<span id="cb1-49">    amoeba.display()</span>
<span id="cb1-50"></span>
<span id="cb1-51"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"I did it, Babe!"</span>)    </span>
<span id="cb1-52">run()</span></code></pre></div>
<p>Das Trinket könnt Ihr <a href="https://trinket.io/python/da6e080c77">hier finden</a>. Ich werde mich noch an einer vollständige Portierung dieses Beispielprogramms versuchen. <em>Tristan Bunn</em> setzt dabei unter anderem auf Processings <code>PVector()</code>-Klasse. Die <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/p5js.html">P5.js</a>-Implementierung dieser Klasse folgt einer anderen Syntax, daher bin ich auf das Ergebnis gespannt. <em>Still digging!</em></p>



 ]]></description>
  <category>Python</category>
  <category>Processing</category>
  <category>Trinket</category>
  <guid>https://kantel.github.io/posts/2023022001_amoeben_1/index.html</guid>
  <pubDate>Mon, 20 Feb 2023 19:45:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023022001_amoeben_1/images/amoeba1.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Ricarda Lang und der Dreizack</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023021802_ricarda_lang_und_der_dreizack/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://pbs.twimg.com/media/FpF3pNjXsAAgApv?format=jpg&amp;name=900x900"><img src="https://kantel.github.io/posts/2023021802_ricarda_lang_und_der_dreizack/images/rlang-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p><strong>So doof kann die Grünen-Vorsitzende doch nicht sein, oder?</strong> Ich hatte das Photo, als es mir erstmals in den asozialen Netzen unterkam, für ein Fake gehalten. Doch nein, es kam vom <a href="https://twitter.com/Ricarda_Lang/status/1626212505671331841">»offiziellen« Twitter-Account</a> der grünen Bundesvorsitzenden. Da posiert <em><a href="https://de.wikipedia.org/wiki/Ricarda_Lang">Ricarada Lang</a></em> mit einem Plastikschwert in den Farben Blau-Gelb, bedruckt mit Symbolen, die man mit viel Wohlwollen als einen »<a href="https://de.wikipedia.org/wiki/Trysub">Trysub</a>« (Dreizack), dem ukrainischen Wappen und (Kriegs-)flaggensymbol interpretieren kann. Jedoch auch eine Deutung als »<a href="https://www.belltower.news/russland-ukraine-krieg-symbole-rechtsextremer-gruppen-in-russland-und-in-der-ukraine-128917/">Wolfsangel</a>«, beliebtes Symbol der faschistischen <a href="https://de.wikipedia.org/wiki/Regiment_Asow">»Asow«-Freischärler</a> und einst das Logo der NSDAP sowie von zahlreichen SS-Divisionen ist möglich.</p>
<p>Vor soviel Dummheit schützt auch der Hashtag <code>#karneval</code> nicht. Die Grünen haben sich damit einmal mehr als Kriegstreiber und Bellizisten enttarnt.</p>



 ]]></description>
  <category>Ukraine</category>
  <category>Grüne</category>
  <guid>https://kantel.github.io/posts/2023021802_ricarda_lang_und_der_dreizack/index.html</guid>
  <pubDate>Sat, 18 Feb 2023 19:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023021802_ricarda_lang_und_der_dreizack/images/rlang.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
