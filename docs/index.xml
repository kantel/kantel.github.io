<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Der Schockwellenreiter</title>
<link>https://kantel.github.io/index.html</link>
<atom:link href="https://kantel.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description>Schockwellenreiter</description>
<generator>quarto-1.2.269</generator>
<lastBuildDate>Fri, 30 Dec 2022 17:30:00 GMT</lastBuildDate>
<item>
  <title>Neukölln: Haben die alle einen Knall?</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2022123001_lidl_neukolln/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52596164214/"><img src="https://kantel.github.io/posts/2022123001_lidl_neukolln/images/lidlglasowerstrassenk-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Kaum geht die Sonne unter, bricht in diesen Tagen in den Straßen Neuköllns die Hölle aus, denn jedes Kleinhirn glaubt, jetzt unbedingt mit Feuerwerkskörpern Krieg spielen zu müssen. Woher sie die Feuerwerkskörper haben? Dumme Frage – von Lidl natürlich, da kann man sie sich – mit ein wenig <em>Chuzpe</em> – umsonst besorgen. <a href="https://www.berliner-zeitung.de/news/blitzeinbruch-bei-lidl-in-neukoelln-wohl-rollwagen-mit-feuerwerk-gestohlen-li.302285">Wie zum Beispiel hier</a>:</p>
<p>Mehrere Personen sollen gestern abend gegen 20.30 Uhr gewaltsam in den Lebensmitteldiscounter Lidl in der Glasower Straße eingedrungen sein und haben eine ganze Wagenladung Feuerwerk gestohlen. Der Einbruch war wohl eine Minutensache und es gab einen Verletzten. Die Täter sind unerkannt mit Auto <strong>und</strong> Einkaufswagen entkommen.</p>
<p>Pikant ist, daß nur wenige Meter weiter, in der Juliusstraße, das Hauptquartier der Neuköllner Operettenpolizisten (aka Ordnungsamt) seinen Sitz hat. Aber die trauen sich schon lange nicht mehr auf die Straße. Nicht nur, weil sie Angst vor der angeblichen oder tatsächlichen Gewaltbereitschaft des Neuköllner Straßenmobs haben, sondern weil ihre Chefin, die Neuköllner Stadträtin <em><a href="https://www.berlin.de/ba-neukoelln/politik-und-verwaltung/bezirksamt/geschaeftsbereich-ordnung/">Sarah Nagel</a></em> (Linke) ihnen einen <a href="https://www.berliner-zeitung.de/news/neukoellner-stadtraetin-verhinderte-razzia-ihr-droht-jetzt-die-abwahl-li.297382">Maulkorb verpaßt</a> hat. Sie hält nämlich das Einhalten und das Durchsetzen von Gesetzen für »<a href="https://mobile.twitter.com/dienagel_/status/1594603923310268416">strukturellen Rassismus</a>«. Dafür hatte sich dann jüngst eine bekannte Berliner Clan-Größe bei Ihr bedankt und sie als »Ehrenfrau« bezeichnet. Mit dieser Auszeichung würde ich mich auf mein Sofa zurückziehen und bitterlich weinen. Denn deutlicher kann das Scheitern einer gutgemeinten, aber wie vieles Gutgemeinte schlecht gemachten, (angeblich linken) Politik nicht gezeigt werden.</p>
<p>Für diese Peinlichkeit landete Frau Nagel in diesem Jahr folgerichtig auf <a href="https://www.berliner-woche.de/bezirk-neukoelln/c-politik/zwei-stadtraete-auf-tip-liste-platziert_a367520">Platz 27 der Liste der 33 peinlichsten Berlinerinnen und Berliner</a>, die das Stadtmagazin <em>tip</em> jährlich herausgibt.</p>
<p><strong>Und wo ich gerade so schön im Rant bin</strong>: Auf Platz 30 der obigen Liste landete mit <em>Falko Liecke</em> (CDU) ein weiterer Neuköllner Stadtrat. Dieser, weil er in seinem Buch »Brennpunkt Deutschland« ganz gewaltig von <em>Thilo Sarrazin</em> (SPD) abgeschrieben habe sich schamlos eines »Heinz-Buschkowsy-Populismus« bediene, so das Stadtmagazin.</p>
<p><em>Falko Liecke</em> will offensichtlich in die Fußstapfen seiner Vorgängerin <em>Franziska Giffey</em> treten, die vorgemacht hat, das Abschreiben und ein damit verbundenes Erschleichen eines Doktortitels einen nicht daran hindert, in Berlin Regierende zu werden. Und ich halte Herrn Liecke für ehrgeizig genug, daß er ebenfalls nach diesem Posten strebt. Dafür muß man schon mal ein wenig abschreiben.</p>
<p>Aber er ist und bleibt in dieser Rolle ein Ritter der traurigen Gestalt. Denn um <del>Sultan</del> Regierender zu werden, muß er erst einmal den Kalifen beerben. Doch unangefochtener Kalif der Berliner CDU ist nun mal <em>Kai (Kai wer?) Wegner</em>. Und so bleibt für <em>Falko Liecke</em> nur die undankbare Rolle des bitterbösen <em><a href="https://de.wikipedia.org/wiki/Isnogud_%E2%80%93_Der_bitterb%C3%B6se_Gro%C3%9Fwesir">Isnogud</a></em>, die er allerdings mir Bravour ausfüllt. Alleine dafür hat er den Platz 30 auf der Schamliste des <em>tip</em> verdient. Nur die Beurteilung über Liecke »Seine Borniertheit illustrierte, daß er sich für Menschen im Stadtteil jenseits des eigenen Lebensstils so wenig interessiert wie ein Kaninchenzüchter für Heilbutt«, die trifft zwar auf ihn, aber auch auf jeden anderen (nicht nur) Neuköllner Politiker und auf jede andere (nicht nur) Neuköllner Politikerin zu.</p>
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52595413527/"><img src="https://kantel.github.io/posts/2022123001_lidl_neukolln/images/leergeklaut.jpg" class="img-fluid"></a><br><em>Heute bei Lidl in der Glasower Straße: Leergeklaut.</em></p>
<p><strong>War sonst noch was?</strong> Ach ja, eine Beamtin der Berliner Polizei wurde am Donnerstagnachmittag am Ohr verletzt, nachdem ein 18-jähriger junger Mann <a href="https://www.berliner-zeitung.de/news/berlin-neukoelln-18-jaehriger-beschiesst-polizistin-mit-boeller-li.302337">eine Gruppe von Einsatzkräften in Neukölln mit Pyrotechnik beworfen hatte</a>. Sie mußte ambulant in einem Krankenhaus behandelt werden. Da gehen sie hin, Eure (strukturell rassistischen) Böller.</p>
<p><em>(Photos (<a href="http://creativecommons.org/licenses/by-nc-nd/2.0/">cc</a>): Jörg Kantel)</em></p>



 ]]></description>
  <category>Microblogging</category>
  <category>Neukölln</category>
  <guid>https://kantel.github.io/posts/2022123001_lidl_neukolln/index.html</guid>
  <pubDate>Fri, 30 Dec 2022 17:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2022123001_lidl_neukolln/images/lidlglasowerstrassenk.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Dann doch lieber Tigerbabies</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/20221222902_microblogging/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://images.fineartamerica.com/images/artworkimages/mediumlarge/2/the-hungry-tiger-of-oz-john-r-neill.jpg"><img src="https://kantel.github.io/posts/20221222902_microblogging/images/the-hungry-tiger-of-oz-john-r-neill-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Seit heute darf offiziell Feuerwerk verkauft werden. Man hört es! Vor Lidl bildeten sich schon in der Früh lange Schlangen. Denn all die jungen Männer mit den kleinen Hirnen und den noch kleineren Schwänzen <em>(<a href="https://www.mdr.de/brisant/promi-klatsch/greta-thunberg-tweet-100.html">Greta Thunberg</a>)</em> müssen ihre nicht vorhandene Männlichkeit mit lautstarker Böllerei in Neuköllns Straßen kompensieren.</p>
<p>Dann sollten sie doch lieber weiter mit <a href="https://www.rbb24.de/panorama/beitrag/2022/12/polizeieinsatz-neukoelln-tiger-clan.html">Tigerbabies auf Instagram posieren</a> und sich anschließend von diesen auffressen lassen.</p>



 ]]></description>
  <category>Microblogging</category>
  <category>Neukölln</category>
  <guid>https://kantel.github.io/posts/20221222902_microblogging/index.html</guid>
  <pubDate>Thu, 29 Dec 2022 16:45:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/20221222902_microblogging/images/the-hungry-tiger-of-oz-john-r-neill.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Tiled-Tutorials (nicht nur) für Dummies</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/20221222901_tiled_for_dummies/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52593093821/"><img src="https://kantel.github.io/posts/20221222901_tiled_for_dummies/images/pgzhack01-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Da ich nicht wirklich vorhersehen kann, wie anläßlich des bevorstehenden Jahreswechsels meine Zeitplanung aussehen wird, gibt es diese Woche die freitäglichen Video-Tutorials schon am Donnerstag: <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/tiled.html">Tiled</a> ist ein freier (GPL), plattformübergreifender (Linux, macOS, Windows) Map-Editor für Computerspiele, der so populär ist, daß seine Dateiformate <code>.tmx</code> und <code>.tsx</code> so etwas wie ein Standard sind. Allerdings lassen sich die erzeugten Karten auch in andere Formate (zum Beispiel als CSV-Dateien) exportieren.</p>
<p>Trotz seiner Popularität gibt es erstaunlich wenige (Video-) Tutorials zu Tiled. Zwar ist die Beutzerführung duch das Programm recht einleuchtend und es daher – zumindest in den Grundzügen – recht schnell zu erlernen, aber es gibt doch an einigen Stellen Haken und Ösen, die man kennen sollte. Daher habe ich einige Tutorials zusammengesucht, die ich Euch vorstellen möchte und die Euch über diese Klippen hinweghelfen sollen.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/OCCzcWrnU88" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="">
</iframe>
<p>Denn Anfang macht der recht kurzlebige Kanal <em>Arts and Entertainment Technologies</em> mit seinem halbstündigen Video »<a href="https://www.youtube.com/watch?v=OCCzcWrnU88">How to Use Tiled</a>«, in dem er zeigt, wie man aus mit Photoshop erzeugten Bildern in Tiled ansprechende Karten schafft. Dazu gibt es noch ein zehnminütiges <em>follow up</em> »<a href="https://www.youtube.com/watch?v=WEtml6DuwqQ">Using the Terrain Brush in Tiled</a>«, das ein weniger bekanntes Tiled-Feature vorstellt.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/_FPA1FvMjTI" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="">
</iframe>
<p>Doch natürlich geht es auch ohne Photoshop. <em>Havi Averilla Xavier</em> zum Beispiel nutzt in seinem recht jungen, ebenfalls halbstündigen Tutorial »<a href="https://www.youtube.com/watch?v=_FPA1FvMjTI">Tiled for Dummies</a>« das freie (GPL) <a href="http://cognitiones.kantel-chaos-team.de/multimedia/computergraphik/gimp.html">Gimp</a> zusammen mit Tiled. Aber natürlich findet man zum Beispiel auf <a href="https://www.kenney.nl/assets">Kenney.nl</a> oder <a href="https://opengameart.org/">OpenGameArt.org</a> hinreichend viele, vorgefertigte und freie Tilesets, die man alle zusammen mit Tiled nutzen kann.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/9ngQmaW-EUI" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="">
</iframe>
<p>Diesen Umstand macht sich <em>Doolin Digital</em> zunutze. Er verwendet in seinen drei »Tiled Map Editor Tutorials« (<a href="https://www.youtube.com/watch?v=9ngQmaW-EUI">Terrains</a>, (16 Minuten), <a href="https://www.youtube.com/watch?v=f212jaHpXNo">Automapping</a> (25 Minuten) und <a href="https://www.youtube.com/watch?v=MpmHPkwWmBc">Random Mode</a> (9 Minuten)) Tilesets von <em>Jason Perry</em> (aka <a href="http://finalbossblues.com/">finalbossblues</a>), der auf seinen <a href="https://finalbossblues.itch.io/">Itch.io-Seiten</a> neben kommerziellen Assets auch Unmengen von freien Tilesets und Sprites anbietet. Es lohnt sich, dort ein wenig zu stöbern.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/aQd3pDHhm3c" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="">
</iframe>
<p>Zum Schluß noch das 25-minütige Tutorial »<a href="https://www.youtube.com/watch?v=aQd3pDHhm3c">Using the »AutoMap« feature in Tiled to generate dungeon walls</a>« und die sieben Minuten »<a href="https://www.youtube.com/watch?v=IHmF_bRpOAE">Easily create levels/maps for Love2D games</a>«. Das letzte Video ist vor allem für diejenigen unter Euch von Interesse, die die kleine, aber feine <a href="https://en.wikipedia.org/wiki/Lua_(programming_language)">Lua</a>-Engine <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/loeve.html">Löwe2D</a> für die Spiele-Entwicklung nutzen.</p>
<p>Generell gilt mein freitägliches <em>Caveat</em>: Ich habe in die meisten der heute vorgestellten Tutorials bestenfalls nur kurz hereingeschaut. Daher muß ich Euch die Beurteilung der Qualität der Filmchen schon selber überlassen.</p>



 ]]></description>
  <category>Tiled</category>
  <category>Spieleprogrammierung</category>
  <guid>https://kantel.github.io/posts/20221222901_tiled_for_dummies/index.html</guid>
  <pubDate>Thu, 29 Dec 2022 09:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/20221222901_tiled_for_dummies/images/pgzhack01.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Wem hamse die Krone geklaut? – ein Mini-Rollenspiel in Pygame</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/20221222803_stolen_crown/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://camo.githubusercontent.com/65fc10eafe2ed44a17f3038e5702730c2a7d069786341be88b9af3dd828fde10/68747470733a2f2f7261772e6769746875622e636f6d2f6a757374696e6d6569737465722f5468652d53746f6c656e2d43726f776e2d5250472f6d61737465722f73637265656e73686f742e706e67"><img src="https://kantel.github.io/posts/20221222803_stolen_crown/images/stolencrown-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Das Video hatte ich – glaube ich – vor Jahren schon einmal im <em>Schockwellenreiter</em>. Aber jetzt hat es sich mehr oder weniger zufällig wieder in meine Timeline geschmuggelt und einen Entschluß in mir reifen lassen: Wenn ich mit meinen <a href="https://kantel.github.io/posts/20221222601_pizzaplane2_pygame/">fliegenden Pizzen</a> abgeschlossen (und diese alle abgeschossen) habe, wird solch ein Mini-RPG wie »<a href="https://www.youtube.com/watch?v=MkZXaDQfTSo">The Stolen Crown</a>« mein nächstes größeres Spieleprogrammier-Projekt.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/MkZXaDQfTSo" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="">
</iframe>
<p>Denn es besitzt alles, was das Herz eines Hobby-Spiele-Entwicklers begehrt. Die Assets sind Open Source (von den meisten Sprites kenne ich die Quellen), es besitzt eine rundenbasierte Mechanik, die den Programmierer nicht überfordert und ein Kampagnen-Design, das es erlaubt, erst einmal klein anzufangen und dann <em>peu a peu</em> das Spiel auszubauen.</p>
<p>Und der <a href="https://github.com/justinmeister/The-Stolen-Crown-RPG">Quellcode mit sämtlichen Assets</a> ist unter der MIT-Lizenz auf GitHub zu finden.</p>
<p>Über die Engine, die ich verwenden möchte, bin ich mir allerdings noch nicht so klar. Natürlich böte sich <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a> als erstes an, aber gerade für ein Retro-RPG (mit 16x16 oder sogar 8x8 Sprites) wäre auch <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/tic80.html">TIC-80</a> eine Alternative (zumal diese minimalistische Spiele-Engine bei mir schon lange in den Startlöchern steht und mit den Hufen scharrt). Drittens benötigt ein RPG aber auch keine komplexe Mechanik, daher wäre es auch ein guter Einstieg in die Spieleprogrammierung mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/p5py.html">Py5</a>. Die Fülle der Möglichkeiten überfordert mich gerade ein wenig. Ich glaube, ich muß darüber noch ein wenig nachdenken und erst einmal mit den genannten Programmen und Frameworks experimentieren. <em>Still digging!</em></p>



 ]]></description>
  <category>Pygame</category>
  <category>Spieleprogrammierung</category>
  <category>Retrogaming</category>
  <guid>https://kantel.github.io/posts/20221222803_stolen_crown/index.html</guid>
  <pubDate>Wed, 28 Dec 2022 18:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/20221222803_stolen_crown/images/stolencrown.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Processing.py on Replit</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/20221222802_processingpy_replit/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52592110099/"><img src="https://kantel.github.io/posts/20221222802_processingpy_replit/images/procpyreplit-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p><a href="https://www.youtube.com/watch?v=kTOkdaNMGac">Dieses YouTubeVideo</a> hatte mich neugierig gemacht. Aber das Ergebnis war ernüchternd: <a href="http://cognitiones.kantel-chaos-team.de/programmierung/ides/replit.html">Replit</a> ist schnarchlangsam und kommt (bei <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processingpy.html">Processing.py</a>) mit einer mir unverständlichen Fehlermeldung hoch. Aber im Prinzip funktioniert es. Ich glaube jedoch nicht, daß ich damit irgend etwas Ernsthaftes anstellen werden.</p>
<p>Wer sich allerdings selber überzeugen möchte, hier ist mein Test-Replit, eine <a href="https://replit.com/@kantel/Test-Processingpy#main/main.py">Hommage an Kasimir Malewitsch</a>.</p>
<p>Wenn ich wirklich eine Online-IDE für kreatives Programmieren mit Python und Processing.py brauche, sollte ich vorher doch erst einmal <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/trinket.html">Trinket</a> testen. Da habe ich nämlich auch noch einen bisher <a href="http://blog.schockwellenreiter.de/2022/06/2022062501.html">unbenutzten Account</a> rumliegen. <em>Still digging!</em></p>



 ]]></description>
  <category>Processing.py</category>
  <category>Processing</category>
  <category>Python</category>
  <guid>https://kantel.github.io/posts/20221222802_processingpy_replit/index.html</guid>
  <pubDate>Wed, 28 Dec 2022 18:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/20221222802_processingpy_replit/images/procpyreplit.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Neu in meinem Wiki: PyInstaller</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/20221222801_pyinstaller/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://raw.githubusercontent.com/PySimpleGUI/psgcompiler/main/screenshot_for_readme/psgcompiler_screenshot.jpg"><img src="https://kantel.github.io/posts/20221222801_pyinstaller/images/psgcompiler_screenshot-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p><a href="http://www.pyinstaller.org/">PyInstaller</a> hatte ich im April 2019 <a href="http://blog.schockwellenreiter.de/2019/04/2019041002.html">schon einmal auf dem Schirm</a>. Doch da ich damals noch keine rechte Verwendung dafür hatte (<a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processingpy.html">Processing.py</a>-Binaries konnte ich einfacher mit Bordmitteln aus der <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processing.html">Processing</a>-IDE erzeugen), war das Teil bei mir ein wenig in Vergessenheit geraten. Nun aber, im Rahmen meiner Hinwendung zu <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/py5.html">Py5</a> und <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a> rückte die Frage wieder in mein Bewußtsein: Wie erzeuge ich Binaries aus meinen Python-Experimenten?</p>
<p>Und hier scheint PyInstaller die einzige, real-existierende Lösung zu sein. PyInstaller ist ein freier (GPL) Bundler für Python-Anwendungen. Alle notwendigen Abhängigkeiten werden zusammen in einem Paket gebündelt, das ausgeführt werden kann. PyInstaller muß unter dem Betriebssystem installiert und ausgeführt werden, für das das erstellte Paket gedacht ist, also Windows-Apps können nur unter Windows, macOS-Apps nur unter macOS und Linux-Apps mir mit einer Linux-Kiste erstellt werden. Dadurch können allerdings auch Module mit »fremden« Quellsprachen (zum Beispiel C (Pygame/SDL) und FORTRAN (Numpy)) mitübersetzt und eingebunden werden.</p>
<p>Das Teil wird aktuell weiter gepflegt, die <a href="https://pyinstaller.org/en/stable/">Homepage</a> ist gleichzeitig die Dokumentation, der <a href="https://github.com/pyinstaller/pyinstaller">Quellcode</a> ist auf GitHub zu finden (die letzte Aktualisierung fand vor einem Monat statt) und das Teil <a href="https://pypi.org/project/pyinstaller/">existiert auch auf PyPI</a> (was eine einfache Installation verspricht).</p>
<p>Daher habe ich dem Programm jetzt endlich auch <strong><a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/pyinstaller.html">eine Seite</a></strong> in <a href="http://cognitiones.kantel-chaos-team.de/">meinem Wiki</a> spendiert. Wenn ich mein kleines <a href="https://kantel.github.io/posts/20221222601_pizzaplane2_pygame/">Pizza-Plane-Spiel</a> fertig habe, werde ich daraus auch einmal testweise für Mac und mein Chromebook Binaries erzeugen (eine Windows-Kiste besitze ich nicht). Ich werde über das Ergebnis dann berichten. <em>Still digging!</em></p>
<p>Der Schöpfer von <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/pysimplegui.html">PySimpleGUI</a> hat übrigens damit eine Art <a href="https://github.com/PySimpleGUI/psgcompiler">GUI für den PyInstaller</a> gebastelt. Warum? Vermutlich, weil es geht …</p>



 ]]></description>
  <category>Python</category>
  <guid>https://kantel.github.io/posts/20221222801_pyinstaller/index.html</guid>
  <pubDate>Wed, 28 Dec 2022 10:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/20221222801_pyinstaller/images/psgcompiler_screenshot.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Einen Kiezblock für Neubritz?</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/20221222701_kiezblock_kranoldplatz/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/18359036206/"><img src="https://kantel.github.io/posts/20221222701_kiezblock_kranoldplatz/images/bisnichtsmehrgeht-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Die Idee eines <a href="https://www.kiezblocks.de/">Kiezblocks</a> steht für ein Wohnviertel ohne Durchgangsverkehr. In einem Kiezblock soll es zwar möglich sein, mit einem Auto in das Viertel zu fahren, aber nicht mehr, das Gebiet zu durchfahren, um es so als Abkürzung zu nutzen. Die Idee stammt urprünglich aus Barcelona, doch geht die deutsche Variante einen anderen Weg: Statt den »Superblock« von oben zu verordnen, soll er – so die <a href="https://www.agorakoeln.de/2022/04/kiezblocks-in-berlin-interview-mit-changing-cities/">Kiezblock-Initative(n) in Berlin</a> – von unten kommen, von den Anwohnern gestützt und gefordert.</p>
<p>In Berlin gibt es – unterstützt von <a href="https://changing-cities.org/">Changing Cities e.V.</a> – schon etliche <a href="https://changing-cities.org/kampagnen/kiezblocks/">Kiezblock-Initiativen</a> (etwa 180, eine <a href="https://www.kiezblocks.de/kiezblocks/">Übersicht gibt es hier</a>). Ich dachte bisher, daß das in der Hauptsache eine Hipster-Angelegenheit sei, in der – <a href="https://www.gruene-neukoelln.de/kiezblocks">unterstützt von den Grünen</a> – die selbsternannte urbane Mittelschicht ihre Interessen durchsetzen will. Die <a href="https://susanna-kahlefeld.de/neukoelln/kiezblocks">Neuköllner Vorzeigeprojekte</a> im <a href="https://schillersstrassen.de/">Schillerkiez</a>, <a href="https://www.kiezblocks.de/reuter/">Reuterkiez</a> und <a href="https://kiezblock-rixdorf.de/">Rixdorf</a> (alles »Kreuzköllner« Hipster-Hochburgen) erhärteten diesen Verdacht.</p>
<p>Dabei könnte »unser« Kiez einen Kiez-»Block« durchaus vertragen. Denn zum einen hat die verfehlte Verkehrspolitik und der damit verbundene Bau eines Autobahntunnels durch Britz erwartungsgemäß die Verkehrssituation nicht entspannt, sondern verschärft: Verkehr zieht nun einmal Verkehr an – und so ist der Tunnel Britz nahezu täglich gesperrt und es quälen sich Unmengen von Autos auf der Suche nach einer Umfahrung durch die schmalen Straßen von Neubritz.</p>
<p>Zum anderen sind die Neuköllner Magistralen Britzer-Damm/Hermannstraße und Buschrugallee/Karl-Marx-Straße so überlastet, daß sich auch dieser Verkehr Schleichwege durch die engen Gassen von Neubritz sucht.</p>
<p>Daher waren <a href="http://www.gabi-kantel.de/">Gabi</a> und ich angenehm überrascht, als wir erfuhren, daß es auch für Neubritz unter dem Namen »<a href="https://www.kiezblocks.de/kranold/">Kranold-Kiezblock</a>« eine entsprechende Initiative gibt, die auch bei uns und mit uns einen Kiezblock initiieren will. Und sei es nur, damit dabei die <a href="https://www.lok-report.de/news/deutschland/aus-den-laendern/item/33907-berlin-kiezbloecke-gefaehrden-oepnv-versorgung.html">Interessen der ÖPNV-Nutzer</a> (ich fühle mich seit <a href="http://blog.schockwellenreiter.de/2021/11/2021111201.html">meinem Schlaganfall</a> zu klapprig und zu alt für das Fahrrad) nicht unter den Tisch fallen, sollten wir dabei mitmischen.</p>
<p>Der Verein »<a href="https://proneubritz.jimdofree.com/">ProNeubritz e.V.</a>« hat daher auf seiner monatlichen (und öffentlichen!) Beiratssitzung am Montag, den 9. Januar 2023 um 18:30 Uhr in den Räumen von »MischMit« in der Glasower Straße 67 in 12051 Berlin Vertreter des Kiezblocks Kranoldplatz eingeladen, damit sie ihr Konzept vorstellen und es diskutieren können. Vertreter der Initiative haben ihre Teilnahme bereits zugesagt.</p>
<p><em>(Photo (<a href="http://creativecommons.org/licenses/by-nc-nd/2.0/">cc</a>): Jörg Kantel)</em></p>



 ]]></description>
  <category>Neukölln</category>
  <category>Verkehr</category>
  <category>Verkehrswende</category>
  <category>Kiezblock</category>
  <guid>https://kantel.github.io/posts/20221222701_kiezblock_kranoldplatz/index.html</guid>
  <pubDate>Tue, 27 Dec 2022 16:10:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/20221222701_kiezblock_kranoldplatz/images/bisnichtsmehrgeht.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Jetzt mit Killer-Pizzas: Pizzaplane in Pygame</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/20221222601_pizzaplane2_pygame/index.html</link>
  <description><![CDATA[ 



<p><img src="https://kantel.github.io/posts/20221222601_pizzaplane2_pygame/images/pizzaplanestage2-b.jpg" class="img-fluid"></p>
<p>Ich muß gestehen, ich habe richtig Spaß mit <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a>. Daher mußte ich gestern auch an dem nach meiner <a href="http://blog.schockwellenreiter.de/2022/10/2022103001.html">Abkehr von TigerJython</a> in Pygame wieder aufgenommenes Projekt »<a href="http://blog.schockwellenreiter.de/2022/10/2022101502.html">Pizzaplane</a>« weiter programmieren. Der kleine rote Flieger muß sich jetzt gegen die pöhsen Pizzas zur Wehr setzen.</p>
<p>Dazu habe ich ihm eine Klasse <code>Missile()</code> spendiert. Die Geschosse werden mit der rechten Pfeiltaste abgefeuert<sup>1</sup>. Damit der Spieler nicht auf Dauerfeuer schalten kann, habe ich mit <code>firecount = 15</code> eine Verzögerung eingebaut, Erst wenn diese Variable wieder bis auf Null zurückgezählt hat, ist der Abschuß eines neuen Geschosses möglich.</p>
<p>Damit die Geschosse auch ein Ziel haben, kommt die Klasse <code>Enemy()</code> ins Spiel. Sie ist erst einmal für die Darstellung der pöhsen Pizzas zuständig<sup>2</sup>. Sie tauchen an einer zufälligen Position hinter dem rechten Fensterrand auf und fliegen nach links auf den Spieler zu. In dieser Fassung des Spiels werden sie nach dem Abschuß wieder rechts neu positioniert, das muß aber nicht so bleiben. Denn wenn Ihr Euch die <code>update()</code>-Methode der <code>Missile()</code>-Klasse anschaut,</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1">    <span class="kw" style="color: #003B4F;">def</span> update(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-2">        <span class="va" style="color: #111111;">self</span>.rect.x <span class="op" style="color: #5E5E5E;">+=</span> <span class="va" style="color: #111111;">self</span>.speed</span>
<span id="cb1-3">        <span class="cf" style="color: #003B4F;">for</span> enemy <span class="kw" style="color: #003B4F;">in</span> enemies:</span>
<span id="cb1-4">            <span class="cf" style="color: #003B4F;">if</span> pygame.sprite.collide_rect(enemy, <span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-5">                <span class="va" style="color: #111111;">self</span>.kill()</span>
<span id="cb1-6">                <span class="co" style="color: #5E5E5E;"># enemy.kill()</span></span>
<span id="cb1-7">                e_x, e_y <span class="op" style="color: #5E5E5E;">=</span> enemy.rect.x, enemy.rect.y <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb1-8">                enemy.reset()</span>
<span id="cb1-9">                hit <span class="op" style="color: #5E5E5E;">=</span> Explosion(e_x, e_y)</span>
<span id="cb1-10">                all_sprites.add(hit)</span>
<span id="cb1-11">        <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.rect.x <span class="op" style="color: #5E5E5E;">&gt;=</span> WIDTH <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">20</span>:</span>
<span id="cb1-12">            <span class="va" style="color: #111111;">self</span>.kill()</span></code></pre></div>
<p>habe ich da (noch auskommentiert) durchaus vorgesehen, daß mit <code>enemy.kill()</code> der Gegner auch aus dem Spiel entfernt wird (dann müßte allerdings <code>enemy.reset()</code> auskommentiert werden).</p>
<p>Wenn die Pizzen getroffen werden, blitzt an ihrer Position kurz eine Explosion auf. Auch diese ist natürlich als Klasse implementiert</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;">class</span> Explosion(pygame.sprite.Sprite):</span>
<span id="cb2-2">    </span>
<span id="cb2-3">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, _x, _y):</span>
<span id="cb2-4">        pygame.sprite.Sprite.<span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>)</span>
<span id="cb2-5">        <span class="va" style="color: #111111;">self</span>.image <span class="op" style="color: #5E5E5E;">=</span> pygame.image.load(os.path.join(DATAPATH, <span class="st" style="color: #20794D;">"explosion.png"</span>))</span>
<span id="cb2-6">        <span class="va" style="color: #111111;">self</span>.rect <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.image.get_rect()</span>
<span id="cb2-7">        <span class="va" style="color: #111111;">self</span>.rect.x <span class="op" style="color: #5E5E5E;">=</span> _x</span>
<span id="cb2-8">        <span class="va" style="color: #111111;">self</span>.rect.y <span class="op" style="color: #5E5E5E;">=</span> _y</span>
<span id="cb2-9">        <span class="va" style="color: #111111;">self</span>.timer <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb2-10">        </span>
<span id="cb2-11">    <span class="kw" style="color: #003B4F;">def</span> update(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb2-12">        <span class="va" style="color: #111111;">self</span>.timer <span class="op" style="color: #5E5E5E;">-=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb2-13">        <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.timer <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb2-14">            <span class="va" style="color: #111111;">self</span>.kill()        </span></code></pre></div>
<p>und besitzt einen Timer, der sie nach dem Ende der Explosion wieder aus dem Spiel nimmt.</p>
<p>Um die Kollisionserkennung zu vereinfachen, habe ich die Pizzen bei der Initialisierung</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="cf" style="color: #003B4F;">for</span> _ <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(NO_ENEMIES):</span>
<span id="cb3-2">    pizza <span class="op" style="color: #5E5E5E;">=</span> Enemy(WIDTH <span class="op" style="color: #5E5E5E;">+</span> randint(<span class="dv" style="color: #AD0000;">30</span>, <span class="dv" style="color: #AD0000;">100</span>), randint(<span class="dv" style="color: #AD0000;">30</span>, HEIGHT <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">30</span>))</span>
<span id="cb3-3">    all_sprites.add(pizza)</span>
<span id="cb3-4">    enemies.add(pizza)</span></code></pre></div>
<p>nicht nur zur <code>sprite.Group()</code> <code>all_sprites</code>, sondern auch zur Gruppe <code>enemies</code> hinzugefügt. Denn Sprite-Groups funktionieren unter anderem auch wie Listen und daher kann ich in der <code>update()</code>-Methode der Klasse <code>Missile()</code> mit</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1">        <span class="cf" style="color: #003B4F;">for</span> enemy <span class="kw" style="color: #003B4F;">in</span> enemies:</span>
<span id="cb4-2">            <span class="cf" style="color: #003B4F;">if</span> pygame.sprite.collide_rect(enemy, <span class="va" style="color: #111111;">self</span>):</span></code></pre></div>
<p>alle Pizzas in einem Rutsch auf Kollision testen. Damit das funktioniert, müssen natürlich <strong>alle</strong> Sprites als Unterklassen von <code>pygame.sprite.Sprite</code> implementiert werden. Aber ich glaube, langsam wird klar, warum ich <code>pygame.sprite.Sprite</code> für so ein mächtiges Werkzeug von Pygame halte.</p>
<p>Jetzt wie gewohnt den kompletten Quellcode dieser Fassung, den es wie immer mit allen Assets auch in meinem <a href="https://github.com/kantel/pygameprojects/tree/master/pizzaplane">GitHub-Repositorium</a> gibt:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>pizzaplane2.py</strong></pre>
</div>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python code-overflow-wrap number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;">import</span> pygame</span>
<span id="cb5-2"><span class="im" style="color: #00769E;">from</span> pygame.<span class="bu" style="color: null;">locals</span> <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span>
<span id="cb5-3"><span class="im" style="color: #00769E;">from</span> random <span class="im" style="color: #00769E;">import</span> randint</span>
<span id="cb5-4"><span class="im" style="color: #00769E;">import</span> os</span>
<span id="cb5-5"><span class="im" style="color: #00769E;">import</span> sys</span>
<span id="cb5-6"></span>
<span id="cb5-7"><span class="co" style="color: #5E5E5E;"># Hier wird der Pfad zum Verzeichnis der Assets gesetzt</span></span>
<span id="cb5-8">DATAPATH <span class="op" style="color: #5E5E5E;">=</span> os.path.join(os.getcwd(), <span class="st" style="color: #20794D;">"data"</span>)</span>
<span id="cb5-9"></span>
<span id="cb5-10"><span class="co" style="color: #5E5E5E;"># Konstanten deklarieren</span></span>
<span id="cb5-11">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">720</span>, <span class="dv" style="color: #AD0000;">520</span></span>
<span id="cb5-12">BG_WIDTH <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1664</span></span>
<span id="cb5-13">TITLE <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"Pizza Plane Stage 2: Pizza, Pizza!"</span></span>
<span id="cb5-14">FPS <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">60</span></span>
<span id="cb5-15">ANIM <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">4</span> <span class="co" style="color: #5E5E5E;"># Animation cycle</span></span>
<span id="cb5-16">UPDOWN <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb5-17">NO_ENEMIES <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb5-18"></span>
<span id="cb5-19"><span class="co" style="color: #5E5E5E;"># Farben</span></span>
<span id="cb5-20">BG_COLOR <span class="op" style="color: #5E5E5E;">=</span> (<span class="dv" style="color: #AD0000;">231</span>, <span class="dv" style="color: #AD0000;">229</span>, <span class="dv" style="color: #AD0000;">226</span>) <span class="co" style="color: #5E5E5E;"># Wüstenhimmel</span></span>
<span id="cb5-21"></span>
<span id="cb5-22"><span class="co" style="color: #5E5E5E;"># Objekte</span></span>
<span id="cb5-23"><span class="kw" style="color: #003B4F;">class</span> Background(pygame.sprite.Sprite):</span>
<span id="cb5-24">    </span>
<span id="cb5-25">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, _x, _y):</span>
<span id="cb5-26">        pygame.sprite.Sprite.<span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>)</span>
<span id="cb5-27">        <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">=</span> _x</span>
<span id="cb5-28">        <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">=</span> _y</span>
<span id="cb5-29">        <span class="va" style="color: #111111;">self</span>.start_x <span class="op" style="color: #5E5E5E;">=</span> _x</span>
<span id="cb5-30">        <span class="va" style="color: #111111;">self</span>.image <span class="op" style="color: #5E5E5E;">=</span> pygame.image.load(os.path.join(DATAPATH,</span>
<span id="cb5-31">        <span class="st" style="color: #20794D;">"desert.png"</span>))</span>
<span id="cb5-32">        <span class="va" style="color: #111111;">self</span>.rect <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.image.get_rect()</span>
<span id="cb5-33">        </span>
<span id="cb5-34">    <span class="kw" style="color: #003B4F;">def</span> update(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb5-35">        <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">-=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb5-36">        <span class="co" style="color: #5E5E5E;"># print(self.x)</span></span>
<span id="cb5-37">        <span class="va" style="color: #111111;">self</span>.rect.x <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.x</span>
<span id="cb5-38">        <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="op" style="color: #5E5E5E;">-</span>BG_WIDTH:</span>
<span id="cb5-39">            <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">=</span> BG_WIDTH</span>
<span id="cb5-40"></span>
<span id="cb5-41"><span class="kw" style="color: #003B4F;">class</span> Missile(pygame.sprite.Sprite):</span>
<span id="cb5-42">    </span>
<span id="cb5-43">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, _x, _y):</span>
<span id="cb5-44">        pygame.sprite.Sprite.<span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>)</span>
<span id="cb5-45">        <span class="va" style="color: #111111;">self</span>.image <span class="op" style="color: #5E5E5E;">=</span> pygame.image.load(os.path.join(DATAPATH,</span>
<span id="cb5-46">        <span class="st" style="color: #20794D;">"missile.png"</span>))</span>
<span id="cb5-47">        <span class="va" style="color: #111111;">self</span>.rect <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.image.get_rect()</span>
<span id="cb5-48">        <span class="va" style="color: #111111;">self</span>.rect.x <span class="op" style="color: #5E5E5E;">=</span> _x</span>
<span id="cb5-49">        <span class="va" style="color: #111111;">self</span>.rect.y <span class="op" style="color: #5E5E5E;">=</span> _y</span>
<span id="cb5-50">        <span class="va" style="color: #111111;">self</span>.speed <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb5-51">        </span>
<span id="cb5-52">    <span class="kw" style="color: #003B4F;">def</span> update(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb5-53">        <span class="va" style="color: #111111;">self</span>.rect.x <span class="op" style="color: #5E5E5E;">+=</span> <span class="va" style="color: #111111;">self</span>.speed</span>
<span id="cb5-54">        <span class="cf" style="color: #003B4F;">for</span> enemy <span class="kw" style="color: #003B4F;">in</span> enemies:</span>
<span id="cb5-55">            <span class="cf" style="color: #003B4F;">if</span> pygame.sprite.collide_rect(enemy, <span class="va" style="color: #111111;">self</span>):</span>
<span id="cb5-56">                <span class="va" style="color: #111111;">self</span>.kill()</span>
<span id="cb5-57">                <span class="co" style="color: #5E5E5E;"># enemy.kill()</span></span>
<span id="cb5-58">                e_x, e_y <span class="op" style="color: #5E5E5E;">=</span> enemy.rect.x, enemy.rect.y <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb5-59">                enemy.reset()</span>
<span id="cb5-60">                hit <span class="op" style="color: #5E5E5E;">=</span> Explosion(e_x, e_y)</span>
<span id="cb5-61">                all_sprites.add(hit)</span>
<span id="cb5-62">        <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.rect.x <span class="op" style="color: #5E5E5E;">&gt;=</span> WIDTH <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">20</span>:</span>
<span id="cb5-63">            <span class="va" style="color: #111111;">self</span>.kill()</span>
<span id="cb5-64"></span>
<span id="cb5-65"><span class="kw" style="color: #003B4F;">class</span> Explosion(pygame.sprite.Sprite):</span>
<span id="cb5-66">    </span>
<span id="cb5-67">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, _x, _y):</span>
<span id="cb5-68">        pygame.sprite.Sprite.<span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>)</span>
<span id="cb5-69">        <span class="va" style="color: #111111;">self</span>.image <span class="op" style="color: #5E5E5E;">=</span> pygame.image.load(os.path.join(DATAPATH,</span>
<span id="cb5-70">        <span class="st" style="color: #20794D;">"explosion.png"</span>))</span>
<span id="cb5-71">        <span class="va" style="color: #111111;">self</span>.rect <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.image.get_rect()</span>
<span id="cb5-72">        <span class="va" style="color: #111111;">self</span>.rect.x <span class="op" style="color: #5E5E5E;">=</span> _x</span>
<span id="cb5-73">        <span class="va" style="color: #111111;">self</span>.rect.y <span class="op" style="color: #5E5E5E;">=</span> _y</span>
<span id="cb5-74">        <span class="va" style="color: #111111;">self</span>.timer <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb5-75">        </span>
<span id="cb5-76">    <span class="kw" style="color: #003B4F;">def</span> update(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb5-77">        <span class="va" style="color: #111111;">self</span>.timer <span class="op" style="color: #5E5E5E;">-=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb5-78">        <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.timer <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb5-79">            <span class="va" style="color: #111111;">self</span>.kill()        </span>
<span id="cb5-80"></span>
<span id="cb5-81"><span class="kw" style="color: #003B4F;">class</span>  Plane(pygame.sprite.Sprite):</span>
<span id="cb5-82">    </span>
<span id="cb5-83">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb5-84">        pygame.sprite.Sprite.<span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>)</span>
<span id="cb5-85">        <span class="co" style="color: #5E5E5E;"># Load Images</span></span>
<span id="cb5-86">        <span class="va" style="color: #111111;">self</span>.images <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb5-87">        <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span> (<span class="dv" style="color: #AD0000;">3</span>):</span>
<span id="cb5-88">            img <span class="op" style="color: #5E5E5E;">=</span> pygame.image.load(os.path.join(DATAPATH,</span>
<span id="cb5-89">            <span class="st" style="color: #20794D;">"planered_"</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="bu" style="color: null;">str</span>(i) <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">".png"</span>))</span>
<span id="cb5-90">            <span class="va" style="color: #111111;">self</span>.images.append(img)</span>
<span id="cb5-91">        <span class="va" style="color: #111111;">self</span>.image <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.images[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb5-92">        <span class="va" style="color: #111111;">self</span>.rect <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.image.get_rect()</span>
<span id="cb5-93">        <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">75</span></span>
<span id="cb5-94">        <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">250</span></span>
<span id="cb5-95">        <span class="va" style="color: #111111;">self</span>.frame <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb5-96">        <span class="va" style="color: #111111;">self</span>.ani <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">20</span></span>
<span id="cb5-97">        <span class="va" style="color: #111111;">self</span>.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"NONE"</span></span>
<span id="cb5-98">        <span class="va" style="color: #111111;">self</span>.firecount <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb5-99">    </span>
<span id="cb5-100">    <span class="kw" style="color: #003B4F;">def</span> update(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb5-101">        <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"NONE"</span>:</span>
<span id="cb5-102">            <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb5-103">        <span class="cf" style="color: #003B4F;">elif</span> <span class="va" style="color: #111111;">self</span>.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"UP"</span>:</span>
<span id="cb5-104">            <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">20</span>:</span>
<span id="cb5-105">                <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">-=</span> UPDOWN</span>
<span id="cb5-106">        <span class="cf" style="color: #003B4F;">elif</span> <span class="va" style="color: #111111;">self</span>.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"DOWN"</span>:</span>
<span id="cb5-107">            <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">&lt;</span> HEIGHT <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">20</span>:</span>
<span id="cb5-108">                <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">+=</span> UPDOWN</span>
<span id="cb5-109">        <span class="va" style="color: #111111;">self</span>.rect.center <span class="op" style="color: #5E5E5E;">=</span> (<span class="va" style="color: #111111;">self</span>.x, <span class="va" style="color: #111111;">self</span>.y)</span>
<span id="cb5-110">        <span class="va" style="color: #111111;">self</span>.ani <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb5-111">        <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.ani <span class="op" style="color: #5E5E5E;">&gt;=</span> ANIM:</span>
<span id="cb5-112">            <span class="va" style="color: #111111;">self</span>.ani <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb5-113">            <span class="va" style="color: #111111;">self</span>.frame <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb5-114">            <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.frame <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">2</span>:</span>
<span id="cb5-115">                <span class="va" style="color: #111111;">self</span>.frame <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb5-116">        <span class="va" style="color: #111111;">self</span>.firecount <span class="op" style="color: #5E5E5E;">-=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb5-117">        <span class="va" style="color: #111111;">self</span>.image <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.images[<span class="va" style="color: #111111;">self</span>.frame]</span>
<span id="cb5-118">        </span>
<span id="cb5-119">    <span class="kw" style="color: #003B4F;">def</span> fire(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb5-120">        <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.firecount <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb5-121">            missile <span class="op" style="color: #5E5E5E;">=</span> Missile(<span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">15</span>, <span class="va" style="color: #111111;">self</span>.y)</span>
<span id="cb5-122">            all_sprites.add(missile)</span>
<span id="cb5-123">            <span class="va" style="color: #111111;">self</span>.firecount <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">15</span></span>
<span id="cb5-124"></span>
<span id="cb5-125"><span class="kw" style="color: #003B4F;">class</span> Enemy(pygame.sprite.Sprite):</span>
<span id="cb5-126">    </span>
<span id="cb5-127">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, _x, _y):</span>
<span id="cb5-128">        pygame.sprite.Sprite.<span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>)</span>
<span id="cb5-129">        <span class="va" style="color: #111111;">self</span>.image <span class="op" style="color: #5E5E5E;">=</span> pygame.image.load(os.path.join(DATAPATH,</span>
<span id="cb5-130">        <span class="st" style="color: #20794D;">"pizza.png"</span>))</span>
<span id="cb5-131">        <span class="va" style="color: #111111;">self</span>.rect <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.image.get_rect()</span>
<span id="cb5-132">        <span class="va" style="color: #111111;">self</span>.rect.x <span class="op" style="color: #5E5E5E;">=</span> _x</span>
<span id="cb5-133">        <span class="va" style="color: #111111;">self</span>.rect.y <span class="op" style="color: #5E5E5E;">=</span> _y</span>
<span id="cb5-134">        <span class="va" style="color: #111111;">self</span>.speed <span class="op" style="color: #5E5E5E;">=</span> randint(<span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">6</span>)</span>
<span id="cb5-135">        </span>
<span id="cb5-136">    <span class="kw" style="color: #003B4F;">def</span> reset(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb5-137">        <span class="va" style="color: #111111;">self</span>.rect.x <span class="op" style="color: #5E5E5E;">=</span> WIDTH <span class="op" style="color: #5E5E5E;">+</span> randint(<span class="dv" style="color: #AD0000;">30</span>, <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb5-138">        <span class="va" style="color: #111111;">self</span>.rect.y <span class="op" style="color: #5E5E5E;">=</span> randint(<span class="dv" style="color: #AD0000;">30</span>, HEIGHT <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">30</span>)</span>
<span id="cb5-139">        <span class="va" style="color: #111111;">self</span>.speed <span class="op" style="color: #5E5E5E;">=</span> randint(<span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">6</span>)</span>
<span id="cb5-140">    </span>
<span id="cb5-141">    <span class="kw" style="color: #003B4F;">def</span> update(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb5-142">        <span class="va" style="color: #111111;">self</span>.rect.x <span class="op" style="color: #5E5E5E;">-=</span> <span class="va" style="color: #111111;">self</span>.speed</span>
<span id="cb5-143">        <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.rect.x <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">30</span>:</span>
<span id="cb5-144">            <span class="va" style="color: #111111;">self</span>.reset()</span>
<span id="cb5-145">            </span>
<span id="cb5-146"><span class="co" style="color: #5E5E5E;"># Pygame initialisieren und das Fenster und die</span></span>
<span id="cb5-147"><span class="co" style="color: #5E5E5E;"># Hintergrundfarbe festlegen</span></span>
<span id="cb5-148">clock <span class="op" style="color: #5E5E5E;">=</span> pygame.time.Clock()</span>
<span id="cb5-149">pygame.init()</span>
<span id="cb5-150"><span class="co" style="color: #5E5E5E;"># Ein übler Hack, um die Position des Fensters auf</span></span>
<span id="cb5-151"><span class="co" style="color: #5E5E5E;"># meinen zweiten Bildschirm zu setzen.</span></span>
<span id="cb5-152">os.environ[<span class="st" style="color: #20794D;">'SDL_VIDEO_WINDOW_POS'</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">%d</span><span class="st" style="color: #20794D;">,</span><span class="sc" style="color: #5E5E5E;">%d</span><span class="st" style="color: #20794D;">"</span> <span class="op" style="color: #5E5E5E;">%</span> (<span class="dv" style="color: #AD0000;">1320</span>, <span class="dv" style="color: #AD0000;">60</span>)</span>
<span id="cb5-153">screen <span class="op" style="color: #5E5E5E;">=</span> pygame.display.set_mode((WIDTH, HEIGHT))</span>
<span id="cb5-154">pygame.display.set_caption(TITLE)</span>
<span id="cb5-155"></span>
<span id="cb5-156"><span class="co" style="color: #5E5E5E;"># Sprite-Gruppe(n)</span></span>
<span id="cb5-157">backs       <span class="op" style="color: #5E5E5E;">=</span> pygame.sprite.Group()</span>
<span id="cb5-158">all_sprites <span class="op" style="color: #5E5E5E;">=</span> pygame.sprite.Group()</span>
<span id="cb5-159">enemies     <span class="op" style="color: #5E5E5E;">=</span> pygame.sprite.Group()</span>
<span id="cb5-160"></span>
<span id="cb5-161"><span class="co" style="color: #5E5E5E;"># Hintergrund</span></span>
<span id="cb5-162">back1 <span class="op" style="color: #5E5E5E;">=</span> Background(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb5-163">back2 <span class="op" style="color: #5E5E5E;">=</span> Background(BG_WIDTH, <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb5-164">backs.add(back1)</span>
<span id="cb5-165">backs.add(back2)</span>
<span id="cb5-166"></span>
<span id="cb5-167"><span class="co" style="color: #5E5E5E;"># Die Gegner</span></span>
<span id="cb5-168"><span class="cf" style="color: #003B4F;">for</span> _ <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(NO_ENEMIES):</span>
<span id="cb5-169">    pizza <span class="op" style="color: #5E5E5E;">=</span> Enemy(WIDTH <span class="op" style="color: #5E5E5E;">+</span> randint(<span class="dv" style="color: #AD0000;">30</span>, <span class="dv" style="color: #AD0000;">100</span>),</span>
<span id="cb5-170">    randint(<span class="dv" style="color: #AD0000;">30</span>, HEIGHT <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">30</span>))</span>
<span id="cb5-171">    all_sprites.add(pizza)</span>
<span id="cb5-172">    enemies.add(pizza)</span>
<span id="cb5-173"></span>
<span id="cb5-174"><span class="co" style="color: #5E5E5E;"># Der rote Flieger</span></span>
<span id="cb5-175">plane <span class="op" style="color: #5E5E5E;">=</span> Plane()</span>
<span id="cb5-176">all_sprites.add(plane)</span>
<span id="cb5-177"></span>
<span id="cb5-178">keep_going <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">True</span></span>
<span id="cb5-179"><span class="cf" style="color: #003B4F;">while</span> keep_going:</span>
<span id="cb5-180">    </span>
<span id="cb5-181">    clock.tick(FPS)</span>
<span id="cb5-182">    <span class="cf" style="color: #003B4F;">for</span> event <span class="kw" style="color: #003B4F;">in</span> pygame.event.get():</span>
<span id="cb5-183">        <span class="cf" style="color: #003B4F;">if</span> ((event.<span class="bu" style="color: null;">type</span> <span class="op" style="color: #5E5E5E;">==</span> pygame.QUIT)</span>
<span id="cb5-184">            <span class="kw" style="color: #003B4F;">or</span> (event.<span class="bu" style="color: null;">type</span> <span class="op" style="color: #5E5E5E;">==</span> pygame.KEYDOWN</span>
<span id="cb5-185">            <span class="kw" style="color: #003B4F;">and</span> event.key <span class="op" style="color: #5E5E5E;">==</span> pygame.K_ESCAPE)):</span>
<span id="cb5-186">            <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Bye, Bye, Baby!"</span>)</span>
<span id="cb5-187">            pygame.quit()</span>
<span id="cb5-188">            <span class="cf" style="color: #003B4F;">try</span>:</span>
<span id="cb5-189">                sys.exit()</span>
<span id="cb5-190">            <span class="cf" style="color: #003B4F;">finally</span>:</span>
<span id="cb5-191">                keep_going <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">False</span></span>
<span id="cb5-192">                </span>
<span id="cb5-193">        <span class="cf" style="color: #003B4F;">if</span> event.<span class="bu" style="color: null;">type</span> <span class="op" style="color: #5E5E5E;">==</span> pygame.KEYDOWN:</span>
<span id="cb5-194">            <span class="cf" style="color: #003B4F;">if</span> event.key <span class="op" style="color: #5E5E5E;">==</span> pygame.K_UP:</span>
<span id="cb5-195">                plane.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"UP"</span></span>
<span id="cb5-196">            <span class="cf" style="color: #003B4F;">elif</span> event.key <span class="op" style="color: #5E5E5E;">==</span> pygame.K_DOWN:</span>
<span id="cb5-197">                plane.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"DOWN"</span></span>
<span id="cb5-198">            <span class="cf" style="color: #003B4F;">if</span> event.key <span class="op" style="color: #5E5E5E;">==</span> pygame.K_RIGHT:</span>
<span id="cb5-199">                plane.fire()</span>
<span id="cb5-200">                </span>
<span id="cb5-201">        <span class="cf" style="color: #003B4F;">if</span> event.<span class="bu" style="color: null;">type</span> <span class="op" style="color: #5E5E5E;">==</span> pygame.KEYUP:</span>
<span id="cb5-202">            plane.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"NONE"</span></span>
<span id="cb5-203"></span>
<span id="cb5-204">    backs.update()</span>
<span id="cb5-205">    backs.draw(screen)</span>
<span id="cb5-206">    all_sprites.update()</span>
<span id="cb5-207">    all_sprites.draw(screen)</span>
<span id="cb5-208">    pygame.display.update()</span>
<span id="cb5-209">    pygame.display.flip()</span></code></pre></div>
</div>
<p>Damit habe ich den Stand erreicht, bis zu dem ich auch in meiner <a href="http://blog.schockwellenreiter.de/2022/10/2022101502.html">TigerJython-Fassung</a> im Oktober gekommen bin. Das war also die Pflicht, jetzt kommt die Kür und damit geht der Spaß erst richtig los. Vorgesehen habe ich:</p>
<ol type="1">
<li>Mehr Gegner (denn immer nur auf Pizzen zu schießen, wird auf die Dauer langweilig).</li>
<li>Wenn die Gegener mit dem roten Doppeldecker kollidieren, verliert der Spieler entweder ein Leben oder er bekommt Punke abgezogen (darüber muß ich noch nachdenken).</li>
<li>Im Gegenzug bekommt der Spieler bei dem Abschuß von Gegnern Punkte gutgeschrieben.</li>
<li>Die Implementierung eines HUD <em>(Head Up Display)</em> mit der Anzeige des Spielestandes (Punkte) und der Anzahl der Leben oder einer <em>Health Bar</em>.</li>
<li>Die Implementierung von Start- und Ende-Bildschirmen.</li>
</ol>
<p>Das ist doch ein nettes Programm, das mich die nächste Zeit beschäftigen wird.</p>
<p>Bisher erschienen sind:</p>
<ol type="1">
<li><a href="https://kantel.github.io/posts/20221222501_pizzaplane1_pygame/">Auf ein neues: Pizzaplane in Pygame (Stage 1)</a></li>
<li>Jetzt mit Killer-Pizzas: Pizzaplane in Pygame</li>
</ol>
<p>Fortsetzung folgt …</p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Fußnoten</h2>

<ol>
<li id="fn1"><p>Ich weiß, traditionell ist hierfür eigentlich die Leertaste zuständig. Aber da in meinem Spiel die rechte Pfeiltaste sonst unbeschäftigt bleibt, habe ich diese dafür ausgewählt. So kann man das komplette Spiel mit der rechten Hand bedienen und hat die linke frei für den Kaffeebecher.↩︎</p></li>
<li id="fn2"><p>Später sollen noch weitere Lebensmittel als Gegener hinzukommen, als Boßgegner sind die schrecklichen »Melonis« 🍉 vorgesehen.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Pygame</category>
  <category>Spieleprogrammierung</category>
  <guid>https://kantel.github.io/posts/20221222601_pizzaplane2_pygame/index.html</guid>
  <pubDate>Mon, 26 Dec 2022 17:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/20221222601_pizzaplane2_pygame/images/pizzaplanestage2.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Auf ein neues: Pizzaplane in Pygame (Stage 1)</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/20221222501_pizzaplane1_pygame/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52584883766/"><img src="https://kantel.github.io/posts/20221222501_pizzaplane1_pygame/images/pizzaplane1pygame-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Nachdem ich mir ein paar der <a href="https://kantel.github.io/posts/20221222301_pygame_tuts/">am Freitag vorgestellten Video-Tutorien</a> reingezogen hatte, bekam ich unbändige Lust, meine eingerosteten <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a>-Kenntnisse frisch zu ölen und selber etwas mit diesem Spiele-Framework anzustellen. Was lag näher, als das nach meiner <a href="http://blog.schockwellenreiter.de/2022/10/2022103001.html">Abkehr von TigerJython</a> verwaiste Projekt <a href="http://blog.schockwellenreiter.de/2022/10/2022101502.html">Pizzaplane</a> wiederzubeleben und es in Pygame zu implementieren?</p>
<p>Ich halte ja Pygames <code>Sprite()</code>-Klasse für <strong>das</strong> große Alleinstellungsmerkmal, das Pygame von allen anderen Python-Frameworks abhebt. Um so verwunderter war ich, daß die Autoren der Freitag vorgestellten Pygame-Tutorien die Sprite-Klasse entweder ignorierten oder sich in der Implementierung verhedderten (zumindest in den Videos, die ich mir bis heute angeschaut hatte). Daher habe ich in meinem Programm darauf geachtet, die Sprites sauber zu implementieren.</p>
<p>Das beginnt mit dem endlos scrollenden Hintergrund, den ich ebenfalls als Unterklasse von <code>pygame.sprite.Sprite</code> implementiert habe. Das ist zwar ungewöhnlich – in Pygame-Prgrammen wird der Hintergrund normalerweise einfach als <code>surface</code> in das Fenster »geblittet«, aber meine (Pygame-) Philosophie ist: Alles, was sich bewegt, sind Sprites.</p>
<p>Ebenso ungewöhnlich – und vermutlich nicht notwendig – ist, daß ich den Hintergründen eine eigene Sprite-Group spendiert habe. Ich meine mich jedoch zu erinnern, daß man in Sprite-Groups nur sehr schwer die Reihenfolge bestimmen kann, in der die daran enthaltenen Sprites auf den Bildschirm gezeichnet werden, Deshalb sind die beiden Hintergrundbilder in einer eigenen Gruppe zusammengefaßt, die <strong>vor</strong> den eigentlichen Sprites gezeichnet wird<sup>1</sup>.</p>
<p>Ein übler Hack hingegen ist die Zeile,</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1">os.environ[<span class="st" style="color: #20794D;">'SDL_VIDEO_WINDOW_POS'</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">%d</span><span class="st" style="color: #20794D;">,</span><span class="sc" style="color: #5E5E5E;">%d</span><span class="st" style="color: #20794D;">"</span> <span class="op" style="color: #5E5E5E;">%</span> (<span class="dv" style="color: #AD0000;">1320</span>, <span class="dv" style="color: #AD0000;">60</span>)</span></code></pre></div>
<p>mit der ich das Spielefenster auf den zweiten Monitor meine Home-Konfiguration beame. Dieser Hack scheint bis heute der einzige Weg zu sein, einem Pygame-Fenster eine Startposition zu verpassen. Wer keinen zweiten Monitor hat, sollte diese Zeile auskommentieren – ich wollte nur, daß Ihr mal seht, wie man so etwas bewerkstelligt<sup>2</sup>.</p>
<p>Ein wenig übervorsichtig ist auch die <code>try: ... finally:</code>-Klausel bei der Behandlung des Spieleabbruchs, aber <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/thonny.html">Thonny</a> ist in diesem Fall manchmal (aber nicht reproduzierbar) ein wenig zickig, wenn man die Hauptschleife nur mit <code>keep_going = False</code> beendet. So aber wird das Programm in jeder Situation sauber abgeschlossen.</p>
<p>Ansonsten setzt die Event-Behandlung in der Hauptschleife auf entsrechenden Tastendruck nur den Status <code>plane.dir</code> auf <code>"Up"</code> oder <code>"DOWN"</code> respektive – wenn eine Taste losgelassen wird – auf <code>"NONE"</code>. Wie mit diesen Stati umzugehen ist, ist Aufgabe der Klasse <code>Plane()</code>.</p>
<p>Überhaupt habe ich versucht, das Programm so klar wie möglich zu gestalten. Alle Updates finden in den Klassen statt, in der Hauptschleife werden eigentlich nur die Events abgefragt (und gegenenenfalls an die dafür zuständigen Klassen durchgereicht (im Moment ist das nur die Klasse <code>Plane()</code>)) und die Ergebnisse auf den Monitor gezeichnet. Hier ist das komplette Programm, damit Ihr einen Überblick bekommt:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>pizzaplane1.py</strong></pre>
</div>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python code-overflow-wrap number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;">import</span> pygame</span>
<span id="cb2-2"><span class="im" style="color: #00769E;">from</span> pygame.<span class="bu" style="color: null;">locals</span> <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span>
<span id="cb2-3"><span class="im" style="color: #00769E;">import</span> os</span>
<span id="cb2-4"><span class="im" style="color: #00769E;">import</span> sys</span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;"># Hier wird der Pfad zum Verzeichnis der Assets gesetzt</span></span>
<span id="cb2-7">DATAPATH <span class="op" style="color: #5E5E5E;">=</span> os.path.join(os.getcwd(), <span class="st" style="color: #20794D;">"data"</span>)</span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="co" style="color: #5E5E5E;"># Konstanten deklarieren</span></span>
<span id="cb2-10">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">720</span>, <span class="dv" style="color: #AD0000;">520</span></span>
<span id="cb2-11">BG_WIDTH <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1664</span></span>
<span id="cb2-12">TITLE <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"Pizza Plane Stage 1"</span></span>
<span id="cb2-13">FPS <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">60</span></span>
<span id="cb2-14">ANIM <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">4</span> <span class="co" style="color: #5E5E5E;"># Animation cycle</span></span>
<span id="cb2-15">UPDOWN <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb2-16"></span>
<span id="cb2-17"><span class="co" style="color: #5E5E5E;"># Farben</span></span>
<span id="cb2-18">BG_COLOR <span class="op" style="color: #5E5E5E;">=</span> (<span class="dv" style="color: #AD0000;">231</span>, <span class="dv" style="color: #AD0000;">229</span>, <span class="dv" style="color: #AD0000;">226</span>) <span class="co" style="color: #5E5E5E;"># Wüstenhimmel</span></span>
<span id="cb2-19"></span>
<span id="cb2-20"><span class="co" style="color: #5E5E5E;"># Objekte</span></span>
<span id="cb2-21"><span class="kw" style="color: #003B4F;">class</span> Background(pygame.sprite.Sprite):</span>
<span id="cb2-22">    </span>
<span id="cb2-23">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, _x, _y):</span>
<span id="cb2-24">        pygame.sprite.Sprite.<span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>)</span>
<span id="cb2-25">        <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">=</span> _x</span>
<span id="cb2-26">        <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">=</span> _y</span>
<span id="cb2-27">        <span class="va" style="color: #111111;">self</span>.start_x <span class="op" style="color: #5E5E5E;">=</span> _x</span>
<span id="cb2-28">        <span class="va" style="color: #111111;">self</span>.image <span class="op" style="color: #5E5E5E;">=</span> pygame.image.load(os.path.join(DATAPATH,</span>
<span id="cb2-29">                            <span class="st" style="color: #20794D;">"desert.png"</span>))</span>
<span id="cb2-30">        <span class="va" style="color: #111111;">self</span>.rect <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.image.get_rect()</span>
<span id="cb2-31">        </span>
<span id="cb2-32">    <span class="kw" style="color: #003B4F;">def</span> update(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb2-33">        <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">-=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb2-34">        <span class="co" style="color: #5E5E5E;"># print(self.x)</span></span>
<span id="cb2-35">        <span class="va" style="color: #111111;">self</span>.rect.x <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.x</span>
<span id="cb2-36">        <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="op" style="color: #5E5E5E;">-</span>BG_WIDTH:</span>
<span id="cb2-37">            <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">=</span> BG_WIDTH</span>
<span id="cb2-38"></span>
<span id="cb2-39"><span class="kw" style="color: #003B4F;">class</span>  Plane(pygame.sprite.Sprite):</span>
<span id="cb2-40">    </span>
<span id="cb2-41">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb2-42">        pygame.sprite.Sprite.<span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>)</span>
<span id="cb2-43">        <span class="co" style="color: #5E5E5E;"># Load Images</span></span>
<span id="cb2-44">        <span class="va" style="color: #111111;">self</span>.images <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb2-45">        <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span> (<span class="dv" style="color: #AD0000;">3</span>):</span>
<span id="cb2-46">            img <span class="op" style="color: #5E5E5E;">=</span> pygame.image.load(os.path.join(DATAPATH,</span>
<span id="cb2-47">                         <span class="st" style="color: #20794D;">"planered_"</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="bu" style="color: null;">str</span>(i) <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">".png"</span>))</span>
<span id="cb2-48">            <span class="va" style="color: #111111;">self</span>.images.append(img)</span>
<span id="cb2-49">        <span class="va" style="color: #111111;">self</span>.image <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.images[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb2-50">        <span class="va" style="color: #111111;">self</span>.rect <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.image.get_rect()</span>
<span id="cb2-51">        <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">75</span></span>
<span id="cb2-52">        <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">250</span></span>
<span id="cb2-53">        <span class="va" style="color: #111111;">self</span>.frame <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb2-54">        <span class="va" style="color: #111111;">self</span>.ani <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">20</span></span>
<span id="cb2-55">        <span class="va" style="color: #111111;">self</span>.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"NONE"</span></span>
<span id="cb2-56">    </span>
<span id="cb2-57">    <span class="kw" style="color: #003B4F;">def</span> update(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb2-58">        <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"NONE"</span>:</span>
<span id="cb2-59">            <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb2-60">        <span class="cf" style="color: #003B4F;">elif</span> <span class="va" style="color: #111111;">self</span>.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"UP"</span>:</span>
<span id="cb2-61">            <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">20</span>:</span>
<span id="cb2-62">                <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">-=</span> UPDOWN</span>
<span id="cb2-63">        <span class="cf" style="color: #003B4F;">elif</span> <span class="va" style="color: #111111;">self</span>.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"DOWN"</span>:</span>
<span id="cb2-64">            <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">&lt;</span> HEIGHT <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">20</span>:</span>
<span id="cb2-65">                <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">+=</span> UPDOWN</span>
<span id="cb2-66">        <span class="va" style="color: #111111;">self</span>.rect.center <span class="op" style="color: #5E5E5E;">=</span> (<span class="va" style="color: #111111;">self</span>.x, <span class="va" style="color: #111111;">self</span>.y)</span>
<span id="cb2-67">        <span class="va" style="color: #111111;">self</span>.ani <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb2-68">        <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.ani <span class="op" style="color: #5E5E5E;">&gt;=</span> ANIM:</span>
<span id="cb2-69">            <span class="va" style="color: #111111;">self</span>.ani <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb2-70">            <span class="va" style="color: #111111;">self</span>.frame <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb2-71">            <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.frame <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">2</span>:</span>
<span id="cb2-72">                <span class="va" style="color: #111111;">self</span>.frame <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb2-73">        <span class="va" style="color: #111111;">self</span>.image <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.images[<span class="va" style="color: #111111;">self</span>.frame]</span>
<span id="cb2-74">        </span>
<span id="cb2-75"><span class="co" style="color: #5E5E5E;"># Pygame initialisieren</span></span>
<span id="cb2-76">clock <span class="op" style="color: #5E5E5E;">=</span> pygame.time.Clock()</span>
<span id="cb2-77">pygame.init()</span>
<span id="cb2-78"><span class="co" style="color: #5E5E5E;"># Ein übler Hack, um die Position des Fensters auf meinen</span></span>
<span id="cb2-79"><span class="co" style="color: #5E5E5E;"># zweiten Bildschirm zu setzen, aber er funktioniert …</span></span>
<span id="cb2-80">os.environ[<span class="st" style="color: #20794D;">'SDL_VIDEO_WINDOW_POS'</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">%d</span><span class="st" style="color: #20794D;">,</span><span class="sc" style="color: #5E5E5E;">%d</span><span class="st" style="color: #20794D;">"</span> <span class="op" style="color: #5E5E5E;">%</span> (<span class="dv" style="color: #AD0000;">1320</span>, <span class="dv" style="color: #AD0000;">60</span>)</span>
<span id="cb2-81">screen <span class="op" style="color: #5E5E5E;">=</span> pygame.display.set_mode((WIDTH, HEIGHT))</span>
<span id="cb2-82">pygame.display.set_caption(TITLE)</span>
<span id="cb2-83"></span>
<span id="cb2-84"><span class="co" style="color: #5E5E5E;"># Sprite-Gruppe(n)</span></span>
<span id="cb2-85">backs       <span class="op" style="color: #5E5E5E;">=</span> pygame.sprite.Group()</span>
<span id="cb2-86">all_sprites <span class="op" style="color: #5E5E5E;">=</span> pygame.sprite.Group()</span>
<span id="cb2-87"></span>
<span id="cb2-88"><span class="co" style="color: #5E5E5E;"># Hintergrund</span></span>
<span id="cb2-89">back1 <span class="op" style="color: #5E5E5E;">=</span> Background(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb2-90">back2 <span class="op" style="color: #5E5E5E;">=</span> Background(BG_WIDTH, <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb2-91">backs.add(back1)</span>
<span id="cb2-92">backs.add(back2)</span>
<span id="cb2-93"></span>
<span id="cb2-94"><span class="co" style="color: #5E5E5E;"># Der rote Flieger</span></span>
<span id="cb2-95">plane <span class="op" style="color: #5E5E5E;">=</span> Plane()</span>
<span id="cb2-96">all_sprites.add(plane)</span>
<span id="cb2-97"></span>
<span id="cb2-98">keep_going <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">True</span></span>
<span id="cb2-99"><span class="cf" style="color: #003B4F;">while</span> keep_going:</span>
<span id="cb2-100">    </span>
<span id="cb2-101">    clock.tick(FPS)</span>
<span id="cb2-102">    <span class="cf" style="color: #003B4F;">for</span> event <span class="kw" style="color: #003B4F;">in</span> pygame.event.get():</span>
<span id="cb2-103">        <span class="cf" style="color: #003B4F;">if</span> ((event.<span class="bu" style="color: null;">type</span> <span class="op" style="color: #5E5E5E;">==</span> pygame.QUIT)</span>
<span id="cb2-104">            <span class="kw" style="color: #003B4F;">or</span> (event.<span class="bu" style="color: null;">type</span> <span class="op" style="color: #5E5E5E;">==</span> pygame.KEYDOWN</span>
<span id="cb2-105">                <span class="kw" style="color: #003B4F;">and</span> event.key <span class="op" style="color: #5E5E5E;">==</span> pygame.K_ESCAPE)):</span>
<span id="cb2-106">            <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Bye, Bye, Baby!"</span>)</span>
<span id="cb2-107">            pygame.quit()</span>
<span id="cb2-108">            <span class="cf" style="color: #003B4F;">try</span>:</span>
<span id="cb2-109">                sys.exit()</span>
<span id="cb2-110">            <span class="cf" style="color: #003B4F;">finally</span>:</span>
<span id="cb2-111">                keep_going <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">False</span></span>
<span id="cb2-112">                </span>
<span id="cb2-113">        <span class="cf" style="color: #003B4F;">if</span> event.<span class="bu" style="color: null;">type</span> <span class="op" style="color: #5E5E5E;">==</span> pygame.KEYDOWN:</span>
<span id="cb2-114">            <span class="cf" style="color: #003B4F;">if</span> event.key <span class="op" style="color: #5E5E5E;">==</span> pygame.K_UP:</span>
<span id="cb2-115">                plane.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"UP"</span></span>
<span id="cb2-116">            <span class="cf" style="color: #003B4F;">elif</span> event.key <span class="op" style="color: #5E5E5E;">==</span> pygame.K_DOWN:</span>
<span id="cb2-117">                plane.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"DOWN"</span></span>
<span id="cb2-118">                </span>
<span id="cb2-119">        <span class="cf" style="color: #003B4F;">if</span> event.<span class="bu" style="color: null;">type</span> <span class="op" style="color: #5E5E5E;">==</span> pygame.KEYUP:</span>
<span id="cb2-120">            plane.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"NONE"</span></span>
<span id="cb2-121"></span>
<span id="cb2-122">    backs.update()</span>
<span id="cb2-123">    backs.draw(screen)</span>
<span id="cb2-124">    all_sprites.update()</span>
<span id="cb2-125">    all_sprites.draw(screen)</span>
<span id="cb2-126">    pygame.display.update()</span>
<span id="cb2-127">    pygame.display.flip()</span></code></pre></div>
</div>
<p>Wie immer findet Ihr das <a href="https://github.com/kantel/pygameprojects/tree/master/pizzaplane">Programm und alle Assets</a> auch in meinem GitHub-Repositorium. Fortsetzung folgt …</p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Fußnoten</h2>

<ol>
<li id="fn1"><p>Sollte mich meine Erinnerung trügen oder diese Eigenschaft mittlerweile verschwunden sein – diese wenigen zusätzlichen Zeilen schaden ja nicht.↩︎</p></li>
<li id="fn2"><p>Ich muß allerdings zugeben, daß ich diesen Hack auch »nur« auf <em>Stack Overflow</em> gefunden habe.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Pygame</category>
  <category>Spieleprogrammierung</category>
  <guid>https://kantel.github.io/posts/20221222501_pizzaplane1_pygame/index.html</guid>
  <pubDate>Sun, 25 Dec 2022 13:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/20221222501_pizzaplane1_pygame/images/pizzaplane1pygame-small.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Pygame Tutorials am Freitag</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/20221222301_pygame_tuts/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://opensource.com/sites/default/files/lead-images/header.png"><img src="https://kantel.github.io/posts/20221222301_pygame_tuts/images/pygametut-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Auch wenn ein christliches Fest vor der Türe steht, es ist heute Freitag und Freitags möchte ich Euch Tutorials vorschlagen, die Ihr Euch reinziehen könnt, falls Euch über das Wochenende (und in diesem Fall auch über die Feiertage) die Langeweile überkommt. Ein kleines <em>Caveat</em> vorab: Ich habe dieses Mal Tutorials von Menschen ausgesucht, denen ich traue, aber ich habe sie mir selber auch noch nicht angeschaut oder reingelesen. Daher überlasse ich es Euch, über die Qualität der Tutorials zu entscheiden.</p>
<p>Nach meinem <a href="http://blog.schockwellenreiter.de/2022/10/2022103001.html">Abschied von TigerJython</a> hatte ich mich verstärkt mit <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygamezero.html">Pygame Zero</a> beschäftigt, auch um einen Ersatz für <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/tigerjython.html">TigerJythons</a> Framework <em>GameGrid</em> zu haben. Mittlerweile bin ich mir aber nicht mehr sicher, ob das der richtige Weg ist. Zwar erleichtert Pygame Zero erst einmal den Einstieg in die Spieleprogrammierung, verstellt einem aber dann den Weg, wenn es darum geht, komplexe Probleme anzugehen. Und – wenn ich ehrlich bin – Pygame Zeros <code>Actor()</code>-Klasse ist nur ein schwacher Ersatz für <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygames</a> Klasse <code>Sprite()</code>.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/AY9MnQ4x3zk" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="">
</iframe>
<p>Daher habe ich heute eine Reihe von Tutorials zu Pygame hervorgekramt. Den Anfang macht der Kanal <em>Clear Code</em> mit seiner <a href="https://www.youtube.com/watch?v=AY9MnQ4x3zk">ultimativen Einführung in Pygame</a>. Diese Einführung ist so »ultimativ«, daß sie Euch fast vier Stunden an den Monitor fesselt. Und den <a href="https://github.com/clear-code-projects/UltimatePygameIntro">Quellcode</a> gibt es auf GitHub, die <a href="https://opengameart.org/content/platformer-art-pixel-edition">Bilder</a> und die <a href="https://opengameart.org/content/5-chiptunes-action">Sound</a>-Dateien findet Ihr (unter anderem) auf OpenGameArt.org.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/N6xqCwblyiw" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="">
</iframe>
<p>Der Autor hat es mit langen Videos. In einem weiteren, fast zweistündigen Video »<a href="https://www.youtube.com/watch?v=N6xqCwblyiw">A guide to level creation with Tiled (and how to use it with pygame)</a>« will er uns damit vertraut machen, wie wir den freien Tile-Editor <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/tiled.html">Tiled</a> mit Pygame verheiraten können.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/AkEJMKzRvPg" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="">
</iframe>
<p>Und als Zugabe findet Ihr auf dem gleichen Kanal noch das Filmchen »<a href="https://www.youtube.com/watch?v=AkEJMKzRvPg">Emojis in Python</a>«, das gar nicht so dumm ist, wie der Verfasser uns weismachen will.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/Q-__8Xw9KTM" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="">
</iframe>
<p>Wenn es um Pygame-Tutorials geht, kann natürlich <em>Tim</em> von <em>Tech with Tim</em> nicht fehlen. Nachdem ich <a href="http://blog.schockwellenreiter.de/2022/11/2022112601.html">im November</a> schon sein »<a href="https://www.youtube.com/watch?v=B6DrRN5z_uU">Python Platformer</a>«-Tutorial vorgestellt hatte, möchte ich heute auf sein zweistündiges Tutorial »<a href="https://www.youtube.com/watch?v=Q-__8Xw9KTM">Creating Space Invaders</a> hinweisen. Den Quellcode und die Assets könnt Ihr direkt von seiner Website herunterladen (Link in der Videobeschreibung). <em>Tim</em> ist eine Legende, seine Tutorials lohnen sich immer.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/xxRhvyZXd8I" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="">
</iframe>
<p>Eine weitere Legende in der Pygame-Szene ist die »fluffige Kartoffel« <em>(DaFluffyPotato)</em>. Aus seiner 33-teiligen Playlist »<a href="https://www.youtube.com/playlist?list=PLX5fBCkxJmm1fPSqgn9gyR3qih8yYLvMj">Pygame Tutorials (all)</a>« hatte ich sicher schon einige Teile vorgestellt. Aber hier sind sie noch einmal alle gesammelt aufgeführt.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/6ytwfT3brSc" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="">
</iframe>
<p>Der YouTuber <em>The Dev</em> hingegen ist neu für mich. Seine achtteilige Playlist »<a href="https://www.youtube.com/playlist?list=PLjuHXsDGkbTSpTMJ4MXTiQXN4AeOzpu1w">Spiele programmieren mit Pygame</a>« hat nicht nur den Vorteil, daß sie deutschsprachig ist, sondern auch, daß die einzelnen Videos mit einer Laufzeit von je maximal einer Viertelstunde recht kurz sind.</p>
<p><strong>War sonst noch was?</strong> Ach ja, wer nicht gucken will, kann lesen: Von <em>Jess Weichler</em> und <em>Seth Kenlon</em> gibt es auf <em>OpenSource.com</em> ein dreizehnteiliges Pygame-Platformer-Tutorial. Die einzelnen Teile sind:</p>
<ol type="1">
<li><a href="https://opensource.com/article/17/10/python-101">Learn how to program in Python by building a simple dice game</a></li>
<li><a href="https://opensource.com/article/17/12/game-framework-python">Build a game framework with Python using the Pygame module</a></li>
<li><a href="https://opensource.com/article/17/12/game-python-add-a-player">How to add a player to your Python game</a></li>
<li><a href="https://opensource.com/article/17/12/game-python-moving-player">Using Pygame to move your game character around</a></li>
<li><a href="https://opensource.com/article/18/5/pygame-enemy">What’s a hero without a villain? How to add one to your Python game</a></li>
<li><a href="https://opensource.com/article/18/7/put-platforms-python-game">Put platforms in a Python game with Pygame</a></li>
<li><a href="https://opensource.com/article/19/11/simulate-gravity-python">Simulate gravity in your Python game</a></li>
<li><a href="https://opensource.com/article/19/12/jumping-python-platformer-game">Add jumping to your Python platformer game</a></li>
<li><a href="https://opensource.com/article/19/12/python-platformer-game-run">Enable your Python game player to run forward and backward</a></li>
<li><a href="https://opensource.com/article/19/12/loot-python-platformer-game">Using Python to set up loot in Pygame</a></li>
<li><a href="https://opensource.com/article/20/1/add-scorekeeping-your-python-game">Add scorekeeping to your Python game</a></li>
<li><a href="https://opensource.com/article/20/9/add-throwing-python-game">Add throwing mechanics to your Python game</a></li>
<li><a href="https://opensource.com/article/20/9/add-sound-python-game">Add sound to your Python game</a></li>
</ol>
<p>Ich glaube, mit dieser Linkschleuder habe ich die Gefahr einer aufkommenden Langeweile erfolgreich gebannt. Schöne Feiertage Euch allen da draußen.</p>
<p><em>(Bannerbild: <a href="https://opensource.com/sites/default/files/lead-images/header.png">OpenSource.com</a>)</em></p>



 ]]></description>
  <category>Pygame</category>
  <category>Spieleprogrammierung</category>
  <guid>https://kantel.github.io/posts/20221222301_pygame_tuts/index.html</guid>
  <pubDate>Fri, 23 Dec 2022 18:45:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/20221222301_pygame_tuts/images/pygametut.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Making Apps mit Ren’Py</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/20221222201_renpy_app/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52580199803/"><img src="https://kantel.github.io/posts/20221222201_renpy_app/images/alieninvasion01makinkgapp.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Meine frisch erwachte Begeisterung für <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/renpy.html">Ren’Py</a> läßt mir keine Ruhe. Daher habe ich heute aus der <a href="https://kantel.github.io/posts/2022122102_alien_invasion_stage_1/">gestern vorgestellten</a> Version&nbsp;1 meines kleinen Ren’Py-Spiels eine Standalone-Applikation jeweils für Mac, Windows und Linux erstellt. Denn das ging aus dem Ren’Py-Launcher heraus erstaunlich schnell und ohne daß zusätzliche Software installiert werden mußte.</p>
<p>Mangels entsprechender Geräte konnte ich bisher nur die Binaries der Mac-Version testen (ob die aus dem Launcher heraus erzeugte Linux-Version ohne Klimmzüge auf meinem Chromebook läuft, muß ich noch ausprobieren<sup>1</sup>). Diese sind (entpackt) 50 MB fett. Aber schaut man sich den Paketinhalt an, stellt man fest, daß das Paket neben den Daten und Bildern des Spiels nicht nur ein komplettes Python, sondern auch den kompletten Quellcode von Ren’Py enthält. Das nenne ich mal <em>Open Source</em> 😎 und dann relativiert sich die Paketgröße auch gleich wieder.</p>
<p>Per Default zeigt das Programm das Ren’Py-Icon, aber dem kann man – wenn vorhanden – ein eigenes Icon unterjubeln. Ansonsten läuft die App problemlos.</p>
<p>Bevor ich die App erstellte, habe ich noch einen peinlichen Fehler korrigiert. Wenn Reginald »gute Miene zum bösen Spiel« macht, muß er nicht mehr in den nächsten Schacht einfahren. Den Tippfehler (»Mine« statt »Miene«) kann ich nur damit entschuldigen, daß ich in den 1950er- und 1960er-Jahren im Ruhrgebiet aufgewachsen bin, einer Zeit also, in der noch jeder zweite Berufstätige unter Tage arbeitete (die andere Hälfte malochte »auf Hütte«<sup>2</sup>).</p>
<p>Was kommt als nächstes? Ich werde mir einen <a href="https://itch.io/">Itch.io</a>-Account zulegen und dort die Apps zum Download bereitstellen. Es ist zwar immer noch kein »richtiges« Spiel, sondern eine kurze Test-Applikation, aber ich bin neugierig und möchte von Euch erfahren, wie sich Ren’Py auf Euren Rechnern schlägt. Die URL gebe ich dann hier im <del>Blog</del> Kritzelheft bekannt.</p>
<p>Und dann steht ja auch noch immer die Webversion auf meinem Programm. Da Ren’Py in der Version&nbsp;8 die HTML5/WebAssembly-Unterstützung erst einmal auf Eis gelegt hat, möchte ich diese mit <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/inkle.html">Ink/Inky</a> zusammenschrauben. Dafür muß ich mir aber noch ein paar passende Bilder basteln. Also habt bitte ein wenig Geduld. <em>Still digging!</em></p>
<p><b style="color:red">Upadate</b>: Hier ist der Itch.io-Account für das »Spiel«: <strong><a href="https://kantel.itch.io/alien-attack-renpy-test">kantel.itch.io/alien-attack-renpy-test</a></strong>. Ich wäre für kurze Rückmeldungen dankbar, ob das Teil auf Euren Rechnern läuft …</p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Fußnoten</h2>

<ol>
<li id="fn1"><p>Mein Chromebook befindet sich gerade in einem »Wartungs-Modus« und ist daher frühestens morgen wieder einsetzbar.↩︎</p></li>
<li id="fn2"><p>Ich weiß, das ist eine schwache Entschuldigung, aber etwas selten Damlicheres fiel mir auf die Schnelle nicht ein.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>RenPy</category>
  <category>Interactive Fiction</category>
  <category>Spieleprogrammierung</category>
  <guid>https://kantel.github.io/posts/20221222201_renpy_app/index.html</guid>
  <pubDate>Thu, 22 Dec 2022 16:45:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/20221222201_renpy_app/images/alieninvasion01app.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Alien Invasion Stage 1 (Ren’Py)</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2022122102_alien_invasion_stage_1/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52578098709/"><img src="https://kantel.github.io/posts/2022122102_alien_invasion_stage_1/images/alieninvasion01.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Es hilft alles nichts, da müßt Ihr jetzt durch. Ich habe so viel Gefallen an meiner Bastelei mit <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/renpy.html">Ren’Py</a> gefunden, daß ich heute eine erste Version meiner geplanten, wüsten <a href="https://kantel.github.io/posts/2022121502_avatare_fuer_renpy/">Räuberpistole</a> fertiggestellt habe. Es ist nur die erste Szene, viele weitere sollen noch folgen.</p>
<p>Ich habe das Teil erst einmal »Alien Invasion« genannt, das ist aber nur ein Arbeitstitel – ich hoffe, daß mir hier noch ein phantasievollerer Knaller einfällt. Aber auch, wenn es sehr arbeits- und zeitaufwendig ist: Ich habe viel Spaß damit und wer neugierig ist, kann sich diese Version in meinem Github-Repositorium <a href="https://github.com/kantel/renpy/blob/master/renpyprojects/Alien%20Invasion/game/script.rpy">anschauen</a> und (auch mit allen Bildern) <a href="https://github.com/kantel/renpy/tree/master/renpyprojects/Alien%20Invasion/game/images">herunterladen</a>. Denn auch wenn Ihr das Spiel schon nach wenigen Sekunden durchgespielt haben dürftet, die Zeilenanzahl des Quellcodes ist so hoch (aktuell über 100 Zeilen), daß ich ihn hier im <del>Blog</del> Kritzelheft nicht mehr veröffentlichen möchte – das wäre Zeilenschinderei.</p>
<p>In den nächsten Tagen werde ich allerdings noch mit Hilfe von <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/inkle.html">Ink/Inky</a> eine Webversion erstellen, mit der Ihr dann online spielen könnt. Dazu muß ich aber erst passende Bilder zusammenbasteln.</p>
<p>Apropos Bilder: Die Avatare (im Ren’Py-Jargon »Charactere« genannt) habe ich mit dem <a href="https://framiq.com/">Avatar-Generator von Framic</a> zusammengebastelt, die Hintergrundbilder der Büros stammen aus dem freien <a href="https://quarkyifu.itch.io/visual-novel-backgrounds-office-bg-set">Visual Novel Backgrounds Office_BG Set</a> von <em>quarkyifu</em>. Auf <a href="https://quarkyifu.itch.io/">seinen (ihren?) Itch.io-Seiten</a> findet Ihr auch noch viele, freie <em>Visual Novel Sprite Sets</em> zum Download. Fast jedes dieser Sets besteht aus hunderten von Bildern, die zum größten Teil keine Jugendfreigabe erhalten würden. Sollte ich also jemals eine nicht jugendfreie, interaktive Geschichte konstruieren wollen, weiß ich, wo ich mich bedienen kann.</p>



 ]]></description>
  <category>RenPy</category>
  <category>Interactive Fiction</category>
  <category>Spieleprogrammierung</category>
  <guid>https://kantel.github.io/posts/2022122102_alien_invasion_stage_1/index.html</guid>
  <pubDate>Wed, 21 Dec 2022 19:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2022122102_alien_invasion_stage_1/images/alieninvasion01-small.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Mozilla Thunderbird Version 102.6.1 freigegeben</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2022122101_thunderbird_update/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52577820888/"><img src="https://kantel.github.io/posts/2022122101_thunderbird_update/images/gefalleneregale-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Die Entwickler des <a href="http://www.mozillamessaging.com/">Mozilla Thunderbird</a> haben das Update auf die Version 102.6.1 freigegeben und damit auch <a href="https://www.thunderbird.net/en-US/thunderbird/102.6.1/releasenotes/">Sicherheitslücken</a> behoben.</p>
<p>Thunderbird weist selbst auf dieses Update hin. Diese Prozedur kann aber auch wie immer über das Menü <code>Hilfe &gt; Über Thunderbird</code> angestoßen werden. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<p><em>[Photo (<a href="http://creativecommons.org/licenses/by-nc-nd/2.0/">cc</a>): Jörg Kantel]</em></p>



 ]]></description>
  <category>News</category>
  <guid>https://kantel.github.io/posts/2022122101_thunderbird_update/index.html</guid>
  <pubDate>Wed, 21 Dec 2022 14:45:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2022122101_thunderbird_update/images/gefalleneregale.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Alice im Ren’Py-Land</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2022122001_alice_renpy/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52575271591/"><img src="https://kantel.github.io/posts/2022122001_alice_renpy/images/aliceimrenpyland.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>I did it! Ich habe mein <a href="https://kantel.github.io/posts/2022121902_alice_incle/">gestern</a> veröffentlichtes, mit <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/inkle.html">Ink und Inky</a> erstelltes und im <a href="http://blog.schockwellenreiter.de/gems/Home_Sweet_Home/">Web veröffentlichtes</a> Mini-Spiel nach <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/renpy.html">Ren’Py</a> portiert. Und es hat gar nicht wehgetan!&nbsp;😎</p>
<p>Nun gut, mangels einer entsprechenden Schnittstelle, wie sie Ink zum Beispiel für <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/unity.html">Unity</a> besitzt, mußte ich die einzelnen Szenen manuall per <em>cut and paste</em> in Ren’Py einkopieren, aber trotz API ist bei diesem Vorgang auch in Unity noch einiges händisch zu erledigigen.</p>
<p>Nein, der Vorteil ist: Steht erst einmal das Grundgerüst mit den einzelnen Szenen in Ren’Py, dann kann man in Ink/Inky an den Texten feilen, sie durchspielen und auf logische Lücken kontrollieren und Korrektur lesen (für diese Aufgaben ist das Teil konzipiert). Ist man dann mit dem Ergebnis zufrieden, kopiert man alles auf einen Rutsch nach Ren’Py.</p>
<p>Zudem bekommt man mit Ink/Inky eine Web-Version »geschenkt«, die man entweder als eigenständige Version oder als Pre-Release unters Volk bringen kann (zum Beispiel über <a href="https://de.wikipedia.org/wiki/Itch.io">itch.io</a>).</p>
<p>Der eigentliche Quellcode ( <code>script.rpy</code>) ist noch sehr übersichtlich (weniger als 100 Zeilen). Es ist aber auch nur ein sehr kleines Spielchen, das schon nach wenigen Sekunden durchgespielt ist:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource default number-lines code-with-copy"><code class="sourceCode default"><span id="cb1-1"># Bilder</span>
<span id="cb1-2">image startszene  = "alice1.jpg"</span>
<span id="cb1-3">image kitchen     = "alice2.jpg"</span>
<span id="cb1-4">image schweinchen = "alice3.jpg"</span>
<span id="cb1-5">image teeparty    = "alice4.jpg"</span>
<span id="cb1-6">image raupe       = "alice5.jpg"</span>
<span id="cb1-7">image endszene    = "alice6.jpg"</span>
<span id="cb1-8"></span>
<span id="cb1-9"># Charaktere</span>
<span id="cb1-10">define a = Character("Alice", color="#c8ffc8")</span>
<span id="cb1-11">define g = Character("Grinsekatze", color="#f39c12")</span>
<span id="cb1-12">define r = Character("Raupe", color="#6495ed")</span>
<span id="cb1-13"></span>
<span id="cb1-14"># Hier beginnt das Spiel.</span>
<span id="cb1-15">label start:</span>
<span id="cb1-16">    scene startszene</span>
<span id="cb1-17"></span>
<span id="cb1-18">    "Es war ein sonniger Tag. Alice schlenderte gedankenverloren </span>
<span id="cb1-19">    durch das Wunderland. Sie hatte sich ein wenig verirrt. </span>
<span id="cb1-20">    Plötzlich materialisierte sich im Gestrüpp über ihrem Weg die </span>
<span id="cb1-21">    Grinsekatze."</span>
<span id="cb1-22"></span>
<span id="cb1-23">    a "Würdest Du mir bitte sagen, wie ich von hier aus weitergehen</span>
<span id="cb1-24">       soll?"</span>
<span id="cb1-25"></span>
<span id="cb1-26">    g "Das hängt zum großen Teil davon ab, wohin Du möchtest."</span>
<span id="cb1-27"></span>
<span id="cb1-28">    menu:</span>
<span id="cb1-29">        "Aber ich will Dir weiterhelfen:"</span>
<span id="cb1-30"></span>
<span id="cb1-31">        "Geradeaus geht es zum Haus der Herzogin":</span>
<span id="cb1-32">            jump herzogin</span>
<span id="cb1-33">        "Links zur Teeparty des verrückten Hutmachers":</span>
<span id="cb1-34">            jump teaparty</span>
<span id="cb1-35">        "Rechts triffst Du die kiffende Raupe auf ihrem Pilz":</span>
<span id="cb1-36">            jump caterpillar</span>
<span id="cb1-37"></span>
<span id="cb1-38">label herzogin:</span>
<span id="cb1-39">    scene kitchen</span>
<span id="cb1-40"></span>
<span id="cb1-41">    "Im Haus der Herzogin herrschte Chaos. Die Herzogin warf </span>
<span id="cb1-42">    erst mit einem Topf nach Alice, doch dann drückte sie ihr </span>
<span id="cb1-43">    ein plärrendes Baby in den Arm."</span>
<span id="cb1-44"></span>
<span id="cb1-45">    jump ferkel</span>
<span id="cb1-46"></span>
<span id="cb1-47">label ferkel:</span>
<span id="cb1-48"></span>
<span id="cb1-49">    scene schweinchen</span>
<span id="cb1-50"></span>
<span id="cb1-51">    "Alice verließ das Haus. Das Plärren des Babys veränderte </span>
<span id="cb1-52">    sich langsam zu einem Grunzen und Quieken. Als Alice nachsah, </span>
<span id="cb1-53">    merkte sie, daß sie ein kleines Ferkelchen im Arm hielt."</span>
<span id="cb1-54"></span>
<span id="cb1-55">    "Erschreckt setzte Alice das Ferkelchen ab. Es lief davon."</span>
<span id="cb1-56"></span>
<span id="cb1-57">    "Und Alice ging verwirrt zurück an den Start."</span>
<span id="cb1-58">    jump start</span>
<span id="cb1-59"></span>
<span id="cb1-60">label teaparty:</span>
<span id="cb1-61">    scene teeparty</span>
<span id="cb1-62"></span>
<span id="cb1-63">    "Alice erreichte die Teeparty vor dem Haus des verrückten</span>
<span id="cb1-64">     Hutmachers. Dieser deklamierte gerade ein langes, dafür</span>
<span id="cb1-65">     um so langweiligeres Gedicht."</span>
<span id="cb1-66"></span>
<span id="cb1-67">    menu:</span>
<span id="cb1-68">        "Alice hatte sehr schnell genug davon. Also</span>
<span id="cb1-69">         überlegte sie …"</span>
<span id="cb1-70"></span>
<span id="cb1-71">        "ob sie nicht doch die Raupe aufsuchen":</span>
<span id="cb1-72">            jump caterpillar</span>
<span id="cb1-73">        "oder gleich nach Hause gehen sollte.":</span>
<span id="cb1-74">            jump ende</span>
<span id="cb1-75"></span>
<span id="cb1-76">label caterpillar:</span>
<span id="cb1-77">    scene raupe</span>
<span id="cb1-78"></span>
<span id="cb1-79">    "Die Raupe war zu bekifft, um ein vernünftiges Gespräch zu</span>
<span id="cb1-80">     führen. Sie murmelte nur immerzu etwas vom »Reich der Ringe«</span>
<span id="cb1-81">     und daß Alice dieses dringend besuchen müßte. Sie</span>
<span id="cb1-82">     sagte noch:"</span>
<span id="cb1-83"></span>
<span id="cb1-84">    r "Komm morgen wieder, dann erzähle ich Dir mehr."</span>
<span id="cb1-85"></span>
<span id="cb1-86">    "Alice beschloß, daß sie für heute genug habe und ging</span>
<span id="cb1-87">     nach Hause."</span>
<span id="cb1-88"></span>
<span id="cb1-89">label ende:</span>
<span id="cb1-90">    scene endszene</span>
<span id="cb1-91"></span>
<span id="cb1-92">    menu:</span>
<span id="cb1-93">       "Damit ist die Geschichte zu Ende."</span>
<span id="cb1-94"></span>
<span id="cb1-95">        "Zurück an den Start?":</span>
<span id="cb1-96">            jump start</span>
<span id="cb1-97">        "Oder die Geschichte verlassen?":</span>
<span id="cb1-98">            return</span></code></pre></div>
<p>Ich habe die Texte wegen der besseren Lesbarkeit ein wenig umgebrochen. Im Original stehen alle Textabschnitte (Absätze) natürlich in einer Zeile. Hier hilft in <a href="http://cognitiones.kantel-chaos-team.de/produktivitaet/visualstudiocode.html">Visual Studio Code</a> das Menü <code>Anzeigen -&gt; Zeilenumbruch</code>, das die Lesbarkeit nicht verloren geht. Und <a href="http://cognitiones.kantel-chaos-team.de/webworking/staticsites/quarto.html">Quarto</a> besitzt (noch?) kein Syntax-Coloring für <code>.rpy</code>-Dateien, daher ist die Farbgebung etwas seltsam.</p>
<p>Das <a href="https://github.com/kantel/renpy/tree/master/renpyprojects/Alice%20im%20Wunderland">komplette Ren’Py-Projekt</a> mit allen Quellen und Bildern findet Ihr wie gewohnt auf meinen GitHub-Seiten. Und ich werde jetzt noch ein wenig weiter mit Ren’Py spielen. Ich glaube nämlich, daß ich noch einiges herausfinden kann. <em>Still digging!</em></p>



 ]]></description>
  <category>RenPy</category>
  <category>Interactive Fiction</category>
  <category>Spieleprogrammierung</category>
  <guid>https://kantel.github.io/posts/2022122001_alice_renpy/index.html</guid>
  <pubDate>Tue, 20 Dec 2022 15:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2022122001_alice_renpy/images/aliceimrenpyland-small.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Alice, Inky und das Web</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2022121902_alice_incle/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52573846790/"><img src="https://kantel.github.io/posts/2022121902_alice_incle/images/alceinkle.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Ich habe meine <a href="https://kantel.github.io/posts/2022121801_inkle_web/">gestrigen</a>, ersten Versuche, mit <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/inkle.html">Ink und Inky</a> eine interaktive Geschichte ins Netz zu stellen, noch einmal überarbeitet. Zum einen wollte ich mir wegen der verwendeten Bildchen (die mir zwar alle recht alt erschienen, aber deren Urheberrechtsstatus mir unbekannt ist) nicht irgendwelche Copyright-Geier ins Haus holen und zum anderen dachte ich, daß es einfach schön wäre, wenn auch die Erkundung von Ink und Inky (wie auch schon die Erkundungen von <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/twine2.html">Twine</a>) in <a href="http://blog.schockwellenreiter.de/2020/11/2020111502.html">meinem Wunderland-Kosmos</a> stattfindet. Also habe ich mir <a href="http://blog.schockwellenreiter.de/2021/01/2021010401.html">diese Geschichte</a> geschnappt und sie nach Ink portiert<sup>1</sup>.</p>
<p>Das gelang mir dieses Mal erstaunlich schnell, nach einer halben Stunde hatte ich die Geschichte im Netz. Ihr könnt sie <strong><a href="http://blog.schockwellenreiter.de/gems/Home_Sweet_Home/">hier finden</a></strong>. Und den <a href="https://github.com/kantel/inky/blob/master/projekte/alice/alice_1.ink">Ink-Quellcode</a> und alle <a href="https://github.com/kantel/inky/tree/master/projekte/alice/Alice_1/images">Bildchen</a> gibt es wie gewohnt auf meinen GitHub-Seiten.</p>
<p>Aufgefallen war mir noch, daß (Web-) Ink es nicht zu mögen scheint, wenn die einzelnen Seite entweder zu lang werden oder mehr als ein Bild enthalten. Ink verschluckt dann gelegentlich die letzten Zeilen einer Seite (oder mein Browser zeigt sie nicht an). Ob das ein Problem von Ink oder ein Problem meines Browsers ist, konnte ich nicht herausfinden, da der Fehler nur gelegentlich auftrat und nicht reproduzierbar war. Ich habe versucht, dieses Verhalten durch eine geschickte Platzierung der <code># CLEAR</code>-Direktive zu verhindern. Sollte es bei Euch dennoch auftreten, ein Klick auf <code>restart</code>-Knopf (rechts) oben auf der Seite sollte alles wieder in Ordnung bringen<sup>2</sup>.</p>
<p>Ansonsten will ich natürlich mein erklärtes Ziel, Ink und <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/renpy.html">Ren’Py</a> miteinander zu verheiraten, auch nicht aus den Augen verlieren. Als nächstes steht also eine Implementierung dieser Geschichte in Ren’Py an. Und für die im Endeffekt geplante <a href="https://kantel.github.io/posts/2022121502_avatare_fuer_renpy/">Rauberpistole in Ren’Py</a> habe ich mit Hilfe der <a href="https://framiq.com/">Avatar-Generatoren von Framic</a> schon erste Bildchen erzeugt. Auch hier wird es bald neues zu berichten geben.</p>
<p>Ich hatte schon lange nicht mehr so viel Vergnügen, wie in den letzten Tagen. <em>Still digging!</em></p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Fußnoten</h2>

<ol>
<li id="fn1"><p>Diese Bilder sind übrigens aus der von <em><a href="https://artpassions.net/rackham/rackham.html">Arthur Rackham</a></em> 1907 illustrierten Ausgabe von <a href="https://artpassions.net/rackham/aliceinwonderland.html">Alice in Wonderland</a>. Rackham starb 1939, also haben hier geldgeile Abmahn-Anwälte keine Chance.↩︎</p></li>
<li id="fn2"><p>Ich versuche auch noch, herauszufinden, was dieses Verhalten tatsächlich auslöst. Sollte ich Erfolg damit haben, werde ich selbstverständlich berichten.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Ink</category>
  <category>Interactive Fiction</category>
  <category>Spieleprogrammierung</category>
  <guid>https://kantel.github.io/posts/2022121902_alice_incle/index.html</guid>
  <pubDate>Mon, 19 Dec 2022 17:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2022121902_alice_incle/images/alceinkle-s.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Kritische Sicherheitslücken in Samba</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2022121901_samba_update/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.surfaceview.co.uk/storage/image/BLI0018.jpg"><img src="https://kantel.github.io/posts/2022121901_samba_update/images/eatme.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Die kürzlich entdeckten, kritischen Sicherheitslücken in der freie Server-Software für Windows-Clients <a href="https://de.wikipedia.org/wiki/Samba_(Software)">Samba</a> wurden korrigiert. Die <a href="https://www.samba.org/samba/history/security.html">Versionen 4.17.4, 4.16.8 und 4.15.13 sind entsprechend abgesichert</a>.</p>
<p>Die korrigierte Versionen sollten zeitnah eingefahren werden. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>



 ]]></description>
  <category>News</category>
  <guid>https://kantel.github.io/posts/2022121901_samba_update/index.html</guid>
  <pubDate>Mon, 19 Dec 2022 15:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2022121901_samba_update/images/eatme-s.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Ink, Inky und das Web</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2022121801_inkle_web/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52571207976/"><img src="https://kantel.github.io/posts/2022121801_inkle_web/images/inklewebexport.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Mit der <a href="https://kantel.github.io/posts/2022121701_renpy_ink_cont/">gestern vorgestellten</a> Playlist »<a href="https://www.youtube.com/playlist?list=PLjgCLYVYeo2wpBeUBIT0C9IWiceH_Hiuo">Writing Interactive Fiction Using the Ink Game Engine</a>«<sup>1</sup> wurde ich daran erinnert, daß <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/inkle.html">Ink/Inky</a> von Hause aus einen Exporter mitbringt, der die interaktiven Geschichten, die Ihr mit dieser Engine geschrieben habt, für das Web aufbereitet.</p>
<p>Ich hatte das <a href="http://blog.schockwellenreiter.de/2018/08/2018082601.html">vor über vier Jahren schon einmal erkundet</a>, aber so weit vergessen, daß ich heute fast einen halben Tage benötigte, um eine simple Geschichte ins Netz zu bringen. Nun bin ich aber mit dem Ergebnis zufrieden und Ihr könnt es <strong><a href="http://blog.schockwellenreiter.de/gems/Home_Sweet_Home/">hier erkunden</a></strong>. Die Geschichte ist nur ein <em>proof of concept</em>, daher mehr als kurz und sehr trivial, aber solltet Ihr dennoch steckenbleiben, hilft ein Klick auf »Neustart« rechts oben (hoffentlich!) weiter.</p>
<p>Das (Wieder-) Entdecken dieses Webexports eröffnet natürlich ein riesiges Füllhorn neuer Möglichkeiten, interaktive Geschichten und Spiele zu programmieren und zu erzählen. Da mein Rentnerstatus – anders als vor vier Jahren, als ich noch im Berufsleben stand – mir nun auch die Zeit spendiert, dies zu versuchen, bin ich hochmotiviert. Mein Kopf ist <a href="https://kantel.github.io/posts/2022121502_avatare_fuer_renpy/">voller Geschichten, die erzählt werden wollen</a>. Also schaun wir mal, was daraus wird.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/R_o2Ndrgobo" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="">
</iframe>
<p>In diesem Zusammenhang möchte ich noch auf zwei weitere Playlists hinweisen, die ich (ebenfalls <a href="http://blog.schockwellenreiter.de/2018/10/2018100601.html">vor vier Jahren</a>) schon einmal vorgestellt hatte. Beide stammen von <em>Dan Cox</em> (der Name bürgt für Qualität): »<a href="https://www.youtube.com/playlist?list=PLlXuD3kyVEr6gV8jjx98eUfRkYbb3u1v6">Learning Ink</a>« besteht aus neun kurzen Videos und das damals noch schnell nacheschobene »<a href="https://www.youtube.com/playlist?list=PLlXuD3kyVEr7O5yqPprSfx1aF8WypzyHh">Ink for the Web</a>« enthält weitere vier (ebenfalls sehr kurze) Video-Tutorials.</p>
<p>Damals schrieb ich übrigens einen Vergleich, den ich auch heute noch sehr passend finde: Wenn <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/twine2.html">Twine</a> mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/hypercard.html">HyperCard</a> zu vergleichen sei, dann ist Ink das Pascal für interaktive Stories. Und zusammen mit <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/renpy.html">Ren’Py</a> bilden Twine und Ink immer noch ein <em>Trio Infernale</em> der freien Werkzeuge für die Entwicklung narrativer Spiele, das kaum zu schlagen ist. <em>Still digging!</em></p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Fußnoten</h2>

<ol>
<li id="fn1"><p>Ich habe mir mittlerweile die ersten Folgen reingezogen. Inhaltlich sind die einzelnen Tutorials ziemlich gut, leider ist die Playlist dagegen sehr chaotisch geraten. Die Numerierung stimmt nicht mit der zeitlichen Abfolge überein und einige Videos scheinen zu fehlen. Man benötigt schon eine gewisse Experimentierfreude, um mithilfe dieser Filmchen Ink und Inky zu erkunden. Aber es lohnt sich.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Ink</category>
  <category>Interactive Fiction</category>
  <category>Spieleprogrammierung</category>
  <guid>https://kantel.github.io/posts/2022121801_inkle_web/index.html</guid>
  <pubDate>Sun, 18 Dec 2022 18:20:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2022121801_inkle_web/images/inklewebexport-s.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Ren’Py und Ink mit Inky (cont.)</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2022121701_renpy_ink_cont/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52568983841/"><img src="https://kantel.github.io/posts/2022121701_renpy_ink_cont/images/inklerenpy-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Heute ging es weiter mit meinen Erkundungen, ob und wie ich <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/renpy.html">Ren’Py</a> mit <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/inkle.html">Ink und Inky</a> verheiraten kann. Wie der <a href="https://www.flickr.com/photos/schockwellenreiter/52568983841/">Screenshot</a> zeigt, bin ich auch schon ziemlich weit gekommen und mein derzeitiges Fazit ist: Es geht, aber es ist mit viel Handarbeit verbunden.</p>
<p>Was ich genau alles angestellt habe, hebe ich mir für einen späteren Beitrag auf, wenn ich mir selber darüber klar geworden bin, wie Ren’Py und Ink/Inkle eigentlich genau funktionieren. Zur Zeit stochere ich selber dabei noch ziemlich im Dunkeln und experiementiere mit einer Phalanx von Handbüchern auf meinem Schoß.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/SDZmJyO9LyQ" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="">
</iframe>
<p>In diesem Zusammenhang habe ich noch eine weitere Playlist »<a href="https://www.youtube.com/playlist?list=PLjgCLYVYeo2wpBeUBIT0C9IWiceH_Hiuo">Writing Interactive Fiction Using the Ink Game Engine</a>« ausgegraben. Sie ist von der <a href="https://www.yourlibrary.ca/"><em>Richond Public Library</em></a> aus Kalifornien und scheint ziemlich gut zu sein. Zudem ist sie recht aktuell (die letzte Aktualisierung ist vom Dezember 2021), aber sie besteht aus sieben rund dreiviertelstündigen Videos. Da brauche ich noch ein paar Tage, bis ich sie mir alle komplett reingezogen habe.</p>
<p>Danach weiß ich dann hoffentlich mehr.</p>
<p>Bisher kann ich aber schon sagen, daß Ren’Py ein völlig unterschätztes Tool ist. Mit ein wenig Phantasie lassen sich damit nämlich viel mehr Dinge als pubertäre Dating-Sims oder süßliche Manga-Adaptionen produzieren. Das Teil ist so mächtig, daß man damit viele seltsame und überraschende Dinge im Bereich »narrativer« Spiele produzieren kann, und ist damit (zumindest im 2D-Bereich) dem Boliden <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/unity.html">Unity</a> durchaus ebenbürtig.</p>
<p>Und auch das Schreiben von interaktiven Geschichten in Ink und Inky macht Spaß. Und auch wenn es noch keine Bridge zu Ren’Py gibt, scheint es nicht allzu schwer und zeitaufwendig zu sein, die Ink-Skripte nach Ren’Py zu portieren.</p>
<p>Doch hier weiß ich mehr, wenn ich mit diesen Werkzeugen vertrauter bin. <em>Still digging!</em></p>



 ]]></description>
  <category>RenPy</category>
  <category>Ink</category>
  <category>Interactive Fiction</category>
  <category>Spieleprogrammierung</category>
  <guid>https://kantel.github.io/posts/2022121701_renpy_ink_cont/index.html</guid>
  <pubDate>Sat, 17 Dec 2022 16:10:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2022121701_renpy_ink_cont/images/inklerenpy.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Ren’Py und Ink mit Inky: Video-Tutorials für das Wochenende</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2022121601_renpy_ink/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52567637049/"><img src="https://kantel.github.io/posts/2022121601_renpy_ink/images/avatartest3-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Es war abzusehen: Selbstverständlich mußte ich meine <a href="https://kantel.github.io/posts/2022121502_avatare_fuer_renpy/">gestern begonnenen</a> Experimente mit <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/renpy.html">Ren’Py</a> und <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/inkle.html">Ink mit Inky</a> heute fortsetzen. Und fast ebenso selbstverständlich erwuchs daraus eine Liste von Video-Tutorials zum Thema, die ich Euch zu Eurer Erbauung präsentieren möchte und mit denen Ihr Euch beschäftigen könnt, wenn Euch die Kälte draußen an die warme Stube drinnen fesselt.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/DeIRx1BBnv8" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="">
</iframe>
<p>Ich fange mit Ren’Py an: Dem zwölfminütigen »<a href="https://www.youtube.com/watch?v=DeIRx1BBnv8">Kurzeinstieg in Ren’Py am Beispiel eines kleinen Ren’Py Scripts</a> von <em>Robert Steffens</em> folgen in der dazugehörenden <a href="https://www.youtube.com/playlist?list=PL0G1dX_DLb37twpEJNxXJH_Bk2xQGwVbY">Playlist</a> noch drei weitere, etwa fünfminütige Filmchen. Ich habe sie mir noch nicht angeschaut, wage daher auch keine Aussage über die Qualität der Tutorials.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/6tNE5fRhIzM" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="">
</iframe>
<p>Das gleiche gilt für die Playlist »<a href="https://www.youtube.com/playlist?list=PLlfxuctDgc5n8Mcj29PiHney3Kr6F1yjt">Ren’Py Development</a> von <em>Wulfmune</em>. Die zehn etwa 15- bis 20-minütigen Videos (dazwischen hat sich als 11. Film auch noch ein kurzer Trailer versteckt) behandeln eher Spezialthemen. Für die Tutorials spricht, daß die verwendeten Bilder von der vielfach üblichen, süßlichen Manga-Ästhetik abweichen.</p>
<p>Die Tutorials sind brandaktuell: Der jüngste Fiim ist heute abend erst vor wenigen Minuten hochgeladen worden. Ich bin daher ziemlich neugierig und habe den Kanal auch abonniert, da sicher noch weitere Tutorials zu erwarten sind.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/iY9PrNQik_I" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="">
</iframe>
<p>Reingezogen habe ich mir hingegen schon eine Reihe von Tutorials zu Ink und Inkle. Besonders gefallen haben mir hier die vier Videos der Playlist »<a href="https://www.youtube.com/playlist?list=PLuSvdAg-FtpxCQ0SN-Da0-55woO_TkB0g">Teach Me How To Ink</a>« des YouTubers <em>hoverboard</em>. Wobei das letzte Video fast anderthalb Stunden benötigt, um Euch durch das »<a href="https://www.youtube.com/watch?v=_XlyShbWpGc">Labyrinth der Funktionen</a>« von Ink zu leiten. Und auch die anderen Videos – mit je fünfzehn bis fünfundzwanzig Minuten deutlich kürzer – sind sehr lehrreich. Wenn Ihr Euch nur eine Playlist zu Ink und Inkle reinziehen wollt oder könnt – dann nehmt diese!</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/-nK-tQ_vc0Y" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="">
</iframe>
<p>Fast alle Inkle-Video-Tutorials behandeln die Integration mit <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/unity.html">Unity</a>. Ein Beispiel dafür ist das obige Video »<a href="https://www.youtube.com/watch?v=-nK-tQ_vc0Y">Making Dialogue with Inky and Unity</a>«. Ich muß gestehen, jemand wie ich, der sich mit Unity und C# nicht auskennt, steht davor, wie ein Ochs vorm Berg. Ich habe dieses Video eigentlich auch nur wegen der visuellen Effekte ausgewählt.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/3eYHtDGOM8U" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="">
</iframe>
<p>Mehr Spaß hatte ich mit dem auf der GDC 2017 gehaltenen Vortrag »<a href="https://www.youtube.com/watch?v=3eYHtDGOM8U">Creating Interactive Film Scripts for 3D Adventures with Ink</a> von <em>Joseph Humfrey</em>. <em>Joseph Humfrey</em> ist einer der beiden Gründer der britischen Spieleschmiede <a href="https://en.wikipedia.org/wiki/Inkle_(company)">Inkle</a>, die zusammen nicht nur so geniale, narrative Spiele wie »<a href="https://en.wikipedia.org/wiki/80_Days_(2014_video_game)">80 Days</a>« oder »<a href="https://en.wikipedia.org/wiki/Sorcery!_(video_game)">Sorcery!</a>« entwickelt hatten, sondern auch für Ink und Inky verantwortlich zeichnen und damit alle ihre Spiele entwickeln. <em>Joseph Humfrey</em> weiß also, worüber er spricht, wenn er in obigem Vortrag erzählt, wie ihnen bei Inkle Ink und Inky in der Entwicklung von »<a href="https://en.wikipedia.org/wiki/Heaven%27s_Vault">Heaven’s Vault</a>« unterstützt hat.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/HZft_U4Fc-U" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="">
</iframe>
<p>Fand ich obigen Vortrag von <em>Joseph Humfrey</em> schon ziemlich genial, so hat mich der einen Tag später ebenfalls auf der GDC 2017 gehaltene Beitrag seines Compagnions <a href="https://en.wikipedia.org/wiki/Jon_Ingold"><em>Jon Ingold</em></a> mit dem etwas sperrigen Titel »<a href="https://www.youtube.com/watch?v=HZft_U4Fc-U">Narrative Sorcery: Coherent Storytelling in an Open World</a>« regelrecht umgehauen. Er zeigt darin die Prinzipien auf, wie man aus einer Geschichte eine »echte« offene Welt mit allen ihren Konsequenzen gestalten kann (und welch ein Aufwand dahinter steckt). Nach diesem Vortrag habe ich verstanden, warum die beiden Ink entwickelt hatten und wie sie es in ihrer Spieleschmiede einsetzen.</p>



 ]]></description>
  <category>RenPy</category>
  <category>Ink</category>
  <category>Interactive Fiction</category>
  <category>Spieleprogrammierung</category>
  <guid>https://kantel.github.io/posts/2022121601_renpy_ink/index.html</guid>
  <pubDate>Fri, 16 Dec 2022 18:45:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2022121601_renpy_ink/images/avatartest3-s.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Kostenlose Avatar-Generatoren für Ren’Py</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2022121502_avatare_fuer_renpy/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52565220146/"><img src="https://kantel.github.io/posts/2022121502_avatare_fuer_renpy/images/avatarmakerrenpy.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Als ich jüngst halbwach vor mich hin träumte, kam mir die Idee für ein <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/renpy.html">Ren’Py</a>-Tutorial/-Spiel. Es sollte eine Art wüste Räuberpistole werden, mit einer schönen, aber korrupten Griechin (wie komme ich nur darauf?<sup>1</sup>) in einer Nebenrolle, einer unfähigen Bürgermeisterin mit gefälschtem Doktortitel als Oberbösewichtin (darauf stößt einen die Wirklichkeit ja mit der Nase) und einem etwas geistig unterbelichteten IT-Spezialisten, der nach seinem Rausschmiß aus der Polzei-Akademie nach Berlin abgeschoben wurde, weil die dafür eigentlich vorgesehenen Wege nach Brüssel oder Straßburg schon von abgehalfterten Politikerinnen und Politikern verstopft waren und er in Berlin dennoch als überqualifiziert galt. Also eine Geschichte, wie sie das stinknormale Leben jeden Tag schreibt<sup>2</sup>.</p>
<p>Hochmotiviert wollte ich mich natürlich sofort an die Realisierung wagen, aber gerade noch rechtzeitig fiel mir ein, daß mir für eine <em>Visual Novel</em> das Talent zum visuellen fehlt. Daher sollte mir das Internet dabei helfen und ich machte mich auf die Suche nach kostenlosen Avatar-Generatoren. Schnell hatte die <a href="https://duckduckgo.com/?">Suchmaschine meines Vertrauens</a> diese Ergebnisse in meinen Browser gespült:</p>
<div style="float: right; margin-left: 12px; margin-top: 6px;">
<iframe sandbox="allow-popups allow-scripts allow-modals allow-forms allow-same-origin" style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//ws-eu.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;OneJS=1&amp;Operation=GetAdHtml&amp;MarketPlace=DE&amp;source=ss&amp;ref=as_ss_li_til&amp;ad_type=product_link&amp;tracking_id=derschockwell-21&amp;language=de_DE&amp;marketplace=amazon&amp;region=DE&amp;placement=1484249194&amp;asins=1484249194&amp;linkId=b2976ff6ad741c88eec2520f3096d175&amp;show_border=true&amp;link_opens_in_new_window=true">
</iframe>
</div>
<ol type="1">
<li>Den simplen und freien Baukkasten für Avatare »<a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/avatare/avataaars.html">Avataaars</a>« (mit fünf »a«) hatte ich hier im <del>Blog</del> Kritzelheft <a href="http://blog.schockwellenreiter.de/2021/10/2021102501.html">schon</a> <a href="http://blog.schockwellenreiter.de/2022/09/2022092603.html">häufiger</a> <a href="http://blog.schockwellenreiter.de/2022/01/2022010901.html">vorgestellt</a>. Ich mag ihn gerade wegen seiner eingeschränkten Möglichkeiten, denn man hat mit ihm sich schnell einen Prototpyen zusammengeklickt.</li>
<li>Kompexer ist das »<a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/avatare/animeavatar.html">Anime Avatar Maker Tool</a>« von <em>Avachara</em>. Hier solltet Ihr Euren Entwurfsprozeß mit einer sorgfältigen Buchführung über Eure einzelnen Schritte begleiten, um Eure Figur reproduzieren zu können. Zwar geht das auch irgendwie aus der URL hervor – aber glaubt mir, eine Buchführung ist einfacher.</li>
<li>Mein derzeitiger Favorit ist aber der »<a href="https://avatarmaker.com/">Avatar Maker</a>«. Mit diesem freien (frei wie Freibier) Online-Tool könnt Ihr Avatare in vier verschiedenen Stilrichtungen (von »Avataaars«-ähnlich über zwei verschiedene Comic-Stile bin hin zu »wie handgezeichnet«) zusammenklicken. Die Ergebnisse könnt Ihr entweder als PNG- oder als SVG-Datei herunterladen und mit der Bildverarbeitung Eures Vertrauens nachbearbeiten. Den Avatar im Screenshot oben habe ich mit dem Avatar Maker erzeugt.</li>
<li>Der »<a href="https://danielvoelk.de/avatar-erstellen/">Avatar Generator</a>« ist eine freie PHP-Anwendung, die auf <a href="http://www.avatars24.de/">vielen Webseiten</a> zu finden ist, da sie sich leicht einbinden läßt (die Originalquelle habe ich allerdings nicht gefunden). Das Ergebnis wirkt wie eine Weiterentwicklung von »Avataaars«. Ihr könnt es entweder als PNG (max. 500x500 Pixel) oder als skalierbare SVG-Datei herunterladen. Bei der SVG-Datei ist allerdings Vorsicht geboten: Nicht jedes Graphikprogramm kann diese Datei fehlerfrei anzeigen und weiterbearbeiten. Mit dem freien <a href="http://cognitiones.kantel-chaos-team.de/multimedia/computergraphik/inkscape.html">Inkscape</a> funktionierte es bei mir allerdings problemlos.</li>
<li>Der »<a href="https://www.southpark.de/info/lv0nha/avatar">South Park Avatar Generator</a>« ist etwas für Fans der Fernsehserie <a href="https://de.wikipedia.org/wiki/South_Park">South Park</a>. Mit ihm könnt Ihr recht große PNGs im Stil der Comic-Figuren der Serie erzeugen. Allerdings besitzen die Kinderfiguren einen großen Weißraum, so daß der Einsatz in Ren’Py noch etlicher Nachbearbeitung bedarf.</li>
<li>Als letzten, besonders interessanten Generator möchte ich noch die Seiten von <em>Framic</em> vorstellen. Hier könnt Ihr Euch kostenlos online Avatare im Stil des <a href="https://medievaltar.framiq.com/de/">Mittelalters</a>, als <a href="https://superherotar.framiq.com/de/">Superhelden</a>, als <a href="https://pottertar.framiq.com/de/">Harry-Potter-Figuren</a>, im Stil von <a href="https://mangatar.framiq.com/de/">Mangas</a>, als <a href="https://zombietar.framiq.com/de/">Zombies</a>, <a href="https://cthulhutar.framiq.com/de/">Monster</a>, <a href="https://piratetar.framiq.com/de/">Piraten</a>, <a href="https://vampiretar.framiq.com/de/">Vampire</a> oder mehr (einfach auf jeder Startseite nach unten scrollen) zusammenbasteln. Da hinter allen Seiten die gleiche Engine steckt, lassen sich die einzelnen Figuren in einem Spiel problemlos kombinieren. Und es sind nicht die gewohnten Brustbilder, sondern Ganzkörper-Avatare, die ihr als PNG bis hin zur 4K-Größe (4.096x4.096 Pixel) herunterladen könnt. Das dürfte selbst für ausgefallen große Screens ausreichen.</li>
</ol>
<p>Ich glaube, für mein geplantes Projekt werde ich mich noch etwas länger mit den Seiten von <em>Framic</em> beschäftigen und Euch auch über Zwischenergebnisse informieren.</p>
<p>Daneben habe ich noch folgendes zu berichten: Ich habe Frieden mit <a href="http://cognitiones.kantel-chaos-team.de/produktivitaet/visualstudiocode.html">Visual Studio Code</a> geschlossen, denn ein <a href="https://github.com/LuqueDaniel/vscode-language-renpy">Ren’Py-Plugin</a> für diesen Editor hat seinen Weg dorthin (es war eigentlich ein <a href="http://cognitiones.kantel-chaos-team.de/produktivitaet/atom.html">Atom</a>-Plugin) gefunden, und es ist eine große Arbeitserleichterung für mich. Zudem habe ich den Editor auch problemlos auf <a href="http://blog.schockwellenreiter.de/2021/12/2021120701.html">meinem Chromebook</a> installiert bekommen und damit habe ich einen weiteren Schritt geschafft, mich aus der Mac-only-Falle zu befreien<sup>3</sup>.</p>
<p>Und als Letztes: Ich plane, meine oben anerzählte Räuberpistole erst einmal als Textabenteuer mit dem freien (MIT-Lizenz) <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/inkle.html">Ink und Inky</a> zu entwickeln, bevor ich sie in Ren’Py visualisiere. Denn mit Texten kann ich (noch!) besser umgehen, als mit Bildern. Und im Gegensatz zu <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/twine2.html">Twine</a> besitzt Ink eine Verzweigungsstruktur, die den »Menüs« von Ren’Py ziemlich ähnlich ist. Und vielleicht finde ich sogar noch ein Tool, daß ähnlich wie Inks <a href="https://github.com/inkle/ink-unity-integration">Unity-Exporter</a> die Integration nach Ren’Py vereinfacht. Sonst muß ich mich halt mit einem simplen JSON-Export behelfen. <em>Still digging!</em></p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Fußnoten</h2>

<ol>
<li id="fn1"><p>Nun ja, Agentengeschichten ohne bestechliche, sexbesessene und attraktive Griechinnen sind keine wahren Agentengeschichten. Das lehrt einem jeder James-Bond-Film.↩︎</p></li>
<li id="fn2"><p>Wem das alles bekannt vorkommt: Einen ähnlichen Plot hat <em>Robert Ciesla</em> in seinem Buch »<a href="https://www.amazon.de/Game-Development-RenPy-Introduction-TyranoBuilder/dp/1484249194?__mk_de_DE=%C3%85M%C3%85%C5%BD%C3%95%C3%91&amp;crid=1LS3JHYQJFRAP&amp;keywords=Ren%27Py&amp;qid=1671125132&amp;sprefix=ren%27py%2Caps%2C96&amp;sr=8-1&amp;linkCode=ll1&amp;tag=derschockwell-21&amp;linkId=791b1a3b9ae40eba4fb0b7c658e67345&amp;language=de_DE&amp;ref_=as_li_ss_tl">Game Develoment with Ren’Py – Introduction to Visual Novel Games Using Ren’Py, TyranoBuilder, and Twine</a>«, New York (Apress) 2019, pp 217, verbraten. Aber im Gegensatz zu meiner ist seine Geschichte völlig unrealistisch. Denn obwohl sie in Großbritannien (vor dem Brexit!) und Norwegen spielt, kommen darin keine korrupten EU-Parlamentarier vor. <em>Robert Ciesla</em> ist allerdings Finne, daher gehören korrupte Europapolitikerinnen und -politiker vermutlich nicht zu seinen Alltagserfahrungen.↩︎</p></li>
<li id="fn3"><p>Jetzt muß ich »nur« noch <a href="https://desktop.github.com/">GitHub Desktop</a> auf meinem Chromebook installert bekommen (angeblich gibt es davon eine nicht-authorisierte Linux-Version), dann habe ich mich nicht nur vollständig und komlett aus der Mac-only-Falle befreit, sondern nenne auch ein Chromebook für Mausschubser mein eigen.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>RenPy</category>
  <category>Interactive Fiction</category>
  <category>Spieleprogrammierung</category>
  <guid>https://kantel.github.io/posts/2022121502_avatare_fuer_renpy/index.html</guid>
  <pubDate>Thu, 15 Dec 2022 16:45:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2022121502_avatare_fuer_renpy/images/avatarmakerrenpy2.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
