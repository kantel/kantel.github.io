<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Der Schockwellenreiter</title>
<link>https://kantel.github.io/index.html</link>
<atom:link href="https://kantel.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description>Schockwellenreiter</description>
<generator>quarto-1.3.340</generator>
<lastBuildDate>Mon, 03 Jul 2023 13:35:00 GMT</lastBuildDate>
<item>
  <title>Tweaking Visual Studio Code</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023070301_tweaking_vscode/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53019771555/"><img src="https://kantel.github.io/posts/2023070301_tweaking_vscode/images/codesnap-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Ich wage es ja kaum zuzugeben, aber so langsam werden <a href="http://cognitiones.kantel-chaos-team.de/produktivitaet/visualstudiocode.html">Visual Studio Code</a> und ich doch Freunde, auch wenn ich es Microsoft immer noch übel nehme, daß sie – respektive die Microsoft-Tochter <a href="http://cognitiones.kantel-chaos-team.de/webworking/versionsverwaltung/github.html">GitHub</a> – den <a href="http://cognitiones.kantel-chaos-team.de/produktivitaet/atom.html">Atom-Editor</a> gekillt haben. Aber da diese Seiten schon bei <a href="http://cognitiones.kantel-chaos-team.de/webworking/webservices/githubpages.html">GitHub Pages</a> gehostet werden, darf ich nicht den Pharisäer spielen und in einem Schmollwinkel hocken bleiben.</p>
<p>Denn der Editor ist wirklich gut<sup>1</sup>. Er ist erst einmal einfach zu bedienen, kann aber im Bedarfsfall zu ungeahnter Komplexität aufgebort werden. Einen ersten Überblick über Möglichkeiten und Erweiterungen gibt der überaus nützliche Aufsatz »<a href="https://medium.com/@quackquackquack/guide-setting-up-a-vscode-thats-so-good-that-you-work-overtime-just-so-you-can-keep-typing-11f85e58ee71">Setting up a VSCode that’s so good that you work overtime just so you can keep typing</a>« des Medium-Users <em>Quack Quack</em>. Einmal zeigt er, in welchen Konfigurationsdateien man editieren kann, um das Teil seinen Wünschen anzupassen (das ist nämlich nicht immer einleuchtend). Zum anderen macht er einen Font-Vorschlag, die freie (<a href="https://scripts.sil.org/cms/scripts/page.php?site_id=nrsi&amp;id=OFL">Open Font Licence</a>), im Schoß der <em>Mozilla Foundation</em> entwickelten Schrift aus der <em>Spiekermannschen</em> <a href="https://en.wikipedia.org/wiki/Fira_(typeface)">Fira-Familie</a>, die mit vielen Ligaturen das Programmiererherz erfreut: <a href="https://fonts.google.com/specimen/Fira+Code">Fira Code</a><sup>2</sup>. Bei der Auswahl »meines« Fonts habe ich aber noch keine Entscheidung getroffen, denn <a href="https://www.omgubuntu.co.uk/2023/06/intel-one-mono-font">Intel One Mono</a> (ebenfalls OFL, <a href="https://github.com/intel/intel-one-mono">Download bei GitHub</a>) scheint auch ein guter Font für Programmierer zu sein, und der Aufsatz »<a href="https://realpython.com/coding-font/">Choosing the Best Coding Font for Programming</a>«, den <em>Philipp Acsany</em> auf Real Python veröffentlicht hat, stellt noch eine Reihe weiterer guter Schriften für Programmierer vor.</p>
<p><img src="https://kantel.github.io/posts/2023070301_tweaking_vscode/images/coderenpy.png" class="img-fluid"></p>
<p><em>Last but not least</em> stellt der Beitrag noch eine Reihe von (mehr oder weniger) nützlichen Plugins vor (im Visual-Studio-Code-Jargon »Erweiterungen« <em>(Extensions)</em> genannt). Obwohl ich versuche, die Zahl der instalierten Plugins zu minimieren (da ich Angst davor habe, daß sie sich gegenseitig stören könnten), habe ich mich sofort in <a href="https://marketplace.visualstudio.com/items?itemName=adpyke.codesnap">CodeSnap</a> verliebt. Denn das Teil produziert wunderschöne Screenshots von meinem (und Euren) Code-Schnipseln und ist immer häufiger anzutreffen.</p>
<p>Das braucht man zwar nicht unbedingt, aber wer gerne programmiert, der spielt auch gerne. Daher mußte ich diese Erweiterung natürlich sofort installieren. Wundert Euch also nicht, wenn Euch meine Codeschnipsel in Zukunft in Form stylischer Screenshots begegnen.</p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Fußnoten</h2>

<ol>
<li id="fn1"><p>Das manchmal als Alternative angepriesene <a href="https://vscodium.com/">VSCodium</a> ist leider für mich keine, da sich etliche Erweiterungen – wie zum Beispiel das für mich essentielle <a href="https://marketplace.visualstudio.com/items?itemName=LuqueDaniel.languague-renpy">Ren’Py Language</a> – entweder gar nicht oder nur über eine Hintertür nutzen lassen.↩︎</p></li>
<li id="fn2"><p>Auch wenn es FiraCode ganz offiziell im <a href="https://marketplace.visualstudio.com/items?itemName=SeyyedKhandon.firacode">VSCode Marketplace</a> zur einfachen Installation gibt, scheint es dennoch manchmal zu Problemen zu kommen. Anders kann ich mir die Fülle der Installationstutorials – wie zum Beispiel <a href="https://github.com/tonsky/FiraCode/wiki/VS-Code-Instructions">hier auf GitHub</a>, <a href="https://chsamii.medium.com/fira-code-monospaced-font-with-programming-ligatures-1cfcc829d692">hier auf Medium.com</a> oder <a href="https://www.dhairyashah.dev/posts/how-to-install-fira-code-font-in-visual-studio-code/">hier von <em>Dhairya Sha</em></a> – nicht erklären.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Visual Studio Code</category>
  <guid>https://kantel.github.io/posts/2023070301_tweaking_vscode/index.html</guid>
  <pubDate>Mon, 03 Jul 2023 13:35:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023070301_tweaking_vscode/images/codesnap.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Noch ein paar Ren’Py-Tutorials außer der Reihe</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023070202_renpy_addons/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53016545152/"><img src="https://kantel.github.io/posts/2023070202_renpy_addons/images/reginaldfelix-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Mit meinen <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/renpy.html">Ren’Py</a>-Erkundungen komme ich gut voran. Doch das erste, was ich bisher gelernt habe, ist, daß Ren’Py bedeutend mehr Fähigkeiten besitzt, als ich bisher geglaubt habe. Wer will, kann es sogar zu einer vollwertigen Spiele-Engine aufbohren und damit auch Action-Spiele programmieren:</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/wdd-XPlsSKc" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Doch erst einmal muß ich lernen, was man mit den statischen Spielefiguren alles anstellen kann. Bisher verwende ich ja Avatare, die ich mit <a href="https://framiq.com/">Framiq</a> zusammengebastelt habe. Doch selbst diese mit ihren beschränkten Möglichkeiten können schon ohne eine sorgfältige Buchhaltung zu Konfusionen führen. Hier ist es sinnvoll, daß man zu seinen einzelnen Schöpfungen eine URL mitbekommt, mit der man sie jeweils wieder aufrufen und weiterbearbeiten kann. Leider habe ich dieses Feature erst spät entdeckt, daher werde ich wohl meine Bilder alle noch mal neu erstellen und die URLs dann aufheben müssen.</p>
<p>Was meine noch ausstehenden Experimente mit dem <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/avatare/animeavatar.html">Avatar Maker Tool</a> ergeben werden, weiß ich noch nicht, doch ich werde – wie <a href="https://kantel.github.io/posts/2023063001_renpy_tutorials/">versprochen</a> – darüber berichten.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/KoYXzREFx4A" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>In der schon am Freitag vorgestellten Playlist »<a href="https://www.youtube.com/playlist?list=PLMdFGlfdL57MSSForRZZBJtS-N9thXSA6">Ren’Py Essentials</a>« des Kanals <em>Visual Novel Design</em> gibt es unter anderem das Video »<a href="https://www.youtube.com/watch?v=KoYXzREFx4A">Ren’py Images and Action Editor Tutorial</a>«, das das Plugin <a href="https://github.com/kyouryuukunn/renpy-ActionEditor3">Ren’Py Action Editor</a> vorstellt. Was man mit diesem Plugin alles aus statischen Bildern herausholen kann, ist beeindruckend<sup>1</sup>. Ich muß das unbedingt installieren und testen.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/3Lx1gpj6ilU" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Und <em>last but not least</em> habe ich noch eine Playlist ausgegraben, die ich außer der Reihe vorstellen möchte. Sie ist aus dem schon <a href="https://kantel.github.io/posts/2023063001_renpy_tutorials/">mehrfach erwähnten</a> Kanal <em>Game Developer Training</em>: Die Reihe »<a href="https://www.youtube.com/playlist?list=PLKdE0Vv4UA5-W0yyEdLFDVnmIrFa45g_Y">Ren’Py Masterclass</a>« besteht derzeit aus vier Videos je zwischen einer halbstündigen und einer knapp einstündigen Laufzeit. Das jüngste Video wurde vor etwa zwei Monaten hochgeladen, bei der enormen Produktivität des Kanals kann daher durchaus mit weiteren Updates gerechnet werden.</p>
<p>Die vielen Möglichkeiten, die Ren’Py (für mich überraschend) bietet, haben mein Testskript schon gewaltig anschwellen lassen, dabei kratze ich gerade einmal an der Oberfläche. Schaun wir mal, was ich noch alles entdecken werde. <em>Still digging!</em></p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Fußnoten</h2>

<ol>
<li id="fn1"><p>Sicher geht das alles auch ohne das Plugin, es stellt schließlich nur Parameter zur Verfügung, die man in sein Skript hineinkopieren kann. Aber ohne das Teil wäre es eine mühsame Pfriemelei.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>RenPy</category>
  <category>Spieleprogrammierung</category>
  <category>Interactive Fiction</category>
  <guid>https://kantel.github.io/posts/2023070202_renpy_addons/index.html</guid>
  <pubDate>Sun, 02 Jul 2023 15:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023070202_renpy_addons/images/reginaldfelix.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Zurück in die 1970er Jahre: »Myst« in 8 Bit</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023070201_myst_8_bit/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://cdn.arstechnica.net/wp-content/uploads/2023/06/myst_hero_3-800x450.jpg"><img src="https://kantel.github.io/posts/2023070201_myst_8_bit/images/myst8bit-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Wie geil ist das denn? Da hat doch jemand die Computerspiellegende »<a href="http://cognitiones.kantel-chaos-team.de/medien/retrogames/myst.html">Myst</a>«, die vor 30 Jahren eine Sensation auslöste, <a href="https://arstechnica.com/gaming/2023/06/30-years-later-myst-demake-for-atari-2600-reminds-us-how-far-weve-come/">zurück in die 1970er katapultiert</a> und eine 8-Bit-Version für den ebenso legendären <a href="https://de.wikipedia.org/wiki/Atari_2600">Atari 2600</a> programmiert. Warum? Weil es geht, ist sicher eine akzeptable Antwort, Und weil in der Beschränkung die Kraft liegt, eine andere. Und eine dritte ist, daß eine Legende zu einer Legende gehört.</p>
<p>Doch der Reihe nach: Myst vorzustellen bedeutet sicher – zumindest für die Älteren meiner Leser – Eulen nach Athen zu tragen. Das 1993 erstmals erschienene, vollfarbige Computerspiel mit hoher Graphikqualität gehört zu den meistverkauften Computerspielen aller Zeiten. Es war damals vermutlich das Anspruchsvollste, was aus <a href="http://cognitiones.kantel-chaos-team.de/programmierung/hypercard.html">HyperCard</a> und <a href="http://cognitiones.kantel-chaos-team.de/programmierung/hypertalk.html">HyperTalk</a> herauszuholen war. Doch nun hat <em>Vince Weaver</em>, ein Informatikprofessor von der <em>University of Maine</em>, die anspruchsvolle Graphik wieder auf eine Klötzchen-Ästhetik reduziert, um das Spiel in einer Version für den 1977 erstmals erschienenen 8-Bit-Computer Atari 2600 <a href="https://twitter.com/deater78/status/1672071594372476929?s=20">herauszubringen</a>.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/IRxYdMVgwsw" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Diese Version kann <a href="http://deater.net/weave/vmwprod/myst_vcs/">hier heruntergeladen</a> und – falls vorhanden – auf einem Original Atari 2600 gespielt werden. Aber auch mit einem der zahlreichen Emulatoren wie zum Beispiel »<a href="https://stella-emu.github.io/">Stella</a>« sollte das <em>Demake</em> spielbar sein und ein echtes Retro-Feeling vermitteln.</p>
<div style="float: right; margin-left: 12px; margin-top: 6px;">
<img src="https://kantel.github.io/posts/2023070201_myst_8_bit/images/tic80guide.jpg" class="img-fluid">]
</div>
<p>Die Atari-Version ist übrigens nicht das erste Myst-Demake von <em>Vince Weaver</em>: Er hat auch schon – <em>Daniel Shiffman</em>, übernehmen sie – eine voll spielbare Fassung für den <a href="https://de.wikipedia.org/wiki/Apple_II%2B">Apple II+</a> (Erscheinungsdatum: 1979) unter <a href="http://www.deater.net/weave/vmwprod/mist/">das staunende Volk</a> gebracht. Einfach, weil es ihn fasziniert, ein Spiel, das bei Erscheinen eine komplette CD-ROM als Speichermedium benötigte, in die vorhandenen 16k ROMs der Retrocomputer zu packen.</p>
<p>Das bringt mich natürlich auf eine Idee: Warum sollte man nicht Myst auch auf eine Fantasykonsole portieren? Denn in der Beschränkung liegt die Kraft, die Klötzchen-Ästhetik gefällt mir und meine <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/tic80.html">TIC-80</a>-Bibel, der »<a href="https://www.goodreads.com/book/show/51217057-phantasy-computer-tic-80-happy-programming-guide">Happy programming guide</a>« von <em>Yukoku Kenji</em>, weiß auch die ersten Schritte, wie man so etwas anstellen könnte. Wenn ich doch nur ein wenig mehr Zeit hätte&nbsp;…</p>



 ]]></description>
  <category>Retrogaming</category>
  <category>Retrocomputing</category>
  <category>Spieleprogrammierung</category>
  <category>TIC-80</category>
  <guid>https://kantel.github.io/posts/2023070201_myst_8_bit/index.html</guid>
  <pubDate>Sun, 02 Jul 2023 14:05:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023070201_myst_8_bit/images/myst8bit.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Zum Monatsbeginn wieder ein paar Zahlen (Mediadaten Juni 2023)</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023070101_mediadaten_juni_2023/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53014714311/"><img src="https://kantel.github.io/posts/2023070101_mediadaten_juni_2023/images/mediadaten202306-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Auch wenn ich mir für das Wochenende eigentlich wegen meiner geplanten Basteleien mit <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/renpy.html">Ren’Py</a> einen Hiatus <a href="https://kantel.github.io/posts/2023063001_renpy_tutorials/">selbst auferlegt</a> habe, heute beginnt ein neuer Monat und zu Monatsbeginn sind traditionell ein paar Zahlen fällig, die hochtrabend manches Mal auch <em>Mediadaten</em> genannt werden.</p>
<p>Nun denn, im Juni 2023 hatte der <em>Schockwellenreiter</em> laut seinem (hoffentlich!) datenschutzkonformen <del>Geißenpeter</del> <a href="https://www.goatcounter.com/">GoatCounter</a> exakt <strong>4.176&nbsp;Besucherinnen und Besucher</strong>. Wie immer täuscht die Exaktheit der Ziffern eine Genauigkeit der Zahlen nur vor. Dennoch freue ich mich über jede und jeden, der oder die den Weg auf diese Seiten gefunden hat und bedanke mich bei allen meinen Leserinnen und Lesern.</p>
<p>😎 &nbsp; <em>Bleibt mir gewogen!</em></p>
<p>Wie jedes Mal gibt es auch eine <em>Top Five</em> des Vormonats, die dieses Mal nicht mehr so monothematisch ist wie im <a href="https://kantel.github.io/posts/2023060101_mediadaten_mai_2023/">Mai dieses Jahres</a>:</p>
<ol type="1">
<li>Mathematik, KI und Algorithmen: <a href="https://kantel.github.io/posts/2023061201_umme_lesen/">Für umme lesen</a></li>
<li><a href="https://kantel.github.io/posts/2023060301_buckow_650/">650 Jahre Buckow</a> – wie man es richtig macht</li>
<li>Landgericht Berlin: <a href="https://kantel.github.io/posts/2023061502_klimanlockaden_sind_keine_noetigung/">Klimablockaden sind keine Nötigung</a></li>
<li>Wie geil ist das denn? <a href="https://kantel.github.io/posts/2023060501_pygame_im_browser/">Pygame im Browser</a>! <em>(Mein persönlicher Favorit.)</em></li>
<li><a href="https://kantel.github.io/posts/2023060202_abm_jupyter_and_more/">Agentenbasierte Modellierung, Python, Jupyter und mehr</a>: Video-Tutorials zum Wochenende</li>
</ol>
<p>Das war es. Jetzt wieder zurück zu Ren’Py. <em>Still digging!</em></p>



 ]]></description>
  <category>Interna</category>
  <guid>https://kantel.github.io/posts/2023070101_mediadaten_juni_2023/index.html</guid>
  <pubDate>Sat, 01 Jul 2023 13:55:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023070101_mediadaten_juni_2023/images/mediadaten202306.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Zum Wochenende noch einmal Ren’Py-Tutorials</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023063001_renpy_tutorials/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53012800979/"><img src="https://kantel.github.io/posts/2023063001_renpy_tutorials/images/armabersexy-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Die <a href="https://kantel.github.io/posts/2023060803_renpy_8_1/">neue Version</a> von <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/renpy.html">Ren’Py</a>, mit der man auch Web-Anwendungen entwickeln kann, läßt mich nicht in Ruhe. Zur Vorbereitung weiterer Experimente habe ich erst einmal mit dem <a href="https://avatarmaker.com/">Avatar Maker</a> (siehe <a href="https://www.flickr.com/photos/schockwellenreiter/53012800979/">Banner</a> oben) und mit <a href="https://framiq.com/">Framiq</a> neue Spielfiguren gebastelt. Tests mit dem <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/avatare/animeavatar.html">Anime Avatar Maker Tool</a> stehen noch aus. Doch dazu in einem späteren Beitrag mehr.</p>
<p>Heute gibt es erst einmal ein paar (mehr oder weniger) neue Video-Tutorials zu Ren’Py, denn selbstverständlich bin ich bei der Beschäftigung mit dieser Engine zwangsläufig über das eine oder das andere Tutorial gestolpert, die ich Euch nicht vorenthalten möchte:</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/dG2735WWytI" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Dieses Video »<a href="https://www.youtube.com/watch?v=dG2735WWytI">Level Up Your Visual Novels Sprites!</a>« ist (noch) nicht Teil der Playlist »<a href="https://www.youtube.com/playlist?list=PLMdFGlfdL57MSSForRZZBJtS-N9thXSA6">Ren’Py Essentials</a>« (15 Videos), aber dafür Teil der Playlist »<a href="https://www.youtube.com/playlist?list=PLMdFGlfdL57NjT5XEda42Zu4hkiGA1cy3">Visual Novel Development Skills</a>« (sieben Videos), beide vom YouTube-Kanals <em>Visual Novel Design</em>. Die letztgenannte Reihe enthält auch solch obskur klingende Titel wie zum Beispiel »<a href="https://www.youtube.com/watch?v=fg2m1KAZoww">Learning from the Bible Visual Novel</a>«. Ich habe da noch nicht reingeschaut, weiß daher selber noch nicht, was sich dahinter verbirgt. Anschauen also auf eigene Gefahr.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/nbAgxfdukaY" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p><a href="https://en.wikipedia.org/wiki/Live2D">Live2D</a> ist eine Animationssoftware, mit der 2D-Animationen in Echtzeit – normalerweise Charaktere im Anime-Stil – mit auf Layern basierenden Teilen einer Illustration erstellt werden können, ohne daß eine Frame-für-Frame-Animation oder ein 3D-Modell erforderlich ist. Die Software gibt es sowohl in einer kommerziellen wie auch in einer eingeschränkten, kostenlosen Variante. Sollte ich daher auch einmal testen, kann nützlich für Menschen wie mich sein, die über gar keine künstlerische Ader verfügen.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/BycnOyOdSxw" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p><em>BunnyGunGames</em> haben ihr <a href="https://kantel.github.io/posts/2023062301_gemischtwarenladen/">letzte Woche</a> vorgestelltes Tutorial noch einmal präzisiert: <a href="https://www.youtube.com/watch?v=BycnOyOdSxw">Renpy to Itch - A from scratch tutorial for setting up new games</a>.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/2PJ4IdQ-MXs" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Ich weiß nicht, ob ich dies schon einmal vorgestellt hatte – zumindest der Kanal <em>Game Developer Training</em> wurde schon häufiger auf diesen Seiten erwähnt, aber <a href="https://www.youtube.com/playlist?list=PLKdE0Vv4UA59k-uYBVLqhJGs2iSUPLb59">Introduction to Ren’Py</a> besteht aus sieben je etwa zehnminütgen Videos und ist mit Sicherheit auch eine Wiederholung wert.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/h9QaFdN8iLU" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Und dann gibt es da noch zwei kurze <a href="https://www.youtube.com/playlist?list=PLE2XCObhrKNCB_EcP0_rH5K7T5ze_7vBC">Tutorials</a> (je etwa drei Minuten) aus dem Kanal <em>Kny Doggo</em>.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/dSOTWE2mNFs" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p><em>Last but not least</em> ist <a href="https://www.youtube.com/@ElaineDoesCoding">ElaineDoesCoding</a> ein Kanal, deren oder dessen Videos weit über das hinausgehen, was in Ren’Py-Tutorials normalerweise Thema ist. Für empfehlenswert daraus halte ich die folgenden zwei Listen:</p>
<ul>
<li><a href="https://www.youtube.com/playlist?list=PLJgbnTkC4bkCj2_8ZUg1o4CafLcRH0rAX">Renpy Tutorials</a> (24 etwa viertelstündige Videos und ein zweistündiger Stream) und</li>
<li><a href="https://www.youtube.com/playlist?list=PLJgbnTkC4bkB_HcWWOJQJ0g9WsgXs2hct">Let’s Code</a> (acht Videos und Streams)</li>
</ul>
<iframe width="560" height="315" src="https://www.youtube.com/embed/_dy4oWswRXo" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p><strong>War sonst noch was?</strong> Ach ja, gekünstelte Intelligenz macht auch vor <em>Visual Novels</em> und anderen interaktiven Geschichten nicht halt. <em>Mime Media AS</em> hat sich eine Geschichte mit Hilfe von <a href="https://de.wikipedia.org/wiki/ChatGPT">ChatGPT</a> (für den Text) und <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/midjourney.html">Midjourney</a> (für die Bilder) <a href="https://www.youtube.com/watch?v=_dy4oWswRXo">basteln lassen</a>. Auch wenn ich da skeptisch bin, es ist auf jeden Fall ein <a href="https://www.youtube.com/watch?v=zHEvBfbx0u4">bemerkenswertes Experiment</a>.</p>
<p>So, über das Wochenende wird es voraussichtlich sehr ruhig auf diesen Seiten werden. Ich will und muß mit Ren’Py spielen – und das kostet Zeit.</p>



 ]]></description>
  <category>RenPy</category>
  <category>Spieleprogrammierung</category>
  <category>Interactive Fiction</category>
  <guid>https://kantel.github.io/posts/2023063001_renpy_tutorials/index.html</guid>
  <pubDate>Fri, 30 Jun 2023 16:35:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023063001_renpy_tutorials/images/armabersexy.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Rosen, Stauden und die Garten-Töff-Töff: Ein Sommertag im Britzer Garten</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023062901_rosen_stauden_garten_toeff_toeff/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53011127623/"><img src="https://kantel.github.io/posts/2023062901_rosen_stauden_garten_toeff_toeff/images/rosenstauden-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Heute schien es mir das richtige Wetter – nicht zu heiß –, um ein noch ausstehendes Vorhaben in die Tat umzusetzen: Nachdem bei <a href="https://kantel.github.io/posts/2023052702_rhododendron_und_rosen/">meinem letzten Besuch</a> im <a href="https://www.britzergarten.de/">Britzer Garten</a> Ende letzten Monats die Rosenblüte sich noch geziert hatte, wollte ich heute die Rosen in ihrer vollen Pracht photographieren.</p>
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53010046182/"><img src="https://kantel.github.io/posts/2023062901_rosen_stauden_garten_toeff_toeff/images/rosenstauden01.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/53010798424/"><img src="https://kantel.github.io/posts/2023062901_rosen_stauden_garten_toeff_toeff/images/rosenstauden02.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/53010808354/"><img src="https://kantel.github.io/posts/2023062901_rosen_stauden_garten_toeff_toeff/images/rosenstauden03.jpg" class="img-fluid"></a><br><br> <a href="https://www.flickr.com/photos/schockwellenreiter/53010807769/"><img src="https://kantel.github.io/posts/2023062901_rosen_stauden_garten_toeff_toeff/images/rosenstauden04.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/53010636936/"><img src="https://kantel.github.io/posts/2023062901_rosen_stauden_garten_toeff_toeff/images/rosenstauden05.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/53010807864/"><img src="https://kantel.github.io/posts/2023062901_rosen_stauden_garten_toeff_toeff/images/rosenstauden06.jpg" class="img-fluid"></a><br><br> <a href="https://www.flickr.com/photos/schockwellenreiter/53010050737/"><img src="https://kantel.github.io/posts/2023062901_rosen_stauden_garten_toeff_toeff/images/rosenstauden07.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/53010641426/"><img src="https://kantel.github.io/posts/2023062901_rosen_stauden_garten_toeff_toeff/images/rosenstauden08.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/53010639476/"><img src="https://kantel.github.io/posts/2023062901_rosen_stauden_garten_toeff_toeff/images/rosenstauden09.jpg" class="img-fluid"></a><br><br> <a href="https://www.flickr.com/photos/schockwellenreiter/53010645941/"><img src="https://kantel.github.io/posts/2023062901_rosen_stauden_garten_toeff_toeff/images/rosenstauden10.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/53010060327/"><img src="https://kantel.github.io/posts/2023062901_rosen_stauden_garten_toeff_toeff/images/rosenstauden11.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/53011032520/"><img src="https://kantel.github.io/posts/2023062901_rosen_stauden_garten_toeff_toeff/images/rosenstauden12.jpg" class="img-fluid"></a><br><br> <a href="https://www.flickr.com/photos/schockwellenreiter/53011035075/"><img src="https://kantel.github.io/posts/2023062901_rosen_stauden_garten_toeff_toeff/images/rosenstauden13.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/53010064807/"><img src="https://kantel.github.io/posts/2023062901_rosen_stauden_garten_toeff_toeff/images/rosenstauden14.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/53011039630/"><img src="https://kantel.github.io/posts/2023062901_rosen_stauden_garten_toeff_toeff/images/rosenstauden15.jpg" class="img-fluid"></a><br><br> <a href="https://www.flickr.com/photos/schockwellenreiter/53011137153/"><img src="https://kantel.github.io/posts/2023062901_rosen_stauden_garten_toeff_toeff/images/rosenstauden16.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/53011037380/"><img src="https://kantel.github.io/posts/2023062901_rosen_stauden_garten_toeff_toeff/images/rosenstauden17.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/53010658116/"><img src="https://kantel.github.io/posts/2023062901_rosen_stauden_garten_toeff_toeff/images/rosenstauden18.jpg" class="img-fluid"></a></p>
<p><em>Mit einem Klick auf die Vorschaubilder kommt Ihr je auf eine Seite mit einer Vergrößerung.</em></p>
<p>Es hätte auch beinahe geklappt. Nur standen die Stauden in gelb und weiß ebenfalls voller Blüte und die Garten-Töff-Töff dampfte mir ständig vor die Linse. So ist es auch dieses Mal eine sehr bunte und sehr gemischte Photostrecke geworden. <em>(Photos (<a href="http://creativecommons.org/licenses/by-nc-nd/2.0/">cc</a>) 2023: <a href="http://cognitiones.kantel-chaos-team.de/cv.html">Jörg Kantel</a>)</em></p>



 ]]></description>
  <category>Photographie</category>
  <category>Parks und Gärten</category>
  <category>Neukölln</category>
  <guid>https://kantel.github.io/posts/2023062901_rosen_stauden_garten_toeff_toeff/index.html</guid>
  <pubDate>Thu, 29 Jun 2023 18:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023062901_rosen_stauden_garten_toeff_toeff/images/rosenstauden.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Kranold- und Körner-Kiezblock: Unterschriften-Übergabe</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023062802_kranold_kiezblock/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53008190361/"><img src="https://kantel.github.io/posts/2023062802_kranold_kiezblock/images/kiezblock6-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Heute haben der <a href="https://www.kiezblocks.de/kranold/">Kranold-Kiezblock</a> zusammen mit dem benachbarten <a href="https://www.kiezblocks.de/koerner/">Körner-Kiezblock</a> im Rahmen einer Sitzung der Bezirksverordnetenversammlung (BVV) Neukölln im Rathaus Neukölln ihre gesammelten Unterschriften übergeben, die die Einrichtung von Kiezblocks in unseren Wohngebieten fordern. Der Autor dieser Zeilen war auch dabei (ganz rechts auf dem Photo) und hat das Durchschnittsalter der Aktivistinnen und Aktivisten ganz gewaltig nach oben katapultiert.</p>
<p>Was Kiezblocks sind und warum ich sie auch und gerade in unserem Kiez für sinnvoll und notwendig halte, hatte ich <a href="https://kantel.github.io/posts/20221222701_kiezblock_kranoldplatz/">hier schon einmal geschrieben</a> (auf eine <a href="https://kantel.github.io/posts/2023041102_kiezblocks_gentrifizierung/">weitere Diskussion</a> verwies ich auch hier). Gerade in diesen Zeiten, wo der Berliner Senat mithilfe der SPD sich in einer <a href="https://www.rbb24.de/politik/beitrag/2023/06/berlin-senat-aenderung-mobilitaetsgesetz-verkehr.html">Rolle rückwärts des Berliner Mobilitätsgesetztes</a> übt (das die SPD im Rot-Grün-Roten Vorgängersenat noch mitbeschlossen hatte), sind solche Initiativen aus der Bevölkerung notwendig und wichtig, weil sie – hoffentlich – Druck auf die Politik ausüben.</p>
<p>Wir bleiben jedenfalls dran und werden der Bezirksverordnetenversammlung genau auf die Finger schauen, wie sie mit unseren Anträgen umgeht. <em>(Photo: (<a href="http://creativecommons.org/licenses/by-nc-nd/2.0/">cc</a>) 2023: Kranold-Kiezblock)</em></p>
<p><strong>Update</strong>: Auch der Tagesspiegel, das Zentralorgan der Wilmersdorfer Witwen und Zehlendorfer Zahnärzte <a href="https://www.tagesspiegel.de/berlin/bezirke/verkehrsberuhigung-in-berlin-neukolln-anwohnende-fordern-kiezblock-am-kranoldplatz-10049155.html">hat berichtet</a> (und kann offensichtlich (Stand heute, 20:30 Uhr) nicht verlinken – sie wollten vermutlich auf <a href="https://www.kiezblocks.de/wp-content/uploads/2022/06/EinwohnerInnenantrag-Kranoldkiez.pdf">unseren Antrag/unsere Unterschriftensammlung</a> (PDF) verweisen).</p>



 ]]></description>
  <category>Kiezblock</category>
  <category>Verkehrswende</category>
  <category>Neukölln</category>
  <guid>https://kantel.github.io/posts/2023062802_kranold_kiezblock/index.html</guid>
  <pubDate>Wed, 28 Jun 2023 17:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023062802_kranold_kiezblock/images/kiezblock6.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Klimaschutz ohne Klimaschützer</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023062801_klimaschutz_ohne_klimaschuetzer/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53005394882/"><img src="https://kantel.github.io/posts/2023062801_klimaschutz_ohne_klimaschuetzer/images/klimaschutz-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Wenn wir nicht auf die Klimaschützer (und -kleber) hören und endlich ernsthaft an einer Verkehrswende arbeiten, schützt sich das Klima selber und sorgt mit eigenen Mitteln für eine Verkehrsberuhigung (so wie gestern nach einem heftigen Gewitter auf der Glasower Straße in Neukölln). <em>(Photo (<a href="http://creativecommons.org/licenses/by-nc-nd/2.0/">cc</a>) 2023: <a href="http://cognitiones.kantel-chaos-team.de/cv.html">Jörg Kantel</a>)</em></p>



 ]]></description>
  <category>Klimawandel</category>
  <category>Verkehrswende</category>
  <category>Umwelt</category>
  <guid>https://kantel.github.io/posts/2023062801_klimaschutz_ohne_klimaschuetzer/index.html</guid>
  <pubDate>Wed, 28 Jun 2023 12:50:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023062801_klimaschutz_ohne_klimaschuetzer/images/klimaschutz.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Google korrigiert erneut in Version 114 seines Browsers Chrome kritische Sicherheitslücken</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023062701_chrome_update/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://i.etsystatic.com/28001992/r/il/be7951/4312269141/il_fullxfull.4312269141_p33d.jpg"><img src="https://kantel.github.io/posts/2023062701_chrome_update/images/beigeseashore-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Googles Browser Chrome kommt nicht zur Ruhe: Unser aller Datenkrake veröffentlicht ein weiteres Update der Version 114 (114.0.5735.198/199) seines Browsers Chrome und schließt damit <a href="https://kantel.github.io/posts/2023061401_chrome_update/">wieder</a> kritische <a href="https://chromereleases.googleblog.com/2023/06/stable-channel-update-for-desktop_26.html">Sicherheitslücken</a>.</p>
<p>Chrome aktualisiert sich (außer bei Linux) über die integrierte Update-Funktion, kann aber – wenn es pressiert – auch <a href="https://www.google.com/intl/de/chrome/browser/">hier geladen</a> werden. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<p><em>(Bild: Anders Zorn (1860-1920): Wet, 1910)</em></p>



 ]]></description>
  <category>Seucrity</category>
  <guid>https://kantel.github.io/posts/2023062701_chrome_update/index.html</guid>
  <pubDate>Tue, 27 Jun 2023 13:50:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023062701_chrome_update/images/beigeseashore.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Frauen am Kontrabaß: Kurena Ishikawa</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023062601_kurena_ishikawa/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://music.ragbe.com/common/bin/1f30675b-42e4-4d40-b73c-b76b86e5cfdd"><img src="https://kantel.github.io/posts/2023062601_kurena_ishikawa/images/kurenaishikawa-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Über die japanische (Jazz-) Kontrabassistin <a href="https://www.albumoftheyear.org/album/631888-kurena-ishikawa-kurena.php">Kurena Ishikawa</a> habe ich im Netz kaum Informationen gefunden (was allerdings auch an meinen nicht vorhandenen Japanisch-Kenntnissen liegen kann). Sie studierte von 2013 bis 2017 am <em>Kunitachi College of Jazz Music</em>, spielt seit 2019 in der Band des Jazz-Pianisten <em><a href="https://de.wikipedia.org/wiki/Makoto_Ozone">Makoto Ozone</a></em> und begann 2020 eine Solo-Karriere nur mit Baß und eigenem Gesang.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/mlVpBTpaOU8" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Das Video ist Teil ihres Debut-Albums und ihre minimalistische Version des <a href="https://de.wikipedia.org/wiki/Michael_Jackson">Michael Jackson</a>-Songs »Off the Wall« (aus dem <a href="https://de.wikipedia.org/wiki/Off_the_Wall">gleichnamigen Album</a> von 1979) ist einfach grandios.</p>
<p>Sie selber sagte von sich: »Ich lernte den Kontrabaß kennen, als ich 16 Jahre alt war. Ton, Form, warme Holzstruktur, ich fühlte mich zu allem hingezogen und spielte weiter. Nach meinem Abschluß an der Musikhochschule im Hauptfach Jazz begann ich zu singen und gleichzeitig Baß zu spielen. Mein Ziel ist es, eine Bassistin zu sein, die fest im Boden verankert ist. Wie ein Affenbrotbaum.«</p>



 ]]></description>
  <category>Musik</category>
  <guid>https://kantel.github.io/posts/2023062601_kurena_ishikawa/index.html</guid>
  <pubDate>Mon, 26 Jun 2023 14:50:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023062601_kurena_ishikawa/images/kurenaishikawa.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Spaß mit Pygame: Avoider Game Stage 1</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023062401_avoider_game_stage_1/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52998409290/"><img src="https://kantel.github.io/posts/2023062401_avoider_game_stage_1/images/avoidergame1a-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Angestachelt durch die <a href="https://kantel.github.io/posts/2023062301_gemischtwarenladen/">gestrigen Video-Tutorials</a> zu <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a>, aber auch durch meine (Wieder-) Entdeckung von <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/greenfoot.html">Greenfoot</a>, und erneut inspiriert durch das <a href="https://kantel.github.io/posts/2023062202_avoider_game_greenfoot/">vorgestern vorgestellte</a> Buch »<a href="https://www.packtpub.com/product/creative-greenfoot/9781783980383">Creative Greenfoot</a> von <em>Michael Haungs</em> (Packt, 2015), habe ich – wie angedroht – angefangen, das dort vorgestellte <em>Avoider Game</em> nach Pygame (und <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygbag.html">Pygbag</a>, damit es auch im Browser gespielt werden kann) zu portieren. Natürlich strikt objektorientiert.</p>
<p>Auch wenn ich mir über die Sinnhaftigkeit <a href="https://kantel.github.io/posts/2023062001_gameworld_yes_no/">immer noch nicht</a> sicher bin, habe ich die Klasse <code>GameWorld</code> bei dieser Implementierung erst einmal beibehalten. Rauswerfen kann ich sie immer noch.</p>
<div style="float: right; margin-left: 12px; margin-top: 6px;">
<a href="https://www.packtpub.com/product/creative-greenfoot/9781783980383"><img src="https://kantel.github.io/posts/2023062401_avoider_game_stage_1/images/creativegreenfoot.jpg" class="img-fluid"></a>
</div>
<p>Die Implementierung folgt einer <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processingpy.html">Processing.py</a>-Version dieses Programmes, die ich vor Jahren verbrochen und <a href="http://py.kantel-chaos-team.de.s3-website-us-east-1.amazonaws.com/18avoidergame/">hier veröffentlicht</a> hatte. Es brauchte ein paar Überlegungen, die von <code>setup()</code> und <code>draw()</code> beeinflußte Processing-Logik in eine Pygame-Logik zu überfürhren, aber im Endeffekt habe ich ein nettes Skript zusammengeschustert, das neben der <code>GameWorld</code>, zu der die Klasse <code>HUD</code> <em>(Head Up Dislay)</em> gehört, aus den Klassen <code>Player</code> und <code>Enemy</code> besteht, die beides Unterklassen von <code>pygame.sprite.Sprite</code> sind.</p>
<p>Als Kollisionserkennung habe ich Pygames <a href="https://www.pygame.org/docs/ref/sprite.html?highlight=collide_circle#pygame.sprite.collide_circle"><code>sprite.collide_circle</code></a> verwendet und dann auch noch den Radius des Players (des Totenschädels) reduziert. Denn es wirklte unnatürlich, wenn der Schädel schon getroffen sein sollte, wenn die Gegner gerade einmal die gekreuzten Knochen berührten.</p>
<p>Ansonsten ist der Quellcode ziemlich selbsterklärend und ich hoffe leicht nachvollziehbar:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Avoider Game Stage 1</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pygame <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pg</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> asyncio</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pygame.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">locals</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> randint</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os, sys</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Settings</span></span>
<span id="cb1-9">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">640</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span></span>
<span id="cb1-10">TITLE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Avoider Game, Stage 1"</span></span>
<span id="cb1-11">FPS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>                   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Frame per second</span></span>
<span id="cb1-12">TW, TH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Größe der einzelnen Sprites</span></span>
<span id="cb1-13">TW2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TW <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb1-14">PLAYER_Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.2</span></span>
<span id="cb1-15">NO_ENEMIES <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb1-16">SPEED_MIN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb1-17">SPEED_MAX <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span></span>
<span id="cb1-18">START_ZONE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span></span>
<span id="cb1-19">DANGER_ZONE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PLAYER_Y</span>
<span id="cb1-20"></span>
<span id="cb1-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Hier wird der Pfad zum Verzeichnis der Assets gesetzt</span></span>
<span id="cb1-22">DATAPATH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(os.path.dirname(os.path.abspath(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__file__</span>)), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>)</span>
<span id="cb1-23"></span>
<span id="cb1-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Farben</span></span>
<span id="cb1-25">BG_COLOR <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">57</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">52</span>)</span>
<span id="cb1-26"></span>
<span id="cb1-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Klassen</span></span>
<span id="cb1-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Class GameWorld</span></span>
<span id="cb1-29"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> GameWorld:</span>
<span id="cb1-30"></span>
<span id="cb1-31">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-32">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pygame und das Fenster initialisieren</span></span>
<span id="cb1-33">        pg.init()</span>
<span id="cb1-34">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.screen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.display.set_mode((WIDTH, HEIGHT))</span>
<span id="cb1-35">        pg.display.set_caption(TITLE)</span>
<span id="cb1-36"></span>
<span id="cb1-37">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.clock <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.time.Clock()</span>
<span id="cb1-38">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.keep_going <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb1-39"></span>
<span id="cb1-40">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load Assets</span></span>
<span id="cb1-41">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.skull_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.image.load(os.path.join(DATAPATH, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"skull2.png"</span>)).convert_alpha()</span>
<span id="cb1-42">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.smiley0_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.image.load(os.path.join(DATAPATH, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"smiley0.png"</span>)).convert_alpha()</span>
<span id="cb1-43">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.smiley1_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.image.load(os.path.join(DATAPATH, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"smiley1.png"</span>)).convert_alpha()</span>
<span id="cb1-44">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.smiley2_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.image.load(os.path.join(DATAPATH, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"smiley4.png"</span>)).convert_alpha()</span>
<span id="cb1-45">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.score_font <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.font.Font(os.path.join(DATAPATH, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"comichelvetic_medium.ttf"</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>)</span>
<span id="cb1-46"></span>
<span id="cb1-47">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Game State</span></span>
<span id="cb1-48">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.start_game <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb1-49">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.play_game <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb1-50">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.game_over <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb1-51"></span>
<span id="cb1-52"></span>
<span id="cb1-53">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> reset(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-54">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Neustart oder Status zurücksetzen</span></span>
<span id="cb1-55">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Hier werden alle Elemente der GameWorld initialisiert</span></span>
<span id="cb1-56">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.all_sprites <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.sprite.Group()</span>
<span id="cb1-57">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.enemies <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.sprite.Group()</span>
<span id="cb1-58">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(NO_ENEMIES):</span>
<span id="cb1-59">            enemy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Enemy(randint(TW2, WIDTH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> TW2), <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>)</span>
<span id="cb1-60">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.all_sprites.add(enemy)</span>
<span id="cb1-61">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.enemies.add(enemy)        </span>
<span id="cb1-62">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Player(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>)</span>
<span id="cb1-63">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.all_sprites.add(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player)</span>
<span id="cb1-64">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hud <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> HUD(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>)</span>
<span id="cb1-65">          </span>
<span id="cb1-66">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> events(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-67">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> event <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> pg.event.get():</span>
<span id="cb1-68">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> ((event.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pg.QUIT)</span>
<span id="cb1-69">                <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> (event.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pg.KEYDOWN</span>
<span id="cb1-70">                <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> event.key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pg.K_ESCAPE)):</span>
<span id="cb1-71">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.playing:</span>
<span id="cb1-72">                    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.playing <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb1-73">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.keep_going <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb1-74"> </span>
<span id="cb1-75">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-76">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.all_sprites.update()</span>
<span id="cb1-77">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hud.update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player.score, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player.lives)</span>
<span id="cb1-78"></span>
<span id="cb1-79">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-80">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.screen.fill(BG_COLOR)</span>
<span id="cb1-81">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.all_sprites.draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.screen)</span>
<span id="cb1-82">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.screen.blit(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hud.score, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hud.score_rect)</span>
<span id="cb1-83">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.screen.blit(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hud.lives, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hud.lives_rect)</span>
<span id="cb1-84">        pg.display.flip()</span>
<span id="cb1-85">    </span>
<span id="cb1-86">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> start_screen(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-87">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb1-88"></span>
<span id="cb1-89">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> game_over_screen(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-90">        text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Game Over"</span>       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Debugging</span></span>
<span id="cb1-91">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(text)</span>
<span id="cb1-92">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># self.screen_font = self.score_font</span></span>
<span id="cb1-93">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># text = self.screen_font.render(text, True, (255, 255, 255))</span></span>
<span id="cb1-94">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># text_rect = text.get_rect()</span></span>
<span id="cb1-95">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># text_rect.centerx = WIDTH // 2</span></span>
<span id="cb1-96">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># text_rect.y = HEIGHT // 2</span></span>
<span id="cb1-97">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># self.screen.blit(text, text_rect)</span></span>
<span id="cb1-98">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.keep_going <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Debugging</span></span>
<span id="cb1-99"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Ende Class GameWorld</span></span>
<span id="cb1-100"></span>
<span id="cb1-101"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Class Player</span></span>
<span id="cb1-102"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Player(pg.sprite.Sprite):</span>
<span id="cb1-103"></span>
<span id="cb1-104">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, _world):</span>
<span id="cb1-105">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb1-106">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.game_world <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _world</span>
<span id="cb1-107">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.game_world.skull_image</span>
<span id="cb1-108">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image.get_rect()</span>
<span id="cb1-109">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> WIDTH<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, PLAYER_Y</span>
<span id="cb1-110">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.radius <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TW2</span>
<span id="cb1-111">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-112">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lives <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb1-113">    </span>
<span id="cb1-114">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-115">        x, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.mouse.get_pos()</span>
<span id="cb1-116">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> TW2:</span>
<span id="cb1-117">            x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TW2</span>
<span id="cb1-118">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> WIDTH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> TW2:</span>
<span id="cb1-119">            x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> WIDTH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> TW2</span>
<span id="cb1-120">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.center <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y)</span>
<span id="cb1-121">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.check_and_handle_collisions()</span>
<span id="cb1-122">    </span>
<span id="cb1-123">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> check_and_handle_collisions(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-124">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> enemy <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.game_world.enemies:</span>
<span id="cb1-125">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> pg.sprite.collide_circle(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, enemy):</span>
<span id="cb1-126">                enemy.reset()</span>
<span id="cb1-127">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lives <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-128"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## End Class Player</span></span>
<span id="cb1-129"></span>
<span id="cb1-130"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Class Enemy</span></span>
<span id="cb1-131"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Enemy(pg.sprite.Sprite):</span>
<span id="cb1-132"></span>
<span id="cb1-133">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, _x, _y, _world):</span>
<span id="cb1-134">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb1-135">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _x, _y</span>
<span id="cb1-136">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.game_world <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _world</span>
<span id="cb1-137">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.game_world.smiley0_image</span>
<span id="cb1-138">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image.get_rect()</span>
<span id="cb1-139">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.center <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y)</span>
<span id="cb1-140">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(SPEED_MIN, SPEED_MAX)</span>
<span id="cb1-141">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.radius <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TW2</span>
<span id="cb1-142">    </span>
<span id="cb1-143">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-144">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.over <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb1-145">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dy</span>
<span id="cb1-146">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> START_ZONE:</span>
<span id="cb1-147">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.game_world.smiley0_image</span>
<span id="cb1-148">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> DANGER_ZONE:</span>
<span id="cb1-149">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.game_world.smiley1_image</span>
<span id="cb1-150">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb1-151">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.game_world.smiley2_image</span>
<span id="cb1-152">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.center <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y)</span>
<span id="cb1-153">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.top <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> HEIGHT:</span>
<span id="cb1-154">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.over <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb1-155">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.game_world.player.score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-156">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.reset()</span>
<span id="cb1-157">    </span>
<span id="cb1-158">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> reset(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-159">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(TW2, WIDTH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> TW2)</span>
<span id="cb1-160">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>)</span>
<span id="cb1-161">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.center <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y)</span>
<span id="cb1-162">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(SPEED_MIN, SPEED_MAX)</span>
<span id="cb1-163">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># End Class Enemy</span></span>
<span id="cb1-164"></span>
<span id="cb1-165"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> HUD():</span>
<span id="cb1-166"></span>
<span id="cb1-167">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, _world):</span>
<span id="cb1-168">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.game_world <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _world</span>
<span id="cb1-169">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.score_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span></span>
<span id="cb1-170">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.score_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span></span>
<span id="cb1-171">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.score_font <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.game_world.score_font</span>
<span id="cb1-172">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lives <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb1-173">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.live_count_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> WIDTH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span></span>
<span id="cb1-174">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.live_count_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span></span>
<span id="cb1-175">    </span>
<span id="cb1-176">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, points, lives):</span>
<span id="cb1-177">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.score_font.render(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Score: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>points<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>))</span>
<span id="cb1-178">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.score_rect <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.score.get_rect()</span>
<span id="cb1-179">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.score_rect.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.score_x</span>
<span id="cb1-180">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.score_rect.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.score_y</span>
<span id="cb1-181">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lives <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.score_font.render(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Lives: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>lives<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>))</span>
<span id="cb1-182">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lives_rect <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lives.get_rect()</span>
<span id="cb1-183">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lives_rect.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.live_count_x</span>
<span id="cb1-184">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lives_rect.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.live_count_y</span>
<span id="cb1-185">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># End Class HUD</span></span>
<span id="cb1-186"></span>
<span id="cb1-187"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Hauptprgramm</span></span>
<span id="cb1-188">world <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> GameWorld()</span>
<span id="cb1-189">world.start_screen()</span>
<span id="cb1-190"></span>
<span id="cb1-191"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Hauptschleife</span></span>
<span id="cb1-192"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">async</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> main():</span>
<span id="cb1-193">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> world.keep_going:</span>
<span id="cb1-194">        world.reset()</span>
<span id="cb1-195">        world.playing <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb1-196">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> world.playing:</span>
<span id="cb1-197">            world.clock.tick(FPS)</span>
<span id="cb1-198">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> world.player.lives <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb1-199">                world.playing <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb1-200">            world.events()</span>
<span id="cb1-201">            world.update()</span>
<span id="cb1-202">            world.draw()</span>
<span id="cb1-203">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">await</span> asyncio.sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Very important, and keep it 0</span></span>
<span id="cb1-204">        world.game_over_screen()</span>
<span id="cb1-205">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"After Game Over Screen"</span>)</span>
<span id="cb1-206">    pg.quit()</span>
<span id="cb1-207">    sys.exit()</span>
<span id="cb1-208"></span>
<span id="cb1-209">asyncio.run(main())</span></code></pre></div>
<p>Ich habe die Slots für einen Start- und einen Ende-Screen schon eingebaut, aber noch nicht implementiert. Außerdem sollen natürlich noch – wie in der Processing.py-Vorlage – <em>PowerUps</em> und <em>PowerDowns</em> implementiert werden, und auch optisch möchte ich das Spiel noch ein wenig aufpeppen.</p>
<iframe frameborder="0" src="https://itch.io/embed-upload/8166851?color=ede4d4" allowfullscreen="" width="640" height="500">
<a href="https://kantel.itch.io/avoider-game">Play Avoider Game on itch.io</a>
</iframe>
<p>Ihr könnt es hier spielen. Der Schädel wird mit der Maus gesteuert, aber er kann sich nur horizontal bewegen. Und Ihr bekommt fünf Leben zum Start. Verwirkt Ihr diese, ist das Spiel gnadenlos zu Ende.</p>
<p>Die Assets habe ich – wie schon so oft – den freien (<a href="https://creativecommons.org/licenses/by/4.0/">CC-BY 4.0</a>) Twitter Emojis (<a href="https://twemoji.twitter.com/">Twmojis</a>) entnommen und mit einem Bildbearbeitungsprogramm meines Vertrauens auf die gewünschte Größe skaliert. Und das Spiel habe ich auch auf <a href="https://kantel.itch.io/">meinen Itch.io-Account</a> hochgeladen, so daß Ihr es auch <a href="https://kantel.itch.io/avoider-game">dort im Browser spielen</a> könnt.</p>
<p>Den <a href="https://github.com/kantel/pygameprojects/tree/master/avoidergame/stage1">Quellcode und die Assets</a> findet Ihr wie immer auch in meinem GitHub-Repositorium.</p>



 ]]></description>
  <category>Spieleprogrammierung</category>
  <category>Pygame</category>
  <guid>https://kantel.github.io/posts/2023062401_avoider_game_stage_1/index.html</guid>
  <pubDate>Sat, 24 Jun 2023 18:40:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023062401_avoider_game_stage_1/images/avoidergame1a.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Heute ein Gemischtwarenladen: Die Video-Tutorials zum Wochenende</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023062301_gemischtwarenladen/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.codeandweb.com/texturepacker"><img src="https://kantel.github.io/posts/2023062301_gemischtwarenladen/images/texturepacker-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Nachdem die freitäglichen Video-Tutorials, die ich in den letzten Wochen vorgestellt hatte, in der Regel Tutorials zu einem bestimmten Programm waren, ist die heutige Sammlung ein echter Gemischtwarenladen zu Python, <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a>, <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/renpy.html">Ren’Py</a>, Simulationen, JavaScript, Webassembler und mehr. Das hat nicht nur den Zweck, meinen überschwappenden Feedrerader ein wenig aufzuräumen, sondern auch, um weg von <a href="http://cognitiones.kantel-chaos-team.de/programmierung/netlogo.html">NetLogo</a> und <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/greenfoot.html">Greenfoot</a> wieder zu meinen angestammten Themen zurückzukehren.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/FUwCgNhObho" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p><strong>Das beginnt mit Ren’Py</strong>, für das – seitdem man mir der Engine auch wieder <a href="https://kantel.github.io/posts/2023060803_renpy_8_1/">für das Web entwickeln kann</a> – viele neue Ideen durch meinen Kopf schwirren, die bald heraus müssen. Das obige <a href="https://www.youtube.com/watch?v=FUwCgNhObho">Tutorial von Toadhouse Games</a> scheint ein netter Startpunkt für Anfänger und Wiedereinsteiger zu sein.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/y47eobdYZo4" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Die Playlist »<a href="https://www.youtube.com/playlist?list=PL8Y8sYrRR6yA9u0npsOGsaPFdtGENH-A2">My Ren’Py</a>« von <em>Timitu</em> hatte ich ja hier schon einmal <a href="https://kantel.github.io/posts/2023061001_renpy_81_web/">(wieder) vorgestellt</a>. Nun hat es die Macherin für ein Jahr beruflich ins Ausland verschlagen. Damit Ihr und ich nicht auf die niedlichen Raubkatzen verzichten müßt, hat sie weitere Video-Tutorials vorproduziert, die im monatlichen Rythmus erscheinen sollen. Dranbleiben lohnt also.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/8ZzMKyiYCTc" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Den Kanal der »Zauberin« <em>Nakama</em> kannte ich noch nicht. Sie scheint in erster Linie Fan-Fiction zu produzieren, aber gelegentlich erscheinen dort auch Ren’Py-Tutorials (leider keine Playlist). Ich habe daher ihren Kanal abonniert.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/AjRrpTFw20o" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Ähnliches gilt für die <em>BunnyGun Games</em>. Immerhin haben sie ihre beiden brandneuen Tutorials, die sich ebenfalls damit beschäftigen, Ren’Py Games im Web zu veröffentlichen, in <a href="https://www.youtube.com/playlist?list=PLojp5Kr-sMX_Ls5ybdTXM2-2PS6_Bi9oW">einer Playlist</a> zusammengefaßt. Ich hoffe hier auf viele, weitere Updates.</p>
<p>Mit zwei Playlists mit kurzen How-tos möche ich das Thema Ren’Py für diese Woche abschließen: Da sind einmal die »<a href="https://www.youtube.com/playlist?list=PLoCAt-bEng8XvngtGPb44Kn43CduQyB-M">Ren’Py Tutorials</a>« mit sechs extrem kurzen (meist zwischen einer und zwei Minuten) Videos des Kanals <em>Mime Media AS</em> und dann die <a href="https://www.youtube.com/playlist?list=PLSZHBZDGVQplh79O6J857G1wlRK-GXXpH">gleichnamige Liste</a> mit 18 auch eher kurzen Video-Tutorials (zwischen zwei und fünf Minuten) des Kanals <em>SwedishGameDev</em>. Das jüngste Video ist erst vor zwei Monaten hochgeladen worden, so daß auch hier noch mit weiteren Updates gerechnet werden kann.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/Y82xjb8lW6M" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p><strong>Wechseln wir zu Pygame</strong>: Auf dem hier schon mehrfach (lobend) erwähten Kanal <em>Coding with Russ</em> gibt es ein neues Projekt »<a href="https://www.youtube.com/playlist?list=PLjcN1EyupaQkm_kjeferSwzsOQNFpkyJp">Tower Defence Tutorial in Pygame</a>«. Bisher sind fünf Videos veröffentlicht worden. Glaubt man dem dazugehörenden <a href="https://github.com/russs123/tower_defence_tut/tree/main">GitHub-Repositorium</a> ist die Reihe auf dreizehn Tutorials angelegt. Bisher gibt es etwa alle zwei Tage ein Update.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/4lksn3UVL0s" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p><a href="https://www.youtube.com/playlist?list=PL4aVL6eAcvHknqp_lqJSlzkQ2XC-ph4tp">2D-Spieleprogrammierung in Python mit Pygame</a> ist eine 27-teilige Playlist, deren Videos meist etwa halbstündig sind und in der eine Variante des Konsolenklassikers <em>Space Invaders</em> programmiert wird.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/K-Ek0gT8JPM" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Wo Pygame dransteht, kann <em>Tim</em> nicht weit sein. Er fragt: »<a href="https://www.youtube.com/watch?v=K-Ek0gT8JPM">Can I Make Brick Breaker in One Hour</a>«? Natürlich kann er.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/FLc6vUwyTdM" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Und vom Kanal <em><a href="https://www.youtube.com/@FinFET">FinFET</a></em> gibt es das Video »<a href="https://www.youtube.com/watch?v=FLc6vUwyTdM">Complete Raycasting Game Project in Python</a>«. Da er auch noch für weitere Überraschungen gut zu sein scheint, habe ich ihn ebenfalls abonniert.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/ePiMYe7JpJo" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>In eine etwas andere Richtung geht das Video »<a href="https://www.youtube.com/watch?v=ePiMYe7JpJo">Pygame Sprite Sheet Tutorial: How to Load, Parse, and Use Sprite Sheets</a>«. Es benutzt das Programm »<a href="https://www.codeandweb.com/texturepacker">TexturePacker</a>«, um die Sprites in einem Spritesheet herauszulösen. Das Programm ist kommerziell, als Alternative schlage ich daher das <a href="https://kantel.github.io/posts/2023041902_tool_fuer_pixelartisten/index.html">hier vorgestellte</a> freie (MIT-Lizenz) Programm »<a href="http://free-tex-packer.com/">Free Texture Packer</a>« vor, das mittlerweile aus meinem Werkzeugkasten nicht mehr wegzudenken ist.</p>
<p>Auch dieser Kanal ist für Pygame-Entusiasten eine wahre Fundgrube und wurde daher von mir schon vor langer Zeit abonniert.</p>
<p>In diesem Zusammenhang möchte ich auch noch auf die Videos »<a href="https://www.youtube.com/watch?v=dpzCe8NZLTY">Pygame Sprite Animation</a>« von <em>Giovann Python</em> und »<a href="https://www.youtube.com/watch?v=4TfZjhw0J-8">Pygame Sprites And Groups Explained</a>« von <em>Coding with Russ</em> (schon wieder!) hinweisen.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/xuxCk-VrF8c" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p><strong>Nun direkt zu Python und zur Physik</strong>: <a href="https://www.youtube.com/watch?v=xuxCk-VrF8c">Dieses Video</a> des <em>verärgerten Physikers</em> ist (unter anderem) Teil seiner Playlist »<a href="https://www.youtube.com/playlist?list=PLkNSlFFeDscrHZi9XoGn6igdPmVGuYDtA">Classical Mechanics</a>« (zehn Videos).</p>
<p>Nett und lehrreich ist auch das Tutorial »<a href="https://www.youtube.com/watch?v=22OCPbfY5SE">Simulating Rocket Trajectories with Python</a>« und das nicht nur wegen der Hundebilder am Anfang.</p>
<p><em>Last but not least</em> habe ich dann noch das Video »<a href="https://www.youtube.com/watch?v=GwhXc78a0QY">Programming gravity simulator in python</a>« hervorgekramt, das auch als Simulationsumgebung Pygame nutzt. Es ist Teil einer aus <a href="https://www.youtube.com/playlist?list=PLtqRvVq4xXXG-4ge1et0A2s20nHRR6iEd">vier Videos bestehenden Playlist</a> mit Simulationen in Python und <a href="http://cognitiones.kantel-chaos-team.de/multimedia/computergraphik/3d/blender.html">Blender</a>.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/tl9qwVj0wWg" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p><strong>Und jetzt steige ich voll in den Gemischtwarenladen ein</strong>: Das Tutorial »<a href="https://www.youtube.com/watch?v=tl9qwVj0wWg">Shiny for Python</a>« ist vor allem deswegen interessant, weil es erklärt, was <em>Decorators</em> sind und wie man sie programmiert. Und die Frage »<a href="https://www.youtube.com/watch?v=LDd2ao5KjKM">Warum Shiny for Python?</a>« klärt dieses Video.</p>
<p>Wenn ich dann schon bei Posit (vormals RStudio) bin: Die Quarto-Evangelistin <em>Mine Çetinkaya-Rundel</em> erzählt, warum und wie Akademiker <a href="http://cognitiones.kantel-chaos-team.de/webworking/staticsites/quarto.html">Quarto</a> – die Engine für statische Seiten, die auch dieses <del>Blog</del> Kritzelheft antreibt – <a href="https://www.youtube.com/watch?v=EbAAmrB0luA">nutzen können und sollten</a>.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/lC2jUeDKv-s" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p><strong>Weiter mit dem Gemischtwarenladen</strong>: Von <em>Michael Kennedy</em> gibt es den Beitrag »<a href="https://www.youtube.com/watch?v=lC2jUeDKv-s">Python and PyScript and WebAssembly: Python Web Apps, Running Locally with PyScript</a>, der zeigt, wie man <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/pyscript.html">PyScript</a> nutzen kann, um Desktop-Applikationen zu erstellen. <em>Stefan Mischook</em> fragt, <a href="https://www.youtube.com/watch?v=8nXFKdWJmJY">ob es sich lohnt, PyScript zu lernen</a> und von <em>Coding Glass</em> gibt es den anderthalbstündigen Stream »<a href="https://www.youtube.com/watch?v=Vj1wMwZy43g">What*s New in PyScript 2023.03.1?</a>«. Zum Abschluß dieses Themas fragt dann noch <em>Katie Bell</em>, <a href="https://www.youtube.com/watch?v=-SggWFS15Do">wie man Python mit Hilfe von Webassembler im Browser nutzt</a>.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/vDJpGenyHaA" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>War da nicht auch noch mein durch <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/p5js.html">P5.js</a> neu erwachtes Interesse, in JavaScript (ES6) objektorientiert zu programmieren? Hier gibt es dafür einen <a href="https://www.youtube.com/watch?v=vDJpGenyHaA">vierzigminütigen Crash-Kurs</a>.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/IwUlNH7U9SE" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p><strong>War sonst noch was?</strong> Ach ja, falls Ihr oder ich selber mal das Bedürfnis haben solltet, YouTuber zu werden: <a href="https://www.youtube.com/watch?v=IwUlNH7U9SE">Create Your First YouTube Video</a> zeigt, wie das geht.</p>
<p>Ich bin mir natürlich bewußt, daß diese Masse an Videos die Aufnahmefähigkeit von allen bei weitem übersteigt. Sucht Euch einfach nur die aus, die Euch wirklich interessieren. Einen Zweck hat dieser Monsterbeitrag jedenfalls erfüllt: Mein Feedreader macht nun einen viel aufgeräumteren Eindruck.</p>



 ]]></description>
  <category>Spieleprogrammierung</category>
  <category>Pygame</category>
  <category>Python</category>
  <category>Simulation</category>
  <category>RenPy</category>
  <category>Interactive Fiction</category>
  <category>PyScript</category>
  <category>WASM</category>
  <category>JavaScript</category>
  <category>OOP</category>
  <category>Quarto</category>
  <guid>https://kantel.github.io/posts/2023062301_gemischtwarenladen/index.html</guid>
  <pubDate>Fri, 23 Jun 2023 15:20:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023062301_gemischtwarenladen/images/texturepacker.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Noch einmal Greenfoot: Avoider Game Tutorial</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023062202_avoider_game_greenfoot/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="http://py.kantel-chaos-team.de.s3-website-us-east-1.amazonaws.com/images/screenshot-1099.png"><img src="https://kantel.github.io/posts/2023062202_avoider_game_greenfoot/images/avoidergame4a-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Auf den Seiten von Packt kann man sich als Leseprobe des durchaus empfehlenswerten (das kann man bei Packt nicht sehr häufig schreiben) Buches »<a href="https://www.packtpub.com/product/creative-greenfoot/9781783980383">Creative Greenfoot</a>« von <em>Michael Haungs</em> (Packt, 2015) das erste Kapitel »<a href="https://www.packtpub.com/product/creative-greenfoot/9781783980383">Avoider Game</a>« kostenlos reinziehen.</p>
<div style="float: right; margin-left: 12px; margin-top: 6px;">
<a href="https://www.packtpub.com/product/creative-greenfoot/9781783980383"><img src="https://kantel.github.io/posts/2023062202_avoider_game_greenfoot/images/creativegreenfoot.jpg" class="img-fluid"></a>
</div>
<p>Ich hatte mir das Buch damals gekauft – weiß also, worüber ich schreibe – und eben dieses Avoider Game als Blaupause für ein <a href="http://py.kantel-chaos-team.de.s3-website-us-east-1.amazonaws.com/18avoidergame/">ähnliches Programm</a> in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processingpy.html">Processing.py</a> verwendet.</p>
<p>Es wäre doch auch eine Idee, dieses Spiel (natürlich strikt objektorientert) nach <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a> (und <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygbag.html">Pygbag</a>) zu portieren, um auch wieder die Kurve zurück zu meinen angefangenen Projekten zu finden. Es würde sich im Browser sicher sehr gut machen. <em>Still digging!</em></p>



 ]]></description>
  <category>Greenfoot</category>
  <category>Spieleprogrammierung</category>
  <category>Pygame</category>
  <category>Processing.py</category>
  <guid>https://kantel.github.io/posts/2023062202_avoider_game_greenfoot/index.html</guid>
  <pubDate>Thu, 22 Jun 2023 15:05:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023062202_avoider_game_greenfoot/images/avoidergame4a.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Apple veröffentlicht Korrekturen für eine gravierende Schwachstelle auf allen Plattformen</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023062201_apple_security_alert/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://d2mpxrrcad19ou.cloudfront.net/item_images/911735/10570871_fullscreen.jpg"><img src="https://kantel.github.io/posts/2023062201_apple_security_alert/images/timber-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p><strong>Security Alert</strong>: Apple hat Korrekturen für eine gravierende Schwachstelle, die bereits aktiv ausgenutzt wird, veröffentlicht und zwar für alle Betriebssystemversion:</p>
<ul>
<li><a href="https://support.apple.com/de-de/HT213814">iOS 16.5.1 und iPadOS 16.5.1</a></li>
<li><a href="https://support.apple.com/de-de/HT213811">iOS 15.7.7 und iPadOS 15.7.7</a></li>
<li><a href="https://support.apple.com/de-de/HT213813">macOS Ventura 13.4.1</a></li>
<li><a href="https://support.apple.com/de-de/HT213810">macOS Monterey 12.6.7</a></li>
<li><a href="https://support.apple.com/de-de/HT213809">macOS Big Sur 11.7.8</a></li>
<li><a href="https://support.apple.com/de-de/HT213812">watchOS 9.5.2</a></li>
<li><a href="https://support.apple.com/de-de/HT213808">watchOS 8.8.1</a></li>
</ul>
<p>Die Updates sollten zügig eingefahren werden. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<p><em>(Bild: Anders Zorn (1860-1920): <a href="https://www.bukowskis.com/en/auctions/601/331-anders-zorn-timret-gar-timber">Timret går</a> (Timber), 1916.)</em></p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2023062201_apple_security_alert/index.html</guid>
  <pubDate>Thu, 22 Jun 2023 11:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023062201_apple_security_alert/images/timber.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Ein neuer Blick auf Greenfoot</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023062101_greenfoot_redux/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://upload.wikimedia.org/wikipedia/commons/2/2a/Greenfoot_Screenshoot.jpg?uselang=de"><img src="https://kantel.github.io/posts/2023062101_greenfoot_redux/images/greenfoot-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Ich weiß, ich bin sehr sprunghaft (aber ey, ich bin Rentner, ich darf das!), doch mein <a href="https://kantel.github.io/posts/2023062001_gameworld_yes_no/">gestriger Beitrag zur Objektorientierung</a> in und mit <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a> hat mich dazu motiviert, einen neuen Blick auf <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/greenfoot.html">Greenfoot</a> zu wagen, das ja nicht nur eine Java-Lernumgebung ist, sondern auch eine ernstzunehmende Plattform für Spieleentwicklung, Smulationen und andere graphisch orientierte Anwendungen sein will. Und Greenfoot nimmt für sich in Anspruch, die Objektorientierung sehr ernst zu nehmen.</p>
<p>Wie so oft in solchen Fällen habe ich als erstes unser aller Datenkrake (in diesem Fall Ihr Video-Portal) nach Tutorials zu Greenfoot befragt. Herausgekommen sind dabei unter anderem folgende Playlists, von denen ich einige mir schon angeschaut hatte, andere aber noch meiner Entdeckung harren:</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/rSHcNpGOGOs" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Das Video »<a href="https://www.youtube.com/watch?v=rSHcNpGOGOs">Java Programming, Episode 1: How to model a virus epidemic</a>« entstand vor etwa drei Jahren zu Beginn der Corona-Epidemie und ist das erste Video der jüngsten Playlist »<a href="https://www.youtube.com/playlist?list=PLIWb-FtdAhJjNgdIljwkMEQMhwhVIiV63">Java programming with Greenfoot</a>« (22 Videos zwischen je etwa fünfminütiger und zwanzigminütiger Spieldauer) des »offiziellen« <a href="https://www.youtube.com/@18km">Greenfoot-Kanals</a> des <em>King’s College London</em>.</p>
<p>Weitere bemerkenswerte – wenn auch schon oft reichlich alte – Reihen aus diesem Kanal sind:</p>
<div style="float: right; margin-left: 12px; margin-top: 6px;">
<a href="https://www.pearson.de/einfuehrung-in-java-mit-greenfoot-9783868949087"><img src="https://kantel.github.io/posts/2023062101_greenfoot_redux/images/greenfootbuch.png" class="img-fluid"></a>
</div>
<ul>
<li><a href="https://www.youtube.com/playlist?list=PL280AD6FCCFCDDAC5">The Joy of Code</a> (37 Videos). Eine Aktualisierung dieser Playlist wurde zwar ebenfalls vor drei Jahren begonnen, aber nach zwei Videos wieder eingestellt.</li>
<li><a href="https://www.youtube.com/playlist?list=PLIWb-FtdAhJgg2jEOS1u1Khub8gCl_LBj">Running, Jumping, Falling</a> (zwei Videos). Vielleicht kann ich hier noch etwas für mein <em>Platformer Game</em> lernen.</li>
<li><a href="https://www.youtube.com/playlist?list=PLIWb-FtdAhJh52OVXyLQZPIVtp5P4PzwC">Cool effects: Kinect motion detection and Smoke effect</a> (vier Videos).</li>
<li><a href="https://www.youtube.com/playlist?list=PLIWb-FtdAhJhGZs37FK-DVviMb3AsQvdP">Creating Explosions</a> (fünf Videos).</li>
<li><a href="https://www.youtube.com/playlist?list=PL73D989ED1678D0EC">Greenfoot: Shooting</a> (zwei Videos).</li>
</ul>
<p>Auch diese Videos besitzen jeweils eine Spieldauer zwischen etwa fünf Minuten und zwanzig Minuten.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/A2JiDwqr7Os" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Die deutschsprachige Reihe »<a href="https://www.youtube.com/playlist?list=PLLTmbYoiafl8BHRr2OwAsBZF9KLgf9Xvc">Greenfoot-Tutorials</a>« orientiert sich an den Videos aus dem Blog »Joy of Code« (leider nicht mehr online) von <em>Michael Kölling</em> (der nicht nur für die meisten oben erwähnten Videos des <em>King’s College</em> verantwortlich zeichnet, sondern auch einer der Entwickler von Greenfoot ist).</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/mtSLROwNAYI" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Auch der Kanal <em>DevTutorialsDeutsch</em> besitzt untere dem Namen »<a href="https://www.youtube.com/playlist?list=PL2B6D71A2D7A80F6C">Java Tutorials Deutsch</a>« eine siebenteilige Playlist zu Greenfoot.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/15983HG79EA" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Eine weitere interessante, deutschsprachige Playlist ist die Reihe »<a href="https://www.youtube.com/playlist?list=PLgg6m1nfr-PhYNk0luFlP0o6aCkPtugb9">Programmierung mit Greenfoot – Grundlagen der Java-Syntax</a>« (13 je etwa zehnminütige Videos) des Kanals <em>Schulinformatik</em>. Hier entwickelt Ihr ein Spiel, in dem Ihr einen unbekannten Planeten erkundet.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/a3PZp66AEmU" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Als letztes möchte ich noch auf den (nun wieder englischsprachigen) Kanal von <em>Tanner Crow</em> hinweisen. Seine 27-teilige Playlist »<a href="https://www.youtube.com/playlist?list=PLmwzeqwf733_hpzeDcgW6VUSZciqwkh2S">Greenfoot Tutorials</a>« ist eine Sammlung all seiner Tutorials für Greenfoot, die er bis etwa 2020 veröffentlicht hat. Entwickelt werden dort unter anderem ein <em>Maze Game</em>, ein <em>Space Shooter</em>, ein <em>Platformer Game</em>, ein <em>Asteroids-Klon</em> und ein <em>Tower Defence Game</em>.</p>
<p>Jüngeren Datums, aber mindestens ebenso interessant ist noch seine Reihe »<a href="https://www.youtube.com/playlist?list=PLmwzeqwf733-LzOG3iwsF-TMrO34KdwD2">Advanced Greenfoot</a>« (zehn Videos – hier programmiert Ihr unter anderem <em>Frogger</em> und ein <em>Zombie Survival Game</em>).</p>
<p>Außerdem habe ich aus meinen begehbaren Zettelkästen (sprich meinen Bücherregalen) das Buch »<a href="https://www.pearson.de/einfuehrung-in-java-mit-greenfoot-9783868949087">Einführung in Java mit Greenfoot</a> (München, Pearson-Verlag, 2. Auflage 2016) des oben schon genannten Greenfoot-Schöpfers <em>Michael Kölling</em> hervorgekramt. An diesen sommerlichen Tagen möchte man manches Mal einfach nur <del>in der Sonne</del> im Schatten liegen und genüßlich schmökern. Da wird man sicher nicht dümmer von.</p>
<p>Denn als nächstes möchte ich noch erkunden, ob und wie sich Greenfoot als Simulationsumgebung eignet. Die Macher sagen »<a href="https://www.greenfoot.org/doc/ap">Ja</a>«. <em>Schaun wir mal …</em></p>
<p><em>(Bannerbild (GPL): <a href="https://commons.wikimedia.org/wiki/File:Greenfoot_Screenshoot.jpg?uselang=de">Wikimedia Commons</a>.)</em></p>



 ]]></description>
  <category>Greenfoot</category>
  <category>Java</category>
  <category>Spieleprogrammierung</category>
  <category>Simulation</category>
  <category>OOP</category>
  <guid>https://kantel.github.io/posts/2023062101_greenfoot_redux/index.html</guid>
  <pubDate>Wed, 21 Jun 2023 15:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023062101_greenfoot_redux/images/greenfoot.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Pygame objektorientiert: Braucht es die Klasse GameWorld?</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023062001_gameworld_yes_no/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52962509456/"><img src="https://kantel.github.io/posts/2023062001_gameworld_yes_no/images/platformer1-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Da ich letzte Nacht wegen der sommerlichen Schwüle nicht richtig einschlafen konnte, ging mir im Halbschlaf mein Projekt »<a href="https://kantel.github.io/posts/2023010701_pygame_oop/">Pygame (sauber) objektorientiert</a>« nicht aus dem Kopf, für das ja mein von <em><a href="https://www.youtube.com/playlist?list=PLk64HPu_u_NOD0hC2XFZfDu1ZOr7OF1qB">Jonathan Cooper</a></em> inspiriertes <a href="https://kantel.github.io/posts/2023061701_platformer_pygame_pygbag_1/">Jump-and-Run-Spiel</a> eine Art Referenz-Implementierung für <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a> in <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygbag.html">Pygbag</a> (damit es auch im Browser zu spielen ist) werden soll.</p>
<p>Mich beschäftigte dabei in der Hauptsache die Frage, ob die Klasse <code>GameWorld</code> wirklich notwendig und sinnvoll sei? Denn schon bei meinen ersten Überlegungen stand sie ziemlich einsam und eigentlich funktionslos im Raum,</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://kantel.github.io/posts/2023062001_gameworld_yes_no/images/gameworldpygame.jpg" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">GameWorld in Pygame</figcaption>
</figure>
</div>
<p>während sie in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/greenfoot.html">Greenfoot</a>, das ja die Blaupause für meine Implementierung war, eher eine Klasse ist, <strong>in</strong> der die anderen Klassen leben:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://kantel.github.io/posts/2023062001_gameworld_yes_no/images/gameworldgreenfoot.jpg" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">GameWorld in Greenfot</figcaption>
</figure>
</div>
<p>Daher fragte ich mich, ob Pygames Hauptprogramm nicht selber schon die Funktion besitzt, die die Klasse <code>World</code> (oder <code>GameWorld</code>) in Greenfoot besitzt? Zumal zum einen die Objektorientierung in Java strenger behandelt wird als in Python, und zum zweiten ich die <code>run()</code>-Methode wegen der Eigenheiten der Pygbag-Implementierung sowieso aus <code>GameWorld</code> herauslösen und in die <code>main()</code>-Funktion (und dort in die <code>while True</code>-Hauptschleife) auslagern mußte.</p>
<p>Das trägt sicher nicht zur Klarheit bei, die ich mit (m)einem OOP-Ansatz eigentllich erreichen wollte. Daher sollte ich bei dem sowieso geplanten Refaktoring diesen Ansatz noch einmal überdenken.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/uWvb3QzA48c" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Wenn ich mich recht erinnere, hatte <em>KidsCanCode</em> in seinem <a href="https://www.youtube.com/playlist?list=PLsk-HSGFjnaG-BwZkuAOcVwWldfCLu1pq">Platformer-Projekt</a>« schon vor etlichen Jahren eine Art <code>GameWorld</code>-Klasse in Pygame eingeführt. Ich sollte mir also die Playlist noch einmal reinziehen, vielleicht finde ich dort eine Begründung, die meine Zweifel ausräumt.</p>
<p>Ein Seiteneffekt dieser Überlegungen: Die Beschäftigung mit Greenfoot hat mir Spaß gemacht (obwohl ich Java eigentlich nicht mag). Ich habe große Lust bekommen, damit auch einmal etwas absolut Verrücktes und Sinnloses anzustellen. <em>Still digging!</em></p>
<p><strong>War sonst noch was?</strong> Ach ja, unser aller Datenkrake spülte mir noch zwei Videos zu Pygame mit Pygbag in meinen Feedreader:</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=LB7dAlIDnDw">How to Export Pygame Projects into the Web</a>.</li>
<li><a href="https://www.youtube.com/watch?v=RDkfbASO-gM">Pygame in the BROWSER with pygbag on Github</a> (<a href="https://pythonprogramming.altervista.org/pygame-in-the-browser-with-pygbag-and-github/">Blogpost</a> dazu).</li>
</ul>
<p>Die wollte ich Euch nicht vorenthalten.</p>



 ]]></description>
  <category>Pygame</category>
  <category>Greenfoot</category>
  <category>Spieleprogrammierung</category>
  <category>OOP</category>
  <guid>https://kantel.github.io/posts/2023062001_gameworld_yes_no/index.html</guid>
  <pubDate>Tue, 20 Jun 2023 15:25:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023062001_gameworld_yes_no/images/platformer1.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Atlas Curiosa: Brunnenlandschaft Kranoldplatz (Neukölln)</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023061801_brunnenlandschaft_kranoldplatz/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52983314573/"><img src="https://kantel.github.io/posts/2023061801_brunnenlandschaft_kranoldplatz/images/brunnenlandschaftkranoldplatz-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>An der östlichen Stirnseite des Neuköllner Kranoldplatzes, auf dem Sonnabends immer der Regionalmarkt »<a href="https://www.flickr.com/photos/schockwellenreiter/52983314573/">Die Dicke Linda</a>« und im Sommer jeden zweiten Sonntag der »<a href="https://www.nkflohmarkt.de/">NK Flohmarkt</a>« stattfindet, steht ein geheimnisumwittertes Skulpturenensemble, über das scheinbar niemand genau Bescheid weiß (außer vielleicht das <a href="https://schloss-gutshof-britz.de/museum-neukoelln/geschichtsspeicher/archive">Riesenarchiv</a> des <a href="https://schloss-gutshof-britz.de/museum-neukoelln">Neuköllner Heimatmuseums</a>). Wie von einem Riesen ausgestreut, liegt ein Mix abstrakter Bildhauerarbeiten auf dem Pflaster.</p>
<p>Nur der <a href="https://www.tagesspiegel.de/kultur/ein-brunnen-der-kein-wasser-spendet-5726230.html">Tagesspiegel</a> und die <a href="https://www.friedenau-aktuell.de/friedhof-stubenrauchstra%C3%9Fe/gerson-fehrenbach/">Friedenauer Gedenkseiten</a> des am Projekt beteiligten Bildhauers <em><a href="https://de.wikipedia.org/wiki/Gerson_Fehrenbach">Gerson Fehrenbach</a></em> wissen mehr: Die Anlage entstand von 1983 bis 1986 im Rahmen eines Bildhauersymposiums, an dem sich neben <em><a href="https://bildhauerei-in-berlin.de/bildwerk/skulptur-kranoldplatz-4753/">Gerson Fehrenbach</a></em> die Bildhauer <em><a href="https://bildhauerei-in-berlin.de/bildwerk/steinskulptur-4550/">Mehmet Aksoy</a></em>, <em><a href="https://bildhauerei-in-berlin.de/bildwerk/steinskulptur-4700/">Justus Chrukin</a></em>, <em><a href="https://bildhauerei-in-berlin.de/bildwerk/wasserstein-4765/">Peter Fromlowitz</a></em>, <em><a href="https://bildhauerei-in-berlin.de/bildwerk/wasserstein-4765/">Makoto Fujiwara</a></em>, <em><a href="https://bildhauerei-in-berlin.de/bildwerk/steinskulptur-4884/">Peter Herbrich</a></em> und <em><a href="https://bildhauerei-in-berlin.de/bildwerk/steinskulptur-5277/">Maciej Szankowski</a></em> beteiligten. Vorgegeben war als gemeinsames Material hellgraugeäderter Bardiglio-Marmor. Die Einzelskulpturen der Bildhauer sollten sich bei aller Individualität zu einem Ganzen zusammenfügen. Sie war als Brunnen geplant, wovon das Loch im abgetreppten Mittelstein heute noch zeugt. Doch hat das durchbrochene Rondell nie Wasser geführt.</p>
<p>Denn die damals 400.000 Mark teuren Arbeiten auf dem seinerzeit noch sehr aktiven Wochenmarkt ernteten bei der Politik nicht immer nur Zustimmung, sondern einige Politiker zeigten sich auch »persönlich erschüttert« und die Berliner Morgenpost schlagzeilte »Bürger und Künstler fühlen sich verschaukelt«.</p>
<p>Angeblich wollten Anwohner und Marktbesucher keine Steine, sondern Blumen und Büsche. Und die Künstler ärgerten sich über die »massive Ablehnung« und das »beziehungslose Herumstehen« ihrer Steine. An dem sinnlosen Herumstehen des wasserlosen Brunnens hat sich auch nach fast 40 Jahren bis heute nichts geändert. Immerhin wurden vor ein paar Monaten die Steine von Bemoosung und Farbschmierereien befreit und glänzen nun zwar immer noch wasserlos, aber in vollem marmorweiß. Bis dem Bezirk wieder das Geld für die Pflege ausgeht. <em>(Photos (<a href="http://creativecommons.org/licenses/by-nc-nd/2.0/">cc</a> 2023): <a href="http://cognitiones.kantel-chaos-team.de/cv.html">Jörg Kantel</a>)</em></p>



 ]]></description>
  <category>Atlas Curiosa</category>
  <category>Neukölln</category>
  <guid>https://kantel.github.io/posts/2023061801_brunnenlandschaft_kranoldplatz/index.html</guid>
  <pubDate>Sun, 18 Jun 2023 14:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023061801_brunnenlandschaft_kranoldplatz/images/brunnenlandschaftkranoldplatz.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Ein Jump and Run (Mario Style) in Pygame und Pygbag (Stage 1)</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023061701_platformer_pygame_pygbag_1/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52979473305/"><img src="https://kantel.github.io/posts/2023061701_platformer_pygame_pygbag_1/images/platformerv02-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Ich habe es getan! Genauer gesagt, ich habe damit angefangen. Wie <a href="https://kantel.github.io/posts/2023060901_pygame_python_tuts/">hier schon angedroht</a>, habe ich mich durch die ersten Video-Tutorials der Playlist »<a href="https://www.youtube.com/playlist?list=PLk64HPu_u_NOD0hC2XFZfDu1ZOr7OF1qB">Platformer</a>« von <em>Jonathan Cooper</em> gewühlt und davon inspiriert angefangen, mein eigenes <a href="https://de.wikipedia.org/wiki/Jump_%E2%80%99n%E2%80%99_Run">Jump ‘n’ Run</a> in <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a> zu schreiben. Der Sinn der Übung ist, eben keine sklavische Kopie des Spiels von <em>Jonathan Cooper</em> zu programmieren, sondern es sollte meiner Vorstellung von objektorientierter Programmierung folgen, mithilfe von <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygbag.html">Pygbag</a> auch im Browser zu spielen sein und <em>last but not least</em> die freien (<a href="https://creativecommons.org/share-your-work/public-domain/cc0/">CC0</a>) Assets von <a href="https://www.kenney.nl/">Kenneys</a> niedlichem <em><a href="https://www.kenney.nl/assets/pixel-platformer">Pixel Platformer</a></em> (<em><a href="https://www.kenney.nl/assets/pixel-platformer-farm-expansion">Farm Expansion</a></em>, <em><a href="https://www.kenney.nl/assets/pixel-platformer-industrial-expansion">Industrial Expansion</a></em>) verwenden. Diese basieren zwar auf ein unübliches Raster von 18x18 Pixeln, aber man wächst ja mit seinen Aufgaben<sup>1</sup>.</p>
<p>Beim derzeitigen Stand der Entwicklung habe ich noch recht wenige Bildchen verwendet, aber ich habe ja noch vor, das Spiel ganz gewaltig aufzuhübschen. Aber es ist selbst in diesem frühen Stadium schon (dank <a href="https://kantel.itch.io/simple-pygame-platformer">Itch.io</a>) im Browser zu spielen<sup>2</sup>:</p>
<iframe frameborder="0" src="https://itch.io/embed-upload/8120238?color=ede4d4" allowfullscreen="" width="720" height="290">
<a href="https://kantel.itch.io/simple-pygame-platformer">Play Simple Pygame Platformer on itch.io</a>
</iframe>
<p>Da die Browser in ihrer Gier nach Input die Pfeiltasten und auch die Leertaste in Beschlag genommen haben, wird das Spiel wie in den 80er Jahren üblich mit den Tasten <code>a</code>, <code>d</code> und <code>w</code> gesteuert: <code>a</code> bewegt die Spielerfigur (das kleine, grüne Alien) nach links, <code>d</code> nach rechts und bei <code>w</code> hüpft sie nach oben.</p>
<p>Was habe ich nun angestellt? Ich habe mir das <a href="https://kantel.github.io/posts/2023060804_pygbag_oop/">hier vorgestellte Template</a> geschnappt und es behutsam ausgebaut. Damit das Alien nicht ins Bodenlose fällt, habe ich als erstes eine Klasse <code>Platform</code> erstellt:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Platform(pg.sprite.Sprite):</span>
<span id="cb1-2"></span>
<span id="cb1-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, _x, _y, _image):</span>
<span id="cb1-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb1-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _image</span>
<span id="cb1-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image.get_rect()</span>
<span id="cb1-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>GRIDSIZE</span>
<span id="cb1-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>GRIDSIZE</span></code></pre></div>
<p>Da die Klasse von <code>pygame.sprite.Sprite</code> erbt, ist die Initialisierung alles, was sie benötigt. Für die Positionierung wird die Konstante <code>GRIDSIZE</code> verwendet (hier 18 Pixel), die es erlaubt, die Sprites im Raster zu positionieren. In meinem Fall ist das Raster 40 Einheiten weit und 15&nbsp;Einheiten hoch. Das ist leichter auszuzählen, als die Pixel (720x290).</p>
<p>Um den Boden für das Alien zu zeichnen, habe ich erst einmal das Bild geladen</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1">        grass_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.image.load(os.path.join(IMAGEPATH, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grass_02.png"</span>))</span>
<span id="cb2-2">        .convert_alpha()</span></code></pre></div>
<p>und die Tiles dann positioniert:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1">        grass_locations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb3-2">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(GRID_WIDTH):</span>
<span id="cb3-3">            grass_loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (i, GRID_HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-4">            grass_locations.append(grass_loc)</span>
<span id="cb3-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.all_sprites <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.sprite.Group()</span>
<span id="cb3-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.platforms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.sprite.Group()</span>
<span id="cb3-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> loc <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> grass_locations:</span>
<span id="cb3-8">            x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb3-9">            y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb3-10">            p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Platform(x, y, grass_image)</span>
<span id="cb3-11">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.platforms.add(p)</span>
<span id="cb3-12">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.all_sprites.add(p)</span></code></pre></div>
<p>Da alle Sprites in der Klasse <code>GameWorld</code> meines Templates gezeichnet werden, mußte ich mir über die <code>draw()</code>-Methode keine Gedanken machen, das erledigt Pygame für mich.</p>
<p>Dann habe ich eine Klasse <code>Player</code> spezifiziert:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Player(pg.sprite.Sprite):</span>
<span id="cb4-2"></span>
<span id="cb4-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, _x, _y):</span>
<span id="cb4-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb4-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb4-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>):</span>
<span id="cb4-7">            player_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.image.load(os.path.join(IMAGEPATH,</span>
<span id="cb4-8">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"alien_green_0"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(i) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".png"</span>)).convert_alpha()</span>
<span id="cb4-9">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.img.append(player_image)</span>
<span id="cb4-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.img[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb4-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image.get_rect()</span>
<span id="cb4-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>GRIDSIZE</span>
<span id="cb4-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.bottom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>GRIDSIZE</span>
<span id="cb4-14">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># self.rect.topleft = (self.rect.x, self.rect.y)</span></span>
<span id="cb4-15">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.speed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PLAYER_SPEED</span>
<span id="cb4-16">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.jump_power <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> JUMP_POWER</span>
<span id="cb4-17">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb4-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb4-19">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gems <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span></code></pre></div>
<p>Das zweite Bild benötige ich beim derzeitigen Stand der Entwicklung noch nicht, aber alles andere wird benötigt. Die Klasse hat diverse Hilfsmethoden, die in Summe alle in der Methode <code>update()</code> aufgerufen werden. Für das Verständnis der Implementierung notwendig ist die (Hilfs-) Methode <code>move()</code>, die auf die Tastatursteuerung reagiert und eine Kollisionserkennung besitzt:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> move(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb5-2">        keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.key.get_pressed()</span>
<span id="cb5-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> keys[pg.K_a]:        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># LEFT</span></span>
<span id="cb5-4">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb5-5">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.speed</span>
<span id="cb5-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> keys[pg.K_d]:      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># RIGHT</span></span>
<span id="cb5-7">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> WIDTH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> PLAYER_WIDTH:</span>
<span id="cb5-8">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.speed</span>
<span id="cb5-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> keys[pg.K_w]:      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># JUMP</span></span>
<span id="cb5-10">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.jump()</span>
<span id="cb5-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb5-12">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb5-13">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Horizonfale Kollision</span></span>
<span id="cb5-14">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vx</span>
<span id="cb5-15">        hits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.sprite.spritecollide(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, world.platforms, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb5-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> hit <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> hits:</span>
<span id="cb5-17">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb5-18">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.right <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hit.rect.left</span>
<span id="cb5-19">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb5-20">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hit.rect.right</span>
<span id="cb5-21">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Vertikale Kollision</span></span>
<span id="cb5-22">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vy</span>
<span id="cb5-23">        hits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.sprite.spritecollide(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, world.platforms, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb5-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> hit <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> hits:</span>
<span id="cb5-25">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb5-26">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.bottom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hit.rect.top</span>
<span id="cb5-27">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb5-28">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.top <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hit.rect.bottom</span>
<span id="cb5-29">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span></code></pre></div>
<p>Die Geschwindigkeit des Spielers wird mit den Variablen für <em>Velocity</em> (<code>vx</code>, <code>vy</code>) gesteuert, die unter anderem nur dann zu der x- oder y-Position des Spielers aufaddiert wird, wenn keine Kollision registriert wird. Kollisionen werden, je nachdem ob eine horizontale (<code>vx != 0</code>) oder vertikale (<code>vy != 0</code>) Kollision vorliegt, separat abgehandelt. Trifft der Spieler horizontal von rechts auf ein Hindernis gilt <code>self.rect.right = hit.rect.left</code> und umgekehrt (<code>self.rect.left = hit.rect.right</code>). Ähnliches gilt für die vertikale Kollision von oben (<code>self.rect.bottom = hit.rect.top)</code> oder unten (<code>self.rect.top = hit.rect.bottom</code>).</p>
<p>Damit eine vertikale Kollision überhaupt stattfinden kann, müssen natürlich noch ein paar Plattformen installiert werden. Wie gewohnt wird erst das Bildchen geladen</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1">        block_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.image.load(os.path.join(IMAGEPATH, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"block_00.png"</span>))</span>
<span id="cb6-2">        .convert_alpha()</span></code></pre></div>
<p>und dann die Blöcke positioniert:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1">        block_locations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>),                         </span>
<span id="cb7-2">                           (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>),</span>
<span id="cb7-3">                           (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">26</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>),</span>
<span id="cb7-4">                           (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>),</span>
<span id="cb7-5">                           (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">38</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">38</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>)]</span>
<span id="cb7-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> loc <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> block_locations:</span>
<span id="cb7-7">            x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb7-8">            y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb7-9">            p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Platform(x, y, block_image)</span>
<span id="cb7-10">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.platforms.add(p)</span>
<span id="cb7-11">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.all_sprites.add(p)</span></code></pre></div>
<p>Als letztes habe ich die Klasse <code>Gem</code> implementiert, die der Klasse <code>Platform</code> sehr ähnelt, aber zusätzlich noch die Methode <code>apply()</code> besitzt:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Gem(pg.sprite.Sprite):</span>
<span id="cb8-2"></span>
<span id="cb8-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, _x, _y, _image):</span>
<span id="cb8-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb8-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _image</span>
<span id="cb8-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image.get_rect()</span>
<span id="cb8-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>GRIDSIZE</span>
<span id="cb8-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>GRIDSIZE</span>
<span id="cb8-9">    </span>
<span id="cb8-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, character):</span>
<span id="cb8-11">        character.gems <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
<p>Die Methode <code>apply</code> in <code>Gem</code> und nicht in <code>Player</code> zu implementieren, war eine Designentscheidung, damit in zukünftigen Versionen die Klasse auch auf andere Spielfiguren, wie zum Beispiel Gegner des Spielers, reagieren kann.</p>
<p>Dazu braucht die Klasse <code>Player</code> aber auch eine Methode, die auf eine Kollision mit den Edelsteinen reagiert. Ich habe sie <code>check_items()</code> genannt:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb9-1">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> check_items(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb9-2">        hits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.sprite.spritecollide(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, world.items, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb9-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> hits:</span>
<span id="cb9-4">            item.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>)</span></code></pre></div>
<p>Hier ist der letzte Parameter von <code>pygame.sprite.spritecollide()</code> zum ersten Mal auf <code>True</code> gesetzt. Das bedeutet, das bei einer Kollision das Item aus allen <code>sprite.Group</code> gelöscht wird und im Spiel nicht mehr existiert.</p>
<p>Bevor ich Euch komplett verwirre, hier der vollständige Quellcode dieser Version 0.2, damit Ihr alles nachvollziehen und auch nachprogrammieren könnt:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pygame <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pg</span>
<span id="cb10-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> asyncio</span>
<span id="cb10-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pygame.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">locals</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb10-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os, sys</span>
<span id="cb10-5"></span>
<span id="cb10-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Settings</span></span>
<span id="cb10-7">GRIDSIZE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span></span>
<span id="cb10-8">GRID_WIDTH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span></span>
<span id="cb10-9">GRID_HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span></span>
<span id="cb10-10">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> GRID_WIDTH<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>GRIDSIZE, GRID_HEIGHT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>GRIDSIZE</span>
<span id="cb10-11">TITLE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Simple Platformer"</span></span>
<span id="cb10-12">FPS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>                     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Frames per second</span></span>
<span id="cb10-13">PLAYER_WIDTH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span></span>
<span id="cb10-14">PLAYER_HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span></span>
<span id="cb10-15">PLAYER_START_X, PLAYER_START_Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb10-16">PLAYER_SPEED <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb10-17"></span>
<span id="cb10-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Physikalische Konstanten</span></span>
<span id="cb10-19">GRAVITY <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span></span>
<span id="cb10-20">JUMP_POWER <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb10-21"></span>
<span id="cb10-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Hier wird der Pfad zum Verzeichnis der Assets gesetzt</span></span>
<span id="cb10-23">IMAGEPATH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(os.getcwd(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data/images"</span>)</span>
<span id="cb10-24"></span>
<span id="cb10-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Farben</span></span>
<span id="cb10-26">BG_COLOR <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">65</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">166</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">246</span>)     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Himmelblau</span></span>
<span id="cb10-27"></span>
<span id="cb10-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Class GameWorld</span></span>
<span id="cb10-29"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> GameWorld:</span>
<span id="cb10-30"></span>
<span id="cb10-31">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb10-32">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pygame und das Fenster initialisieren</span></span>
<span id="cb10-33">        pg.init()</span>
<span id="cb10-34">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.screen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.display.set_mode((WIDTH, HEIGHT))</span>
<span id="cb10-35">        pg.display.set_caption(TITLE)</span>
<span id="cb10-36"></span>
<span id="cb10-37">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.clock <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.time.Clock()</span>
<span id="cb10-38">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.keep_going <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb10-39"></span>
<span id="cb10-40">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> reset(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb10-41">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Neustart oder Status zurücksetzen</span></span>
<span id="cb10-42">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Hier werden alle Elemente der GameWorld initialisiert</span></span>
<span id="cb10-43">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Load Assets</span></span>
<span id="cb10-44">        grass_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.image.load(os.path.join(IMAGEPATH, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grass_02.png"</span>)).convert_alpha()</span>
<span id="cb10-45">        block_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.image.load(os.path.join(IMAGEPATH, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"block_00.png"</span>)).convert_alpha()</span>
<span id="cb10-46">        gem_image   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.image.load(os.path.join(IMAGEPATH, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gem.png"</span>)).convert_alpha()</span>
<span id="cb10-47"></span>
<span id="cb10-48">        grass_locations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb10-49">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(GRID_WIDTH):</span>
<span id="cb10-50">            grass_loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (i, GRID_HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb10-51">            grass_locations.append(grass_loc)</span>
<span id="cb10-52">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.all_sprites <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.sprite.Group()</span>
<span id="cb10-53">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.platforms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.sprite.Group()</span>
<span id="cb10-54">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> loc <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> grass_locations:</span>
<span id="cb10-55">            x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb10-56">            y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb10-57">            p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Platform(x, y, grass_image)</span>
<span id="cb10-58">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.platforms.add(p)</span>
<span id="cb10-59">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.all_sprites.add(p)</span>
<span id="cb10-60">    </span>
<span id="cb10-61">        block_locations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>),                         </span>
<span id="cb10-62">                           (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>),</span>
<span id="cb10-63">                           (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">26</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>),</span>
<span id="cb10-64">                           (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>),</span>
<span id="cb10-65">                           (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">38</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">38</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>)]</span>
<span id="cb10-66">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> loc <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> block_locations:</span>
<span id="cb10-67">            x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb10-68">            y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb10-69">            p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Platform(x, y, block_image)</span>
<span id="cb10-70">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.platforms.add(p)</span>
<span id="cb10-71">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.all_sprites.add(p)</span>
<span id="cb10-72"></span>
<span id="cb10-73">        gem_locations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">26</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">36</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>)]</span>
<span id="cb10-74">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.items <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.sprite.Group()</span>
<span id="cb10-75">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> loc <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gem_locations:</span>
<span id="cb10-76">            x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb10-77">            y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb10-78">            g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Gem(x, y, gem_image)</span>
<span id="cb10-79">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.items.add(g)</span>
<span id="cb10-80">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.all_sprites.add(g)</span>
<span id="cb10-81"></span>
<span id="cb10-82">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Player(PLAYER_START_X, PLAYER_START_Y)</span>
<span id="cb10-83">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player_sprite_group <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.sprite.GroupSingle()</span>
<span id="cb10-84">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player_sprite_group.add(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player)</span>
<span id="cb10-85">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.all_sprites.add(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player)</span>
<span id="cb10-86">  </span>
<span id="cb10-87">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> events(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb10-88">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> event <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> pg.event.get():</span>
<span id="cb10-89">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> ((event.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pg.QUIT)</span>
<span id="cb10-90">                <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> (event.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pg.KEYDOWN</span>
<span id="cb10-91">                <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> event.key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pg.K_ESCAPE)):</span>
<span id="cb10-92">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.keep_going <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb10-93">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.game_over()</span>
<span id="cb10-94"></span>
<span id="cb10-95">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb10-96">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.all_sprites.update()</span>
<span id="cb10-97"></span>
<span id="cb10-98">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb10-99">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.screen.fill(BG_COLOR)</span>
<span id="cb10-100">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.all_sprites.draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.screen)</span>
<span id="cb10-101">        pg.display.flip()</span>
<span id="cb10-102"></span>
<span id="cb10-103">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> start_screen(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb10-104">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb10-105">    </span>
<span id="cb10-106">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> win_screen(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb10-107">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb10-108">    </span>
<span id="cb10-109">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> loose_screen(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb10-110">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb10-111"></span>
<span id="cb10-112">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> game_over(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb10-113">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print("Bye, Bye, Baby!")</span></span>
<span id="cb10-114">        pg.quit()</span>
<span id="cb10-115">        sys.exit()</span>
<span id="cb10-116"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Ende Class GameWorld</span></span>
<span id="cb10-117"></span>
<span id="cb10-118"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Class Platform</span></span>
<span id="cb10-119"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Platform(pg.sprite.Sprite):</span>
<span id="cb10-120"></span>
<span id="cb10-121">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, _x, _y, _image):</span>
<span id="cb10-122">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb10-123">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _image</span>
<span id="cb10-124">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image.get_rect()</span>
<span id="cb10-125">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>GRIDSIZE</span>
<span id="cb10-126">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>GRIDSIZE</span>
<span id="cb10-127"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## End Class Platform</span></span>
<span id="cb10-128"></span>
<span id="cb10-129"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Gem(pg.sprite.Sprite):</span>
<span id="cb10-130"></span>
<span id="cb10-131">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, _x, _y, _image):</span>
<span id="cb10-132">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb10-133">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _image</span>
<span id="cb10-134">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image.get_rect()</span>
<span id="cb10-135">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>GRIDSIZE</span>
<span id="cb10-136">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>GRIDSIZE</span>
<span id="cb10-137">    </span>
<span id="cb10-138">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, character):</span>
<span id="cb10-139">        character.gems <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb10-140"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## End Class Gem</span></span>
<span id="cb10-141"></span>
<span id="cb10-142"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Class Player</span></span>
<span id="cb10-143"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Player(pg.sprite.Sprite):</span>
<span id="cb10-144"></span>
<span id="cb10-145">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, _x, _y):</span>
<span id="cb10-146">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb10-147">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb10-148">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>):</span>
<span id="cb10-149">            player_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.image.load(os.path.join(IMAGEPATH, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"alien_green_0"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(i) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".png"</span>)).convert_alpha()</span>
<span id="cb10-150">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.img.append(player_image)</span>
<span id="cb10-151">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.img[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb10-152">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image.get_rect()</span>
<span id="cb10-153">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>GRIDSIZE</span>
<span id="cb10-154">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.bottom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>GRIDSIZE</span>
<span id="cb10-155">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.speed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PLAYER_SPEED</span>
<span id="cb10-156">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.jump_power <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> JUMP_POWER</span>
<span id="cb10-157">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb10-158">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb10-159">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gems <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb10-160">    </span>
<span id="cb10-161">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> jump(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb10-162">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb10-163">        hits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.sprite.spritecollide(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, world.platforms, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb10-164">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb10-165">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(hits) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb10-166">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.jump_power</span>
<span id="cb10-167"></span>
<span id="cb10-168">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> apply_gravity(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb10-169">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> GRAVITY</span>
<span id="cb10-170"></span>
<span id="cb10-171">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> move(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb10-172">        keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.key.get_pressed()</span>
<span id="cb10-173">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> keys[pg.K_a]:        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># LEFT</span></span>
<span id="cb10-174">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb10-175">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.speed</span>
<span id="cb10-176">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> keys[pg.K_d]:      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># RIGHT</span></span>
<span id="cb10-177">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> WIDTH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> PLAYER_WIDTH:</span>
<span id="cb10-178">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.speed</span>
<span id="cb10-179">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> keys[pg.K_w]:      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># JUMP</span></span>
<span id="cb10-180">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.jump()</span>
<span id="cb10-181">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb10-182">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb10-183">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Horizonfale Kollision</span></span>
<span id="cb10-184">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vx</span>
<span id="cb10-185">        hits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.sprite.spritecollide(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, world.platforms, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb10-186">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> hit <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> hits:</span>
<span id="cb10-187">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb10-188">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.right <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hit.rect.left</span>
<span id="cb10-189">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb10-190">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hit.rect.right</span>
<span id="cb10-191">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Vertikale Kollision</span></span>
<span id="cb10-192">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vy</span>
<span id="cb10-193">        hits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.sprite.spritecollide(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, world.platforms, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb10-194">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> hit <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> hits:</span>
<span id="cb10-195">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb10-196">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.bottom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hit.rect.top</span>
<span id="cb10-197">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb10-198">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.top <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hit.rect.bottom</span>
<span id="cb10-199">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb10-200"></span>
<span id="cb10-201">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> check_edges(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb10-202">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb10-203">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb10-204">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.right <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> WIDTH:</span>
<span id="cb10-205">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.right <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> WIDTH</span>
<span id="cb10-206">    </span>
<span id="cb10-207">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> check_items(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb10-208">        hits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.sprite.spritecollide(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, world.items, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb10-209">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> hits:</span>
<span id="cb10-210">            item.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>)</span>
<span id="cb10-211"></span>
<span id="cb10-212">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb10-213">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.apply_gravity()</span>
<span id="cb10-214">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.move()</span>
<span id="cb10-215">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.check_edges()</span>
<span id="cb10-216">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.check_items()</span>
<span id="cb10-217"></span>
<span id="cb10-218"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## End Class Player</span></span>
<span id="cb10-219"></span>
<span id="cb10-220"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Hauptprgramm</span></span>
<span id="cb10-221">world <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> GameWorld()</span>
<span id="cb10-222">world.start_screen()</span>
<span id="cb10-223">world.reset()</span>
<span id="cb10-224"></span>
<span id="cb10-225"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Hauptschleife</span></span>
<span id="cb10-226"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">async</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> main():</span>
<span id="cb10-227">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> world.keep_going:</span>
<span id="cb10-228">        world.clock.tick(FPS)</span>
<span id="cb10-229">        world.events()</span>
<span id="cb10-230">        world.update()</span>
<span id="cb10-231">        world.draw()</span>
<span id="cb10-232">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">await</span> asyncio.sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Very important, and keep it 0</span></span>
<span id="cb10-233"></span>
<span id="cb10-234">asyncio.run(main())</span></code></pre></div>
<p>Das Spiel habe ich auf <a href="https://kantel.itch.io/simple-pygame-platformer">Itch.io hochgeladen</a>, Ihr könnt es also auch dort spielen. Allerdings wird es dort immer nur die letzte, gerade aktuelle Version geben – jede neue Version überschreibt die vorherige Version. Ich will schließlich meinen Account nicht vollmüllen.</p>
<p>Und wie immer gibt es den <a href="https://github.com/kantel/pygameprojects/tree/master/platformer">Quellcode mit allen Assets</a> auch in meinem Github-Repositorium. Aber auch hier wird es immer nur die aktuelle Fassung geben, frühere Versionen könnt Ihr Euch ja notfalls aus der <em>History</em> ziehen (wozu hat man denn eine <strong>Versionskontrolle</strong>?).</p>
<p>Als nächstes werde ich erst einmal ein <em>Refactoring</em> des bisher implmentierten vornehmen. Es sind mir nämlich zuviel Doppelungen im Quellcode vorhanden und auch ein paar Zeilen sind von früheren Versuchen noch funktions- und nutzlos im Code verblieben. Ich lasse Euch an den Fortschritten weiter teilhaben. <em>Still digging!</em></p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Fußnoten</h2>

<ol>
<li id="fn1"><p>Ich wollte ein recht kleines Pixelraster verwenden, damit das Spielfeld – zumindest in den ersten Versionen – auch problemlos in ein Browserfenster paßt. Das 64x64 große Pixelraster des <em><a href="https://www.kenney.nl/assets/simplified-platformer-pack">Simplified Platformer Pack</a></em> (ebenfalls von Kenney.nl) schien mir dafür zu wuchtig (bei aller Sympathie, die ich für die kleine, animiert und gelbe Spielekonsole des Packs hege).↩︎</p></li>
<li id="fn2"><p>Wenn man, nachdem das Spiel gestartet ist, die Seite neu lädt oder verläßt, gibt der Browser eine Warnmeldung heraus, daß eventuelle Änderungen nicht gespeichert werden. Ich weiß nicht, ob das gewollt ist und ob oder wie man das abstellen kann. Momentan müßt Ihr und muß ich damit leben.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Pygame</category>
  <category>Pygbag</category>
  <category>Spieleprogrammierung</category>
  <category>Retrogaming</category>
  <guid>https://kantel.github.io/posts/2023061701_platformer_pygame_pygbag_1/index.html</guid>
  <pubDate>Sat, 17 Jun 2023 14:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023061701_platformer_pygame_pygbag_1/images/platformerv02.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Ren’Py, Remove BG, Tkinter: Video-Tutorials (und mehr) zum Wochenende</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023061601_renpy_tkinter_removebg/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52978598354/"><img src="https://kantel.github.io/posts/2023061601_renpy_tkinter_removebg/images/kastanien-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Da es zum einen ein verregnetes Wochenende werden soll (sagen zumindest die chronisch danebentippenden Wetterfrösche) und ich zum anderen nicht nur (und immer noch – dazu in einem späteren Beitrag mehr) von <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygbag.html">Pygbag</a>, dem kleinen Tool, das <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a>-Spiele im Browser laufen läßt, sondern auch von der neuen Möglichkeit, <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/renpy.html">Ren’Py</a>-Anwendungen <a href="https://kantel.github.io/posts/2023061001_renpy_81_web/">auch für das Web zu entwickeln</a>, total begeistert bin, habe ich für Euch eine Riesen-Playlist zu Ren’Py herausgesucht:</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/Zbr2MGkEmYg" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Sie heißt einfach »<a href="https://www.youtube.com/playlist?list=PL0WLCTtC1EYUibimxDGhkPQin7bo39PlV">Ren’Py Visual Novel Engine</a>«, ist einziger Bestandteil des YouTube-Kanals <em>RenPy Start Tutorials</em> und der Name ist Programm. Denn sie besteht derzeit aus 101 meist kürzeren Videos, die jeweils einzelne Aspekte der Engine behandeln (Ihr könnt sie Euch daher in nahezu beliebiger Reihenfolge reinziehen). Da das jüngste Update erst wenige Tage alt ist, erwarte ich noch weitere Folgen. Ein Abonnement des Kanals ist daher zu empfehlen.</p>
<p>In einer Email-Diskussion (mein <a href="https://kantel.github.io/posts/2022120901_giscus/">Giskus</a> war für ein paar Stunden ausgefallen) kam die Frage nach den Assets für Ren’Py auf. Für Menschen wie mich, denen jegliche künstlerische Begabung fehlt, ist die wirklich nicht leicht zu beantworten. Zwar kann man sich auf Seiten wie <a href="https://itch.io/game-assets/free/genre-visual-novel">dieser auf Itch.io mit freien Visual Novell Ressourcen</a> durchwühlen, aber die meisten sind in einem süßlichen <em>Anime Style</em> und daher nicht jedermans Geschmack. Ich nutze bei <a href="https://kantel.itch.io/alien-attack-renpy-test">meinem Projekt</a> zur <a href="https://kantel.github.io/posts/2022122102_alien_invasion_stage_1/">Zeit</a> ja Avatare, die ich mit dem freien <a href="https://framiq.com/">Avatar-Generator von Framic</a> zusammengestoppelt habe, und für die Hintergründe behelfe ich mich mit einem Mix aus ebenfalls freien <em>Visual Novel Backgrounds</em> (da kann man in der oben erwähnten Sammlung auf Itch.io eine Menge finden) und eigenen Photos.</p>
<p>Nun steht aber auch schon seit geraumer Zeit der Dienst »<a href="https://www.remove.bg/de">Remove BG</a> auf der Liste der zu testenden Applikationen. Angeregt durch diese Diskussion habe ich erste Tests gewagt und das Ergebnis ist recht vielversprechend. Ich habe ein paar Bilder aus <em>Alice im Wunderland</em> genommen und mal geschaut, wie Remove BG mit diesen Illustrationen klar kommt. Die Ergebnisse sind durchaus brauchbar, wie der <a href="https://www.flickr.com/photos/schockwellenreiter/52978598354/">obige verrückte Hutmacher</a>, den ich freigestellt und in ein Photo vom heimischen <em>Carl-Weder-Park</em> im Frühling hereinkopiert habe, beweist.</p>
<p>Allerdings kann man bei der kostenlosen Nutzung nur ein größenlimitiertes Vorschaubild herunterladen. Das kann für viele Anwendungen durchaus ausreichend sein, wer jedoch mehr will, muß zahlen, Das kann entweder mit <em>Pay-as-you-go</em> »Credits« (für gelegentliche/geringe Nutzung die einzige Alternative, allerdings kostet dann ein Bild im Extremfall 1,99 €) oder mit einem <a href="https://www.remove.bg/de/pricing">Monatsabo</a> erfolgen. Die Kosten liegen hier bei dem kleinsten Abo (40 Credits (Bilder) pro Monat, nur nichtkommerzielle Nutzung) bei 23 Cent je Bild.</p>
<p>Bevor ich hier also in den sauren Apfel beiße und ein Abo abschließe, werde ich erst noch ein paar weitere Tests fahren. Aber ich halte das Angebot für durchaus fair.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/1itG8q-sCGY" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p><strong>War sonst noch was?</strong> Ach ja, manchmal braucht man ja doch ein GUI für sein Python-Projekt. Und da ist Tkinter immer noch das Werkzeug meiner Wahl (vor allem, weil es in der Grundversion zum Standardumfang von Python gehört, also ohne zusätzliche Installationen auskommt). Und der YouTube-Kanal <em>Code First with Hala</em> bietet eine Playlist »<a href="https://www.youtube.com/playlist?list=PLs3IFJPw3G9IiHm9PEP1UaMtuvACmxVMj">Tkinter GUI Projects</a>«, die zur Zeit aus 15 Videos zwischen etwa einer viertelstünden und einer Spieldauer von einer Stunde besteht. Auch hier ist das jüngste Video erst wenige Wochen alt, die Playlist sollte also hinreichend aktuell sein und man darf auf weitere Updates hoffen. Daher habe ich auch diesen Kanal abonniert.</p>



 ]]></description>
  <category>RenPy</category>
  <category>Interactive Fiction</category>
  <category>Python</category>
  <category>Tkinter</category>
  <category>Remove BG</category>
  <guid>https://kantel.github.io/posts/2023061601_renpy_tkinter_removebg/index.html</guid>
  <pubDate>Fri, 16 Jun 2023 13:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023061601_renpy_tkinter_removebg/images/kastanien.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Landgericht Berlin: Klimablockaden sind keine Nötigung</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023061502_klimanlockaden_sind_keine_noetigung/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/17563122701/"><img src="https://kantel.github.io/posts/2023061502_klimanlockaden_sind_keine_noetigung/images/herrmanstrassenverkehr-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Da wird die Bleifußlobby aber aufheulen: Das Landgericht Berlin hat in einer neuen Entscheidung zu Klimablockaden erstmals den Vorwurf der Nötigung gegen Klimaaktivisten der Gruppe »Letzte Generation« abgelehnt. Stattdessen erklärte es, <strong><a href="http://localhost:7151/posts/2023061502_klimanlockaden_sind_keine_noetigung/index.html">daß angesichts angekündigter Blockaden Autofahrern »ein Umsteigen auf den öffentlichen Nahverkehr oder das Einplanen von mehr Zeit (…) generell möglich« sei</a></strong>. Zudem sei eine Blockade von etwas mehr als einer halben Stunde »hinsichtlich der üblichen Stauzeiten« in Berlin »moderat«.</p>
<p>Wenn man sich zum Beispiel die täglichen Staus auf der Neuköllner Herrmannstraße anschaut, die durch eine verpeilte Verkehrspolitik (Autobahnbau) und eine steigenden Unvernunft der Autofahrer hervorgerufen werden (in fast jedem PKW sitz eine einzelne Person), fragt man sich, warum das Gericht seine Urteilsbegründung nicht noch schärfer formulierte. Denn das Autofahrer im Stau stecken, damit kann ich leben – aber daß dann auch die Busse des ÖPNV nicht durchkommen, damit nicht.</p>
<p>Meiner Meinung nach sollte man, sobald auf einer Straße ein Stau droht, diese umgehend für den motorisierten Individualverkehr komplett sperren, damit wenigstens die Busse und (Straßen-) Bahnen des ÖPNV noch durchkommen. Denn der motorisierte Individualverkehr ist egoistisch (in einer Großstadt muß <strong>niemand</strong> mit dem Auto fahren!), umweltschädlich und verantwortungslos, daher sollte der ÖPNV eindeutig die Priorität besitzen. <em>(Photo (<a href="http://creativecommons.org/licenses/by-nc-nd/2.0/">cc</a>): <a href="http://cognitiones.kantel-chaos-team.de/cv.html">Jörg Kantel</a>)</em></p>



 ]]></description>
  <category>Verkehr</category>
  <category>Verkehrswende</category>
  <category>Failed State Berlin</category>
  <guid>https://kantel.github.io/posts/2023061502_klimanlockaden_sind_keine_noetigung/index.html</guid>
  <pubDate>Thu, 15 Jun 2023 13:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023061502_klimanlockaden_sind_keine_noetigung/images/herrmanstrassenverkehr.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
