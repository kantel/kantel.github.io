<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Der Schockwellenreiter</title>
<link>https://kantel.github.io/</link>
<atom:link href="https://kantel.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description>Schockwellenreiter</description>
<generator>quarto-1.5.47</generator>
<lastBuildDate>Sat, 23 Aug 2025 15:15:00 GMT</lastBuildDate>
<item>
  <title>Es muß nicht immer Microsoft sein: LibreOffice 25.8 ist erschienen</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025082301_libreoffice_25_8/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54355466457/"><img src="https://kantel.github.io/posts/2025082301_libreoffice_25_8/images/libreofficewoman-b.jpg" class="img-fluid"></a></p>
<p>Gerade in diesen Zeiten, wo es wichtig ist, seine digitale Souveränität zu verteidigen, macht für diejenigen, die nicht auf ein Office-Paket verzichten können (weil – aus welchen Gründen auch immer – zu Beispiel <a href="http://cognitiones.kantel-chaos-team.de/produktivitaet/latex/latex.html">LaT<sub>E</sub>X</a> keine Alternative ist), ein Umstieg auf <a href="https://de.wikipedia.org/wiki/LibreOffice">LibreOffice</a> Sinn. Denn hinter LibreOffice steht keine US-amerikanische Firma, sondern die <em><a href="https://de.wikipedia.org/wiki/LibreOffice#The_Document_Foundation">Document Foundation</a></em>, eine gemeinnützige Stiftung nach deutschem Recht.</p>
<p>Vor wenigen Tagen wurde von LibreOffice in neues Update freigegeben. <a href="https://www.deskmodder.de/blog/2025/08/20/libreoffice-25-8-ist-erschienen-windows-7-8-1-32-bit-wird-nicht-mehr-unterstuetzt/">Es handelt sich um die Version&nbsp;25.8</a> und sie kommt mit neuen Funktionen und auch einer verbesserten Leistung. So sollen gerade die Geschwindigkeitsverbesserungen auf weniger leistungsstarken Rechnern gewaltig sein. In den einigen Benchmarks sind Writer und Calc bis zu 30% schneller.</p>
<p>Aber wo Licht ist, da ist auch Schatten: LibreOffice 25.8 unterstützt Windows 7/8.1 nicht mehr und Windows&nbsp;10 32-Bit (x86) gilt als veraltet. Für macOS 10.15 ist es die letzte Version. Aber es werden damit immer noch weit ältere Betriebssystem-Versionen unterstützt, als beim Quasi-Monopolisten aus Redmond.</p>
<p>Den <a href="https://www.libreoffice.org/download/download-libreoffice/">Download</a> gibt es hier und alle Änderungen und die neuen Funktionen könnt ihr euch genauer in den <a href="https://wiki.documentfoundation.org/ReleaseNotes/25.8/de">Release Notes</a> anschauen.</p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54355466457/">(Libre-) Office Woman</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>Colored French Comic Style. A sexy young woman with long red hair, green eyes and red lipstick is sitting in an office at a desk in front of a monitor and a keyboard. She is wearing a white, open blouse with a low neckline and a rust-colored vest. She has a pencil in one hand. On the desk is an open notepad, a cup with writing utensils and a stack of books. There are shelves on the walls with many more books and files. The spring sun is shining through a window in the background.</em>«. Modell: Flux (Pro).</p>



 ]]></description>
  <category>LibreOffice</category>
  <category>Produktivität</category>
  <category>Digitale Souveränität</category>
  <guid>https://kantel.github.io/posts/2025082301_libreoffice_25_8/</guid>
  <pubDate>Sat, 23 Aug 2025 15:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025082301_libreoffice_25_8/images/libreofficewoman.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Noch mehr fraktale Bäume mit Python und der Schildkröte</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025082201_fractal_trees/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54695679963/"><img src="https://kantel.github.io/posts/2025082201_fractal_trees/images/fraktalerbaum-b.jpg" class="img-fluid"></a></p>
<p>Meine <a href="https://kantel.github.io/posts/2025073001_fraktaler_baum/">bisherigen</a>, recht gelungenen <a href="https://kantel.github.io/posts/2025080201_arbor_pythagorae/">Experimente</a> mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/turtlepython.html">CPythons Turtle</a> und nahezu identischem Quellcode mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/trinket.html">Trinkets Schildkröte</a> haben mich zu weiteren Versuchen animiert. Dieses Mal habe ich wieder einen fraktalen Baum konstruiert und sowohl in Trinket wie auch in Standard-Python implementiert:</p>
<iframe src="https://trinket.io/embed/python/08915dce7bd0?outputOnly=true&amp;runOption=run&amp;start=result" width="657" height="539" frameborder="0" marginwidth="0" marginheight="0" allowfullscreen="">
</iframe>
<p>Die Idee zu dieser Konstruktion habe ich von hier<sup>1</sup> und der rekursive Quellcode ist meinem <a href="https://kantel.github.io/posts/2025073001_fraktaler_baum/">ersten Beispielen mit fraktalen Bäumen</a> sehr ähnlich, nur daß der »Baum« nun absolut symmetrisch ist:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> turtle</span>
<span id="cb1-2"></span>
<span id="cb1-3">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">640</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span></span>
<span id="cb1-4">factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span></span>
<span id="cb1-5"></span>
<span id="cb1-6">wn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> turtle.Screen()</span>
<span id="cb1-7">wn.setup(width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> WIDTH, height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> HEIGHT, startx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>, starty <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb1-8">wn.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fractal Tree"</span>)   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Für Trinket auskommentieren</span></span>
<span id="cb1-9">wn.colormode(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>)          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Für Trinket auskommentieren</span></span>
<span id="cb1-10">wn.bgcolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">222</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">217</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">177</span>)</span>
<span id="cb1-11">wn.tracer(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-12"></span>
<span id="cb1-13">alice <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> turtle.Turtle()</span>
<span id="cb1-14">alice.speed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Schnelle Geschwindigkeit</span></span>
<span id="cb1-15">alice.hideturtle()</span>
<span id="cb1-16">alice.penup()</span>
<span id="cb1-17">alice.goto(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>)</span>
<span id="cb1-18">alice.left(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Nach oben ausrichten</span></span>
<span id="cb1-19">alice.pendown()</span>
<span id="cb1-20"></span>
<span id="cb1-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> fractal_tree(laenge, tiefe):</span>
<span id="cb1-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> tiefe <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> laenge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Basis der Rekursion</span></span>
<span id="cb1-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb1-24">    alice.pensize(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(laenge<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">42.0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb1-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Farben in Abängigkeit von der Dicke des Stammes</span></span>
<span id="cb1-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> laenge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>:</span>
<span id="cb1-27">        alice.pencolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">139</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">69</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>)</span>
<span id="cb1-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> laenge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:</span>
<span id="cb1-29">        alice.pencolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">107</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">47</span>)</span>
<span id="cb1-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-31">        alice.pencolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">139</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">69</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>)</span>
<span id="cb1-32"></span>
<span id="cb1-33">    alice.forward(laenge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb1-34">    alice.left(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Nach links drehen</span></span>
<span id="cb1-35">    fractal_tree(laenge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> factor, tiefe <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Rekursiver Aufruf</span></span>
<span id="cb1-36">    alice.right(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Nach rechts drehen</span></span>
<span id="cb1-37">    fractal_tree(laenge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> factor, tiefe <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Rekursiver Aufruf</span></span>
<span id="cb1-38">    alice.left(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Zurück zur Ausrichtung des Elternastes</span></span>
<span id="cb1-39">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Auf dem Rückweg durch die Rekursion</span></span>
<span id="cb1-40">    alice.backward(laenge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb1-41"></span>
<span id="cb1-42">fractal_tree(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">650</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb1-43">wn.update()</span>
<span id="cb1-44"></span>
<span id="cb1-45"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I did it, Babe!"</span>)</span>
<span id="cb1-46">wn.mainloop()</span></code></pre></div>
<p>Wie bei meinen anderen Beipielen auch müssen, damit der Code in Trinket lauffähig ist, lediglich die Code-Zeilen <img src="https://latex.codecogs.com/png.latex?7"> und <img src="https://latex.codecogs.com/png.latex?8"> auskommentiert werden.</p>
<p>Nur ist das Ergebnis ein wenig langweilig. Der Baum wirkt nicht sehr natürlich und Ihr könnt so oft den »Run«-Button drücken, wie Ihr wollt, es kommt immer der gleiche Baum dabei heraus.</p>
<p>Daher habe ich bei einem zweiten Versuch das Skript ein wenig aufgehübscht und – in Maßen – den Zufall ein wenig über das Aussehen des Baumes entscheiden lassen:</p>
<iframe src="https://trinket.io/embed/python/f47c933d23ba?outputOnly=true&amp;runOption=run&amp;start=result" width="657" height="539" frameborder="0" marginwidth="0" marginheight="0" allowfullscreen="">
</iframe>
<p>Nun wird der Verzweigungswinkel bei jedem rekusiven Durchlauf leicht abgewandelt und auch die Astlänge ändert sich für jeden Ast ein wenig:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> turtle</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> randint, uniform</span>
<span id="cb2-3"></span>
<span id="cb2-4">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">640</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span></span>
<span id="cb2-5">DELTA_ANGLE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span></span>
<span id="cb2-6"></span>
<span id="cb2-7">wn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> turtle.Screen()</span>
<span id="cb2-8">wn.setup(width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>WIDTH, height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>HEIGHT, startx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>, starty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb2-9">wn.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fractal Tree"</span>)   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Für Trinket auskommentieren</span></span>
<span id="cb2-10">wn.colormode(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>)          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Für Trinket auskommentieren</span></span>
<span id="cb2-11">wn.bgcolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">222</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">217</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">177</span>)</span>
<span id="cb2-12">wn.tracer(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb2-13"></span>
<span id="cb2-14">alice <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> turtle.Turtle()</span>
<span id="cb2-15">alice.speed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Schnelle Geschwindigkeit</span></span>
<span id="cb2-16">alice.hideturtle()</span>
<span id="cb2-17">alice.penup()</span>
<span id="cb2-18">alice.goto(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>)</span>
<span id="cb2-19">alice.left(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Nach oben ausrichten</span></span>
<span id="cb2-20">alice.pendown()</span>
<span id="cb2-21"></span>
<span id="cb2-22"></span>
<span id="cb2-23"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> fractal_tree(laenge, tiefe):</span>
<span id="cb2-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> tiefe <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> laenge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Basis der Rekursion</span></span>
<span id="cb2-25">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb2-26">    alice.pensize(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(laenge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">42.0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb2-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Farben in Abängigkeit von der Dicke des Stammes</span></span>
<span id="cb2-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> laenge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>:</span>
<span id="cb2-29">        alice.pencolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">139</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">69</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>)</span>
<span id="cb2-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> laenge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>:</span>
<span id="cb2-31">        alice.pencolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">107</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">47</span>)</span>
<span id="cb2-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb2-33">        alice.pencolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">139</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">69</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>)</span>
<span id="cb2-34"></span>
<span id="cb2-35">    delta_angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>DELTA_ANGLE, DELTA_ANGLE)</span>
<span id="cb2-36">    factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> uniform(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.55</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.65</span>)</span>
<span id="cb2-37">    alice.forward(laenge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb2-38">    alice.left(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> delta_angle)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Nach links drehen</span></span>
<span id="cb2-39">    fractal_tree(laenge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> factor, tiefe <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Rekursiver Aufruf</span></span>
<span id="cb2-40">    alice.right(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Nach rechts drehen</span></span>
<span id="cb2-41">    fractal_tree(laenge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> factor, tiefe <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Rekursiver Aufruf</span></span>
<span id="cb2-42">    alice.left(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> delta_angle)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Zurück zur Ausrichtung des Elternastes</span></span>
<span id="cb2-43">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Auf dem Rückweg durch die Rekursion</span></span>
<span id="cb2-44">    alice.backward(laenge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb2-45"></span>
<span id="cb2-46"></span>
<span id="cb2-47">fractal_tree(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">650</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb2-48">wn.update()</span>
<span id="cb2-49"></span>
<span id="cb2-50"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I did it, Babe!"</span>)</span>
<span id="cb2-51">wn.mainloop()</span></code></pre></div>
<p>Wenn Ihr nun den »Run«-Button betätigt, erhaltet Ihr bei jedem Durchlauf einen anders aussehenden Baum.</p>
<p>Mit der Konstante <code>DELTA_ANGLE</code> in Zeile&nbsp;<img src="https://latex.codecogs.com/png.latex?5"> könnt Ihr übrigens experimentieren: Je kleiner sie ist, desto mehr gleicht der Baum dem ersten Skript, je größer sie wird, desto bizarrer sieht der Baum aus. Wenn zum Beispiel <code>DELTA_ANGLE = 45</code> gesetzt wird, entstehen Bäume, die so aussehen, als hätte der Nordseewind sie arg zerrupft.</p>
<section id="verwendete-und-weiterführende-literatur" class="level3">
<h3 class="anchored" data-anchor-id="verwendete-und-weiterführende-literatur">Verwendete und weiterführende Literatur</h3>
<ul>
<li>David Peak, Michael Frame: <em>Komplexität – das gezähmte Chaos</em>, Basel (Birkhäuser Verlag) 1995</li>
<li>Daniel Shiffman: <em>The Nature of Code. Simulating Natural Systems with JavaScript</em>, San Francisco CA (no starch press) 2024</li>
<li>Al Sweigart: <em>The Recursive Book of Recursion. Ace the Coding Interview with Python and JavaScript</em>, San Francisco CA (no starch press) 2022</li>
</ul>
<p>Den Quellcode für die Trinket-Versionen <a href="https://trinket.io/python/08915dce7bd0">Fraktaler Baum</a> und <a href="https://trinket.io/python/f47c933d23ba">Fraktaler Baum (2)</a> könnt ihr in meinen Trinkets finden, die Quellcodes für CPython (<a href="https://github.com/kantel/turtlepy/blob/master/sources/trees/fraktaltree1.py">fraktaltree1.py</a> und <a href="https://github.com/kantel/turtlepy/blob/master/sources/trees/fraktaltree2.py">fraktaltree2.py</a>) findet Ihr auch in meinem GitHub-Repositorium.</p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54695679963/">Eine Python und eine Schildkröte unter Bäumen</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>Colored franco-belgian comic style. Illustration of a turte with motorcycle goggles and a python with glasses wandering through a surreal, hexagonal landscape</em>«. Modell: Flux Kontext.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Fußnoten</h2>

<ol>
<li id="fn1"><p>Daniel Shiffman: <em>The Nature of Code</em>, 2024, Seiten 398ff.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Python</category>
  <category>Turtle</category>
  <category>Trinket</category>
  <category>Creative Coding</category>
  <guid>https://kantel.github.io/posts/2025082201_fractal_trees/</guid>
  <pubDate>Fri, 22 Aug 2025 17:25:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025082201_fractal_trees/images/fraktalerbaum.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Anytype-Lobhudelei: Schöner, sicherer, offline-first</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025082001_anytype_tut/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54717881007/"><img src="https://kantel.github.io/posts/2025082001_anytype_tut/images/anytype2-b.jpg" class="img-fluid"></a></p>
<p>Wer – wie ich – nicht genug von <a href="https://anytype.io/">Anytype</a>, meiner digitalen Rumpelkammer und (fast) freien Notion-Alternative bekommen kann, dem sei das Video »<a href="https://www.youtube.com/watch?v=MKvDdsa6oyY">Endlich Leben im Griff 🤓 mit Anytype</a>« von c’t&nbsp;3003 empfohlen, das nicht nur Anytype mit Notion vergleicht und Anytype dabei besser abschneidet, sondern auch gleichzeitig eine Einführung und ein Tutorial in die grundlegenden Funktion des High-End-Zettelkasten ist. Durch dieses Video habe auch ich endlich den Unterschied zwischen <em>Sets</em> und <em>Collections</em> begriffen.</p>
<iframe class="if16_9" src="https://www.youtube.com/embed/MKvDdsa6oyY?si=vry1CFzRrhkyqF74" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p>Ansonsten ist es nicht nur eine ultimative Lobhudelei auf meine digitale Rumpelkammer, sondern vor allem ein Tutorial, das über viele Einstiegshürden hinweghilft. Und wer lieber liest, statt Filmchen zu schauen, kann alternativ das Transkript »<a href="https://www.heise.de/news/Notion-Alternative-Anytype-Schoener-sicherer-offline-first-10349463.html">Notion-Alternative Anytype: Schöner, sicherer, offline-first</a>« auf den Seiten von <em>heise online</em> nutzen.</p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54717881007/">Digitale Rumpelkammer</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>Colored belgian comic style, illustration of an clean shaven man, short white hair, blue eyes, glasses, sits at a desk in front of two huge monitors, there are a few open books on the desk, and large mug of steaming coffee next to them, and a computer keyboard in front of the monitor, on the wall there are many shelves with a lot of files and books, the shelves looks unorganized, the sun shines through a large window</em>«. Modell: Flux Kontext.</p>



 ]]></description>
  <category>Anytype</category>
  <category>Notion</category>
  <category>Digitale Souveränität</category>
  <category>Zettelkasten</category>
  <guid>https://kantel.github.io/posts/2025082001_anytype_tut/</guid>
  <pubDate>Wed, 20 Aug 2025 14:05:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025082001_anytype_tut/images/anytype2.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Aus meiner digitalen Rumpelkammer: Anytype Desktop 0.48 freigegeben</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025081301_anytype_048/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54719044550/"><img src="https://kantel.github.io/posts/2025081301_anytype_048/images/anytype-b.jpg" class="img-fluid"></a></p>
<p><a href="https://anytype.io/">Anytype</a>, die <a href="https://blog.anytype.io/our-open-philosophy/">freie</a>, außerhalb der USA, nämlich in der Schweiz (und damit DSGVO-konform) beheimatete Notion-Alternative, ist nicht nur bei mir, sondern – wenn ich meinem <del>Geißenpeter</del> <a href="https://www.goatcounter.com/">Neugiertool</a> trauen darf – auch bei Euch sehr beliebt. Daher will ich Euch die Nachricht nicht vorenthalten, daß von dem Teil gestern die Version 0.48 Desktop Beta (August&nbsp;2025) freigegeben wurde:</p>
<iframe class="if16_9" src="https://www.youtube.com/embed/iRUjGENs7eQ?si=yvB21Iqrdd8hTQsT" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p>Wie bei jedem Update gibt die fokussierte (und personifizierte) Neugier <em>(Focused Curiosity)</em> in <a href="https://www.youtube.com/watch?v=iRUjGENs7eQ">einem YouTube-Video</a> einen Überblick über die wichtigsten Neuerungen. Dieses Mal ging es um den Feinschliff der App. Bei der Überarbeitung wurde der Schwerpunkt auf die Stabilität und auf kleinere Verbesserungen gelegt.</p>
<p>Wer lieber liest, statt Filmchen zu schauen, findet die Änderung aber auch in <a href="https://community.anytype.io/t/anytype-desktop-0-48-0-released/28523">diesem Artikel</a> gelistet.</p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54719044550/">Digitale Rumpelkammer</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>Colored belgian comic style, illustration of an clean shaven man, short white hair, blue eyes, glasses, sits at a desk in front of two huge monitors, there are a few open books on the desk, and large mug of steaming coffee next to them, and a computer keyboard in front of the monitor, on the wall there are many shelves with a lot of files and books, the shelves looks unorganized, the sun shines through a large window</em>«. Modell: Flux Kontext.</p>



 ]]></description>
  <category>Anytype</category>
  <category>Digitale Souveränität</category>
  <category>Zettelkasten</category>
  <guid>https://kantel.github.io/posts/2025081301_anytype_048/</guid>
  <pubDate>Wed, 13 Aug 2025 18:20:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025081301_anytype_048/images/anytype.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Ein Schritt in die Digitale Souveränität mit QOwnNotes? Wohl eher nicht</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025081101_qownnotes/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54468940209/"><img src="https://kantel.github.io/posts/2025081101_qownnotes/images/qownnote-b.jpg" class="img-fluid"></a></p>
<p><a href="https://en.wikipedia.org/wiki/QOwnNotes">QOwnNotes</a> ist ein freier (GPL) und kostenloser Open-Source-Notizblock im Klartextformat. Das Programm unterstützt Markdown und enthält einen To-Do-Listen-Manager, der unter FreeBSD, Linux, macOS und Windows funktioniert. Das Programm hatte ich schon länger auf meiner Testliste und als vor ein paar Tagen mir die Meldung in meinen Feedreader schneite, daß es nun auch ein <em><a href="https://www.qownnotes.org/blog/2025-07-22-Universal-binary-for-macOS.html">Universal binary for macOS</a></em> gäbe, hatte ich mich endlich zu einem Test entschlossen.</p>
<p><a href="https://www.qownnotes.org/">QOwnNotes</a> ist nämlich vor allen deswegen interessant, weil es auch optional mit den Notiz-Anwendungen von ownCloud oder <a href="https://nextcloud.com/de/">Nextcloud</a> zusammenarbeiten soll. Und seit <a href="https://kantel.github.io/posts/2025042302_nextcloud/">April dieses Jahres</a> werkelt bei mir still und unauffällig, aber zuverlässig eine Nextcloud-Instanz von <a href="https://tab.digital/">Tab Digital</a> als <a href="http://cognitiones.kantel-chaos-team.de/webworking/webservices/dropbox.html">Dropbox</a>-Replacement im Hintergrund. <a href="https://cloud.tab.digital/companyprivacypolicy">Die Firma sitzt in Riga, der Hauptstadt von Lettland, ihre Server stehen in den Niederlanden</a> und die <a href="https://de.wikipedia.org/wiki/Nextcloud">Software</a> ist OpenSource und DSGVO-konform. Und als <a href="https://cloud.tab.digital/de">Cloud-Lösung</a> gibt es von Tab-Digital eine <a href="https://de.wikipedia.org/wiki/Nextcloud">kostenlose Tier mit 8&nbsp;Gigabyte Speicher</a>, das ist weit mehr, als sich in all den vergangenen Jahren in meiner Tropfenschachtel angesammelt hatte.</p>
<p>Wenn QOwnNotes das hält, was es verspricht, würde es doch prima in meine eigene, digital souveräne Cloud passen und könnte vielleicht auch das von mir bisher als <a href="https://kantel.github.io/posts/2025050203_joplin_3_3_9/">digitalen Zettelkasten</a> verwendete <a href="http://cognitiones.kantel-chaos-team.de/webworking/staticsites/joplin.html">Joplin</a> ablösen. Ja, wenn&nbsp;… erste Versuche verliefen jedenfalls enttäuschend:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/54713580322/"><img src="https://kantel.github.io/posts/2025081101_qownnotes/images/qownnotes.jpg" class="img-fluid figure-img" alt="Formeln und Fußnoten in QOwnNotes"></a></p>
<figcaption>Formeln und Fußnoten in QOwnNotes</figcaption>
</figure>
</div>
<p>QOwnNotes beherrscht weder Fußnoten noch mathematischen Formelsatz. Der Ehrlichkeit halber muß ich zugeben, daß das im <a href="https://www.qownnotes.org/getting-started/markdown.html">Handbuch von QOwnNotes</a> auch nirgendwo versprochen wird, auch wenn Googles KI da eine Integration von <a href="https://de.wikipedia.org/wiki/MathJax">MathJax</a> herbeihalluziniert, sogar mit konkreten Schritten, wie MathJax über das Einstellungs-Menü von QOwnNotes aktiviert werden kann. Nur, es gibt diese angesprochenen Checkboxen nirgendwo im Einstellungs-Menü. Ich hatte sowieso in den letzten Monaten die Erfahrung gemacht, daß Googles KI sehr gerne etwas nicht Vorhandenes herbeihalluziniert und somit ein schlechter Ratgeber ist.</p>
<p>Doch nun zum Vergleich: So sehen Formeln und Fußnoten in Joplin aus:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/54713580317/"><img src="https://kantel.github.io/posts/2025081101_qownnotes/images/joplin.jpg" class="img-fluid figure-img" alt="Formeln und Fußnoten in Joplin"></a></p>
<figcaption>Formeln und Fußnoten in Joplin</figcaption>
</figure>
</div>
<p>Wer – wie ich – weder auf mathematische Formeln noch auf Fußnoten verzichten kann, für den ist QOwnNotes daher kein Schritt in Richtung Digitale Souveränität. Das ist eigentlich kein Beinbruch, denn ich bin mit Joplin zufrieden. Auch wenn ich gerne die Möglichkeit von internen Links hätte und meine Notizen auch ebenso gerne in meiner NextCloud-Instanz ohne einen expliziten Markdown-Export aus Joplin, aber auch ohne den Joplin-eigenen Zusatzdateien-Overkill ablegen würde. Wenn also jemand von Euch da draußen eine Idee hat? <em>Still digging!</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54468940209/">A Man in an Office</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>colored belgian comic style, illustration of an clean shaven man, short white hair, blue eyes, glasses, sits at a desk in front of two huge monitors, there are a few open books on the desk, and large mug of steaming coffee next to them, and a computer keyboard in front of the monitor, on the wall there are many shelves with a lot of files and books, the shelves looks unorganized, the sun shines through a large window</em>«. Modell: Flux (Pro).</p>



 ]]></description>
  <category>Digitale Souveränität</category>
  <category>Joplin</category>
  <category>Zettelkasten</category>
  <category>Nextcloud</category>
  <category>QOwnNotes</category>
  <guid>https://kantel.github.io/posts/2025081101_qownnotes/</guid>
  <pubDate>Mon, 11 Aug 2025 18:20:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025081101_qownnotes/images/qownnote.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Arbor Pythagorae mit CPythons Schildkröte und mit Trinkets Turtle</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025080201_arbor_pythagorae/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54695317548/"><img src="https://kantel.github.io/posts/2025080201_arbor_pythagorae/images/arborpythagorae-b.jpg" class="img-fluid"></a></p>
<p>Nachdem mein <a href="https://kantel.github.io/posts/2025073001_fraktaler_baum/">letztes Experiment</a> mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/turtlepython.html">CPythons Turtle</a> und dem nahezu identischen Quellcode in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/trinket.html">Trinket</a> so erfolgreich verlaufen war, hatte ich Blut geleckt und wollte eines meiner Lieblingsobjekte, den <a href="https://de.wikipedia.org/wiki/Pythagoras-Baum">Pythagoras-Baum</a>, auch mit Pythons Turtle (und parallel dazu auch mit Trinkets Schildkröte) realisieren. Zwar hatte ich ihn <a href="https://kantel.github.io/posts/2025071101_pythagoras_baum_py5/">vor etwa drei Wochen</a> mit einem Algorithmus, der ohne Turtle-Kommandos auskommt, in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/py5.html">Py5</a>, dem Python3-Port von Processing, implementiert, und <a href="https://kantel.github.io/posts/2025060201_spass_mit_tigerjython/">davor auch schon einmal</a> mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/tigerjython.html">TigerJythons</a> Turtle, aber die Implementierung der Schildkröte in TigerJython weicht doch stark von Pythons Turtle ab. Daher wollte ich den Pythagoras-Baum einfach auch mal mit den Kommandos realisieren, die Python in seiner Standard-Bibliothek zur Verfügung stellt, ohne daß man zusätzliche Module installieren muß.</p>
<p>In den folgenden Abschnitten ist jeweils das Trinket-Skript in diese Seiten eingebettet, das Ihr mit »Run« neu starten könnt. Zwar habe ich noch keine weiteren Interaktionen eingeplant, aber »Weil es geht!« ist doch auch ein hinreichender Grund für dieses Experiment.&nbsp;🤓</p>
<section id="der-symmetrische-pythagoras-baum" class="level2">
<h2 class="anchored" data-anchor-id="der-symmetrische-pythagoras-baum">Der symmetrische Pythagoras-Baum</h2>
<iframe src="https://trinket.io/embed/python/6de8871e3e4d?outputOnly=true&amp;runOption=run&amp;start=result" width="657" height="539" frameborder="0" marginwidth="0" marginheight="0" allowfullscreen="">
</iframe>
<p>Der symmetrische Pythagoras-Baum ist die einfachste Form der Realisierung, weil hier die rechte wie die linke Seite gleichbehandelt werden, es also keine Unterscheidungen gibt. Daher ist der Quellcode auch entsprechend kurz geraten:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Symmetrischer Pythagorasbaum</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> turtle <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> t</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb1-4"></span>
<span id="cb1-5">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">640</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span></span>
<span id="cb1-6"></span>
<span id="cb1-7">palette <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">54</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">51</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">46</span>),</span>
<span id="cb1-8">           (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">105</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">215</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">158</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>),</span>
<span id="cb1-9">           (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">180</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">144</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">55</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">140</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">82</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">48</span>)]</span>
<span id="cb1-10"></span>
<span id="cb1-11">wn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> t.Screen()</span>
<span id="cb1-12">wn.setup(width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> WIDTH, height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> HEIGHT, startx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>, starty <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb1-13">wn.colormode(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>)               <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># für Trinket auskommentieren</span></span>
<span id="cb1-14">wn.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Arbor Pythagorae 1"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># für Trinket auskommentieren</span></span>
<span id="cb1-15">wn.bgcolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">230</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">226</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">204</span>)</span>
<span id="cb1-16"></span>
<span id="cb1-17">p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> t.Turtle()</span>
<span id="cb1-18">p.speed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-19">p.pencolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dunkles Grün</span></span>
<span id="cb1-20">p.setheading(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>)</span>
<span id="cb1-21"></span>
<span id="cb1-22"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> tree(s):</span>
<span id="cb1-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:</span>
<span id="cb1-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb1-25">    quadrat(s)</span>
<span id="cb1-26">    p.forward(s)</span>
<span id="cb1-27">    s1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>math.sqrt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-28">    p.left(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>)</span>
<span id="cb1-29">    tree(s1)</span>
<span id="cb1-30">    p.right(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>)</span>
<span id="cb1-31">    p.forward(s1)</span>
<span id="cb1-32">    tree(s1)</span>
<span id="cb1-33">    p.back(s1)</span>
<span id="cb1-34">    p.left(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>)</span>
<span id="cb1-35">    p.back(s)</span>
<span id="cb1-36"></span>
<span id="cb1-37"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> quadrat(s):</span>
<span id="cb1-38">    p.fillcolor(palette[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(palette) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)])</span>
<span id="cb1-39">    p.begin_fill()</span>
<span id="cb1-40">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>):</span>
<span id="cb1-41">        p.forward(s)</span>
<span id="cb1-42">        p.right(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>)</span>
<span id="cb1-43">    p.end_fill()</span>
<span id="cb1-44"></span>
<span id="cb1-45">p.penup()</span>
<span id="cb1-46">p.setpos(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>HEIGHT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb1-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bildschirm-Refresh ausschalten</span></span>
<span id="cb1-48">wn.tracer(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-49">p.pendown()</span>
<span id="cb1-50">tree(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>)</span>
<span id="cb1-51">p.hideturtle()</span>
<span id="cb1-52"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bildschirm-Refresh wieder einschalten</span></span>
<span id="cb1-53">wn.update()</span>
<span id="cb1-54"></span>
<span id="cb1-55"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I did it, Babe!"</span>)</span>
<span id="cb1-56"></span>
<span id="cb1-57">wn.mainloop()</span></code></pre></div>
<p>Die Implementierung in Trinket unterscheidet sich nur dadurch, daß die Zeilen <img src="https://latex.codecogs.com/png.latex?13"> und <img src="https://latex.codecogs.com/png.latex?14"> auskommentiert oder gelöscht werden müssen. Außerdem sind in Zeile <img src="https://latex.codecogs.com/png.latex?12"> die Parameter <code>startx</code> und <code>starty</code> sinnlos, denn sie sind nur dafür gedacht, die Position des Ausgabefenster festzulegen (in diesem Fall auf meinen zweiten Monitor). Aber Trinket ignoriert sie einfach, Ihr müsst sie also nicht löschen.</p>
</section>
<section id="der-asymmetrische-pythagoras-baum" class="level2">
<h2 class="anchored" data-anchor-id="der-asymmetrische-pythagoras-baum">Der asymmetrische Pythagoras-Baum</h2>
<iframe src="https://trinket.io/embed/python/73d448ee70e2?outputOnly=true&amp;runOption=run&amp;start=result" width="657" height="539" frameborder="0" marginwidth="0" marginheight="0" allowfullscreen="">
</iframe>
<p>Der Code für den asymmetrischen Pythagoras-Baum unterscheidet sich doch deutlich von dem des symmetrischen Baums (im Gegensatz zu der <a href="https://kantel.github.io/posts/2025071101_pythagoras_baum_py5/">Implementierung ohne Turtle in Py5</a>, wo im Prinzip nur die Winkelkonstanten geändert werden mußten – alle anderen Änderungen waren nur kosmetischer Natur).</p>
<p>Während der symmetrische Pythagorasbaum die Rekursion stoppte, wenn die Länge der einzelnen Schritte kleiner <img src="https://latex.codecogs.com/png.latex?2"> wurde (die Rekursionstiefe also von der Seitenlänge des Startquadrates abhing), wird beim asymmetrischen Baum die Rekursionstiefe explizit festgelegt und als Parameter der Funktion <code>tree()</code> mit übergeben. Das ist deshalb notwendig, weil die rechte und die linke Seite des Baumes unterschiedlich behandelt werden. Während der linken Seite bei jeder Rekursion eine Seitenlänge von <img src="https://latex.codecogs.com/png.latex?s%20%5Csqrt(%5Cfrac%7B3%7D%7B2%7D)"> zugewiesen wird, bekommt die rechte Seite jeweils eine neue Seitenlänge von <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7Bs%7D%7B2%7D">.</p>
<p>Da es für mich daher schwierig war, zu entscheiden, welche Seitenlänge (die rechte oder die linke?) für den Abbruch der Rekursion zuständig sein soll, habe ich mich entschieden, einen Rekursionslevel als Abbruchkriterium mitzugeben.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Asymmetrischer Pythagorasbaum</span></span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> turtle <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> t</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb2-4"></span>
<span id="cb2-5">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">640</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span></span>
<span id="cb2-6">REC_LEVEL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Rekursionstiefe</span></span>
<span id="cb2-7"></span>
<span id="cb2-8">palette <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">54</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">51</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">46</span>),</span>
<span id="cb2-9">           (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">105</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">215</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">158</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>),</span>
<span id="cb2-10">           (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">180</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">144</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">55</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">140</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">82</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">48</span>)]</span>
<span id="cb2-11"></span>
<span id="cb2-12">wn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> t.Screen()</span>
<span id="cb2-13">wn.setup(width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> WIDTH, height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> HEIGHT, startx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>, starty <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb2-14">wn.colormode(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>)               <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># für Trinket auskommentieren</span></span>
<span id="cb2-15">wn.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Arbor Pythagorae 2"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># für Trinket auskommentieren</span></span>
<span id="cb2-16">wn.bgcolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">230</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">226</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">204</span>)</span>
<span id="cb2-17"></span>
<span id="cb2-18">p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> t.Turtle()</span>
<span id="cb2-19">p.speed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb2-20">p.pencolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dunkles Grün</span></span>
<span id="cb2-21">p.setheading(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>)</span>
<span id="cb2-22"></span>
<span id="cb2-23"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> tree(s, level):</span>
<span id="cb2-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> level <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb2-25">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb2-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb2-27">        quadrat(s)</span>
<span id="cb2-28">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Linke Seite</span></span>
<span id="cb2-29">        ls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>math.sqrt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-30">        p.forward(s)</span>
<span id="cb2-31">        p.left(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>)</span>
<span id="cb2-32">        p.forward(s)</span>
<span id="cb2-33">        p.right(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>)</span>
<span id="cb2-34">        p.forward(ls)</span>
<span id="cb2-35">        p.left(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>)</span>
<span id="cb2-36">        tree(ls, level <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-37">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Rechte Seite</span></span>
<span id="cb2-38">        rs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-39">        p.right(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">180</span>)</span>
<span id="cb2-40">        p.forward(rs)</span>
<span id="cb2-41">        p.left(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>)</span>
<span id="cb2-42">        tree(rs, level <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-43">        p.left(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>)</span>
<span id="cb2-44">        p.back(s)</span>
<span id="cb2-45"></span>
<span id="cb2-46"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> quadrat(s):</span>
<span id="cb2-47">    p.fillcolor(palette[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(palette) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)])</span>
<span id="cb2-48">    p.begin_fill()</span>
<span id="cb2-49">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>):</span>
<span id="cb2-50">        p.forward(s)</span>
<span id="cb2-51">        p.left(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>)</span>
<span id="cb2-52">    p.end_fill()</span>
<span id="cb2-53"></span>
<span id="cb2-54">p.penup()</span>
<span id="cb2-55">p.setpos(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>HEIGHT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb2-56"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bildschirm-Refresh ausschalten</span></span>
<span id="cb2-57">wn.tracer(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb2-58">p.pendown()</span>
<span id="cb2-59"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Für eine Rekursionstiefe &gt; 14 braucht man schon sehr viel Geduld</span></span>
<span id="cb2-60">tree(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, REC_LEVEL)</span>
<span id="cb2-61">p.hideturtle()</span>
<span id="cb2-62"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bildschirm-Refresh wieder einschalten</span></span>
<span id="cb2-63">wn.update()</span>
<span id="cb2-64"></span>
<span id="cb2-65"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I did it, Babe!"</span>)</span>
<span id="cb2-66"></span>
<span id="cb2-67">wn.mainloop()</span></code></pre></div>
<p>Auch hier gilt für die Trinket-Version für die Zeilen <img src="https://latex.codecogs.com/png.latex?13">, <img src="https://latex.codecogs.com/png.latex?14"> und <img src="https://latex.codecogs.com/png.latex?15"> was ich oben schon für die Zeilen <img src="https://latex.codecogs.com/png.latex?12"> bis <img src="https://latex.codecogs.com/png.latex?14"> geschrieben hatte: Sie können auskommentiert werden, respektive bei der <code>wn.setup()</code>-Zeile werden die letzten beiden Parameter von Trinket einfach ignoriert.</p>
<p>Wie schon beim symmetrischen Pythagoras-Baum sind die Werte in <code>p.setpos()</code> und die Seitenlänge des Startquadrats in <code>tree()</code> kosmetischer Natur. Ich habe durch wildes Experimentieren herausgefunden, mit welchen Werten der Baum am Besten ins Fenster passt.</p>
</section>
<section id="die-farben" class="level2">
<h2 class="anchored" data-anchor-id="die-farben">Die Farben</h2>
<p>Damit meine Pythagoras-Skripte nicht immer gleich aussehen, habe ich dieses Mal eine <a href="http://cognitiones.kantel-chaos-team.de/multimedia/farbpaletten/malewitsch.html">andere Farbpalette</a> ausgewählt. Sie ist inspiriert von Werken des russisch-sowjetischen Malers <em><a href="https://de.wikipedia.org/wiki/Kasimir_Sewerinowitsch_Malewitsch">Kasimir Malewitsch</a></em> (1879-1935), eines Hauptvertreters der Russischen Avantgarde, Wegbereiter des Konstruktivismus und Begründer des Suprematismus. Ich finde die Farben passen sehr gut zum extrem künstlich konstruierten Pythagoras-Baum.</p>
<p>Den Quellcode findet Ihr natürlich wieder in meinem GitHub-Repositorium (<a href="https://github.com/kantel/turtlepy/blob/master/sources/trees/arborpythagorae1.py">arborpythagorae1.py</a> und <a href="https://github.com/kantel/turtlepy/blob/master/sources/trees/arborpythagorae2.py">arborpythagorae2.py</a>) und die Trinkets für <a href="https://trinket.io/python/6de8871e3e4d">Arbor Pythagorae 1</a> und <a href="https://trinket.io/python/73d448ee70e2">Arbor Pythagorae 2</a> könnt Ihr von meinem Trinket-Account remixen. Stellt damit an, was Ihr wollt und habt Spaß damit.</p>


</section>

 ]]></description>
  <category>Python</category>
  <category>Turtle</category>
  <category>Trinket</category>
  <category>Creative Coding</category>
  <guid>https://kantel.github.io/posts/2025080201_arbor_pythagorae/</guid>
  <pubDate>Sat, 02 Aug 2025 17:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025080201_arbor_pythagorae/images/arborpythagorae.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Die Zahlen für den verregneten Juli</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025080101_mediadaten/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54693501575/"><img src="https://kantel.github.io/posts/2025080101_mediadaten/images/regendachs-b.jpg" class="img-fluid"></a></p>
<p>Entgegen meiner <a href="https://kantel.github.io/posts/2025070101_mediadaten/">optimistischen Einschätzung zu Beginn des letzten Monats</a> hat uns der Juli nicht gerade mit hochsommerlichen Tagen verwöhnt. Dennoch ist es wieder Zeit für die Zahlen, die hochtrabend manches Mal auch <em>Mediadaten</em> genannt werden: Im Juli 2025 hatte der <em>Schockwellenreiter</em> laut seinem nicht immer wirklich zuverlässigen (er war auch schon mal für ein paar Tage ausgefallen), aber dafür (hoffentlich!) datenschutzkonformen <del>Geißenpeter</del> Neugiertool exakt <strong>6.821&nbsp;Seitenaufrufe</strong>. Wie immer täuscht die Exaktheit der Ziffer eine Genauigkeit der Zahl nur vor, trotzdem freue ich mich über jede Besucherin und jeden Besucher und bedanke mich bei allen meinen Leserinnen und Lesern.</p>
<p>😎 &nbsp; <em>Bleibt mir gewogen!</em></p>
<p>Die <em>Top Five</em> des verregneten Monats sind wenig überraschend:</p>
<ol type="1">
<li>Immer noch – wie schon seit Monaten – liegt der Beitrag »<a href="https://kantel.github.io/posts/2024011002_ki_ohne_zensor/">Bildgeneratoren und Künstliche Intelligenz – ohne Zensoren</a>« vom 10. Januar 2024 weit vorne.</li>
<li>Dann folgt – ebenfalls schon seit Monaten – der Artikel über meine <em>neue digitale Rumpelkammer</em> »<a href="https://kantel.github.io/posts/2024081201_anytype/">All about Anytype</a>« vom 12. August 2024.</li>
<li>Ebenfalls viele Freunde gefunden hatte mein Hinweis vom 1. Juli 2025, daß man »<a href="https://kantel.github.io/posts/2025070102_history_math_beauty/">Die Geschichte der Schönheit in der Mathematik</a>« für umme lesen kann.</li>
<li>Meine am 6. Juli 2025 gestellte Frage, ob <a href="https://kantel.github.io/posts/2025070601_escooter/">es denn nur noch Gehirnamputierte in Neukölln</a> gäbe, fand offensichtlich viel Zustimmung.</li>
<li>Und <em>last but not least</em> noch der Hinweis auf Lesefutter vom 9.&nbsp;Juli&nbsp;2025: »<a href="https://kantel.github.io/posts/2025070901_fraktale_dynamische_systeme/">Neu in meiner Bibliothek: Fraktale und Dynamische Systeme (2 Bände)</a>«.</li>
</ol>
<p>Dieser fünfte Platz im Ranking wird sicher meinen schon so oft zitierten »Freund aus Bremen« sehr freuen.</p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54693501575/">Ein Dachs im Regen</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>Colored Franco-Belgian Comic Style. Illustration of a badger in a red dressing gown sits in the afternoon at a café table in front of a large window with a laptop. There is a steaming pot of coffee on the table. Outside, it’s raining, and drops are falling on the windowpane and into large puddles on the street</em>«. Modell: Flux (Pro).</p>



 ]]></description>
  <category>Mediadaten</category>
  <category>Interna</category>
  <guid>https://kantel.github.io/posts/2025080101_mediadaten/</guid>
  <pubDate>Fri, 01 Aug 2025 16:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025080101_mediadaten/images/regendachs.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Ein fraktaler Baum mit Pythons Turtle</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025073001_fraktaler_baum/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54680488356/"><img src="https://kantel.github.io/posts/2025073001_fraktaler_baum/images/fractaltree2-b.jpg" class="img-fluid"></a></p>
<p>In diesem Beitrag möchte ich wieder Pythons Turtle bemühen, um damit fraktale, selbstähnliche Bäume zu erzeugen. Und auch wenn ich große Sympathien für die Turtle-Implementierung in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/tigerjython.html">TigerJython</a> habe, ihr Nachteil ist, daß sie große Unterschiede zu der <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/turtlepython.html">Turtle-Implementierung in Standard-Python</a> besitzt. Daher habe ich mich bei diesem Beispiel entschieden, <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/trinket.html">Trinkets</a>-Turtle wieder hervorzukramen, da ihre Implementierung sich – bis auf <a href="https://kantel.github.io/posts/2023031101_trinket_turtle_ontimer/">wenige Ausnahmen</a> – streng an CPythons Turtle orientiert. In der Regel können die Programme Eins-zu-Eins übernommen werden.</p>
<iframe src="https://trinket.io/embed/python/95628cb89c3f?outputOnly=true&amp;runOption=run&amp;start=result" width="657" height="539" frameborder="0" marginwidth="0" marginheight="0" allowfullscreen="">
</iframe>
<p>Also habe ich erst einmal einen perfekt selbstähnlichen Baum konstruiert. Es ist ein rekursiver Aufruf und bei der Implementierung habe ich mich an <em>Al Sweigarts</em> wunderbarem Buch<sup>1</sup> orientiert, allerdings konnte ich mit Hilfe von Trinket auch ohne JavaScript ein im Browser lauffähiges Programm erzeugen.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> turtle</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> randint</span>
<span id="cb1-3"></span>
<span id="cb1-4">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">640</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span></span>
<span id="cb1-5">LEFT_ANGLE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb1-6">LEFT_DECREASE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span>
<span id="cb1-7">RIGHT_ANGLE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb1-8">RIGHT_DECREASE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span>
<span id="cb1-9"></span>
<span id="cb1-10">wn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> turtle.Screen()</span>
<span id="cb1-11">wn.setup(width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> WIDTH, height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> HEIGHT)</span>
<span id="cb1-12">wn.setworldcoordinates(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, WIDTH, HEIGHT)</span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># wn.title("Fractal Tree")</span></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># wn.colormode(255)</span></span>
<span id="cb1-15">wn.bgcolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">210</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">219</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">142</span>)</span>
<span id="cb1-16">wn.tracer(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-17"></span>
<span id="cb1-18">alice <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> turtle.Turtle()</span>
<span id="cb1-19">alice.speed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-20">alice.hideturtle()</span>
<span id="cb1-21"></span>
<span id="cb1-22"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw_branch(start_position, direction, branch_length):</span>
<span id="cb1-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> branch_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:</span>
<span id="cb1-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb1-25">    </span>
<span id="cb1-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Startposition und initiale Richtung</span></span>
<span id="cb1-27">    alice.penup()</span>
<span id="cb1-28">    alice.goto(start_position)</span>
<span id="cb1-29">    alice.setheading(direction)</span>
<span id="cb1-30">    </span>
<span id="cb1-31">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Zeichne einen Zweig</span></span>
<span id="cb1-32">    alice.pendown()</span>
<span id="cb1-33">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Die Dicke des Zweiges beträgt 1/7 der Zweiglänge, aber mindestens 1</span></span>
<span id="cb1-34">    alice.pensize(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(branch_length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb1-35">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Farben in Abängigkeit von der Dicke des Stammes</span></span>
<span id="cb1-36">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> branch_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>:</span>
<span id="cb1-37">        alice.pencolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">139</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">69</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>)</span>
<span id="cb1-38">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> branch_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">65</span>:</span>
<span id="cb1-39">        alice.pencolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">139</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">115</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>)</span>
<span id="cb1-40">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> branch_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>:</span>
<span id="cb1-41">        alice.pencolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">139</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">134</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">78</span>)</span>
<span id="cb1-42">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> branch_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">55</span>:</span>
<span id="cb1-43">        alice.pencolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">189</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">183</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">110</span>)</span>
<span id="cb1-44">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> branch_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>:</span>
<span id="cb1-45">        alice.pencolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">107</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">47</span>)</span>
<span id="cb1-46">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> branch_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>:</span>
<span id="cb1-47">        alice.pencolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">107</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">142</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span>)</span>
<span id="cb1-48">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-49">        alice.pencolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-50">        </span>
<span id="cb1-51">    alice.forward(branch_length)</span>
<span id="cb1-52">    </span>
<span id="cb1-53">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Speichere die Position am Ende des Zweiges</span></span>
<span id="cb1-54">    end_position <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> alice.position()</span>
<span id="cb1-55">    left_direction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> direction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> LEFT_ANGLE</span>
<span id="cb1-56">    left_branch_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> branch_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> LEFT_DECREASE</span>
<span id="cb1-57">    right_direction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> direction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> RIGHT_ANGLE</span>
<span id="cb1-58">    right_branch_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> branch_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> RIGHT_DECREASE</span>
<span id="cb1-59">    </span>
<span id="cb1-60">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Rekursion</span></span>
<span id="cb1-61">    draw_branch(end_position, left_direction, left_branch_length)</span>
<span id="cb1-62">    draw_branch(end_position, right_direction, right_branch_length)</span>
<span id="cb1-63">    </span>
<span id="cb1-64"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (Pseudo-) Zufallswert für die Startlänge des Stamms</span></span>
<span id="cb1-65">start_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>)</span>
<span id="cb1-66"></span>
<span id="cb1-67"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Zeichne den Baum</span></span>
<span id="cb1-68">draw_branch((WIDTH<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, start_length)</span>
<span id="cb1-69">wn.update()</span>
<span id="cb1-70"></span>
<span id="cb1-71"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I did it, Babe!"</span>)</span>
<span id="cb1-72">wn.mainloop()</span></code></pre></div>
<p>Das Programm ist fast ohne Änderung auch in CPython lauffähig (siehe <a href="https://www.flickr.com/photos/schockwellenreiter/54680488356/">Screenshot</a> im Bannerbild oben), lediglich die beiden oben auskommentierten Zeilen</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1">wn.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fractal Tree"</span>)</span>
<span id="cb2-2">wn.colormode(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>)</span></code></pre></div>
<p>müssen in dem CPython-Skript aktiviert werden<sup>2</sup>.</p>
<p>Jeder Durchlauf erzeugt einen neuen Baum (einfach auf den »Run«-Button klicken). Die Paramenter zu Beginn des Programms (<code>LEFT_ANGLE</code>, <code>LEFT_DECREASE</code>, <code>RIGHT_ANGLE</code> und <code>RIGHT_DECREASE</code>) sind zwar zufällig, aber durch wildes Experimentieren so ausgewählt, daß die meisten Bäume in das Fenster passen.</p>
<p>Die Bäume sehen ja schon sehr nett, aber nicht sehr natürlich aus, da jede Verzweigung eine exakte, wenn auch verkleinerte Kopie der ursprünglichen Verzweigung ist. Das macht den Baum zwar perfekt selbstähnlich, aber solche perfekte Selbstähnlichkeit kommt in der Natur selten vor.</p>
<iframe src="https://trinket.io/embed/python/bcef87d53b36?outputOnly=true&amp;runOption=run&amp;start=result" width="657" height="539" frameborder="0" marginwidth="0" marginheight="0" allowfullscreen="">
</iframe>
<p>Um die erzeugten Bäume natürlicher aussehen zu lassen, habe ich in einer zweiten Version des Programms die Deklaration für <code>LEFT_ANGLE</code>, <code>LEFT_DECREASE</code>, <code>RIGHT_ANGLE</code> und <code>RIGHT_DECREASE</code> gelöscht und dafür den Abschnitt</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Speichere die Position am Ende des Zweiges</span></span>
<span id="cb3-2">    end_position <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> alice.position()</span>
<span id="cb3-3">    left_direction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> direction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb3-4">    left_branch_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> branch_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span>
<span id="cb3-5">    right_direction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> direction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb3-6">    right_branch_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> branch_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span></code></pre></div>
<p>wie oben geändert. Dadurch wird jede Verzweigung zufällig erzeugt und der Baum sieht schon viel natürlicher aus.</p>
<section id="verwendete-und-weiterführende-literatur" class="level3">
<h3 class="anchored" data-anchor-id="verwendete-und-weiterführende-literatur">Verwendete und weiterführende Literatur</h3>
<ul>
<li>Karl-Heinz Becker, Michael Dörfler: <em>Fraktale und Dynamische Systeme. Computergrafische Experimente mit Processing</em>, Bremen (Kindle Direct Publishing) 2025</li>
<li>David Peak, Michael Frame: <em>Komplexität – das gezähmte Chaos</em>, Basel (Birkhäuser Verlag) 1995</li>
<li>Heinz-Otto Peitgen, Hartmut Jürgens und Dietmar Saupe: <em>Bausteine des Chaos – Fraktale</em>, Berlin, Heidelberg (Springer) und Stuttgart (Klett-Cotta) 1992</li>
<li>Heinz-Otto Peitgen, Hartmut Jürgens und Dietmar Saupe: <em>Chaos – Bausteine der Ordnung</em>, Berlin, Heidelberg (Springer) und Stuttgart (Klett-Cotta) 1994</li>
<li>Al Sweigart: <em>The Recursive Book of Recursion. Ace the Coding Interview with Python and JavaScript</em>, San Francisco CA (no starch press) 2022</li>
</ul>
<p>Den Quellcode für die Trinket-Versionen <a href="https://trinket.io/python/95628cb89c3f">Recursive Tree 1</a> und <a href="https://trinket.io/python/bcef87d53b36">Recursive Tree 2</a> könnt ihr in meinen Trinkets finden, die Quellcodes für CPython (<a href="https://github.com/kantel/pythoncuriosa/blob/main/turtle/fractaltree1.py">fractatree1.py</a> und <a href="https://github.com/kantel/pythoncuriosa/blob/main/turtle/fractaltree2.py">fractaltree2.py</a>) findet Ihr in meinem GitHub-Repositorium.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Fußnoten</h2>

<ol>
<li id="fn1"><p>Al Sweigart: <em>The Recursive Book of Recursion. Ace the Coding Interview with Python and JavaScript</em>, San Francisco (no starch press) 2022, S. 187ff.↩︎</p></li>
<li id="fn2"><p>Die Zeile <code>wn.title("Fractal Tree")</code> ist optional, ohne die Zeile <code>wn.colormode(255)</code> bricht die CPython-Version aber mit einer Fehlermeldung ab.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Python</category>
  <category>Turtle</category>
  <category>Trinket</category>
  <category>Mathematik</category>
  <category>Dynamische Systeme</category>
  <category>Creative Coding</category>
  <guid>https://kantel.github.io/posts/2025073001_fraktaler_baum/</guid>
  <pubDate>Wed, 30 Jul 2025 15:25:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025073001_fraktaler_baum/images/fractaltree2.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Aus der Nachbarschaft: Schon wieder Verkehrschaos</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025072501_erneutes_verkehrschaos/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54600538825/"><img src="https://kantel.github.io/posts/2025072501_erneutes_verkehrschaos/images/verkehr-b.jpg" class="img-fluid"></a></p>
<p>Auch an diesem Wochenende wird zum fünften Mal seit Mai dieses Jahres die Autobahn mal wieder in unseren Kiez gekotzt. Zwar wird dieses Mal nicht – wie im <a href="https://kantel.github.io/posts/2025050702_verkehrschaos_im_kiez/">Mai</a> und <a href="https://kantel.github.io/posts/2025060701_verkehrschaos_ii/">Juni</a> – der Britzer Autobahntunnel dichtgemacht, sondern die <a href="https://www.rbb24.de/panorama/beitrag/2025/07/a100-autobahn-dreieck-neokoelln-berlin-gesperrt.html">A100 am Dreieck Neukölln bis Montagmorgen gesperrt</a>, doch die Folgen dürften die gleichen sein: Fußgängerinnen und Fußgänger, Radfahrerinnen und Radfahrer werden als Folge einer mißlungenen Verkehrsplanung durch die Auto(-bahn)-Lobby des Berliner Senats erneut an den Rand der Straßen gedrängt und müssen abgasgeschwängerte Luft atmen. Und auch die Busse der BVG werden wieder im Stau stecken, so daß die Menschen, die keinen PKW besitzen (und das ist in unserem Kiez die Mehrheit der Familien) in ihrem Quartier gefangen gehalten werden.</p>
<p>Von diesem Senat ist aber nichts anderes zu erwarten: Zu glauben, daß die PKW- und Parkplatz-Fetischisten der CDU und die der Autobahn-Lobby hörige SPD mit einer Vorsitzenden, die sich einen Doktortitel erschwindelt hat, die Interessen der Bürger wahrnehmen, ist mehr als naiv.</p>
<p>Also, liebe Mitbürgerinnen und Mitbürger, im September nächsten Jahres sind Wahlen. Wählt diese unfähige Bleifußkoalition dann doch einfach ab!</p>
<hr>
<p><strong>Bild</strong> <em><a href="https://www.flickr.com/photos/schockwellenreiter/54600538825/">Verkehrs-Chaos</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>Colored Franco-Belgian Comic Style: Illustration of a multitude of cars trudge through narrow city streets. The air is filled with exhaust fumes and Pedestrians are pushed to the side of the road by the cars</em>«. Modell: Flux (Pro), Style: None.</p>



 ]]></description>
  <category>Neukölln</category>
  <category>Städte für Menschen</category>
  <category>Verkehr</category>
  <category>Verkehrswende</category>
  <category>Failed State Berlin</category>
  <guid>https://kantel.github.io/posts/2025072501_erneutes_verkehrschaos/</guid>
  <pubDate>Fri, 25 Jul 2025 20:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025072501_erneutes_verkehrschaos/images/verkehr.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Anytype auf meinem Chromebook</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025072201_anytype_chromebook/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54672050399/"><img src="https://kantel.github.io/posts/2025072201_anytype_chromebook/images/anytypechrome-b.jpg" class="img-fluid"></a></p>
<p>Ich hatte ja schon lange nichts mehr über <a href="https://kantel.github.io/#category=Chromebook">mein Chromebook</a> auf diesen Seiten. Das lag vor allen daran, daß ich momentan fast alles von meinem Desktop in meinem Arbeitszimmer erledige. Nun hat sich allerdings ergeben, daß in der nächsten Zeit doch häufiger eine mobile Nutzung gefragt ist. Und da wollte ich wissen, ob ich meine digitale Rumpelkammer <a href="https://anytype.io/">Anytpye</a>, die <a href="https://blog.anytype.io/our-open-philosophy/">freie</a>, außerhalb der USA, nämlich in der Schweiz (und damit DSGVO-konform) beheimatete <a href="http://cognitiones.kantel-chaos-team.de/produktivitaet/notion.html">Notion</a>-Alternative nicht auch auf dem Chromebook installiert bekomme, und auch, ob sie genauso zuverlässig synchronisiert, wie mit meinem Android-Smartphone. Spoiler: Die Installation verlief schmerzfreier, als erwartet.</p>
<p>Zwar war die Installation nicht ganz so einfach mit einem Einzeiler in der Kommandozeile erledigt, wie das bei <a href="http://cognitiones.kantel-chaos-team.de/webworking/staticsites/joplin.html">Joplin</a> der <a href="https://kantel.github.io/posts/2024112502_joplin_chromebook/">Fall war</a>, ein wenig Mausschubserei war doch vonnöten. Zuerst einmal habe ich das <a href="https://download.anytype.io/">Linux Debian Paket von Anytypes Downloadseite</a> heruntergeladen. Dann genügte allerdings ein Doppelklick auf die heruntergeladene Datei und Anytype war installiert (inklusive Icon für das Dock – siehe <a href="https://www.flickr.com/photos/schockwellenreiter/54672050399/">Screenshot oben</a>).</p>
<p>Danach bekam ich allerdings erst einmal einen Schreck. Denn nach der Eingabe der aasig langen Anytype Passwort-Phrase behauptete das Programm, daß ich wohl noch keinen Vault angelegt hätte und legte mir erst einmal einen leeren <code>untitled</code> Vault an. Während ich dann minutenlang hektisch nach einer Möglichkeit suchte, Anytype mit meiner schon existierenden Vault bekannt zu machen, fand das Programm sie dann doch selber und sychronisierte sie. Erleichtert mußte ich dann nur noch die <code>untitled</code> Vault löschen und alles war schick.</p>
<p>Die Moral von der Geschichte? Manchmal muß man einem Programm einfach nur ein wenig Zeit geben, damit es sich im Netz umschauen kann. <em>Don’t Panic!</em></p>



 ]]></description>
  <category>Anytype</category>
  <category>Zettelkasten</category>
  <category>Chromebook</category>
  <guid>https://kantel.github.io/posts/2025072201_anytype_chromebook/</guid>
  <pubDate>Tue, 22 Jul 2025 16:50:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025072201_anytype_chromebook/images/anytypechrome.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Ein Partikelsystem mit Proceso und PyScript</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025072101_partikel_proceso/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54670075413/"><img src="https://kantel.github.io/posts/2025072101_partikel_proceso/images/stage2-b.jpg" class="img-fluid"></a></p>
<p>Das <a href="https://kantel.github.io/posts/2025071301_planetensystem_proceso/">kleine Planetensystem mit den rotierenden Kisten</a>, das ich vor etwa einer Woche mit <a href="https://proceso.cc/">Proceso</a> und <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/pyscript.html">PyScript</a> realisierte, erinnerte mich an das Partikelsystem in <a href="https://kantel.github.io/posts/2024042702_microstudio_partikel/">zwei Stufen</a>, an dem ich mich vor mehr als einem Jahr in <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/microstudio.html">microStudio</a> mit <a href="https://brython.info/">Brython</a> versucht hatte. Vor allem, da in der <a href="https://kantel.github.io/posts/2024042801_microstudio_particle2/">zweiten Stufe</a> die Partikel teilweise ebenfalls rotierende Quadrate waren.</p>
<iframe src="proceso/stage1/index.html" width="100%" height="360">
</iframe>
<p>Ähnliches müßte man doch auch in Proceso und PyScript programmieren können, dachte ich mir, vor allem da <em>Nick McIntyre</em>, der Kopf hinter Proceso, verspricht, daß die Vektor-Klasse von Proceso »lovingly borrowed« von <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/py5.html">Py5</a>, dem Python3-Port von Processing sei. Also habe ich als ersten Schritt erst einmal eine Version mit runden Partikeln erstellt, die noch nicht rotieren.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> proceso <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Sketch</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> uniform, choice</span>
<span id="cb1-3"></span>
<span id="cb1-4">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">640</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">360</span></span>
<span id="cb1-5">START_X, START_Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">450</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span></span>
<span id="cb1-6"></span>
<span id="cb1-7">p5 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Sketch()</span>
<span id="cb1-8"></span>
<span id="cb1-9">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">247</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">254</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">254</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">83</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">187</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">245</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">211</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb1-10">          (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">65</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">148</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">103</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">89</span>)]</span>
<span id="cb1-11"></span>
<span id="cb1-12">particles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> preload():</span>
<span id="cb1-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">global</span> bg1</span>
<span id="cb1-16">    bg1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.load_image(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"assets/bg1.jpg"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the image</span></span>
<span id="cb1-17"></span>
<span id="cb1-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> setup():</span>
<span id="cb1-19">    p5.create_canvas(WIDTH, HEIGHT)</span>
<span id="cb1-20"></span>
<span id="cb1-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw():</span>
<span id="cb1-22">    p5.image(bg1, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-23">    update_particles()</span>
<span id="cb1-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> particle <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> particles:</span>
<span id="cb1-25">       particle.display()</span>
<span id="cb1-26">    </span>
<span id="cb1-27"></span>
<span id="cb1-28"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update_particles():</span>
<span id="cb1-29">    particle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Particle(START_X, START_Y)</span>
<span id="cb1-30">    particles.append(particle)</span>
<span id="cb1-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> particle <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reversed</span>(particles):</span>
<span id="cb1-32">       <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> particle.done:</span>
<span id="cb1-33">          particles.remove(particle)</span>
<span id="cb1-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> particle <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> particles:</span>
<span id="cb1-35">       particle.update()</span>
<span id="cb1-36">          </span>
<span id="cb1-37"></span>
<span id="cb1-38"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Particle():</span>
<span id="cb1-39">  </span>
<span id="cb1-40">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, _x, _y):</span>
<span id="cb1-41">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.Vector(_x, _y)</span>
<span id="cb1-42">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.Vector(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.005</span>)</span>
<span id="cb1-43">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.Vector(uniform(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>), uniform(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>))</span>
<span id="cb1-44">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> choice(colors)</span>
<span id="cb1-45">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">255.0</span></span>
<span id="cb1-46">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> uniform(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span>
<span id="cb1-47">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.done <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb1-48">    </span>
<span id="cb1-49">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-50">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.acc</span>
<span id="cb1-51">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel</span>
<span id="cb1-52">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> uniform(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span></span>
<span id="cb1-53">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan</span>
<span id="cb1-54">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>:</span>
<span id="cb1-55">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.done <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb1-56">      </span>
<span id="cb1-57">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> display(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-58">    p5.fill(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.alpha)</span>
<span id="cb1-59">    p5.circle(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d)</span>
<span id="cb1-60"></span>
<span id="cb1-61">p5.run_sketch(preload<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>preload, setup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>setup, draw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>draw)</span></code></pre></div>
<p>Kern ist die Klasse <code>Particle()</code>, die neben dem Konstruktor die beiden Methoden <code>update()</code> und <code>display()</code> besitzt. Im Hauptprogramm wird innerhalb der <code>draw()</code>-Funktion dann mit <code>update_particles()</code> bei jedem Durchlaufes ein neues Partikel erzeugt und an die Liste <code>particles[]</code> angehängt. Jedes Partikel besitzt nur eine bestimmte Lebensdauer (<code>lifespan</code>). Geht diese zuende, wird das Partikel mit <code>particles.remove(particle)</code> aus der Liste enfernt. Damit es dabei nicht zu einem Schhluckauf beim Durcharbeiten der Liste kommt, wird diese mit</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> particle <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reversed</span>(particles):</span>
<span id="cb2-2">       <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> particle.done:</span>
<span id="cb2-3">          particles.remove(particle)</span></code></pre></div>
<p>rückwärts durchlaufen.</p>
<p>Wie <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/p5js.html">P5.js</a>, die JavaScript-Version von Processing, besitzt auch Proceso eine <code>preload()</code>-Funktion, in der in diesem Skript das Hintergrundbild geladen wird. Die <code>preload()</code>-Funktion sorgt dafür, daß das Skript erst dann <code>setup()</code> aufruft, wenn alle dort zu ladenden Assets tatsächlich geladen sind. Dadurch ist leider die Variable <code>bg1</code> lokal in <code>preload()</code> und muß explizit als <code>global</code> deklariert werden, damit sie in <code>draw()</code> auch verwendet werden kann.</p>
<p>Ich mag globale Deklarationen ja bekanntlich nicht, aber ich glaube in diesem Fall ist das zu verschmerzen.</p>
<p>Die verwendete, neonbunte Palette ist »<a href="http://cognitiones.kantel-chaos-team.de/multimedia/farbpaletten/mplcyberpunk.html">MPL Cyberpunk</a>«, die ich hier erstmalig <a href="https://kantel.github.io/posts/2024041201_neonbunt/">vorgestellt hatte</a>. Sie steht unter der MIT-Lizenz und kann daher auch von Euch verwendet werden.</p>
<iframe src="proceso/stage2/index.html" width="100%" height="360">
</iframe>
<p>Nun aber zum zweiten Sketch mit den rotierenden Quadraten. Die Python vom Hintergrundbild des ersten Sketches ist so stolz auf ihre Schöpfung, daß sie ihren Freund, das weiße Kaninchen mit der großen Uhr, mitgenommen hat, damit dieses gebührend das Schauspiel bewundert.</p>
<p>Im Skript selber mußten nur wenige Änderungen vorgenommen werden:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> proceso <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Sketch</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> uniform, choice</span>
<span id="cb3-3"></span>
<span id="cb3-4">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">640</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">360</span></span>
<span id="cb3-5">START_X, START_Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">450</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span></span>
<span id="cb3-6"></span>
<span id="cb3-7">p5 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Sketch()</span>
<span id="cb3-8"></span>
<span id="cb3-9">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">247</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">254</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">254</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">83</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">187</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">245</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">211</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb3-10">          (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">65</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">148</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">103</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">89</span>)]</span>
<span id="cb3-11"></span>
<span id="cb3-12">particles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb3-13"></span>
<span id="cb3-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> preload():</span>
<span id="cb3-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">global</span> bg2</span>
<span id="cb3-16">    bg2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.load_image(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"assets/bg2.jpg"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the image</span></span>
<span id="cb3-17"></span>
<span id="cb3-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> setup():</span>
<span id="cb3-19">    p5.create_canvas(WIDTH, HEIGHT)</span>
<span id="cb3-20">    p5.rect_mode(p5.CENTER)</span>
<span id="cb3-21"></span>
<span id="cb3-22"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw():</span>
<span id="cb3-23">    p5.image(bg2, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb3-24">    update_particles()</span>
<span id="cb3-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> particle <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> particles:</span>
<span id="cb3-26">       particle.display()</span>
<span id="cb3-27">    </span>
<span id="cb3-28"></span>
<span id="cb3-29"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update_particles():</span>
<span id="cb3-30">    particle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Particle(START_X, START_Y)</span>
<span id="cb3-31">    particles.append(particle)</span>
<span id="cb3-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> particle <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reversed</span>(particles):</span>
<span id="cb3-33">       <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> particle.done:</span>
<span id="cb3-34">          particles.remove(particle)</span>
<span id="cb3-35">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> particle <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> particles:</span>
<span id="cb3-36">       particle.update()</span>
<span id="cb3-37">          </span>
<span id="cb3-38"></span>
<span id="cb3-39"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Particle():</span>
<span id="cb3-40">  </span>
<span id="cb3-41">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, _x, _y):</span>
<span id="cb3-42">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.Vector(_x, _y)</span>
<span id="cb3-43">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.Vector(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.005</span>)</span>
<span id="cb3-44">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.Vector(uniform(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>), uniform(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>))</span>
<span id="cb3-45">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> choice(colors)</span>
<span id="cb3-46">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb3-47">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.delta_angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> uniform(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.1</span>)</span>
<span id="cb3-48">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">255.0</span></span>
<span id="cb3-49">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> uniform(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span>
<span id="cb3-50">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.done <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb3-51">    </span>
<span id="cb3-52">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-53">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.acc</span>
<span id="cb3-54">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel</span>
<span id="cb3-55">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.delta_angle</span>
<span id="cb3-56">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> uniform(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span></span>
<span id="cb3-57">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan</span>
<span id="cb3-58">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>:</span>
<span id="cb3-59">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.done <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb3-60">      </span>
<span id="cb3-61">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> display(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-62">    p5.fill(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.alpha)</span>
<span id="cb3-63">    p5.push()</span>
<span id="cb3-64">    p5.translate(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y)</span>
<span id="cb3-65">    p5.rotate(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.angle)</span>
<span id="cb3-66">    p5.rect(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d)</span>
<span id="cb3-67">    p5.pop()</span>
<span id="cb3-68"></span>
<span id="cb3-69">p5.run_sketch(preload<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>preload, setup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>setup, draw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>draw)</span></code></pre></div>
<p>Damit die Boxen um ihren eigenen Mittelpunkt rotieren habe ich ihnen im <code>setup()</code> den <code>rect_mode(CENTER)</code> verpasst. Die Rotation selber wird in der Methode <code>display()</code> der Klasse <code>Particle()</code> durchgeführt,</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> display(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-2">    p5.fill(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.alpha)</span>
<span id="cb4-3">    p5.push()</span>
<span id="cb4-4">    p5.translate(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y)</span>
<span id="cb4-5">    p5.rotate(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.angle)</span>
<span id="cb4-6">    p5.rect(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d)</span>
<span id="cb4-7">    p5.pop()</span></code></pre></div>
<p>die erst einmal mit <code>translate()</code> den Ursprung des Koordinatensystems in den Mittelpunkt des Quadrats legt und dann die Rotation um die eigenen Achse vornimmt. Natürlich muß diese Koordinaten-Transformation mit <code>push()</code> und <code>pop()</code> geklammert werden, damit nach jeder Rotation das Koordinatensystem wieder auf seinen ursprünglichen Zustand zurückgesetzt wird.</p>
<p>Jedes Partikel hat seinen eigenen Rotationswinkel, der mit <code>self.delta_angle = uniform(-.1, .1)</code> im Konstruktor festgelegt wird. Das sind eigentlich alle Änderungen gegenüber dem ersten Sketch.</p>
<section id="verwendete-und-weiterführende-quellen" class="level3">
<h3 class="anchored" data-anchor-id="verwendete-und-weiterführende-quellen">Verwendete und weiterführende Quellen:</h3>
<ul>
<li>Mia Dwyer: <em><a href="https://towardsdatascience.com/how-to-make-cyberpunk-dark-mode-data-visualizations-in-python-b28f82386e75/">How to Make Cyberpunk »Dark Mode« Data Visualizations in Python</a></em>, toward data science vom 8&nbsp;April&nbsp;2024 (Bezahlschranke)</li>
<li>Jörg Kantel: <em>MicroStudio und Python: Ein Partikelsystem, <a href="https://kantel.github.io/posts/2024042702_microstudio_partikel/">Part 1</a> und <a href="https://kantel.github.io/posts/2024042801_microstudio_particle2/">Part 2</a></em>, Der Schockwellenreiter vom 27. und 28.&nbsp;April&nbsp;2024</li>
<li>Nick McIntyre: <em><a href="https://proceso.cc/examples/creative_coding/load_display_image">Load and Display Image</a></em> und <em><a href="https://proceso.cc/examples/creative_coding/flocking">Flocking</a></em>, Proceso-Tutorial 2023</li>
<li>Patt Vira: <em><a href="https://www.youtube.com/watch?v=QlpadcXok8U">P5.js Coding Tutorial – Basics of Particle Systems</a></em>, YouTube 2024</li>
</ul>
<p>Die Programmierung mit Proceso und PyScript macht vor allem deshalb Spaß, weil man die Ergebnisse wie hier ziemlich schmerzfrei in die eigenen Seiten einbinden kann. Dies wird daher mit Sicherheit nicht das letzte Experiment sein, das ich mit Proceso durchführe. <em>Still digging!</em></p>
<hr>
<p><strong>Hintergrundbilder</strong>: <em>Planetenbeobachter <a href="https://www.flickr.com/photos/schockwellenreiter/54669818985/">Stage 1</a> und <a href="https://www.flickr.com/photos/schockwellenreiter/54668659117/">Stage 2</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>Colored Franco-Belgian comic style: A green python with glasses and a rabbit standing side by side on a distant planet, observing the night sky. The rabbit wears a dark blue vest and holds a large pocket watch. A few planets with their moons and gray clouds can be seen in the sky. A planetary base and two spaceships stand in the landscape</em>«. Modell: Flux (Pro), Style: None.</p>


</section>

 ]]></description>
  <category>Proceso</category>
  <category>Python</category>
  <category>PyScript</category>
  <category>Processing</category>
  <category>Nature of Code</category>
  <category>Creative Coding</category>
  <guid>https://kantel.github.io/posts/2025072101_partikel_proceso/</guid>
  <pubDate>Mon, 21 Jul 2025 19:35:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025072101_partikel_proceso/images/stage2.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Spandauer Spiegelung</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025071902_spandauer_spiegelung/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54658323768/"><img src="https://kantel.github.io/posts/2025071902_spandauer_spiegelung/images/spandauerspiegel-b.jpg" class="img-fluid"></a></p>
<p>Und wo ich gerade beim Bildchen veröffentlichen bin: Am Dienstag war ich <a href="https://kantel.github.io/posts/2025062501_spandau_bei_berlin/">mal wieder</a> mit der schon mehrfach auf diesen Seiten erwähnten netten jungen Dame in <a href="https://de.wikipedia.org/wiki/Berlin-Spandau">Spandau</a> an der <a href="https://de.wikipedia.org/wiki/Zitadelle_Spandau">Zitadelle</a>, dieses Mal im Landschaftsschutzgebiet neben der <a href="https://de.wikipedia.org/wiki/Schleuse_Spandau">Spandauer Schleuse</a> an der Westseite des Zitadellengrabens. Dabei geriet mir diese Spiegelung der Bastion Kronprinz vor die Linse meines Smartphones. Und dieses Photo wollte ich Euch ebenfalls nicht vorenthalten.</p>
<hr>
<p><strong>Photo</strong> (<a href="https://creativecommons.org/licenses/by-sa/4.0/deed.de">cc</a>) 2025: <em><a href="http://cognitiones.kantel-chaos-team.de/cv.html">Jörg Kantel</a></em></p>



 ]]></description>
  <category>Atlas Curiosa</category>
  <category>Parks und Gärten</category>
  <category>Photographie</category>
  <guid>https://kantel.github.io/posts/2025071902_spandauer_spiegelung/</guid>
  <pubDate>Sat, 19 Jul 2025 14:25:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025071902_spandauer_spiegelung/images/spandauerspiegel.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Endlich habe ich wieder die Haare schön</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025071901_haare_schoen/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54663977751/"><img src="https://kantel.github.io/posts/2025071901_haare_schoen/images/haareschoen-b.jpg" class="img-fluid"></a></p>
<p>Wieder war ein Vierteljahr vergangen und so mußte ich gestern nach Schweineöde fahren, um mir die Locken richten zu lassen. Aber jetzt habe ich dafür auch wieder die Haare schön, dank <a href="https://www.facebook.com/coiffeuremarinaundteam/?locale=de_DE">Coiffeure Marina &amp; Team</a> (Facebook-Link).</p>
<p><strong>Da müßt Ihr jetzt durch</strong>! Seit meinem <a href="https://kantel.github.io/posts/2025010601_bye_social_media/">Abschied aus den asozialen Medien</a> habe ich keine Wahl mehr und muß auch solch belanglose Selfies, die ich früher immer ins Gesichtsbuch hochgeladen hatte, in diesem <del>Weblog</del> Kritzelheft veröffentlichen. Dafür ist (m)ein Kritzelheft schließlich da.</p>
<hr>
<p><strong>Photo</strong> (<a href="https://creativecommons.org/licenses/by-sa/4.0/deed.de">cc</a>) 2025: <em><a href="http://cognitiones.kantel-chaos-team.de/cv.html">Jörg Kantel</a></em></p>



 ]]></description>
  <category>Modernes Leben</category>
  <category>Photographie</category>
  <guid>https://kantel.github.io/posts/2025071901_haare_schoen/</guid>
  <pubDate>Sat, 19 Jul 2025 13:55:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025071901_haare_schoen/images/haareschoen.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Aller guten Dinge sind vier: Fraktale XXL (neu in meiner Bibliothek)</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025071601_fraktale_xxl/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54644010565/"><img src="https://kantel.github.io/posts/2025071601_fraktale_xxl/images/dachs-b.jpg" class="img-fluid"></a></p>
<p>Als ich gestern Nacht von einem Ausflug nach Hause kam, fand ich erneut (<a href="https://kantel.github.io/posts/2025070901_fraktale_dynamische_systeme/">wie vor einer Woche schon</a>) ein Päckchen in meinem Briefkasten. Und abermals hat mich der Inhalt sehr gefreut. Denn darin lag <a href="https://kantel.github.io/posts/2025060502_fraktales_kochbuch/">ein weiteres</a> Buch, das mir meine hier im <del>Blog</del> Kritzelheft schon oft erwähnte Inspirationsquelle, der »Freund aus Bremen«, <em>Karl-Heinz Becker</em> (aka »Kalle«) geschickt hatte.</p>
<div style="float: right; margin-left: 12px; margin-top: 6px;">
<a href="https://www.amazon.de/Fraktale-XXL-Bilderbuch-Computergrafische-Experimente/dp/B0FF4497KW/"><img src="https://kantel.github.io/posts/2025071601_fraktale_xxl/images/fraktalexxl.jpg" class="img-fluid"></a>
</div>
<p>Es ist ein neuer Band aus einer Reihe, die der Ideenschmiede von <em>Karl-Heinz Becker</em> und <em>Michel Dörfler</em> entstammt. Nach den Büchern »<a href="https://www.amazon.de/Kochrezepte-f%C3%BCr-Fraktale-Computergrafische-Experimente/dp/B0DLTZ13JY">Kochrezepte für Fraktale: Computergrafische Experimente mit Python</a>«, »<a href="https://www.amazon.de/Fraktale-Dynamische-Systeme-Computergrafische-Experimente/dp/B0FDW2LWY6/">Fraktale und Dynamische Systeme: Computergrafische Experimente mit Processing</a>« und »<a href="https://www.amazon.de/Code-Archiv-Dynamische-Computergrafische-Experimente/dp/B0FDGB16TY/">Code Archiv - Fraktale und Dynamische Systeme: Computergrafische Experimente mit Processing</a>« liegt nun als vierter Band die 360&nbsp;Seiten fette Schwarte »<a href="https://www.amazon.de/Fraktale-XXL-Bilderbuch-Computergrafische-Experimente/dp/B0FF4497KW/">Fraktale XXL - Bilderbuch der Fraktale: Computergrafische Experimente mit Processing</a>« der beiden umtriebigen Autoren auf meinem Schreibtisch. Auch wenn es gestern nacht schon spät war – es war eigentlich schon heute früh –, konnte ich nicht umhin, darin noch ein wenig zu blättern. Und was soll ich dazu schreiben? Auch dieses Buch steckt voller Ideen, die ich für meine eigenen Experimente mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/py5.html">Py5</a> (für statische Bilder) und <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/pyscript.html">PyScript</a> mit <a href="https://proceso.cc/">Proceso</a> (für Animationen) umsetzen möchte. Vorher muß ich allerdings noch herausbekommen, wie man PyScript mit <a href="https://docs.python.org/3/library/turtle.html">Pythons Schildkröte</a> verheiratet, denn die beiden haben in diesem Buch »geometrische Fraktale« mit einer in Java selbstprogrammierten Turtle erstellt. Aber das sollte ich herausbekommen. Ich bin jedenfalls hochmotiviert, auch mit den Ideen aus »Fraktale XXL« einiges anzustellen.</p>
<p><strong>Caveat</strong>: Ich bin mit <em>Karl-Heinz Becker</em> und <em>Michael Dörfler</em> schon seit vielen Jahren befreundet und daher voreingenommen. Trotzdem bin ich sicher, daß ich all ihre Bücher mit gutem Gewissen empfehlen kann.</p>
<section id="literatur" class="level3">
<h3 class="anchored" data-anchor-id="literatur">Literatur</h3>
<p>Hier noch einmal die bibliographischen Angaben (mit Links zur Bezugsquelle Amazon) für alle vier bisher erschienenen Bände der Reihe:</p>
<ul>
<li>Karl-Heinz Becker, Michael Dörfler: <em><a href="https://www.amazon.de/Kochrezepte-f%C3%BCr-Fraktale-Computergrafische-Experimente/dp/B0DLTZ13JY">Kochrezepte für Fraktale: Computergrafische Experimente mit Python</a></em>, Bremen 2025</li>
<li>Karl-Heinz Becker, Michael Dörfler: <em><a href="https://www.amazon.de/Fraktale-Dynamische-Systeme-Computergrafische-Experimente/dp/B0FDW2LWY6/">Fraktale und Dynamische Systeme: Computergrafische Experimente mit Processing</a></em>, Bremen 2025</li>
<li>Karl-Heinz Becker, Michael Dörfler: <em><a href="https://www.amazon.de/Code-Archiv-Dynamische-Computergrafische-Experimente/dp/B0FDGB16TY/">Code Archiv - Fraktale und Dynamische Systeme: Computergrafische Experimente mit Processing</a></em>, Bremen 2025</li>
<li>Karl-Heinz Becker, Michael Dörfler: <em><a href="https://www.amazon.de/Fraktale-XXL-Bilderbuch-Computergrafische-Experimente/dp/B0FF4497KW/">Fraktale XXL - Bilderbuch der Fraktale: Computergrafische Experimente mit Processing</a></em>, Bremen 2025</li>
</ul>
<p>Alle Bände sind im Selbstverlag bei <em>Kindle Direct Publishing</em> (Amazon) veröffentlicht, um die Bücher möglichst günstig unters Volk bringen zu können. Laut <em>Kalle</em> ist noch ein weiterer Band »Newton Fraktale« in Arbeit. Ich werde das beobachten und gegebenenfalls berichten. Dann heißt es vielleicht schon bald: »Aller guten Dinge sind fünf«. <em>Still digging!</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54644010565/">Der Dachs in seiner Bibliothek</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>Colored Franco-Belgian comic style. Illustration of a badger in a red dressing gown sits in a wing chair in his cave in front of a huge library with many shelves and reads a fairy tale from a thick book</em>«. Modell: Flux (Pro), Style: None.</p>


</section>

 ]]></description>
  <category>Bücher</category>
  <category>Dynamische Systeme</category>
  <category>Mathematik</category>
  <category>Processing</category>
  <category>Processing.py</category>
  <category>P5.js</category>
  <category>Creative Coding</category>
  <guid>https://kantel.github.io/posts/2025071601_fraktale_xxl/</guid>
  <pubDate>Wed, 16 Jul 2025 15:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025071601_fraktale_xxl/images/dachs.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Ein kleines Planetensystem mit Proceso</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025071301_planetensystem_proceso/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54652354418/"><img src="https://kantel.github.io/posts/2025071301_planetensystem_proceso/images/planetensystem-b.jpg" class="img-fluid"></a></p>
<p>Als eines meiner nächsten Projekte mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/pyscript.html">PyScript</a> und <a href="https://proceso.cc/">Proceso</a> möchte ich in drei Stationen eine kleine Animation eines Planetensystems entwickeln. Dabei möchte ich zeigen, wie nützlich für solch eine Simulation die Transformationsoperatoren <code>translate()</code> und <code>rotate()</code> sein können.</p>
<section id="stage-1-ein-planet-umkreist-seine-sonne" class="level2">
<h2 class="anchored" data-anchor-id="stage-1-ein-planet-umkreist-seine-sonne">Stage 1: Ein Planet umkreist seine Sonne</h2>
<p>Ich beginne mit einem einfachem System eines Planeten, der seinen Fixstern umkreist. Der Einfachheit halber habe ich die Akteure Sonne und Erde genannt:</p>
<iframe src="proceso/stage1/index.html" width="100%" height="360">
</iframe>
<p>Zu Beginn des Sketches lege ich erst einmal ein paar Zahlen fest:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">640</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">360</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Aspect Ratio: 16:9</span></span>
<span id="cb1-2"></span>
<span id="cb1-3">sun_diam <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span></span>
<span id="cb1-4"></span>
<span id="cb1-5">earth_diam <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span></span>
<span id="cb1-6">earth_orbit_radius <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">130</span></span>
<span id="cb1-7">earth_angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span></code></pre></div>
<p>Diese Zahlen sind durch keine physikalische Wirklichkeit gedeckt, sondern einfach so lange durch Experimente herausgesucht worden, bis sie eine ansprechende Animation ergaben.</p>
<p>Die <code>setup()</code>-Funktion legt einfach nur die Größe des Ausgabefensters fest:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> setup():</span>
<span id="cb2-2">    p5.create_canvas(WIDTH, HEIGHT)</span></code></pre></div>
<p>In <code>draw()</code> setze ich den Hintergrund auf schwarz und dann zeichne ich die Sonne in die Mitte des Ausgabefensters:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw():</span>
<span id="cb3-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">global</span> earth_angle</span>
<span id="cb3-3">    p5.background(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb3-4"></span>
<span id="cb3-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sonne im Zentrum</span></span>
<span id="cb3-6">    p5.translate(p5.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, p5.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb3-7">    p5.fill(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>)</span>
<span id="cb3-8">    p5.circle(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, sun_diam)</span></code></pre></div>
<p>Die Zeile <code>p5.translate(p5.width//2, p5.height//2)</code> sorgt dafür, daß der Nullpunkt des Koordinatensystem vom linken oberen Rand in die Mitte des Ausgabefensters gelegt wird und so die Sonne mit <code>p5.circle(0, 0, sun_diam)</code> auch genau dort gezeichnet wird. Probiert es aus, der Sketch ist so lauffähig.</p>
<p>Die Variable <code>earth_angle</code> ist – wie man im Folgenden sieht – eine Variable, die sich in der <code>draw()</code>-Funktion noch ändern wird, daher muß sie leider als <code>global</code> deklariert werden<sup>1</sup>.</p>
<p>Nun zur Erde, die die Sonne umkreist:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Erde dreht sich um die Sonne</span></span>
<span id="cb4-2">    p5.rotate(earth_angle)</span>
<span id="cb4-3">    p5.translate(earth_orbit_radius, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb4-4">    p5.fill(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>)</span>
<span id="cb4-5">    p5.circle(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, earth_diam)</span>
<span id="cb4-6">    earth_angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span></span></code></pre></div>
<p>Wenn Ihr diese Zeilen Code in die <code>draw()</code>-Funktion unterhalb der Sonne einfügt, bekommt Ihr eine blaue Erde, die sich langsam um die Sonne bewegt. Denn mit <code>p5.translate(earth_orbit_radius, 0)</code> wurde das Koordinatensystem erneut verschoben, 130 Pixel von der Sonne entfernt aber auf der gleichen y-Achse wie das Koordinatensystem der Sonne. Da <code>p5.rotate(earth_angle)</code> vor der Koordinatentransformation aufgerufen wird, dreht sich die Erde noch um die Sonne und das Koordinatensystem der Sonne rotiert, ein <code>rotate()</code> hinter der Koordinatentransformation würde bewirken, daß sich die Erde um sich selbst dreht – das heißt, daß das Koordinatensystem der Erde rotieren würde.</p>
<p>Der vollständige Sketch sieht dann so aus:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> proceso <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Sketch</span>
<span id="cb5-2"></span>
<span id="cb5-3">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">640</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">360</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Aspect Ratio: 16:9</span></span>
<span id="cb5-4"></span>
<span id="cb5-5">sun_diam <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span></span>
<span id="cb5-6"></span>
<span id="cb5-7">earth_diam <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span></span>
<span id="cb5-8">earth_orbit_radius <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">130</span></span>
<span id="cb5-9">earth_angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb5-10"></span>
<span id="cb5-11">p5 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Sketch()</span>
<span id="cb5-12"></span>
<span id="cb5-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> setup():</span>
<span id="cb5-14">    p5.create_canvas(WIDTH, HEIGHT)</span>
<span id="cb5-15"></span>
<span id="cb5-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw():</span>
<span id="cb5-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">global</span> earth_angle</span>
<span id="cb5-18">    p5.background(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb5-19"></span>
<span id="cb5-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sonne im Zentrum</span></span>
<span id="cb5-21">    p5.translate(p5.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, p5.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb5-22">    p5.fill(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>)</span>
<span id="cb5-23">    p5.circle(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, sun_diam)</span>
<span id="cb5-24"></span>
<span id="cb5-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Erde dreht sich um die Sonne</span></span>
<span id="cb5-26">    p5.rotate(earth_angle)</span>
<span id="cb5-27">    p5.translate(earth_orbit_radius, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb5-28">    p5.fill(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>)</span>
<span id="cb5-29">    p5.circle(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, earth_diam)</span>
<span id="cb5-30">    earth_angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span></span>
<span id="cb5-31"></span>
<span id="cb5-32">p5.run_sketch(setup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>setup, draw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>draw)</span></code></pre></div>
</section>
<section id="stage-2-der-mond-dreht-sich-um-die-erde-und-beide-werden-zu-kisten" class="level2">
<h2 class="anchored" data-anchor-id="stage-2-der-mond-dreht-sich-um-die-erde-und-beide-werden-zu-kisten">Stage 2: Der Mond dreht sich um die Erde (und beide werden zu Kisten)</h2>
<iframe src="proceso/stage2/index.html" width="100%" height="360">
</iframe>
<p>Wenn ich der Erde nun noch einen Mond spendiere, brauche ich dafür natürlich auch erst einmal ein paar Parameter, die ich an den Anfang des Sketches (hinter den Parametern für die Erde) festlege:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1">moon_diam <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb6-2">moon_orbit_radius <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span></span>
<span id="cb6-3">moon_angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span></code></pre></div>
<p>Und die Funktion <code>draw()</code> bekommt hinter den Zeilen für die Erde noch die Zeilen für den Mond angehängt:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Mond dreht sich um die Erde</span></span>
<span id="cb7-2">    p5.rotate(moon_angle)</span>
<span id="cb7-3">    p5.translate(moon_orbit_radius, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb7-4">    p5.fill(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">192</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">192</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb7-5">    p5.circle(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, moon_diam)</span>
<span id="cb7-6">    moon_angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span></span></code></pre></div>
<p>Durch diese Koordinatentransformation steht der Mond im gleichen Verhältnis zur Erde wie die Erde zur Sonne, der Ursprung des Koordinatensystems liegt nun 40 Pixel vom Erdmittelpunkt entfernt. Natürlich rotiert in diesen Zeilen das Koordinatensystem der Erde, damit der Eindruck entsteht, daß der Mond um die Erde kreist.</p>
<p>Das alles funktioniert aber nur, weil bei jedem erneuten Durchlauf der <code>draw()</code>-Funktion das Koordinatensystem zurückgesetzt wird, also alle Transformationen »vergessen« werden.</p>
<p>Nun kann man bei Kreisen schwer erkennen, ob sie wirklich rotieren, daher habe ich in einer erweiterten Fassung die Kreise von Erde und Mond durch Quadrate ersetzt<sup>2</sup> (ich habe – damit Ihr die Position der Codezeilen finden, die ersetzte Kreisfunktion jeweils auskommentiert stehen lassen, die Rechteckfunktion wird jeweils direkt unter der auskommentierten Zeile eingefügt):</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw():</span>
<span id="cb8-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">global</span> earth_angle, moon_angle</span>
<span id="cb8-3">    p5.background(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb8-4"></span>
<span id="cb8-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sonne im Zentrum</span></span>
<span id="cb8-6">    p5.translate(p5.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, p5.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb8-7">    p5.fill(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>)</span>
<span id="cb8-8">    p5.circle(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, sun_diam)</span>
<span id="cb8-9"></span>
<span id="cb8-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Erde dreht sich um die Sonne</span></span>
<span id="cb8-11">    p5.rotate(earth_angle)</span>
<span id="cb8-12">    p5.translate(earth_orbit_radius, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb8-13">    p5.fill(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>)</span>
<span id="cb8-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># p5.circle(0, 0, earth_diam)</span></span>
<span id="cb8-15">    p5.rect(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>earth_diam<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>earth_diam<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, earth_diam, earth_diam)</span>
<span id="cb8-16">    earth_angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span></span>
<span id="cb8-17"></span>
<span id="cb8-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Mond dreht sich um die Erde</span></span>
<span id="cb8-19">    p5.rotate(moon_angle)</span>
<span id="cb8-20">    p5.translate(moon_orbit_radius, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb8-21">    p5.fill(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">192</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">192</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb8-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># p5.circle(0, 0, moon_diam)</span></span>
<span id="cb8-23">    p5.rect(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>moon_diam<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>moon_diam<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, moon_diam, moon_diam)</span>
<span id="cb8-24">    moon_angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span></span></code></pre></div>
<p>Da sich in <code>draw()</code> auch die Variable <code>moon_angle</code> verändert, muß auch sie als <code>global</code> deklariert werden. Der Rest des Programmes unterscheidet sich nicht von der vorherigen Fassung, daher habe ich auf einen erneuten Komplett-Abdruck verzichtet.</p>
<p>Wenn Ihr das Skript jetzt startet, dreht sich eine große blaue Kiste um die Sonne mit einer kleinen grauen Kiste, die sich um die Erde dreht und Ihr können die Rotation der beiden Kisten genau beobachten.</p>
</section>
<section id="stage-3-es-erscheint-die-nemesis" class="level2">
<h2 class="anchored" data-anchor-id="stage-3-es-erscheint-die-nemesis">Stage 3: Es erscheint die Nemesis</h2>
<iframe src="proceso/stage3/index.html" width="100%" height="360">
</iframe>
<p>Doch was ist, wenn ein zweiter Mond – nennen wir ihn als Gegenspielerin des Erdmondes einfach <em><a href="https://de.wikipedia.org/wiki/Nemesis">Nemesis</a></em> – um die Erde kreisen soll? Das Koordinatensystem der Erde ist ja schon vom Koordinatensystem des Mondes ersetzt worden. Ich brauche also eine Funktion, die das Koordinatensystem nur temporär verschiebt, so daß man auf das alte Koordinatensystem wieder zrückgreifen kann, wenn es benötigt wird. Dafür stellt Proceso das Funktionenpaar <code>push()</code> und <code>pop()</code> zur Verfügung: Mit <code>push()</code> wird das bisherige Koordinatensystem auf einen Stack gelegt und mit <code>pop()</code> wird es wieder zurückgeholt<sup>3</sup>.</p>
<p>Erst einmal braucht natürlich <em>Nemesis</em> ihren eigenen Satz Variablen,</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb9-1">nem_diam <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span></span>
<span id="cb9-2">nem_orbit_radius <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb9-3">nem_angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span></code></pre></div>
<p>wobei <code>nem_angle</code> analog zu den anderen Winkeln zu Beginn der <code>draw()</code>-Schleife als <code>global</code> deklariert werden muß:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb10-1">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">global</span> earth_angle, moon_angle, nem_angle</span></code></pre></div>
<p>Und dann habe ich der Nemesis und dem Mond jeweils eine eigene (Koordinaten-) Matrix spendiert:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb11-1">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Mond dreht sich um die Erde</span></span>
<span id="cb11-2">    p5.push()</span>
<span id="cb11-3">    p5.rotate(moon_angle)</span>
<span id="cb11-4">    p5.translate(moon_orbit_radius, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb11-5">    p5.fill(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">192</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">192</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb11-6">    p5.rect(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>moon_diam<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>moon_diam<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, moon_diam, moon_diam)</span>
<span id="cb11-7">    p5.pop()</span>
<span id="cb11-8"></span>
<span id="cb11-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Nemesis dreht sich um die Erde</span></span>
<span id="cb11-10">    p5.push()</span>
<span id="cb11-11">    p5.rotate(nem_angle)</span>
<span id="cb11-12">    p5.translate(nem_orbit_radius, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb11-13">    p5.fill(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">220</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>)</span>
<span id="cb11-14">    p5.rect(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>nem_diam<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>nem_diam<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, nem_diam, nem_diam)</span>
<span id="cb11-15">    p5.pop()</span></code></pre></div>
<p>Und zum Schluß <code>nem_angle</code> um <img src="https://latex.codecogs.com/png.latex?0.015"> inkrementiert. Das gesamte Programm in seiner vollen Schönheit sieht nun so aus:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> proceso <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Sketch</span>
<span id="cb12-2"></span>
<span id="cb12-3">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">640</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">360</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Aspect Ratio: 16:9</span></span>
<span id="cb12-4"></span>
<span id="cb12-5">sun_diam <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span></span>
<span id="cb12-6"></span>
<span id="cb12-7">earth_diam <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span></span>
<span id="cb12-8">earth_orbit_radius <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">130</span></span>
<span id="cb12-9">earth_angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb12-10"></span>
<span id="cb12-11">moon_diam <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb12-12">moon_orbit_radius <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span></span>
<span id="cb12-13">moon_angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb12-14"></span>
<span id="cb12-15">nem_diam <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span></span>
<span id="cb12-16">nem_orbit_radius <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb12-17">nem_angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb12-18"></span>
<span id="cb12-19">p5 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Sketch()</span>
<span id="cb12-20"></span>
<span id="cb12-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> setup():</span>
<span id="cb12-22">    p5.create_canvas(WIDTH, HEIGHT)</span>
<span id="cb12-23"></span>
<span id="cb12-24"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw():</span>
<span id="cb12-25">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">global</span> earth_angle, moon_angle, nem_angle</span>
<span id="cb12-26">    p5.background(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb12-27"></span>
<span id="cb12-28">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sonne im Zentrum</span></span>
<span id="cb12-29">    p5.translate(p5.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, p5.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb12-30">    p5.fill(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>)</span>
<span id="cb12-31">    p5.circle(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, sun_diam)</span>
<span id="cb12-32"></span>
<span id="cb12-33">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Erde dreht sich um die Sonne</span></span>
<span id="cb12-34">    p5.rotate(earth_angle)</span>
<span id="cb12-35">    p5.translate(earth_orbit_radius, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb12-36">    p5.fill(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>)</span>
<span id="cb12-37">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># p5.circle(0, 0, earth_diam)</span></span>
<span id="cb12-38">    p5.rect(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>earth_diam<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>earth_diam<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, earth_diam, earth_diam)</span>
<span id="cb12-39"></span>
<span id="cb12-40">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Mond dreht sich um die Erde</span></span>
<span id="cb12-41">    p5.push()</span>
<span id="cb12-42">    p5.rotate(moon_angle)</span>
<span id="cb12-43">    p5.translate(moon_orbit_radius, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb12-44">    p5.fill(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">192</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">192</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb12-45">    p5.rect(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>moon_diam<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>moon_diam<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, moon_diam, moon_diam)</span>
<span id="cb12-46">    p5.pop()</span>
<span id="cb12-47"></span>
<span id="cb12-48">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Nemesis dreht sich um die Erde</span></span>
<span id="cb12-49">    p5.push()</span>
<span id="cb12-50">    p5.rotate(nem_angle)</span>
<span id="cb12-51">    p5.translate(nem_orbit_radius, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb12-52">    p5.fill(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">220</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>)</span>
<span id="cb12-53">    p5.rect(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>nem_diam<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>nem_diam<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, nem_diam, nem_diam)</span>
<span id="cb12-54">    p5.pop()</span>
<span id="cb12-55">    </span>
<span id="cb12-56">    earth_angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span></span>
<span id="cb12-57">    moon_angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span></span>
<span id="cb12-58">    nem_angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.015</span></span>
<span id="cb12-59"></span>
<span id="cb12-60">p5.run_sketch(setup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>setup, draw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>draw)</span></code></pre></div>
<p>Natürlich hätte man sich bei der <em>Nemesis</em> das <code>push()</code>- und <code>pop()</code>-Paar sparen können, aber so ist es sauberer und Ihr könnt der Sonne noch mehr Trabanten mit eigenen Monden spendieren, ohne mit den Koordinatensystemen durcheinander zu geraten.</p>
<p>Wenn Ihr Euch das Programm anschaut, werdet Ihr sehen, warum ich für die Erde und ihre Trabanten Rechtecke gewählt habe. So ist zu erkennen, daß die Erde mit genau einer Seite immer zur Sonne zeigt und die beiden Trabanten ebenfalls mit genau einer Seite zur Erde. Das ist, weil sie sich jeweils in ihrem eigenen Koordinatensystem bewegen, dessen eine Achse immer das Zentrum des darüberliegenden Koordinatensystems schneidet.</p>
<p>Für die Monde ist das okay, wenn Ihr der Erde aber Tag und Nacht spendieren wollt, müsst Ihr ihr noch ein zweites <code>rotate()</code> <strong>nach</strong> der Koordinatentransformation spendieren.</p>
<p>Wie immer ist das Progrämmchen ausbaubar. Ihr könnt zum Beispiel mehrere Planeten jeweils mit ihren eigenen Koordinatensystemen um den Fixstern kreisen lassen. Alle diese Planeten könnt Ihr mit beliebig vielen Monden umgeben, die alle wiederum ihr eigenes Koordinatensystem besitzen. Und wenn Ihr wirkliche Heroinnen oder Helden sein wollt: Schnappt Euch ein Buch mit den <a href="https://de.wikipedia.org/wiki/Keplersche_Gesetze">Keplerschen Gesetzen zur Planetenbewegung</a> und simuliert damit ein realistischeres Planetensystem.</p>
</section>
<section id="literatur" class="level2">
<h2 class="anchored" data-anchor-id="literatur">Literatur</h2>
<p>Die Idee zu diesem Sketch und einige der Parameter habe ich dem wunderbaren Buch »Processing for Visual Artists – How to Create Expressive Images and Interactive Art«, Natick, MA (A K Peters) 2010, von <em>Andrew Glassner</em>, Seiten 192-200 entnommen und von Java nach Python portiert.</p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54652354418/">Planetenbeobachter</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>Colored Franco-Belgian comic style: A green python with glasses and a rabbit stand on a distant planet, observing the night sky. The rabbit wears a dark blue vest and holds a large pocket watch. A few planets with their moons and gray clouds can be seen in the sky. A planetary base and two spaceships stand in the landscape</em>«. Modell: Flux (Pro), Style: None.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Fußnoten</h2>

<ol>
<li id="fn1"><p>Eigentlich versuche ich ja, <code>global</code>-Deklarationen zu vermeiden, aber in diesem Falle ist sie – glaube ich – vertretbar.↩︎</p></li>
<li id="fn2"><p>Ich weiß, Planeten sind meist kugelförmig und keine Kisten, aber in der virtuellen Welt von Proceso ist alles möglich.↩︎</p></li>
<li id="fn3"><p>Leider kennt Proceso dafür nicht das pythonische <code>with push():</code>-Statement, das die Befehle für das neue Koordinatensystem durch Einrücken klammern und so das jeweilige <code>pop()</code> überflüssig machen würde.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Proceso</category>
  <category>Python</category>
  <category>PyScript</category>
  <category>Processing</category>
  <category>Simulation</category>
  <category>Creative Coding</category>
  <guid>https://kantel.github.io/posts/2025071301_planetensystem_proceso/</guid>
  <pubDate>Sun, 13 Jul 2025 17:40:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025071301_planetensystem_proceso/images/planetensystem.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Spaß mit Proceso: For Your Eyes Only</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025071201_for_your_eyes_only/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54650041848/"><img src="https://kantel.github.io/posts/2025071201_for_your_eyes_only/images/eyes-b.jpg" class="img-fluid"></a></p>
<p>Nach meinem <a href="https://kantel.github.io/posts/2025071101_pythagoras_baum_py5/">gestrigen Abenteuer</a> mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/py5.html">Py5</a>, dem Python3-Port von Processing, wollte ich heute etwas völlig Sinnbefreites mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/pyscript.html">PyScript</a> und <a href="https://proceso.cc/">Proceso</a> anstellen, denn Proceso lehnt sich sehr stark an Py5 an (es ist in der Syntax nahezu identisch), nur daß es im Browser lauffähige Sketche erzeugt.</p>
<p>Ältere Mac-Nutzer erinnern sich vielleicht noch an ein Gadget, das von System&nbsp;7 bis System&nbsp;9 bei vielen Anwendern den Desktop zierte: Augen, die mit ihren Pupillen dem Mauszeiger folgten<sup>1</sup>. Genau dieses Gadget wollte ich mit Python und Proceso nachbauen:</p>
<iframe src="proceso/index.html" width="100%" height="360">
</iframe>
<p>Herausgekommen ist eine Art Emoji mit einem grellgelben, lächelnden Gesicht und großen, runden Augen, deren Pupillen tatsächlich dem Mauszeiger folgen. Erreicht habe ich dies mit folgendem, kleinen Script:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> proceso <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Sketch</span>
<span id="cb1-2"></span>
<span id="cb1-3">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">640</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">360</span></span>
<span id="cb1-4"></span>
<span id="cb1-5">p5 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Sketch()</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> setup():</span>
<span id="cb1-8">    p5.create_canvas(WIDTH, HEIGHT)</span>
<span id="cb1-9">    p5.stroke_weight(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb1-10"></span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw():</span>
<span id="cb1-13">    p5.background(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">139</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">134</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">130</span>)</span>
<span id="cb1-14">    face()</span>
<span id="cb1-15">    eye(p5.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>, p5.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-16">    eye(p5.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>, p5.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-17"></span>
<span id="cb1-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> face():</span>
<span id="cb1-19">    p5.fill(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">244</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">244</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-20">    p5.circle(p5.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, p5.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>)</span>
<span id="cb1-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Den Mund zeichnen</span></span>
<span id="cb1-22">    p5.arc(p5.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, p5.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span>,</span>
<span id="cb1-23">           p5.QUARTER_PI, p5.PI <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> p5.QUARTER_PI)</span>
<span id="cb1-24"></span>
<span id="cb1-25"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> eye(x, y):</span>
<span id="cb1-26">    p5.fill(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>)</span>
<span id="cb1-27">    p5.circle(x, y, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>)</span>
<span id="cb1-28">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Die Pupillen folgen der Maus</span></span>
<span id="cb1-29">    mx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.mouse_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x</span>
<span id="cb1-30">    my <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.mouse_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y</span>
<span id="cb1-31">    p5.fill(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb1-32">    p5.circle(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> mx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> my<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>)</span>
<span id="cb1-33">    </span>
<span id="cb1-34">p5.run_sketch(setup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>setup, draw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>draw)</span></code></pre></div>
<p>Es wäre nicht wirklich notwendig gewesen, aber um der Modularität willen habe ich das Zeichnen des Gesichtes in die Funktion <code>face()</code> und das Zeichnen der Augen in die Funtion <code>eye()</code> ausgelagert. Mit den Parametern in dem <code>circle()</code>-Aufruf in <code>eye()</code> habe ich solange experimentiert, bis das Ergebnis meinen Vorstellungen entsprach.</p>
<p>Die Idee zu den Augen habe ich einem <a href="https://lernprocessing.wordpress.com/2010/01/10/funktionen/">(Java-) Processing-Tutorial</a> von <em>Thomas Koberger</em> entnommen, das ich variiert und nach Proceso übertragen habe. Auf <a href="https://lernprocessing.wordpress.com/2010/01/18/processing-links/">seinen Seiten</a> findet Ihr übrigens noch viele weitere, interessante und lehrreiche Tutorials, so daß ich Euch einen Besuch dort empfehle – auch wenn sie schon seit längerem kein Update mehr erfahren haben.</p>
<p>Procesos Syntax ist wirklich sehr stark an Py5 angelehnt, vieles kann man Eins-zu-Eins übernehmen. Auch ich habe mich für dieses Skriptchen bei der <a href="https://py5coding.org/reference/sketch_arc.html">Py5-Dokumentation</a> bedient. Wenn ich mir was wünschen dürfte, wäre es, daß sich <em>James Schmitz</em>, der Schöpfer von Py5, der auch schon über einen <a href="https://kantel.github.io/posts/2024072701_py5_pyscript/">Port nach PyScript spekuliert</a> hatte, und <em>Nick McIntyre</em>, der Kopf hinter Proceso, zusammenraufen und die bestehenden Lücken in der Syntax von Py5 und Proceso schließen. Man wird ja schließlich noch träumen dürfen.</p>
<section id="verwendete-literatur" class="level2">
<h2 class="anchored" data-anchor-id="verwendete-literatur">Verwendete Literatur</h2>
<ul>
<li>Thomas Koberger: <em><a href="https://lernprocessing.wordpress.com/2010/01/10/funktionen/">Funktionen</a></em>, Processing-Tutorial vom 10. Januar 2010</li>
</ul>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Fußnoten</h2>

<ol>
<li id="fn1"><p>Eigentlich war es ein <a href="https://de.wikipedia.org/wiki/X_Window_System">X11</a>-Gagdet, das nach MacOS portiert worden war.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Proceso</category>
  <category>Python</category>
  <category>Py5</category>
  <category>PyScript</category>
  <category>Processing</category>
  <category>Creative Coding</category>
  <guid>https://kantel.github.io/posts/2025071201_for_your_eyes_only/</guid>
  <pubDate>Sat, 12 Jul 2025 16:10:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025071201_for_your_eyes_only/images/eyes.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Der Pythagoras-Baum in Python (Py5)</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025071101_pythagoras_baum_py5/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54648032963/"><img src="https://kantel.github.io/posts/2025071101_pythagoras_baum_py5/images/rabbit-b.jpg" class="img-fluid"></a></p>
<p>Heute möchte ich mein <a href="https://kantel.github.io/posts/2025060201_spass_mit_tigerjython/">vor zwei Tagen gegebenes Versprechen</a> einlösen und mal wieder etwas mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/py5.html">Py5</a>, dem Python&nbsp;3-Port von Processing, anstellen. Ich habe dafür den <a href="https://de.wikipedia.org/wiki/Pythagoras-Baum">Pythagoras-Baum</a> wieder <a href="https://kantel.github.io/posts/2025060201_spass_mit_tigerjython/">hervorgekramt</a> und in einem leicht anderen Algorithmus<sup>1</sup>, aber auch wieder rekursiv, implementiert.</p>
<p>Die Geschichte des Pythagoras-Baumes<sup>2</sup> geht auf den niederländischen Ingenieur und späteren Mathematiklehrer <em>Albert E. Bosman</em> (1891–1961) zurück. Er entwarf 1942 während des 2.&nbsp;Weltkrieges in seiner Freizeit an einem Zeichenbrett, an dem er sonst U-Boot-Pläne zeichnete, geometrische Muster. Seine Graphiken wurden 1957 in dem Buch »<em>Het wondere onderzoekingsveld der vlakke meetkunde</em>« veröffentlicht. Der Pythagoras-Baum beruht auf einer rekursiven Abbildung des Pythagoras-Lehrsatzes: Die beiden Quadrate auf den Katheten des rechtwinkligen Dreiecks dienen als Verzweigung, auf dem jedes Kathetenquadrat sich wiederum verzweigt.</p>
<section id="der-asymmetrische-pythagoras-baum" class="level2">
<h2 class="anchored" data-anchor-id="der-asymmetrische-pythagoras-baum">Der asymmetrische Pythagoras-Baum</h2>
<p><a href="https://www.flickr.com/photos/schockwellenreiter/54642425458/"><img src="https://kantel.github.io/posts/2025071101_pythagoras_baum_py5/images/asympyth.jpg" class="img-fluid"></a></p>
<p>Der asymmetrische Pythagoras-Baum ist die allgemeine Form des Pythagoras-Baumes. Um die Funktion rekursiv aufrufen zu können, mußte ich sie aus der <code>draw()</code>-Funktion auslagern und sie in einen eigenen Aufruf packen:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw_pythagoras(a1, a2, b1, b2, level):</span>
<span id="cb1-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (level <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb1-3">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Eckpunkte berechnen</span></span>
<span id="cb1-4">        n1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>b2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> a2</span>
<span id="cb1-5">        n2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>a1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1</span>
<span id="cb1-6">        c1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n1</span>
<span id="cb1-7">        c2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n2</span>
<span id="cb1-8">        d1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n1</span>
<span id="cb1-9">        d2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n2</span>
<span id="cb1-10">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Start-Rechteck zeichnen</span></span>
<span id="cb1-11">        py5.fill(palette[(level<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>])</span>
<span id="cb1-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> py5.begin_closed_shape():</span>
<span id="cb1-13">            py5.vertex(a1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> xmitte, ymax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> a2)</span>
<span id="cb1-14">            py5.vertex(b1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> xmitte, ymax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> b2)</span>
<span id="cb1-15">            py5.vertex(c1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> xmitte, ymax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> c2)</span>
<span id="cb1-16">            py5.vertex(d1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> xmitte, ymax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> d2)</span>
<span id="cb1-17">        e1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> d1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> w1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(c1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> d1) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> w2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>n1</span>
<span id="cb1-18">        e2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> d2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> w1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(c2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> d2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> w2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>n2</span>
<span id="cb1-19">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Schenkel-Quadrate zeichnen</span></span>
<span id="cb1-20">        draw_pythagoras(e1, e2, c1, c2, level<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-21">        draw_pythagoras(d1, d2, e1, e2, level<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<p>Zum Zeichnen der einzelnen Quadrate habe ich nicht die <code>rect()</code>-Funktion genutzt, sondern Shapes, mit denen sich Punkte zu einem beliebigen Gebilde oder Polygon zusammenfassen lassen. Hierzu müssen sie erst einmal mit <code>with begin_closed_shape()</code> geklammert werden. Darin werden dann mit <code>vertex(x, y)</code> nacheinander die einzelnen Punkte aufgerufen, die (im einfachsten Fall) durch Linien miteinander verbunden werden sollen. Mit <code>begin_closed_shape</code> teile ich dem Sketch auch mit, daß das entstehende Polygon auf jeden Fall geschlossen werden soll, ein einfaches with <code>begin_shape()</code> würde es im Zweifelsfall offen lassen.</p>
<p>Der Aufruf ist rekursiv: Nachdem zuerst das Grundquadrat gezeichnet wurde, werden die rechten und die linken Schenkelquadrate gezeichnet, die dann wieder als Grundquadrate für den nächsten Rekursionslevel fungieren.</p>
<p>Py5 ist gegenüber Rekursionstiefen relativ robust. Die benutzte Rekursionstiefe von 12 wird klaglos abgearbeitet, auch Rekursionstiefen bis 20 sind kein Problem. Auch eine Rekursionstiefe von 22 oder gar 25 wurde – mit etwas Geduld – absturzfrei berechnet. Der Erkenntnisgewinn ist dabei aber vergleichsweise gering, da die einzelnen »Blätter« nur noch ein undurchschaubarer Pixelhaufen sind.</p>
</section>
<section id="die-farben" class="level2">
<h2 class="anchored" data-anchor-id="die-farben">Die Farben</h2>
<p>Für die Farben habe ich eine Palette in einer Liste zusammengestellt, die der Reihe nach die Quadrate einfärbt. Da die Liste nur 10 Elemente enthält, habe ich mit <code>fill(palette[(level-1)%10])</code> dafür gesorgt, daß nach 10 Leveln die Paletten-Liste wieder von vorne durchlaufen wird.</p>
</section>
<section id="der-quellcode" class="level2">
<h2 class="anchored" data-anchor-id="der-quellcode">Der Quellcode</h2>
<p>Da die eigentliche Aufgabe des Programms in die Funktion <code>draw_pythagoras()</code> ausgelagert wurde, ist der restlich Quellcode von erfrischender Kürze:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> py5</span>
<span id="cb2-2"></span>
<span id="cb2-3">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">640</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span></span>
<span id="cb2-4"></span>
<span id="cb2-5">palette <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [py5.color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">189</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">183</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">110</span>), py5.color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), py5.color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">34</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">139</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">105</span>),</span>
<span id="cb2-6">           py5.color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">152</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">251</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">152</span>), py5.color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">107</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">47</span>), py5.color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">139</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">69</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>),</span>
<span id="cb2-7">           py5.color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">154</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">205</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>), py5.color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">107</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">142</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span>), py5.color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">139</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">134</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">78</span>),</span>
<span id="cb2-8">           py5.color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">139</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">115</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>)]</span>
<span id="cb2-9"></span>
<span id="cb2-10">xmax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600</span></span>
<span id="cb2-11">xmitte <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span></span>
<span id="cb2-12">ymax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">440</span></span>
<span id="cb2-13">level <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span></span>
<span id="cb2-14">w1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.36</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Winkel 1</span></span>
<span id="cb2-15">w2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.48</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Winkel 2</span></span>
<span id="cb2-16"></span>
<span id="cb2-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> setup():</span>
<span id="cb2-18">    py5.size(WIDTH, HEIGHT)</span>
<span id="cb2-19">    py5.window_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Asymmetrischer Pythagorasbaum"</span>)</span>
<span id="cb2-20">    py5.background(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">234</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">218</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">184</span>)</span>
<span id="cb2-21">    py5.stroke_weight(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-22">    py5.no_loop()</span>
<span id="cb2-23"></span>
<span id="cb2-24"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw_pythagoras(a1, a2, b1, b2, level):</span>
<span id="cb2-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (level <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb2-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Eckpunkte berechnen</span></span>
<span id="cb2-27">        n1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>b2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> a2</span>
<span id="cb2-28">        n2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>a1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1</span>
<span id="cb2-29">        c1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n1</span>
<span id="cb2-30">        c2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n2</span>
<span id="cb2-31">        d1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n1</span>
<span id="cb2-32">        d2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n2</span>
<span id="cb2-33">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Start-Rechteck zeichnen</span></span>
<span id="cb2-34">        py5.fill(palette[(level<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>])</span>
<span id="cb2-35">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> py5.begin_closed_shape():</span>
<span id="cb2-36">            py5.vertex(a1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> xmitte, ymax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> a2)</span>
<span id="cb2-37">            py5.vertex(b1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> xmitte, ymax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> b2)</span>
<span id="cb2-38">            py5.vertex(c1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> xmitte, ymax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> c2)</span>
<span id="cb2-39">            py5.vertex(d1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> xmitte, ymax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> d2)</span>
<span id="cb2-40">        e1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> d1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> w1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(c1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> d1) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> w2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>n1</span>
<span id="cb2-41">        e2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> d2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> w1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(c2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> d2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> w2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>n2</span>
<span id="cb2-42">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Schenkel-Quadrate zeichnen</span></span>
<span id="cb2-43">        draw_pythagoras(e1, e2, c1, c2, level<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-44">        draw_pythagoras(d1, d2, e1, e2, level<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-45"></span>
<span id="cb2-46"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw():</span>
<span id="cb2-47">    draw_pythagoras(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>(xmax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, xmax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, level)</span>
<span id="cb2-48">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I did it, Babe!"</span>)</span>
<span id="cb2-49"></span>
<span id="cb2-50">py5.run_sketch()</span></code></pre></div>
<p>Auch wenn es nicht nötig gewesen wäre, ich mag es einfach (und es dient der Übersichtlichkeit), wenn ich meine Py5-Sketche mit <code>def setup()</code> und <code>def draw()</code> gliedere. Mit <code>no_loop()</code> habe ich dann dafür gesorgt, daß die <code>draw()</code>-Schleife auch nur einmal abgearbeitet wird.</p>
</section>
<section id="der-symmetrische-pythagoras-baum" class="level2">
<h2 class="anchored" data-anchor-id="der-symmetrische-pythagoras-baum">Der symmetrische Pythagoras-Baum</h2>
<p><a href="https://www.flickr.com/photos/schockwellenreiter/54642425448/"><img src="https://kantel.github.io/posts/2025071101_pythagoras_baum_py5/images/sympyth.jpg" class="img-fluid"></a></p>
<p>Der symmetrische Pythagoras-Baum ist einer der möglichen Spezialfälle. Man erhält ihn zum Beispiel, wenn man die beiden Winkelkonstanten <code>w1</code> und <code>w2</code> jeweils beide auf <img src="https://latex.codecogs.com/png.latex?0.5"> setzt.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1">xmax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600</span></span>
<span id="cb3-2">xmitte <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">330</span></span>
<span id="cb3-3">ymax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">420</span></span>
<span id="cb3-4">level <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span></span>
<span id="cb3-5">w1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Winkel 1</span></span>
<span id="cb3-6">w2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Winkel 2</span></span></code></pre></div>
<p>Die Änderungen der drei Werte <code>xmax</code>, <code>xmitte</code> und <code>ymax</code> sind rein kosmetischer Natur. Sie dienen nur dazu, den Baum im Ausgabefenster hübsch zu zentrieren.</p>
<p>Lediglich diese Parameter sind zu ändern, das übrige Programm bleibt unverändert.</p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54648032963/">Das Kaninchen und die Python</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>Colored Franco-Belgian comic style. Illustration of a green python with glasses walks with a rabbit through a futuristic, cubic world. The rabbit wears a dark blue vest and holds a large pocket watch. The python points to a strange tree made of cubes</em>«. Modell: Flux (Pro), Style: None.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Fußnoten</h2>

<ol>
<li id="fn1"><p>Den rekursiven Algorithmus habe ich einem Pascal-Programm aus Jürgen Plate: <em>Computergrafik: Einführung – Algorithmen – Programmentwicklung</em>, München (Franzis) 2.&nbsp;Auflage 1988, Seiten 460-462 entnommen.↩︎</p></li>
<li id="fn2"><p>Nach Dietmar Herrmann, <em>Algorithmen für Chaos und Fraktale</em>, Bonn (Addison-Wesley) 1994, Seiten 170f.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Py5</category>
  <category>Python</category>
  <category>Dynamische Systeme</category>
  <category>Mathematik</category>
  <category>Processing</category>
  <category>Creative Coding</category>
  <guid>https://kantel.github.io/posts/2025071101_pythagoras_baum_py5/</guid>
  <pubDate>Fri, 11 Jul 2025 15:20:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025071101_pythagoras_baum_py5/images/rabbit.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Neu in meiner Bibliothek: Fraktale und Dynamische Systeme (2 Bände)</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025070901_fraktale_dynamische_systeme/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54643923204/"><img src="https://kantel.github.io/posts/2025070901_fraktale_dynamische_systeme/images/bibliobadger-b.jpg" class="img-fluid"></a></p>
<p>Soeben brachte mir der reitende Paketbote ein Päckchen, über das ich mich sehr gefreut habe. Denn es enthielt <a href="https://kantel.github.io/posts/2025060502_fraktales_kochbuch/">zwei weitere Bücher</a>, die mir der regelmäßige Gast hier im <del>Blog</del> Kritzelheft und Inspirationsquelle für viele meiner Beiträge, der »Freund aus Bremen«, <em>Karl-Heinz Becker</em>, geschickt hatte.</p>
<div style="float: right; margin-left: 12px; margin-top: 6px;">
<a href="https://www.amazon.de/Fraktale-Dynamische-Systeme-Computergrafische-Experimente/dp/B0FDW2LWY6/"><img src="https://kantel.github.io/posts/2025070901_fraktale_dynamische_systeme/images/buch01.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.amazon.de/Code-Archiv-Dynamische-Computergrafische-Experimente/dp/B0FDGB16TY/"><img src="https://kantel.github.io/posts/2025070901_fraktale_dynamische_systeme/images/buch02.jpg" class="img-fluid"></a>
</div>
<p>Nach dem Buch »<a href="https://www.amazon.de/Kochrezepte-f%C3%BCr-Fraktale-Computergrafische-Experimente/dp/B0DLTZ13JY">Kochrezepte für Fraktale: Computergrafische Experimente mit Python</a>« (Amazon-Link) hat die Ideenschmiede von <em>Karl-Heinz Becker</em> und <em>Michael Dörfler</em> zwei weitere Werke unters staunende Volk gebracht: Einmal als Hauptwerk »<a href="https://www.amazon.de/Fraktale-Dynamische-Systeme-Computergrafische-Experimente/dp/B0FDW2LWY6/">Fraktale und Dynamische Systeme: Computergrafische Experimente mit Processing</a>« (Amazon-Link) und dann als Supplement-Band das dazugehörende »<a href="https://www.amazon.de/Code-Archiv-Dynamische-Computergrafische-Experimente/dp/B0FDGB16TY/">Code Archiv - Fraktale und Dynamische Systeme: Computergrafische Experimente mit Processing</a>« (noch ein Amazon-Link). Der Hauptband ist eine komplett überarbeitete und erweiterte Neuausgabe von »Dynamische Systeme und Fraktale. Computergrafische Experimente mit Pascal«, das in der Erstausgabe 1986 bei Vieweg in Braunschweig erschienen ist<sup>1</sup>. Die Autoren haben nicht nur einfach die Programme von Pascal nach Processing portiert, sondern auch die neuen, wissenschaftlichen Erkenntnisse der letzten 40 Jahre berücksichtigt.</p>
<p>Während der Hauptband sich auf die Programmierung mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processing.html">Processing (Java)</a> konzentriert (mit einigen Ausflügen nach <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processingpy.html">Processing.py</a> und <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/p5js.html">P5.js</a>), finden die Processing-Dialekte Processing.py und P5.js im Zusatzband »Code Archiv« stärker Berücksichtigiung.</p>
<p>Alles in allem sind diese beiden Bücher ebenfalls eine wertvolle Inspirationsquelle für meine eigenen Experimente mit Python. Ich werde dafür in Zukunft stärker auf <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/py5.html">Py5</a> (für statische Bilder) und <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/pyscript.html">PyScript</a> mit <a href="https://proceso.cc/">Proceso</a> (für Animationen) setzen. Danke <em>Kalle</em>, danke <em>Michael</em>, Ihr habt mir eine sehr große Freude gemacht.</p>
<p><strong>Caveat</strong>: Ich bin mit <em>Karl-Heinz Becker</em> und <em>Michael Dörfler</em> schon seit vielen Jahren befreundet und daher voreingenommen. Trotzdem bin ich sicher, daß ich auch diese beiden Bücher mit gutem Gewissen empfehlen kann.</p>
<section id="literatur" class="level3">
<h3 class="anchored" data-anchor-id="literatur">Literatur</h3>
<p>Hier noch einmal die bibliographischen Angaben:</p>
<ul>
<li>Karl-Heinz Becker, Michael Dörfler: <em><a href="https://www.amazon.de/Fraktale-Dynamische-Systeme-Computergrafische-Experimente/dp/B0FDW2LWY6/">Fraktale und Dynamische Systeme: Computergrafische Experimente mit Processing</a></em>, Bremen (Selbstverlag) 2025</li>
<li>Karl-Heinz Becker, Michael Dörfler: <em><a href="https://www.amazon.de/Code-Archiv-Dynamische-Computergrafische-Experimente/dp/B0FDGB16TY/">Code Archiv - Fraktale und Dynamische Systeme: Computergrafische Experimente mit Processing</a></em>, Bremen (Selbstverlag) 2025</li>
</ul>
<p>Ich finde es nämlich auch bemerkenswert, daß die beiden Autoren auf einen Verlag verzichtet und die Bücher statt dessen bei <em>Kindle Direct Publishing</em> veröffentlicht haben (daher führen die Links ausnahmsweise zu Amazon). Sie können sie über diesen Weg nämlich günstiger anbieten. Auch das ist ein Vorbild für mich!</p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54643923204/">Der Dachs in seiner Bibliothek</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>Colored Franco-Belgian comic style. Illustration of a badger in a red dressing gown sits in a wing chair in his cave in front of a huge library with many shelves and reads a fairy tale from a thick book</em>«. Modell: Flux (Pro), Style: None.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Fußnoten</h2>

<ol>
<li id="fn1"><p>Ich besitze die dritte, ebenfalls schon überarbeitete und erweiterte Ausgabe von 1989, eine vierte Auflage war zuletzt 1991 erschienen.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Bücher</category>
  <category>Dynamische Systeme</category>
  <category>Mathematik</category>
  <category>Processing</category>
  <category>Processing.py</category>
  <category>P5.js</category>
  <category>Creative Coding</category>
  <guid>https://kantel.github.io/posts/2025070901_fraktale_dynamische_systeme/</guid>
  <pubDate>Wed, 09 Jul 2025 14:55:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025070901_fraktale_dynamische_systeme/images/bibliobadger.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Shaun das Schaf und seine Spießgesellen: Eine Simulation in vier Schritten</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025070602_shaun_das_schaf/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54637186835/"><img src="https://kantel.github.io/posts/2025070602_shaun_das_schaf/images/shaun-b.jpg" class="img-fluid"></a></p>
<p>Nachdem die Installation (via <code>pypi</code>) von <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/pyp5js.html">pyp5js</a> bei mir gewaltig schiefgelaufen war (<code>werkzeug</code> konnte irgendeine URL-Bibliothek nicht finden), habe ich beschlossen, mich für Python-Projekte (außer Spielen), <a href="https://kantel.github.io/posts/2025062901_proseco_first_steps/">die im Browser laufen sollen</a>, erst einmal auf <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/pyscript.html">PyScript</a> mit <a href="https://proceso.cc/">Proceso</a> zu beschränken. Als ersten echten Testfall habe ich mir dann ein Projekt herausgesucht, das ich schon im März&nbsp;2019 einmal in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processingpy.html">Processing.py</a> programmiert hatte: <a href="http://blog.schockwellenreiter.de/2019/03/2019031001.html">Shaun das Schaf und seine Spießgesellen</a>.</p>
<p>Es basiert auf dem »Crazy Sheep Programm«, das <em>Peter Farell</em> in seinem wunderbaren Buch »<a href="https://nostarch.com/mathadventures">Math Adventures with Python</a>« ebenfalls in Processing.py implementiert hatte (Seiten 186ff.). Ich habe die Reimplementierung in Proceso in vier Schritte aufgeteilt. Aber erst einmal galt es, ein einfaches Proceso-Grundgerüst (ein <em>Boilerplate</em>) zu erstellen (Datei <code>sketch.py</code>):</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> proceso <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Sketch</span>
<span id="cb1-2"></span>
<span id="cb1-3">p5 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Sketch()</span>
<span id="cb1-4"></span>
<span id="cb1-5">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">640</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>)</span>
<span id="cb1-6">FPS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> setup():</span>
<span id="cb1-9">    p5.create_canvas(WIDTH, HEIGHT)</span>
<span id="cb1-10">    p5.frame_rate(FPS)</span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw():</span>
<span id="cb1-13">    p5.background(GREEN)</span>
<span id="cb1-14"></span>
<span id="cb1-15">p5.run_sketch(setup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>setup, draw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>draw)</span></code></pre></div>
<p>Da die Simulation nachvollziehbar bleiben sollte, habe ich die Simulation auf fünf Schritte in der Sekunde gedrosselt:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1">FPS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb2-2">p5.frame_rate(FPS)</span></code></pre></div>
<p>Die übrigen Dateien (<code>index.html</code>, <code>pyscript.json</code> und <code>style.css</code>) können genauso <a href="https://kantel.github.io/posts/2025062901_proseco_first_steps/">wie in meinem ersten Versuch</a> unverändert übernommen werden (eventuell den <code>title</code> in der <code>index.html</code> anpassen).</p>
<section id="schritt-1-shaun-das-schaf-betritt-die-bühne" class="level2">
<h2 class="anchored" data-anchor-id="schritt-1-shaun-das-schaf-betritt-die-bühne">Schritt 1: Shaun das Schaf betritt die Bühne</h2>
<p>Im ersten Schritt wollte ich nur <a href="https://de.wikipedia.org/wiki/Shaun_das_Schaf">Shaun das Schaf</a> auf eine grüne Wiese schicken. Daher habe ich den Schafen erst einmal eine eigene Klasse (<code>Sheep</code>) spendiert:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Sheep:</span>
<span id="cb3-2"></span>
<span id="cb3-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, _x, _y):</span>
<span id="cb3-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _x</span>
<span id="cb3-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _y</span>
<span id="cb3-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb3-7"></span>
<span id="cb3-8">   <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-9">        move <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb3-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> uniform(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>move, move)</span>
<span id="cb3-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> uniform(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>move, move)</span>
<span id="cb3-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.check_border()</span>
<span id="cb3-13">    </span>
<span id="cb3-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> check_border(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> p5.width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.size:</span>
<span id="cb3-16">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.size</span>
<span id="cb3-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> p5.height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.size:</span>
<span id="cb3-18">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.size</span>
<span id="cb3-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.size:</span>
<span id="cb3-20">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.size</span>
<span id="cb3-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.size:</span>
<span id="cb3-22">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.size</span>
<span id="cb3-23">    </span>
<span id="cb3-24">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-25">        p5.stroke_weight(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-26">        p5.stroke(BLACK)</span>
<span id="cb3-27">        p5.circle(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.size)</span></code></pre></div>
<p>Die <code>update()</code>-Methode ist sehr einfach gehalten: Das Schaf (eigentlich ein Kreis) bewegt sich bei jedem Zeitschritt zufällig zwischen -10 und 10 Pixeln in x- und y-Richtung weiter und wenn es auf den Rand des Bildschirms trifft, muss es dort verharren, bis der Zufallszahlengenerator ihm eine neue Bewegung in eine andere Richtung zuweist, die es auf ein anderes Feld innerhalb der Weide (des Fensters) führt (Methode <code>check_border()</code>).</p>
<p>Dann bekommt das Programm noch ein paar (Farb-) Konstanten verpasst</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1">WHITE  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>)</span>
<span id="cb4-2">BLACK  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb4-3">GREEN  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">98</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">199</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">119</span>)</span></code></pre></div>
<p>und in den <code>setup()</code>- und <code>draw()</code>-Methoden wird das Schaf erzeugt und auf die Reise geschickt:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> setup():</span>
<span id="cb5-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">global</span> shaun</span>
<span id="cb5-3">    p5.create_canvas(WIDTH, HEIGHT)</span>
<span id="cb5-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the sheeps</span></span>
<span id="cb5-5">    shaun <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Sheep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">320</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)</span>
<span id="cb5-6">    p5.frame_rate(FPS)</span>
<span id="cb5-7"></span>
<span id="cb5-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw():</span>
<span id="cb5-9">    p5.background(GREEN)</span>
<span id="cb5-10">    shaun.update()</span>
<span id="cb5-11">    shaun.draw()</span></code></pre></div>
<p>Das häßliche <code>global</code> in <code>setup()</code> können wir im nächsten Schritt wieder eliminieren.</p>
<p>Wenn Ihr das Script laufen laßt, werden Ihr sehen, daß wirklich noch nicht viel passiert: Ein weißer Kreis irrt ziellos über eine grüne Ebene. Das ist alles.</p>
</section>
<section id="scnritt-2-vom-schaf-zur-schafherde" class="level2">
<h2 class="anchored" data-anchor-id="scnritt-2-vom-schaf-zur-schafherde">Scnritt 2: Vom Schaf zur Schafherde</h2>
<p>Das ändert sich jedoch massiv mit der zweiten Version des Programms. Doch zuerst einmal habe ich dem Hauptscript noch ein paar Importe von Zufallszahlengeneratoren und dann die Konstanten <code>PATCH_SIZE</code> (dazu später mehr) und <code>NO_SHEEPS</code>, sowie die Farbe <code>BROWN</code> spendiert:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> proceso <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Sketch</span>
<span id="cb6-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> uniform, randint</span>
<span id="cb6-3"></span>
<span id="cb6-4">p5 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Sketch()</span>
<span id="cb6-5"></span>
<span id="cb6-6">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">640</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>)</span>
<span id="cb6-7">FPS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb6-8">NO_SHEEPS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span></span>
<span id="cb6-9">PATCH_SIZE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb6-10"></span>
<span id="cb6-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Farben</span></span>
<span id="cb6-12">WHITE  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>)</span>
<span id="cb6-13">BLACK  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb6-14">BROWN  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">248</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">158</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb6-15">GREEN  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">98</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">199</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">119</span>)</span></code></pre></div>
<p>Neu ist auch die Klasse <code>Grass</code>, denn die Schafe sollen es abweiden können und hinterlassen dann eine abgeweidete, also braune Schafweide. Jedes mal, wenn ein Schaf einen »Patch« Gras abfrißt, bekommt es fünf Energiepunkte spendiert. Daher sieht diese Klasse so aus:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Grass:</span>
<span id="cb7-2"></span>
<span id="cb7-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, _x, _y, _size):</span>
<span id="cb7-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _x</span>
<span id="cb7-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _y</span>
<span id="cb7-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.energy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Energy from eating this patch</span></span>
<span id="cb7-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.eaten <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Hasn't been eaten yet</span></span>
<span id="cb7-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _size</span>
<span id="cb7-9">    </span>
<span id="cb7-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb7-11">        p5.no_stroke()</span>
<span id="cb7-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.eaten:</span>
<span id="cb7-13">            p5.fill(BROWN)</span>
<span id="cb7-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb7-15">            p5.fill(GREEN)</span>
<span id="cb7-16">        p5.rect(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.size, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.size)</span></code></pre></div>
<p>Die meisten Änderungen gibt es aber in der Klasse <code>Sheep</code>, die ja nun eine ganze Schafherde hervorbringen soll:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Sheep:</span>
<span id="cb8-2"></span>
<span id="cb8-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, _x, _y):</span>
<span id="cb8-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _x</span>
<span id="cb8-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _y</span>
<span id="cb8-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb8-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.energy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span></span>
<span id="cb8-8"></span>
<span id="cb8-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb8-10">        move <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb8-11">        rows_of_grass <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>PATCH_SIZE</span>
<span id="cb8-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> uniform(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>move, move)</span>
<span id="cb8-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> uniform(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>move, move)</span>
<span id="cb8-14">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.check_border()</span>
<span id="cb8-15">        x_scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>PATCH_SIZE)</span>
<span id="cb8-16">        y_scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>PATCH_SIZE)</span>
<span id="cb8-17">        grass <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lawn[x_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>rows_of_grass <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y_scale]</span>
<span id="cb8-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> grass.eaten:</span>
<span id="cb8-19">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.energy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> grass.energy</span>
<span id="cb8-20">            grass.eaten <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span></code></pre></div>
<p>Die Methoden <code>check_border()</code> und <code>draw()</code> der Klasse <code>Sheep</code> bleiben unverändert.</p>
<p>Was hat sich denn nun geändert? Zum einen bekommt jedes Schaf mit <code>self.energy = 20</code> eine Startenergie von 20 Punkten zugewiesen. Zum anderen bekommt jedes Schaf bei jedem Zeitschritt einen Energiepunkt abgezogen. Energie auftanken kann es nur, wenn es Gras frißt, denn Gras fressen soll sich schließlich wieder lohnen.</p>
<p>Aber es gilt noch ein anderes Problem zu berücksichtigen: Der Zufallszahlengenerator führt die Schafe nicht eindeutig auf ein Patchfeld mit Gras, da mußte ich dann ein wenig runden: Erstens ist die Weide in einem eindimensionalen Array abgespeichert, daher habe ich in der <code>update()</code>-Methode mit</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb9-1">        rows_of_grass <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>PATCH_SIZE</span></code></pre></div>
<p>erst einmal die Reihen des Feldes ermittelt. Damit auch immer eine Ganzzahl herauskommt, habe ich den Integer-Divisions-Operator <code>//</code> verwendet. Und dann habe ich mit</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb10-1">        x_scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>PATCH_SIZE)</span>
<span id="cb10-2">        y_scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>PATCH_SIZE)</span>
<span id="cb10-3">        grass <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lawn[x_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>rows_of_grass <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y_scale]</span></code></pre></div>
<p>dafür gesorgt, daß jedem Schaf immer der am nächsten gelegene Graspatch zum Abweiden zugewiesen wird. (Erfahrenen Processing-Programmierern wird dies aus der Bildverarbeitung bekannt vorkommen, da Processing auch Bilder immer als eindimensionale Arrays abspeichert und man so mit der gleichen Methode die x- und y-Koordinaten eines Bildes berechnen muß.)</p>
<p>Ja, was noch? Wenn der Rasenpatch abgeweidet ist, bekommt das Schaf fünf Energiepunkte spendiert und der Weidepatch eine braune Farbe zugewiesen.</p>
<p>(Patches als eigene Objekte (und Agenten) hat meines Wissens als erster <em>Mitchel Resnick</em> 1994 in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/starlogo.html">StarLogo</a> implementiert und in seinem Buch »Turtles, Termites, and Traffic Jams« vorgestellt.)</p>
<p>Die <code>setup()</code>- und die <code>draw()</code>-Methode des Hauptscripts haben auch ein paar einschneidende Veränderungen erfahren:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb11-1">sheeps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb11-2">lawn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> setup():</span>
<span id="cb11-5">    p5.create_canvas(WIDTH, HEIGHT)</span>
<span id="cb11-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the sheeps</span></span>
<span id="cb11-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(NO_SHEEPS):</span>
<span id="cb11-8">        sheeps.append(Sheep(randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, p5.width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>),</span>
<span id="cb11-9">                            randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, p5.height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)))</span>
<span id="cb11-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the grass</span></span>
<span id="cb11-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, p5.width, PATCH_SIZE):</span>
<span id="cb11-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, p5.height, PATCH_SIZE):</span>
<span id="cb11-13">            lawn.append(Grass(x, y, PATCH_SIZE))</span>
<span id="cb11-14">    p5.frame_rate(FPS)</span>
<span id="cb11-15"></span>
<span id="cb11-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw():</span>
<span id="cb11-17">    p5.background(GREEN)</span>
<span id="cb11-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update the grass first</span></span>
<span id="cb11-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> grass <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> lawn:</span>
<span id="cb11-20">        grass.draw()</span>
<span id="cb11-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># then the sheeps    </span></span>
<span id="cb11-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> sheep <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> sheeps:</span>
<span id="cb11-23">        sheep.update()</span>
<span id="cb11-24">        sheep.draw()</span></code></pre></div>
<p>Einmal ist durch die Deklaration der Listen für die Schafe (<code>sheeps[]</code>) und des Rasens (<code>lawn[]</code>) wie versprochen die ungeliebte <code>global</code>-Vereinbarung entfallen. Und dann werden die beiden Listen in der <code>setup()</code>-Methode gefüllt, wobei der Rasen zwar mit x- und y-Komponenten, aber dennoch in einer eindimensionalen Liste abgespeichert wird.</p>
<p>Da die Schafe sich ungehindert vermehren können, wird irgendwann die Weide zwar abgefressen, aber dennoch überfüllt sein. Darum möchte ich in der nächsten Version dieses Programmes nicht nur das Nachwachsen des Grases simulieren, sondern energiegeladene Schafe sollen sich auch reproduzieren, also vermehren können, aber wenn sie zuwenig Nahrung bekommen, müssen die Schafe leider verhungern.</p>
</section>
<section id="schritt-3-geburt-und-tod" class="level2">
<h2 class="anchored" data-anchor-id="schritt-3-geburt-und-tod">Schritt 3: Geburt und Tod</h2>
<p>Diesen Abschnitt kann ich erst einmal mit einer guten Nachricht einleiten: Im Hauptprogramm ändert sich nichts und die Klasse <code>Sheep</code> wird nur minimal verändert, und zwar bekommt die <code>update()</code>-Methode Routinen verpasst, die einmal das Verhungern kontrollieren und dann steuern, wie sich die Schafe vermehren:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb12-1">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb12-2">        move <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb12-3">        rows_of_grass <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>PATCH_SIZE</span>
<span id="cb12-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.energy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb12-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.energy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb12-6">            sheeps.remove(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>)</span>
<span id="cb12-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.energy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>:</span>
<span id="cb12-8">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.energy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Giving birth takes energy</span></span>
<span id="cb12-9">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add another sheep to the list</span></span>
<span id="cb12-10">            sheeps.append(Sheep(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col))</span></code></pre></div>
<p>Denn hier wird einmal festgelegt, daß Schafe verhungern (aus der Liste mit mit <code>sheeps.remove(self)</code> entfernt werden) und zum anderen, daß ein Schaf, das einen Energielevel von 50 Punkten oder mehr besitzt, sich vermehren soll. Dieser Vorgang kostet dem Tier zwar 30 Energiepunkte, aber dafür hat es sich quasi verdoppelt. Das neue Schaf wird auf der gleichen Position geboren, auf der sein Elternschaf sitzt, aber der Zufallszahlengenerator sorgt schnell dafür, daß beide Tiere bald getrennte Wege gehen.</p>
<p>Die zweite Änderung betrifft die <code>draw()</code>-Methode der Klasse <code>Grass</code>:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb13-1">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb13-2">        p5.no_stroke()</span>
<span id="cb13-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.eaten:</span>
<span id="cb13-4">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> uniform(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span>:</span>
<span id="cb13-5">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.eaten <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb13-6">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb13-7">                p5.fill(BROWN)</span>
<span id="cb13-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb13-9">            p5.fill(GREEN)</span>
<span id="cb13-10">        p5.rect(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.size, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.size)</span></code></pre></div>
<p>Hier wird mit einer Wahrscheinlichkeit von 5 Promille dem Gras die Chance gegeben, wieder zu wachsen, das heißt einen Patch wieder grün und abweidbar werden zu lassen.</p>
<p>Diese geringe Wahrscheinlichkeit reicht aus. Wenn Ihr die Simulation über einen längeren Zeitraum laufen lasst, werdet Ihr feststellen, daß die Schafspopulation mit den gegebenen Parametern stabil bleibt (die Parameter habe ich durch wildes Experimentieren herausgefunden). Sie kann zwar mal – vornehmlich zu Beginn, wenn alles noch grün ist – sehr groß werden oder im weiteren Verlauf auch sehr klein (unter zehn Schafe), aber sie stirbt fast nie mehr aus, sondern die Population pendelt immer um einen Mittelwert herum. In einigen, seltenen Fällen – wenn der Zufall die überlebenden Schafe nur auf abgeweidete Flächen führt – kann auch die gesamte Population aussterben, da müßte man dann noch ein wenig an den Energieparametern schrauben.</p>
<p>Dieses Verhalten ist aus ähnlichen <a href="https://de.wikipedia.org/wiki/R%C3%A4uber-Beute-Beziehung">Räuber- und Beute-Simulationen</a> bekannt (ich ernenne die Schafe jetzt einfach mal zu gefährlichen Raubtieren ehrenhalber und das Gras zu ihrer Beute) und wird nach ihren Entdeckern <a href="https://de.wikipedia.org/wiki/Lotka-Volterra-Regeln">Lotka-Volterra-Regeln</a>, beziehungsweise mathematisch präzise <a href="https://de.wikipedia.org/wiki/Lotka-Volterra-Gleichungen">Lotka-Volterra-Gleichungen</a> genannt.</p>
</section>
<section id="schrtt-4-es-kann-nur-einen-eine-farbe-geben" class="level2">
<h2 class="anchored" data-anchor-id="schrtt-4-es-kann-nur-einen-eine-farbe-geben">Schrtt 4: Es kann nur einen (eine Farbe) geben!</h2>
<p>Als abschließende Änderung habe ich die Schafe in vier unterschiedlich farbige Varianten aufgeteilt, während das sonstige Verhalten unverändert geblieben ist. Daher sind noch ein paar weitere Farbdefinitionen hinzugekommen</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Farben</span></span>
<span id="cb14-2">WHITE  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>)</span>
<span id="cb14-3">BLACK  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb14-4">BROWN  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">248</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">158</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb14-5">GREEN  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">98</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">199</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">119</span>)</span>
<span id="cb14-6">YELLOW <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">248</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">239</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">34</span>)</span>
<span id="cb14-7">PURPLE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">148</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">103</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">189</span>)</span>
<span id="cb14-8">RED <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>)</span>
<span id="cb14-9">color_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [WHITE, RED, YELLOW, PURPLE]</span></code></pre></div>
<p>und die Klasse <code>Sheep</code> bekommt im Konstruktor eine Farbe mit übergeben</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb15-1">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, _x, _y, _col):</span>
<span id="cb15-2">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _x</span>
<span id="cb15-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _y</span>
<span id="cb15-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _col</span>
<span id="cb15-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb15-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.energy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span></span></code></pre></div>
<p>und in der Methode <code>draw()</code> als vorletzte Anweisung den Befehl</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb16-1">        p5.fill(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col)</span></code></pre></div>
<p>bevor sie das Schaf als Kreis zeichnen soll.</p>
<p>Nur das Hauptprogramm hat noch ein paar wesentlichere Änderungen erfahren. Erst einmal bei der Import-Anweisung:</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> uniform, randint, choice</span></code></pre></div>
<p>Hier wird also zusätzlich von <code>random</code> noch die Methode <code>choice()</code> importiert, die dazu dient, aus der Liste <code>colors</code> zufällig, aber gleichverteilt die Farben herauszusuchen und an die einzelnen Schafe zu verteilen.</p>
<p>Und im <code>setup()</code> werden dann diese Farben verteilt:</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> setup():</span>
<span id="cb18-2">    p5.create_canvas(WIDTH, HEIGHT)</span>
<span id="cb18-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the sheeps</span></span>
<span id="cb18-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(NO_SHEEPS):</span>
<span id="cb18-5">        sheeps.append(Sheep(randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, p5.width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>),</span>
<span id="cb18-6">                            randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, p5.height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>),</span>
<span id="cb18-7">                            choice(color_list)))</span>
<span id="cb18-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the grass</span></span>
<span id="cb18-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, p5.width, PATCH_SIZE):</span>
<span id="cb18-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, p5.height, PATCH_SIZE):</span>
<span id="cb18-11">            lawn.append(Grass(x, y, PATCH_SIZE))</span>
<span id="cb18-12">    p5.frame_rate(FPS)</span></code></pre></div>
<p>Die <code>draw()</code>-Funktion habe ich nicht noch einmal abgeschrieben, da sich in ihr nichts geändert hat.</p>
<iframe src="proseco/index.html" width="100%" height="400">
</iframe>
<p>Was glaubt Ihr, was nun passiert? Zu Beginn der Simulation tummeln sich fröhlich vier Gruppen verschieden farbiger Schafe auf der Weide. Im weiteren Verlauf stirbt jedoch eine Farbe nach der anderen aus, bis nur noch eine Farbe übrigbleibt. Welche Farbe jedoch übrigbleibt, ist nicht vorhersehbar und rein zufällig. (Um nicht so lange auf das Aussterben der Populationen warten zu müssen – das kann sich manchmal lange hinziehen –, könnt Ihr die <code>frame_rate</code> auf 60 FPS erhöhen.)</p>
<p>Auch dieses Verhalten ist bekannt und wurde 1975 unter anderem von <em>Manfred Eigen</em> und <em>Ruthild Winkler</em> in ihrem Buch »Das Spiel – Naturgesetze steuern den Zufall« im Kapitel über Selektion beschrieben:</p>
<blockquote class="blockquote">
<p>Es kann mit Sicherheit bei jedem Spiel die Tatsache der Selektion vorausgesagt werden, nicht dagegen das Detailergebnis, nämlich welche Kugelfarbe selektiert wird.</p>
</blockquote>
<p>Denn mit Ausnahme der Farbe verhalten sich alle Kreise identisch, das heißt, sie sind mit dem exakt gleichen genetischen Material ausgestattet. Man kann, um die Sache nicht zu kompliziert zu machen, auch einfach annehemen, daß die Farben Markierungen sind, die vom Beobachter auf die ansonsten genetisch identischen Schafe angebracht wurden.</p>
<p>Zu einem ähnlichen Ergebnis, kam ja schon das <a href="https://kantel.github.io/posts/2025062502_waehler_tigerjython/">Demokratie-Spiel</a>, das <em>Alexander K. Dewdney</em> in der <em>Scientific American</em> beschrieben hat: Wenn man lange genug Demokratie spielt, dann gewinnt zum Schluß eine Partei alle Sitze. Nur weiß man im Voraus nicht, welche.</p>
<p>Und in einem Ökosystem, in dem zwei oder mehr exakt gleiche Räuberpopulationen um die gleiche Beute konkurrieren, stirbt über kurz oder lang eine der beiden Populationen aus. Jede Population kann nur getrennt überleben, wenn sie sich ihre eigene, ökologische Nische sucht.</p>
<p>Wenn man jedoch, und auch das haben Eigen und Winkler beschrieben, einer Population auch nur einen winzigen Vorteil verschafft, dann überlebt diese Population. Wenn Ihr nämlich in der Klasse <code>Sheep</code> in der <code>update()</code>-Methode statt der Zeile <code>move = 10</code> diese Anweisung einfügt,</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb19-1">     <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb19-2">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RED <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> uniform(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span>:</span>
<span id="cb19-3">            move <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span></span>
<span id="cb19-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb19-5">            move <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span></code></pre></div>
<p>dann überlebt <strong>immer</strong> (und zwar ziemlich schnell) die rote Population.</p>
<p>Der Vollständigkeit halber hier jetzt der komplette Quellcode in der endgültigen Fassung:</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> proceso <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Sketch</span>
<span id="cb20-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> uniform, randint, choice</span>
<span id="cb20-3"></span>
<span id="cb20-4">p5 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Sketch()</span>
<span id="cb20-5"></span>
<span id="cb20-6">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">640</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>)</span>
<span id="cb20-7">FPS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb20-8">NO_SHEEPS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span></span>
<span id="cb20-9">PATCH_SIZE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb20-10"></span>
<span id="cb20-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Farben</span></span>
<span id="cb20-12">WHITE  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>)</span>
<span id="cb20-13">BLACK  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb20-14">BROWN  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">248</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">158</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb20-15">GREEN  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">98</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">199</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">119</span>)</span>
<span id="cb20-16">YELLOW <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">248</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">239</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">34</span>)</span>
<span id="cb20-17">PURPLE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">148</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">103</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">189</span>)</span>
<span id="cb20-18">RED <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>)</span>
<span id="cb20-19">color_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [WHITE, RED, YELLOW, PURPLE]</span>
<span id="cb20-20"></span>
<span id="cb20-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Sheep:</span>
<span id="cb20-22"></span>
<span id="cb20-23">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, _x, _y, _col):</span>
<span id="cb20-24">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _x</span>
<span id="cb20-25">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _y</span>
<span id="cb20-26">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _col</span>
<span id="cb20-27">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb20-28">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.energy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span></span>
<span id="cb20-29"></span>
<span id="cb20-30">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb20-31">        move <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb20-32">        rows_of_grass <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>PATCH_SIZE</span>
<span id="cb20-33">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.energy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb20-34">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.energy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb20-35">            sheeps.remove(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>)</span>
<span id="cb20-36">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.energy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>:</span>
<span id="cb20-37">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.energy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Giving birth takes energy</span></span>
<span id="cb20-38">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add another sheep to the list</span></span>
<span id="cb20-39">            sheeps.append(Sheep(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col))</span>
<span id="cb20-40">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> uniform(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>move, move)</span>
<span id="cb20-41">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> uniform(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>move, move)</span>
<span id="cb20-42">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.check_border()</span>
<span id="cb20-43">        x_scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>PATCH_SIZE)</span>
<span id="cb20-44">        y_scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>PATCH_SIZE)</span>
<span id="cb20-45">        grass <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lawn[x_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>rows_of_grass <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y_scale]</span>
<span id="cb20-46">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> grass.eaten:</span>
<span id="cb20-47">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.energy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> grass.energy</span>
<span id="cb20-48">            grass.eaten <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb20-49"></span>
<span id="cb20-50">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> check_border(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb20-51">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> p5.width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.size:</span>
<span id="cb20-52">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.size</span>
<span id="cb20-53">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> p5.height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.size:</span>
<span id="cb20-54">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.size</span>
<span id="cb20-55">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.size:</span>
<span id="cb20-56">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.size</span>
<span id="cb20-57">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.size:</span>
<span id="cb20-58">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.size</span>
<span id="cb20-59">    </span>
<span id="cb20-60">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb20-61">        p5.stroke_weight(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb20-62">        p5.stroke(BLACK)</span>
<span id="cb20-63">        p5.fill(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col)</span>
<span id="cb20-64">        p5.circle(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.size)</span>
<span id="cb20-65"></span>
<span id="cb20-66"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Grass:</span>
<span id="cb20-67"></span>
<span id="cb20-68">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, _x, _y, _size):</span>
<span id="cb20-69">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _x</span>
<span id="cb20-70">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _y</span>
<span id="cb20-71">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.energy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Energy from eating this patch</span></span>
<span id="cb20-72">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.eaten <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Hasn't been eaten yet</span></span>
<span id="cb20-73">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _size</span>
<span id="cb20-74">    </span>
<span id="cb20-75">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb20-76">        p5.no_stroke()</span>
<span id="cb20-77">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.eaten:</span>
<span id="cb20-78">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> uniform(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span>:</span>
<span id="cb20-79">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.eaten <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb20-80">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb20-81">                p5.fill(BROWN)</span>
<span id="cb20-82">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb20-83">            p5.fill(GREEN)</span>
<span id="cb20-84">        p5.rect(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.size, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.size)</span>
<span id="cb20-85"></span>
<span id="cb20-86">sheeps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb20-87">lawn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb20-88"></span>
<span id="cb20-89"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> setup():</span>
<span id="cb20-90">    p5.create_canvas(WIDTH, HEIGHT)</span>
<span id="cb20-91">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the sheeps</span></span>
<span id="cb20-92">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(NO_SHEEPS):</span>
<span id="cb20-93">        sheeps.append(Sheep(randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, p5.width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>),</span>
<span id="cb20-94">                            randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, p5.height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>),</span>
<span id="cb20-95">                            choice(color_list)))</span>
<span id="cb20-96">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the grass</span></span>
<span id="cb20-97">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, p5.width, PATCH_SIZE):</span>
<span id="cb20-98">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, p5.height, PATCH_SIZE):</span>
<span id="cb20-99">            lawn.append(Grass(x, y, PATCH_SIZE))</span>
<span id="cb20-100">    p5.frame_rate(FPS)</span>
<span id="cb20-101"></span>
<span id="cb20-102"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw():</span>
<span id="cb20-103">    p5.background(GREEN)</span>
<span id="cb20-104">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update the grass first</span></span>
<span id="cb20-105">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> grass <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> lawn:</span>
<span id="cb20-106">        grass.draw()</span>
<span id="cb20-107">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># then the sheeps    </span></span>
<span id="cb20-108">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> sheep <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> sheeps:</span>
<span id="cb20-109">        sheep.update()</span>
<span id="cb20-110">        sheep.draw()</span>
<span id="cb20-111"></span>
<span id="cb20-112">p5.run_sketch(setup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>setup, draw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>draw)</span></code></pre></div>
<p>Ihr könnt natürlich noch weiter an den Parametern schrauben, um vielleicht noch weitere Einsichten aus dieser einfachen Simulation zu gewinnen. Eine Möglichkeit wäre, die Lebenszeit der Schafe zu begrenzen. Sie könnten mit 255 Lebenspunkten anfangen und bei jedem Durchlauf wird ihnen davon etwas abgezogen. Sie »sterben«, wenn Ihre Lebenspunkte auf Null oder unter Null gefallen sind.</p>
<p>Interessant wäre dann, herauszufinden, ob und wie sich unterschiedliche Lebensspannen auf die Überlebenschancen der Populationen auswirken. Ihr seht, selbst so eine einfache und kleine Simulation kann einen lange beschäftigen.</p>
</section>
<section id="benutzte-und-weiterführende-literatur" class="level2">
<h2 class="anchored" data-anchor-id="benutzte-und-weiterführende-literatur">Benutzte und weiterführende Literatur</h2>
<ul>
<li>A.K. Dewdney: <em>Wie man π erschießt. Fünf leichte Stücke für WHILE-Schleifen und Zufallsgenerator, oder: lebensechte Simulationen von Zombies, Wählern und Warteschlangen</em>, in: Immo Diener (Hg.): <em>Computer-Kurzweil</em>, Heidelberg (Spektrum der Wissenschaft, Reihe: Verständliche Forschung) 1988</li>
<li>Manfred Eigen, Ruthild Winkler: <em>Das Spiel. Naturgesetze steuern den Zufall</em>, München (Piper), 1975 (unveränderte Taschenbuchausgabe 1985)</li>
<li>Peter Farrell: <em>Math Adventures with Python. An Illustrated Guide to Exploring Math with Code</em>, San Francisco CA (No Starch Press) 2019</li>
<li>Mitchel Resnick: <em>Turtles, Termites, and Traffic Jams – Explorations in Massively Parallel Microworlds</em>, Cambridge MA (MIT Press) 1994 (unveränderte Paperback-Ausgabe 1997)</li>
</ul>


</section>

 ]]></description>
  <category>Python</category>
  <category>PyScript</category>
  <category>Proceso</category>
  <category>Simulation</category>
  <category>Creative Coding</category>
  <guid>https://kantel.github.io/posts/2025070602_shaun_das_schaf/</guid>
  <pubDate>Sun, 06 Jul 2025 15:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025070602_shaun_das_schaf/images/shaun.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Gibt es denn nur noch Gehirnamputierte in Neukölln?</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025070601_escooter/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54635783857/"><img src="https://kantel.github.io/posts/2025070601_escooter/images/escooter-b.jpg" class="img-fluid"></a></p>
<p>Mit dieser beSCHEUERten Idee gelingt die Verkehrswende jedenfalls nicht.</p>
<hr>
<p><strong>Photo</strong> (<a href="https://creativecommons.org/licenses/by-sa/4.0/deed.de">cc</a>) 2025: <em><a href="http://cognitiones.kantel-chaos-team.de/cv.html">Jörg Kantel</a></em></p>



 ]]></description>
  <category>E-Scooter</category>
  <category>Neukölln</category>
  <category>Verkehrswende</category>
  <guid>https://kantel.github.io/posts/2025070601_escooter/</guid>
  <pubDate>Sun, 06 Jul 2025 13:55:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025070601_escooter/images/escooter.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
