<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Der Schockwellenreiter</title>
<link>https://kantel.github.io/index.html</link>
<atom:link href="https://kantel.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description>Schockwellenreiter</description>
<generator>quarto-1.2.269</generator>
<lastBuildDate>Mon, 24 Apr 2023 13:05:00 GMT</lastBuildDate>
<item>
  <title>Der Schockwellenreiter wird 23: Happy Birthday, liebes Kritzelheft</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023042401_schockwellenreiter_23/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://4.bp.blogspot.com/-ZPpOfUjmGQ0/UPHTPT9SG1I/AAAAAAAAB4A/yggKwyH1wPE/s1600/wiggily+5.jpg"><img src="https://kantel.github.io/posts/2023042401_schockwellenreiter_23/images/wiggilyskating-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p><strong>Dieselbe Prozedur wie jedes Jahr</strong>: <a href="http://www.schockwellenreiter.de/2000/04/24.html">Heute vor dreiundzwanzig Jahren</a> war es – im Gegensatz zu diesem Jahr – in Berlin unerträglich heiß (28°C), doch statt auf unserer <a href="http://www.kantel.de/privat/dg.html">Dachterrasse</a> (auf die verlinke ich auch nur einmal im Jahr 🤓 – seit unserem Umzug nach Britz vor dreizehn Jahren ist es ja auch nicht mehr »unsere« Dachterrasse) zu hocken und mir die Sonne auf den Bauch scheinen zu lassen, saß ich im schattigen Arbeitszimmer vor dem Rechner, wühlte mich durch die <a href="http://cognitiones.kantel-chaos-team.de/webworking/frameworks/frontier.html">Frontier</a>- und <a href="http://cognitiones.kantel-chaos-team.de/webworking/cms/manila.html">Manila</a>-Dokumentation und hob dieses <del>Weblog</del> Kritzelheft aus der Taufe.</p>
<p>Doch halt, etwas ist doch anders geworden! Ich habe meinen auch fast jedes Jahr gefaßten Vorsatz endlich in die Tat umgesetzt und diesem Kritzelheft das lange versprochene Relaunch verpaßt: Statt <a href="http://cognitiones.kantel-chaos-team.de/webworking/staticsites/rubyfrontier.html">RubyFrontier</a> sind es seit <a href="https://kantel.github.io/posts/2022120602_schockwellenreiteronline/">Dezember letzten Jahres</a> neue Werkzeuge, nämlich <a href="http://cognitiones.kantel-chaos-team.de/webworking/staticsites/quarto.html">Quarto</a> mit <a href="http://cognitiones.kantel-chaos-team.de/mathematik/rmarkdown.html">R Markdown</a>, die hinter dem <em>Schockwellenreiter</em> werkeln, und die (statischen) Seiten werden auch nicht mehr auf <a href="http://cognitiones.kantel-chaos-team.de/webworking/webservices/amazon/amazons3.html">Amazon S3</a>, sondern auf <a href="http://cognitiones.kantel-chaos-team.de/webworking/webservices/githubpages.html">GitHub Pages</a> gehostet. Und der <em>Schockwellenreiter</em> hat endlich auch ein responsives Layout, das – im großen und ganzen – auch auf mobilen Geräten funktioniert, einen <a href="https://kantel.github.io/index.xml">RSS-Vollfeed</a>, und er ist (weil in GitHub Pages fest eingebaut) dem Trend zum »teuren Sicherheitstheater« <em>(Dave Winer)</em> erlegen. Sprich: Der <em>Schockwellenreiter</em> wird per <code>HTTPS</code> ausgeliefert. Daneben hat der <del>Geißenpeter</del> <a href="https://www.goatcounter.com/">GoatCounter</a> mein bisheriges <a href="http://cognitiones.kantel-chaos-team.de/webworking/tools/piwik.html">Neugiertool</a> ersetzt und mit <a href="https://giscus.app/de">Giskus</a> habe ich diesen Seiten auch <a href="https://kantel.github.io/posts/2022120901_giscus/">ein Kommentarsystem verpaßt</a>.</p>
<p>In den letzten Monaten ist also ziemlich viel passiert. Ich hoffe, daß damit der <em>Schockwellenreiter</em> wieder fit für viele neue Jahre ist. Als Nahziel habe ich erst einmal die 25-Jahr-Feier dieser Seiten angepeilt.</p>
<p>In diesem Sinne: Happy Birthday, liebes Kritzelheft. Mögest Du mich und Deine Leserinnen und Leser noch viele Jahre begleiten.</p>



 ]]></description>
  <category>Interna</category>
  <guid>https://kantel.github.io/posts/2023042401_schockwellenreiter_23/index.html</guid>
  <pubDate>Mon, 24 Apr 2023 13:05:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023042401_schockwellenreiter_23/images/wiggilyskating.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Klimaspirale: Eine Coding Challenge zum »Tag der Erde«</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023042303_klimaspirale/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://ed-hawkins.github.io/climate-visuals/SPIRALS/global_temperature_spiral_2022_large.gif"><img src="https://kantel.github.io/posts/2023042303_klimaspirale/images/globaltemperaturespiral2022-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Gestern war der »<a href="https://de.wikipedia.org/wiki/Tag_der_Erde">Tag der Erde</a>« <em>(Earth Day)</em>. Er wird seit 1970 (seit 1990 international) jährlich begangen, um auf die Gefahren durch die wachsende Umweltverschmutzung hinzuweisen. Aus diesem Anlaß hat <em>Daniel Shiffman</em> eine Coding Challenge veröffentlicht, die die ursprünglich vom Klimawissenschaftler <a href="https://edhawkins.org/">Ed Hawkins</a> entworfene Klimaspirale, eine visuelle Darstellung der sich im Laufe der Zeit ändernden Temperaturen, in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/p5js.html">P5.js</a> nachprogrammiert. Diese Klimaspirale veranschaulicht die dringende Notwendigkeit, den Klimawandel anzugehen und ist gleichzeitig in schönes Beispiel einer gelungenen Datenvisualisierung.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/rVBTxnRyOuE" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Die Daten kommen vom <a href="https://data.giss.nasa.gov/gistemp/">National Aeronautics and Space Administration Goddard Institute for Space Studies</a> der NASA und können von dort als TXT- oder CSV-Dateien heruntergeladen werden (nach unten scrollen). <em>Shiffman</em> verlinkt in der Videobschreibung noch auf etliche andere Datenquellen, die alle auf die Dringlichkeit des Klimawandels hinweisen.</p>
<p>Die Notwendigkeit einer radikalen Änderung in der Politik ist also kein Hirngespinst angeblich durchgeknallter »Klimakleber«, wie uns Politik und (Springer-) Presse in seltsamer Einmütigkeit weismachen wollen, sondern tatsächlich gegeben. Doch wie der bolivianische Präsident <em>Evo Morales</em> auf der <em>Weltkonferenz der Völker über den Klimawandel</em> schon 2010 erklärte, ist das kapitalistische System Hauptursache für das Ungleichgewicht auf der Erde, da der Planet und seine Bewohner unter dem grenzenlosen Wachstumszwang leiden. Da das im Kapitalismus aber niemand hören will, hackt man lieber auf die »Klimakleber« herum, das ist wohlfeiler. Man muß sich daher über die Einmütigkeit von Politik und bürgerlicher Presse nicht wundern.</p>
<p>Ich weiß nicht, ob <em>Shiffman</em> diese Konsequenz mitbedacht hat, aber seine Visualisierung regt zum Nachdenken an. Und wenn dieses Nachdenken auch noch zum <del>Klimakleben</del> Handeln führt, ist das mehr, als ich erwarte.</p>



 ]]></description>
  <category>P5.js</category>
  <category>Visualisierung</category>
  <category>Klimawandel</category>
  <category>Umwelt</category>
  <guid>https://kantel.github.io/posts/2023042303_klimaspirale/index.html</guid>
  <pubDate>Sun, 23 Apr 2023 17:25:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023042303_klimaspirale/images/globaltemperaturespiral2022.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Also doch Visual Studio Code?</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023042302_also_doch_vs_code/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52838686227/"><img src="https://kantel.github.io/posts/2023042302_also_doch_vs_code/images/pizzaplaneinvscode-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Der Grund, warum ich gestern <a href="https://kantel.github.io/posts/2023042301_thonny_4_0_2/">noch ein wenig mit Python spielte</a> war der Versuch, meine <a href="https://kantel.github.io/posts/2023041603_spyder/">Begeisterung für Spyder</a> zu retten. Denn nach einem anfänglichen Hoch zeigte sich doch, daß die Python-IDE mit Ihrerer Bevormundungsstrategie (kein <code>pip</code> und damit auch keine Zusatzmodule) mich mehr einschränkte, als ich bereit war zu akzeptieren.</p>
<p>In meiner Verzweiflung hatte ich sogar mein <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/anaconda.html">Anaconda-Python</a> komplett neu installiert und das darin mitgelieferte Spyder angeworfen. Nachdem dieses sich aber ebenfalls weigerte, <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/turtlepython.html">Pythons Turtle</a> – obwohl in der Anaconda-Distribution enthalten – zu starten und zudem (nach einem Update auf das aktuelle Spyder 5.4.3) eine fehlende Abhängigkeit beklagte und die Installation von <code>pylsp</code> verlangte (ein Modul, das <code>conda</code> aber nicht kannte), hatte ich es aufgegeben.</p>
<p>Also habe ich zum wiederholten Mal in den sauren Apfel gebissen und <a href="http://cognitiones.kantel-chaos-team.de/produktivitaet/visualstudiocode.html">Visual Studio Code</a> angeworden. Denn eigentlich benötige ich ja, um der <em>Mac-Only-Falle</em>, in die ich mit meinem Leib-und-Magen-Editor <a href="http://cognitiones.kantel-chaos-team.de/produktivitaet/textmate.html">TextMate</a> geraten war, auch und gerade wegen meiner verstärkten Hinwendung zum Chromebook, zu entkommen, einen plattformübergreifenden <em>all purpose</em> Editor, der mehr kann, als nur Python.</p>
<p>Und da hatte ich zähneknirschend für <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/p5js.html">P5.js</a> und <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/renpy.html">Ren’Py</a> sowieso schon Microsofts (Open Source) Boliden akzeptiert. Warum sollte ich mich also weiter verzetteln?</p>
<p>Nachdem ich Visual Studio Code mitgeteilt hatte, daß mein aktuelles Anaconda-Python in <code>~/anaconda3/bin/python</code> zu finden sei und ich mit <code>pip install pgzero</code> <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a> inklusive <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygamezero.html">Pygame Zero</a> nachinstalliert hatte, konnte ich neben Programmen aus dem üblichen <em>Python Scientific Stack</em> auch Pygame- (Zero-) und Turtle-Apps problemlos aus Visual Studio Code heraus starten.</p>
<p>Jetzt habe ich folgendes Programmier-Szenario für Desktop-Applikationen: Für <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/py5.html">Py5</a>-Apps werde ich weiterhin ausschließlich auf Thonny setzen, für andere Python-Apps habe ich die Wahl zwischen Thonny und Visual Studio Code (wobei ich für Pygame (Zero)-Anwendungen und Pythons Turtle wohl eher zu Thonny neige, Anwendungen, die den <em>Scientific Stack</em> betreffen aber Visual Studio Code und meinem Anaconda-Python überlasse). Und für Ren’Py und P5.js hat sich VS Code sowieso schon bewährt.</p>
<p>Manchmal werden die Probleme doch zu groß, wenn man unbedingt gegen den Strom schwimmen will …</p>



 ]]></description>
  <category>Python</category>
  <category>Visual Studio Code</category>
  <guid>https://kantel.github.io/posts/2023042302_also_doch_vs_code/index.html</guid>
  <pubDate>Sun, 23 Apr 2023 14:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023042302_also_doch_vs_code/images/pizzaplaneinvscode.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Thonny 4.0.2 ist draußen</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023042301_thonny_4_0_2/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52839465539/"><img src="https://kantel.github.io/posts/2023042301_thonny_4_0_2/images/thonny402-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Neben meinem gestrigen <a href="https://kantel.github.io/posts/2023042201_tulpen_vom_britzer_damm/">Ausflug in die Tulpen</a> hatte ich auch noch ein wenig Zeit gefunden, mit Python zu spielen. Dabei kam mir die Meldung unter, daß <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/thonny.html">Thonny</a>, mein freundlicher, plattformübergreifender (macOS, Linux (also auch <a href="http://blog.schockwellenreiter.de/2022/07/2022071501.html">»mein« Chromebook</a>) und Windows) Python Editor die Version 4.0.2 freigegeben hatte.</p>
<p>Es ist in der Hauptsache ein Bugfix-Release ohne neue Features, aber da die <a href="https://github.com/thonny/thonny/releases/tag/v4.0.2">Release Notes</a> davon sprachen, daß <code>__file__</code> nun eine absolute Pfadangabe enthalten würde<sup>1</sup>, und ich zudem von Natur aus neugierig bin, beschloß ich, das Update durchzuführen.</p>
<p>Das Update verlief erwartungsgemäß problemlos, meine vielen Erweiterungen (<a href="http://blog.schockwellenreiter.de/2022/07/2022070802.html">insbesondere die zu Py5</a>) wurden anstandslos übernommen. An der sauberen Arbeit des Thonny-Teams können sich viele andere Entwickler ein Beispiel nehmen.</p>
<p>Ich bin dadurch richtig motiviert, auch mal wieder etwas mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/py5.html">Py5</a> anzustellen. Das ist ja in den letzten Wochen ein wenig ins Hintertreffen geraten. <em>Still digging!</em></p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Fußnoten</h2>

<ol>
<li id="fn1"><p>Ich hatte damit zwar in Thonny nie irgendwelche Probleme, <a href="https://kantel.github.io/posts/2023010801_python_und_cwd/">wohl aber in Visual Studio Code</a>, vergleiche den <a href="https://kantel.github.io/posts/2023042302_also_doch_vs_code/">nächsten Beitrag</a>.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Python</category>
  <category>Thonny</category>
  <guid>https://kantel.github.io/posts/2023042301_thonny_4_0_2/index.html</guid>
  <pubDate>Sun, 23 Apr 2023 13:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023042301_thonny_4_0_2/images/thonny402.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Wenn der Frühling kommt, dann zeig ich Dir Tulpen vom Britzer Damm</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023042201_tulpen_vom_britzer_damm/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52837240794/"><img src="https://kantel.github.io/posts/2023042201_tulpen_vom_britzer_damm/images/britzerdammtulpen01-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Ich habe dieses Mal auf <a href="http://www.gabi-kantel.de/">Gabi</a> gehört. Sie meinte nämlich nach meinem <a href="https://kantel.github.io/posts/2023041302_keine_tulpen/">letzten Desaster</a>, daß ich doch einfach warten solle, bis in unserem Schattengärtchen die ersten Knospen ans Licht drängen, dann wären mit Sicherheit auch im <a href="https://www.britzergarten.de/">Britzer Garten</a> die Tupen bereit zum Blühen. Und Gabi hatte Recht, heute war die Tulpen- und Baumblüte dort geradezu explodiert:</p>
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52837480900/"><img src="https://kantel.github.io/posts/2023042201_tulpen_vom_britzer_damm/images/britzerdammtulpen02.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/52836500077/"><img src="https://kantel.github.io/posts/2023042201_tulpen_vom_britzer_damm/images/britzerdammtulpen03.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/52836501017/"><img src="https://kantel.github.io/posts/2023042201_tulpen_vom_britzer_damm/images/britzerdammtulpen04.jpg" class="img-fluid"></a><br><br> <a href="https://www.flickr.com/photos/schockwellenreiter/52837072446/"><img src="https://kantel.github.io/posts/2023042201_tulpen_vom_britzer_damm/images/britzerdammtulpen05.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/52837072036/"><img src="https://kantel.github.io/posts/2023042201_tulpen_vom_britzer_damm/images/britzerdammtulpen06.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/52837518433/"><img src="https://kantel.github.io/posts/2023042201_tulpen_vom_britzer_damm/images/britzerdammtulpen07.jpg" class="img-fluid"></a><br><br> <a href="https://www.flickr.com/photos/schockwellenreiter/52837066196/"><img src="https://kantel.github.io/posts/2023042201_tulpen_vom_britzer_damm/images/britzerdammtulpen09.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/52837068096/"><img src="https://kantel.github.io/posts/2023042201_tulpen_vom_britzer_damm/images/britzerdammtulpen08.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/52837473520/"><img src="https://kantel.github.io/posts/2023042201_tulpen_vom_britzer_damm/images/britzerdammtulpen10.jpg" class="img-fluid"></a><br><br> <a href="https://www.flickr.com/photos/schockwellenreiter/52837466745/"><img src="https://kantel.github.io/posts/2023042201_tulpen_vom_britzer_damm/images/britzerdammtulpen11.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/52837065151/"><img src="https://kantel.github.io/posts/2023042201_tulpen_vom_britzer_damm/images/britzerdammtulpen12.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/52837463495/"><img src="https://kantel.github.io/posts/2023042201_tulpen_vom_britzer_damm/images/britzerdammtulpen13.jpg" class="img-fluid"></a><br><br> <a href="https://www.flickr.com/photos/schockwellenreiter/52837463290/"><img src="https://kantel.github.io/posts/2023042201_tulpen_vom_britzer_damm/images/britzerdammtulpen14.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/52837063091/"><img src="https://kantel.github.io/posts/2023042201_tulpen_vom_britzer_damm/images/britzerdammtulpen15.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/52837058631/"><img src="https://kantel.github.io/posts/2023042201_tulpen_vom_britzer_damm/images/britzerdammtulpen16.jpg" class="img-fluid"></a><br><br> <a href="https://www.flickr.com/photos/schockwellenreiter/52837058971/"><img src="https://kantel.github.io/posts/2023042201_tulpen_vom_britzer_damm/images/britzerdammtulpen17.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/52837240214/"><img src="https://kantel.github.io/posts/2023042201_tulpen_vom_britzer_damm/images/britzerdammtulpen18.jpg" class="img-fluid"></a></p>
<p><em>Mit einem Klick auf die Vorschaubilder kommt Ihr jeweils auf eine Seite mit einer Vergrößerung.</em></p>
<p>Es war ein schöner Nachmittag, besonders als mir zum Schluß dann auch noch die Garten-Töff-Töff vor die Linse schnaufte.</p>
<p>Aus bekannten Gründen gibt es die Photostrecke nicht im Gesichtsbuch, sondern nur hier im <del>Blog</del> Kritzelheft. Da müßt Ihr wieder durch! <em>(Photos (<a href="http://creativecommons.org/licenses/by-nc-nd/2.0/">cc</a>): <a href="http://cognitiones.kantel-chaos-team.de/cv.html">Jörg Kantel</a>)</em></p>



 ]]></description>
  <category>Photographie</category>
  <category>Neukölln</category>
  <category>Parks und Gärten</category>
  <guid>https://kantel.github.io/posts/2023042201_tulpen_vom_britzer_damm/index.html</guid>
  <pubDate>Sat, 22 Apr 2023 17:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023042201_tulpen_vom_britzer_damm/images/britzerdammtulpen01.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Video-Tutorials zum Wochenende: Spieleprogrammierung mit Pygame</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023042101_pygame_zum_wochenende/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.youtube.com/watch?v=u7LPRqrzry8"><img src="https://kantel.github.io/posts/2023042101_pygame_zum_wochenende/images/cameraspygame-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Es ist wieder Freitag und ich möchte Euch wieder mit ein paar Video-Tutorials für das Wochenende versorgen, damit Ihr nicht vor lauter Langeweile in die Kirchen rennt. Auch wenn es langsam ein wenig monothematisch wirkt, der Bestand an (guten) Tutorials zu <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a> scheinen einfach unerschöpflich zu sein und so sind mir in den letzten Tagen wieder ein paar Highlights untergekommen, die ich Euch nicht vorenthalten möchte:</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/u7LPRqrzry8" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Den Anfang macht mal wieder <em>Clear Code</em>, dessen mehr als einstündges Tutorial zu <a href="https://www.youtube.com/watch?v=u7LPRqrzry8">Cameras in Pygame</a> alleine schon einen Eintrag in dieses <del>Blog</del> Kritzelheft wert ist. Den <a href="https://github.com/clear-code-projects/Pygame-Cameras">Quellcode und die Assets</a> findet Ihr selbstverständlich auf GitHub.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/3Oc9ZqzPnSc" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Doch wartet, das ist noch nicht alles, denn da ist mir noch das fast zweieinhalbstündige »<a href="https://www.youtube.com/watch?v=3Oc9ZqzPnSc">Classic Arcade Style Shooting Game</a>« untergekommen, dessen Programmierung ein gutgelaunter <em>LeMaster Tech</em> präsentiert. Auch hier findet Ihr den <a href="https://github.com/plemaster01/ShootingGallery">Quellcode und die Assets</a> zum Download auf GitHub.</p>
<p>Und falls das Wetter doch nicht – wie es die Wetterfrösche eigentlich versprochen haben – zu Freiluft-Aktivitäten animiert, das obige Video ist Teil der Playlist <a href="https://www.youtube.com/playlist?list=PLsFyHm8kJsx32EFcsJNt5sDI_nKsanRUu">PyGame Full Game Builds</a>, die derzeit aus 26 oft mehrstündigen Videos besteht. Ihr findet also genug Material, um ja keine Langeweile aufkommen zu lassen. Da das jüngste Update erst wenige Wochen alt ist, habe ich den Kanal abonniert.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/nEEzUijhbkc" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p><strong>War sonst noch was?</strong> Ach ja, Klimawandel und Computerspiele war eines der Themen der diesjährigen <em><a href="https://gdconf.com/news/welcome-first-day-gdc-2023">Game Developer Conference</a></em>, die vom 20. bis 24. März in San Francisco stattfand. <em>Arnaud Fayolle</em> von Ubisoft stellte dort (s)einen <em>Developer’s Field Guide</em> vor. Man merkte ihm seine Begeisterung an, aber ob dabei wirklich etwas herauskommt? Ich bin da eher skeptisch. Der Ansatz ist sicher gut gemeint, aber gut gemeint ist nicht automatisch auch gut gemacht.</p>



 ]]></description>
  <category>Pygame</category>
  <category>Spieleprogrammierung</category>
  <guid>https://kantel.github.io/posts/2023042101_pygame_zum_wochenende/index.html</guid>
  <pubDate>Fri, 21 Apr 2023 18:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023042101_pygame_zum_wochenende/images/cameraspygame.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Pillow-Tutorial: Wie bekommt man die Katze ins Kloster?</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023042001_pillow_tutorial/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://files.realpython.com/media/cat_monastery.c63df8376d54.jpg"><img src="https://kantel.github.io/posts/2023042001_pillow_tutorial/images/catmonastery-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Ich habe heute wieder ein wenig mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/spyder.html">Spyder</a> spielen müssen. Dabei interessierte mich insbesonders, welche Python-Bibliotheken ohne Klimmzüge mit Spyder zusammen funktionieren. Wenig überraschend war, daß Spyder mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/py5.html">Py5</a> und <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a> nichts anstellen konnte, mehr überrascht hat mich dagegen, daß auch die Zusammenarbeit mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/turtlepython.html">Pythons Turtle</a> verweigert wurde, die ja immerhin Bestandteil der Standard-Bibliothek ist.</p>
<p>Da hat mich dann getröstet, daß Spyder <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/pillow.html">Pillow</a>, Python Bibliothek für Bildbearbeitung, auf Anhieb unterstützte. Da sich damit ebenfalls einiges, auch Kreatives anstellen läßt, habe ich nach einem Tutorial für das Modul gesucht, da ich es bisher – trotz <a href="http://blog.schockwellenreiter.de/2020/04/2020040702.html">einiger</a> <a href="http://blog.schockwellenreiter.de/2020/04/2020041302.html">Anläufe</a> – sträflich vernachlässigt hatte.</p>
<p>Fündig geworden bin ich dann bei Real Python, wo <em>Stephen Gruppetta</em> mit seinem Beitrag »<a href="https://realpython.com/image-processing-with-the-python-pillow-library/">Image Processing With the Python Pillow Library</a>« ein vorzügliches Tutorial ablieferte. Es behandelt nämlich nicht nur die üblichen Bildbearbeitungsschritte, sondern auch, wie man Pillow kreativ einsetzen kann. Dort wird dann zum Beispiel gezeigt, wie man eine Katze in ein Kloster montiert.&nbsp;😸</p>
<p>Gleichzeitig hatte ich festgestellt, daß Pillow noch keinen Eintrag in <a href="http://cognitiones.kantel-chaos-team.de/index.html">meinem Wiki</a> besaß. Das habe ich dann <strong><a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/pillow.html">nachgeholt</a></strong>.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/i7Njb3xO4Fw" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Daß ich die oben genannten Module nicht zu einer Zusammenarbeit mit Spyder bewegen konnte, ist zwar kein <em>Showstopper</em> (ich habe ja noch <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/thonny.html">Thonny</a>, das sowohl auf meinem Mac wie auch auf meinem Chromebook anstandslos mit Py5, Pythons Turtle und auch mit Pygame spielt), aber ein wenig fuchst es mich doch. Die in Spyders FAQ <a href="https://docs.spyder-ide.org/5/faq.html#using-packages-installer">empfohlene Lösung</a> ist mir zu kompliziert. Irgendwie muß das doch auch ohne eine separate, virtuelle Umgebung gehen. Falls also jemand von Euch da draußen eine Idee hat …? <em>Still digging!</em></p>



 ]]></description>
  <category>Python</category>
  <category>Pillow</category>
  <category>Spyder</category>
  <category>Creative Coding</category>
  <guid>https://kantel.github.io/posts/2023042001_pillow_tutorial/index.html</guid>
  <pubDate>Thu, 20 Apr 2023 18:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023042001_pillow_tutorial/images/catmonastery.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Dynamische Graphen mit der Matplotlib, Slider und Spyder</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023041904_spyder_slider/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52830209399/"><img src="https://kantel.github.io/posts/2023041904_spyder_slider/images/spyderslider-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Heute nachmittag regnete es mal wieder. Das war nicht nur gut für die Natur draußen, sondern auch gut für mich, denn so konnte ich ungestört meine Expeditionen ins Reich der <a href="https://de.wikipedia.org/wiki/Dynamisches_System">Dynamischen Systeme</a> mit Python und <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/spyder.html">Spyder</a> fortsetzen. Mir schwebt vor, die geplanten Simulationen des <a href="https://de.wikipedia.org/wiki/SIR-Modell">S-I-R-Modells</a> mit dynamischen Graphen zu implementieren, um Änderungen an den Parametern während des laufenden Programms vornehmen und die Auswirkungen begutachten zu können.</p>
<p>Dazu mußte ich aber erst einmal austesten, wie gut sich Spyder mit den <a href="https://matplotlib.org/stable/gallery/widgets/slider_demo.html">Matplotlib-Widgets</a> schlägt. Was lag da näher, als den guten alten <em>Veit Steinkamp</em><sup>1</sup> hervorzukramen. Den hatte ich ja schon einmal <a href="http://blog.schockwellenreiter.de/2022/08/2022080401.html">im letzten Sommer als Referenz benutzt</a>, als ich ähnliches mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/tigerjython.html">TigerJython</a> vorhatte. Statt der damals genutzten Parabel habe ich für das heutige Beispiel die Funktion <img src="https://latex.codecogs.com/png.latex?y%20=%20a%5Csin(b(x-c))"> ausgesucht und mich an die Darstellung in und mit Spyder gewagt.</p>
<p>Mir war schon klar, daß ich mich in diesem Fall von den <code>inline</code>-Plots verabschieden muß, aber Spyder leistete mehr, als ich dachte: Der Plot wurde inklusiv der Schieberegler tatsächlich auch <em>inline</em> angezeigt, nur ließen sich die Schieberegler nicht mehr (ver-) schieben. Ihr Dasein war also <em>inline</em> völlig sinnbefreit. Aber wenn man in Spyder unter <code>Preferences … - IPython-Konsole - Grafik</code> das <code>Grafik-Backend</code> von <code>Eingebettet</code> auf <code>Automatisch</code> umschaltet, ist alles wieder schick: Der Nutzer bekommt den Plot dann in einem Standard-Matlab-Fenster mit funktionierenden Schiebereglern angezeigt (siehe <a href="https://www.flickr.com/photos/schockwellenreiter/52830209399/">Screenshot</a>).</p>
<p>Jetzt erst einmal das vollständige Programm, das bis auf wenige Anpassungen an die Eigenschaften von Spyder und macOS aus dem Buch von <em>Veit Steinkamp</em> (Seiten 247 f) stammt:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">from</span> matplotlib.widgets <span class="im" style="color: #00769E;">import</span> Slider</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;">def</span> f(x, a, b, c):</span>
<span id="cb1-6">    <span class="cf" style="color: #003B4F;">return</span> (a<span class="op" style="color: #5E5E5E;">*</span>np.sin(b<span class="op" style="color: #5E5E5E;">*</span>np.radians(x) <span class="op" style="color: #5E5E5E;">-</span> np.radians(c)))</span>
<span id="cb1-7"></span>
<span id="cb1-8">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(figsize <span class="op" style="color: #5E5E5E;">=</span> (<span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">6</span>))</span>
<span id="cb1-9">plt.title(<span class="vs" style="color: #20794D;">r"$y = a\/sin(b\/(x-c))$"</span>)</span>
<span id="cb1-10">plt.subplots_adjust(left <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.12</span>, bottom <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.25</span>)</span>
<span id="cb1-11">plt.xlim(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">360</span>)</span>
<span id="cb1-12">plt.ylim(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb1-13">plt.xlabel(<span class="vs" style="color: #20794D;">r"$x$"</span>)</span>
<span id="cb1-14">plt.ylabel(<span class="vs" style="color: #20794D;">r"$y$"</span>, rotation <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb1-15"></span>
<span id="cb1-16">x <span class="op" style="color: #5E5E5E;">=</span> np.arange(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">400</span>, <span class="fl" style="color: #AD0000;">0.001</span>)</span>
<span id="cb1-17">y, <span class="op" style="color: #5E5E5E;">=</span> plt.plot(x, f(x, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>), lw <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb1-18"></span>
<span id="cb1-19"><span class="co" style="color: #5E5E5E;"># x- und y-Position, Länge, Höhe</span></span>
<span id="cb1-20">xyA <span class="op" style="color: #5E5E5E;">=</span> plt.axes([<span class="fl" style="color: #AD0000;">0.1</span>, <span class="fl" style="color: #AD0000;">0.12</span>, <span class="fl" style="color: #AD0000;">0.8</span>, <span class="fl" style="color: #AD0000;">0.03</span>])</span>
<span id="cb1-21">xyB <span class="op" style="color: #5E5E5E;">=</span> plt.axes([<span class="fl" style="color: #AD0000;">0.1</span>, <span class="fl" style="color: #AD0000;">0.07</span>, <span class="fl" style="color: #AD0000;">0.8</span>, <span class="fl" style="color: #AD0000;">0.03</span>])</span>
<span id="cb1-22">xyC <span class="op" style="color: #5E5E5E;">=</span> plt.axes([<span class="fl" style="color: #AD0000;">0.1</span>, <span class="fl" style="color: #AD0000;">0.02</span>, <span class="fl" style="color: #AD0000;">0.8</span>, <span class="fl" style="color: #AD0000;">0.03</span>])</span>
<span id="cb1-23"></span>
<span id="cb1-24"><span class="co" style="color: #5E5E5E;"># Slider-Objekte erzeugen</span></span>
<span id="cb1-25">sldA <span class="op" style="color: #5E5E5E;">=</span> Slider(xyA, <span class="st" style="color: #20794D;">"a"</span>,   <span class="fl" style="color: #AD0000;">2.0</span>, <span class="fl" style="color: #AD0000;">10.0</span>, valinit <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">5</span>, valstep <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.1</span>)</span>
<span id="cb1-26">sldB <span class="op" style="color: #5E5E5E;">=</span> Slider(xyB, <span class="st" style="color: #20794D;">"b"</span>,   <span class="fl" style="color: #AD0000;">1.0</span>,  <span class="fl" style="color: #AD0000;">4.0</span>, valinit <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span>, valstep <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.1</span>)</span>
<span id="cb1-27">sldC <span class="op" style="color: #5E5E5E;">=</span> Slider(xyC, <span class="st" style="color: #20794D;">"c"</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">90.0</span>, <span class="fl" style="color: #AD0000;">90.0</span>, valinit <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span>, valstep <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">1.0</span>)</span>
<span id="cb1-28"></span>
<span id="cb1-29"><span class="co" style="color: #5E5E5E;"># Slider Update</span></span>
<span id="cb1-30"><span class="kw" style="color: #003B4F;">def</span> update(val):</span>
<span id="cb1-31">    a <span class="op" style="color: #5E5E5E;">=</span> sldA.val</span>
<span id="cb1-32">    b <span class="op" style="color: #5E5E5E;">=</span> sldB.val</span>
<span id="cb1-33">    c <span class="op" style="color: #5E5E5E;">=</span> sldC.val</span>
<span id="cb1-34">    y.set_data(x, f(x, a, b, c))</span>
<span id="cb1-35">    </span>
<span id="cb1-36"><span class="co" style="color: #5E5E5E;"># Änderungen abfragen</span></span>
<span id="cb1-37">sldA.on_changed(update)</span>
<span id="cb1-38">sldB.on_changed(update)</span>
<span id="cb1-39">sldC.on_changed(update)</span>
<span id="cb1-40"></span>
<span id="cb1-41">ax.grid(<span class="va" style="color: #111111;">True</span>)</span>
<span id="cb1-42">plt.show()</span></code></pre></div>
<p>Da unter macOS der unterste Slider bei einer y-Position von 0.0 am unteren Fensterrand klebt, habe ich alle Slider um 0.02 Einheiten nach oben verschoben, um ihnen etwas mehr Luft zu gönnen.</p>
<p>Ansonsten erinnere ich mich jetzt wieder, wie das mit der <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/matplotlib.html">Matplotlib</a> und den Slidern funktioniert und bin bereit für weitere Experimente. <em>Still digging!</em></p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Fußnoten</h2>

<ol>
<li id="fn1"><p>Veit Steinkamp: <em><a href="https://www.rheinwerk-verlag.de/mathematische-algorithmen-mit-python/">Mathematische Algorithmen mit Python</a>. Aufgaben vom Sieb des Eratosthenes bis zur RSA-Verschlüsselung</em>, Bonn (Rheinwerk) 2022, Seiten 243 ff.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Python</category>
  <category>Matplotlib</category>
  <category>Spyder</category>
  <category>Dynamische Systeme</category>
  <guid>https://kantel.github.io/posts/2023041904_spyder_slider/index.html</guid>
  <pubDate>Wed, 19 Apr 2023 18:25:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023041904_spyder_slider/images/spyderslider.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Sicherheitsupdate des Foxit Reader auf 12.1.2</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023041903_foxit_reader_update/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.gutenberg.org/files/50405/50405-h/images/i-003a.jpg"><img src="https://kantel.github.io/posts/2023041903_foxit_reader_update/images/autosled-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Mit der Version 12.1.2 des nicht nur unter Windows beliebten PDF Betrachters Foxit Reader haben die Entwickler auch <a href="https://www.foxit.com/support/security-bulletins.html">Schwachstellen</a> behoben.</p>
<p>Die neue Version kann <a href="https://www.foxitsoftware.com/downloads/#Foxit-Reader/">hier geladen</a> werden. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<p><em>(Bild: <a href="https://www.gutenberg.org/files/50405/50405-h/50405-h.htm">Uncle Wiggily’s Auto Sled</a>, 1919, pictured by Lang Campbell.)</em></p>



 ]]></description>
  <category>News</category>
  <guid>https://kantel.github.io/posts/2023041903_foxit_reader_update/index.html</guid>
  <pubDate>Wed, 19 Apr 2023 13:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023041903_foxit_reader_update/images/autosled.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Free Texture Packer: Ein Tool (nicht nur) für Pixel-Artisten</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023041902_tool_fuer_pixelartisten/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52829762508/"><img src="https://kantel.github.io/posts/2023041902_tool_fuer_pixelartisten/images/freetexturepacker-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Gar nicht so selten stehe ich vor der Aufgabe, aus einer Bilddatei (die meist euphemistisch »Sprite Sheet« genannt wird) einzelne Tiles oder Sprites extrahieren zu müssen. Bisher habe ich dazu in der Regel <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/tiled.html">Tiled</a> genutzt, doch da das Programm dafür eigentlich nicht gedacht ist, war die Bedienung doch recht umständlich.</p>
<p>Doch gestern bin ich über den Aufsatz »<a href="https://kenney.nl/learn/editing-2d-game-assets?s=03">Editing 2D game assets</a>« aus dem <a href="https://kenney.nl/learn">Blog von Kenney.nl</a> gestolpert, in dem unter anderem das freie (MIT-Lizenz) Programm »<a href="http://free-tex-packer.com/">Free Texture Packer</a>« vorgestellt wurde. Das Teil gibt es sowohl <a href="https://free-tex-packer.com/app/">online</a> als auch als <a href="http://free-tex-packer.com/download/">Desktop App</a> für Windows, Linux und macOS. Hauptzweck des Programms ist es, Sprite Sheets zu erstellen, aber leicht versteckt unter <code>Werkzeuge - Sprites aus Bildern extrahieren</code> findet man auch genau diese Funktion. Ich habe mir testweise mal ein Sheet aus dem <a href="https://cupnooble.itch.io/sprout-lands-asset-pack">Sproutlands Asset Pack</a>, das riesige Lücken zwischen den einzelnen Sprites aufwies, vorgenommen, und nachdem ich per <em>try and error</em> herausgefunden hatte, daß der Abstand zwischen den einzelnen 16x16 großen Sprites ebenfalls je 16 Pixel betrug, hatte mir das Programm sauber sechzehn einzelne, durchnumerierte Bildchen aus dem Sheet gezaubert.</p>
<p>Es ist also ein sehr nützliches Teil (<a href="https://github.com/odrick/free-tex-packer">Quellcode</a> auf GitHub), das ich Euch nicht vorenthalten wollte.</p>
<p>Die Sprites und Tiles, die ich für diesen Test verwendet hatte, sind von <em>Cup Nooble</em>, der auf Itch.io noch mehr (teils kostenpflichtige) <a href="https://cupnooble.itch.io/">Assets hochgeladen hat</a>. Und wenn Ihr mich hier mal ein Spiel programmieren seht, in dem eine Katze Kühe über eine Weide schubst, dann wißt Ihr, was mich auf die Idee gebracht hat.&nbsp;😸</p>



 ]]></description>
  <category>Spieleprogrammierung</category>
  <category>Game Design</category>
  <category>Tiles und Sprites</category>
  <guid>https://kantel.github.io/posts/2023041902_tool_fuer_pixelartisten/index.html</guid>
  <pubDate>Wed, 19 Apr 2023 12:25:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023041902_tool_fuer_pixelartisten/images/freetexturepacker.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Security Alert: Neue Sicherheitslöcher in Chrome</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023041901_chrome_security_alert/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://pbs.twimg.com/media/EKODmMhXsAEzwGI.jpg"><img src="https://kantel.github.io/posts/2023041901_chrome_security_alert/images/iceboat-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Google scheint momentan Schwierigkeiten zu haben, seinen Browser Chrome dicht zu bekommen. Denn im Nachtrag zu meiner <a href="https://kantel.github.io/posts/2023041502_chrome_update_v112/">Meldung vom Sonnabend</a> hat die Datenkrake ein neues Update der Version 112 (112.0.5615.137/138) nachgeschoben, das <a href="https://chromereleases.googleblog.com/2023/04/stable-channel-update-for-desktop_18.html">weitere kritische Sicherheitslücken schließt</a>, die bereits ausgenutzt werden.</p>
<p>Wie immer gilt: Chrome aktualisiert sich (außer bei Linux) über die integrierte Update-Funktion, kann aber – wenn es pressiert – auch <a href="https://www.google.com/intl/de/chrome/browser/">hier geladen</a> werden. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<p><em>(Bild: The Iceboat knocked the Lady Pig off her Feet, pictured by Lang Campbell.)</em></p>



 ]]></description>
  <category>News</category>
  <guid>https://kantel.github.io/posts/2023041901_chrome_security_alert/index.html</guid>
  <pubDate>Wed, 19 Apr 2023 10:40:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023041901_chrome_security_alert/images/iceboat.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Abenteuer mit Spyder: Das S-I-R-Modell einer Grippe-Pandemie</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023041801_abenteuer_spyder_sir_modell/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52827700899/"><img src="https://kantel.github.io/posts/2023041801_abenteuer_spyder_sir_modell/images/grippemodellsir-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Meine Entdeckungsreisen mit der <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/spyder.html">Spynne</a> gehen weiter. Um mich mit der IDE noch mehr vertraut zu machen, habe ich als Fingerübung das seit dem Corona-Ausbruch zu einer gewissen Berühmtheit gelangte <a href="https://de.wikipedia.org/wiki/SIR-Modell">S-I-R-Modell</a> einer Grippe-Infektion noch einmal in Python implementiert (ich hatte es in einer vereinfachten Version<sup>1</sup> zu Beginn der Corona-Pandemie vor drei Jahren <a href="http://blog.schockwellenreiter.de/2020/03/2020032601.html">schon einmal in Python</a> und <a href="http://blog.schockwellenreiter.de/2020/03/2020032704.html">einmal in Maxima</a> programmiert).</p>
<p>Dieses Mal habe ich mich bei der Implementierung an die Vorgaben und Erläuterungen von <em>Linge/Langtangen</em><sup>2</sup> gehalten, die ihre Version mit ausführlichen Erklärungen und mathematische sauber fundiert, präsentieren, so daß ich bei der Nachprogrammierung noch einmal einiges dazugelernt habe.</p>
<p>Ich werde in den nächsten Tagen das Modell noch etwas erweitern, auch um mein eigenes Verständnis des Modells zu verbessern. Schließlich habe ich das ganze nicht nur angefangen, weil Spyder (im <em>Dark Mode</em>) so schöne Screenshot liefert – auch wenn dies sicher meine Motivation beflügelt hat.</p>
<p>Und dann habe ich Lust darauf bekommen, mich noch etwas mehr mit der Programmierung von »Modellbildung und Simulation« auseinanderzusetzen. Dafür habe ich einen Klassiker<sup>3</sup> der Theorie <a href="https://de.wikipedia.org/wiki/Dynamisches_System">dynamischer Systeme</a> nebst Anhang<sup>4</sup> aus meinen Bücherregalen wieder hervorgekramt und entstaubt. Schaun wir mal, was dabei herauskommt – ich denke, daß ich viel Spaß damit haben werde. <em>Still digging!</em></p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Fußnoten</h2>

<ol>
<li id="fn1"><p>Eine einfachere Version des Modells findet Ihr zum Beispiel hier: Veit Steinkamp: <em><a href="https://www.rheinwerk-verlag.de/mathematische-algorithmen-mit-python/">Mathematische Algorithmen mit Python</a>. Aufgaben vom Sieb des Eratosthenes bis zur RSA-Verschlüsselung</em>, Bonn (Rheinwerk) 2022, Seiten 404 ff.↩︎</p></li>
<li id="fn2"><p>Svein Linge, Hans Petter Langtangen: <em><a href="https://link.springer.com/book/10.1007/978-3-030-16877-3">Programming for Computations - Python</a>. A Gentle Introduction to Numerical Simulations with Python 3.6</em>, Cham, Switzerland, (SpringerOpen) Second Edition 2020, pp 225. Das Buch steht unter Open Access und läßt sich unter dem Link bei Springer kostenlos herunterladen.↩︎</p></li>
<li id="fn3"><p>Hartmut Bossel: <em><a href="https://link.springer.com/book/10.1007/978-3-322-83658-8">Modellbildung und Simulation</a>. Konzepte, Verfahren und Modelle zum Verhalten dynamischer Systeme</em>, Braunschweig (Vieweg), 2., veränderte Auflage 1994↩︎</p></li>
<li id="fn4"><p>Hartmut Bossel: <em><a href="https://www.bod.de/buchshop/systeme-dynamik-simulation-hartmut-bossel-9783833409844">Systeme, Dynamik, Simulation</a>. Modellbildung, Analyse und Simulation komplexer Systeme</em>, Selbstverlag 2004↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Python</category>
  <category>Modellbildung</category>
  <category>Simulation</category>
  <category>Dynamische Systeme</category>
  <category>Spyder</category>
  <guid>https://kantel.github.io/posts/2023041801_abenteuer_spyder_sir_modell/index.html</guid>
  <pubDate>Tue, 18 Apr 2023 18:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023041801_abenteuer_spyder_sir_modell/images/grippemodellsir.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Tweaking Spyder</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023041701_tweaking_spyder/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52824891673/"><img src="https://kantel.github.io/posts/2023041701_tweaking_spyder/images/spyder5neu-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Nach meiner <a href="https://kantel.github.io/posts/2023041603_spyder/">gestrigen</a> Wiederentdeckung von <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/spyder.html">Spyder</a>, der Python-IDE für <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/jupyter.html">Jupyter</a> (-<a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/jupyterlab.html">Lab</a>, -<a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/jupyterlabdesktop.html">Desktop</a>)-Ignoranten wie mich, mußte ich das Teil nun so lange tunen, bis es meinen Vorstellungen entsprach. Nun sieht Spyder wirklich so aus, wie ich mir <a href="http://cognitiones.kantel-chaos-team.de/mathematik/rstudio.html">RStudio</a> wünsche<sup>1</sup>. Und es fühlt sich immer noch gut an.</p>
<p>Aus lauter Begeisterung habe ich auch meiner <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/spyder.html">Wiki-Seite zu Spyder</a> ein Update spendiert. Und jetzt werde ich erst mal weiter mit der Spynne spielen. <em>Still digging!</em></p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Fußnoten</h2>

<ol>
<li id="fn1"><p>Ich schreibe dieses <del>Blog</del> Kritzelheft mit <a href="http://cognitiones.kantel-chaos-team.de/webworking/staticsites/quarto.html">Quarto</a> in RStudio, verfüge also über reichlich Erfahrungen mit der Software.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Python</category>
  <category>Numerik</category>
  <category>Spyder</category>
  <guid>https://kantel.github.io/posts/2023041701_tweaking_spyder/index.html</guid>
  <pubDate>Mon, 17 Apr 2023 14:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023041701_tweaking_spyder/images/spyder5neu.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Numerisches Python mit der Spynne</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023041603_spyder/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52822515573/"><img src="https://kantel.github.io/posts/2023041603_spyder/images/spyder5-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Neben meiner Erkundung des <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/trinket.html">Trinket</a>-Kosmos möchte ich mich in der nächsten Zeit ein wenig mit Python, Physik und Numerik beschäftigen. Dazu habe ich das Buch »<a href="https://www.rheinwerk-verlag.de/der-python-kurs-fuer-ingenieure-und-naturwissenschaftler/">Der Python-Kurs für Ingenieure und Naturwissenschaftler</a>« von <em>Veit Steinkamp</em> aus meinem Bücherregal wieder hervorgekramt. Nicht nur, daß es mir an sich schon ziemlich gut gefällt, ausschlaggebend war dieses Mal, daß die über 500 Seiten fette Schwarte als eines der wenigen mir bekannten Lehrbücher auch ein komplettes Kapitel zu <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/vpython.html">VPython</a> besitzt (und damit wäre ich via <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/glowwscript.html">GlowScript</a> wieder bei Trinket).</p>
<p>Doch zurück zu Numerik mit Python. Ein Anlaß war, daß ich mich – wie <a href="https://kantel.github.io/posts/2023032701_jupyter_and_jupyterlab/">versprochen</a> – endlich mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/jupyterlabdesktop.html">JupyterLab Desktop</a> vertraut machen wollte. Doch ich mußte leider feststellen, daß ich – wie schon mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/jupyter.html">Jupyter</a> und <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/jupyterlab.html">JupyterLab</a> – auch mit dieser Inkarnation eines Python-Notebooks einfach nicht warm werde.</p>
<p>In meiner Verzweiflung hatte ich dann <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/spyder.html">Spyder</a> angeworfen. Diese freie (MIT-Lizenz) Python-IDE hatte bei früheren Versuchen mich auch mit einigen Ecken und Kanten abgeschreckt. Doch heute machte sie mich darauf aufmerksam, daß ich die Version 5.4.3 herunterladen könne.</p>
<p>Und was soll ich sagen? Nach der Installation fühlte ich mich in Spyder wie zu Hause. Die IDE war schlank genug, um mich nicht mit überflüssigem Schnickschnack zu nerven, aber sie zeigte alles, was man von einer IDE und von einem Editor erwartet. Und wenn man von der – auf meinem betagten MacBook Pro – doch sehr gemächlichen Startzeit des Programms absieht – mußte ich auch bei der Geschwindigkeit keine Abstriche machen.</p>
<p>Daher werde ich wohl in Zukunft bei allen Python-Programmen, mit denen <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/thonny.html">Thonny</a> überfordert ist, auf Spyder setzen. Wundert Euch daher nicht, wenn Ihr in Zukunft entsprechende Screenshots vorgesetzt bekommt. <em>Still digging!</em></p>



 ]]></description>
  <category>Python</category>
  <category>Numerik</category>
  <category>Spyder</category>
  <guid>https://kantel.github.io/posts/2023041603_spyder/index.html</guid>
  <pubDate>Sun, 16 Apr 2023 18:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023041603_spyder/images/spyder5.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Frauen am Kontrabaß: Alice und das weiße Kaninchen</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023041602_molly_tuttle_white_rabbit/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://listverse.com/wp-content/uploads/2013/10/alice.jpg"><img src="https://kantel.github.io/posts/2023041602_molly_tuttle_white_rabbit/images/alice_robinson-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Ich hatte schon lange nichts mehr in meiner Reihe »Frauen am Kontrabaß«, doch nun kam mir ein Video unter, das sowohl dieses Thema wie auch mein Interesse an Geschichten um »Alice im Wunderland« abdeckt: Die ziemlich geniale Bluegrass-Gitarristin <em><a href="https://de.wikipedia.org/wiki/Molly_Tuttle">Molly Tuttle</a></em> hat mir ihrer Band »The Golden Highway« eine Coverversion von <em>Jefferson Airplanes</em> »White Rabbit« ganz neu auf YouTube veröffentlicht:</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/LeHlvXvG6vA" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Das alleine wäre noch keinen Beitrag in dieser Reihe wert, doch <em>The Golden Highway</em> ist nicht nur – wie vielfach im Bluegrass Tradition – eine Familienangelegenheit unter Geschwistern, sondern <em>Molly Tuttle</em> hat mit <em><a href="http://www.shelbyleemeans.com/">Shelby Means</a></em> auch eine phantastische Kontrabassistin an Ihrer Seite. Die Band – die aktuell in den USA auf Tour ist – besteht also aus <em>Molly Tuttle</em> als Red Queen (g, vocals), <em>Shelby Means</em> als Mad Hatter (bass, harmonies), <em>Kyle Tuttle</em> als Chesire Cat (Grinsekatze) (banjo), <em>Bronwyn Keith-Hynes</em> als Alice (fiddle) und <em>Dominick Leslie</em> als Caterpillar (mandoline). Und im Hintergrund turnt auch noch anonym das namengebende weiße Kaninchen herum.</p>
<p>Wenn ich irgendwann für meine eigenen Alice-Experimente ein Video benötigen sollte, steht dieses ganz weit oben auf der Favoritenliste.</p>



 ]]></description>
  <category>Musik</category>
  <category>Alice</category>
  <guid>https://kantel.github.io/posts/2023041602_molly_tuttle_white_rabbit/index.html</guid>
  <pubDate>Sun, 16 Apr 2023 14:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023041602_molly_tuttle_white_rabbit/images/alice_robinson.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Kritzelheft statt Gesichtsbuch</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023041601_kritzelheft_vs_gesichtsbuch/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52821758695/"><img src="https://kantel.github.io/posts/2023041601_kritzelheft_vs_gesichtsbuch/images/schweinchenallein-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>So langsam muß ich mir ein Format oder eine Rubrik überlegen, unter der ich hier im <del>Blog</del> Kritzelheft und nicht im Fratzenbuch meine Photos unterbringe. So zum Beispiel das obige <a href="https://www.flickr.com/photos/schockwellenreiter/52821758695/">verlorene Schweinchen</a>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52820781322/"><img src="https://kantel.github.io/posts/2023041601_kritzelheft_vs_gesichtsbuch/images/greenmonster.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Und <a href="https://www.flickr.com/photos/schockwellenreiter/52820781322/">hier</a> macht das grüne Monster Werbung für einen Wohltätigkeitslauf. Aber obacht, es läuft mit Sicherheit allen anderen davon. <em>(Photos (<a href="http://creativecommons.org/licenses/by-nc-nd/2.0/">cc</a>): <a href="http://cognitiones.kantel-chaos-team.de/cv.html">Jörg Kantel</a>)</em></p>



 ]]></description>
  <category>Neukölln</category>
  <category>Photographie</category>
  <guid>https://kantel.github.io/posts/2023041601_kritzelheft_vs_gesichtsbuch/index.html</guid>
  <pubDate>Sun, 16 Apr 2023 13:40:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023041601_kritzelheft_vs_gesichtsbuch/images/schweinchenallein.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Google korrigiert wieder Sicherheitslücken in Chrome</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023041502_chrome_update_v112/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://upload.wikimedia.org/wikipedia/commons/f/f5/Uncle_Wiggily%27s_Apple_Roast_%28page_21%29.jpg"><img src="https://kantel.github.io/posts/2023041502_chrome_update_v112/images/appleroastp29-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Google veröffentlicht ein neues Update der Version 112 (112.0.5615.121) seines Browsers Chrome und schließt erneut <a href="https://chromereleases.googleblog.com/2023/04/stable-channel-update-for-desktop_14.html">kritische Sicherheitslücken</a>, die bereits ausgenutzt werden. Falls das Update also nicht automatisch erfolgen sollte, ist ein zeitnahes Einfahren dringend anzuraten.</p>
<p>Chrome aktualisiert sich (außer bei Linux) über die integrierte Update-Funktion, kann aber – wenn es wie in diesem Fall pressiert – auch <a href="https://www.google.com/intl/de/chrome/browser/">hier geladen</a> werden. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<p><em>(Bild: Uncle Wiggily sits in a chair and reads the newspaper, from »<a href="https://commons.wikimedia.org/wiki/Category:Uncle_Wiggily%27s_Apple_Roast">Uncle Wiggily’s Apple Roast</a>«, 1919, page 21, pictured by Lang Campbell. Bildquelle: <a href="https://commons.wikimedia.org/wiki/File:Uncle_Wiggily%27s_Apple_Roast_(page_21).jpg">Wikimedia Commons</a>)</em></p>



 ]]></description>
  <category>News</category>
  <guid>https://kantel.github.io/posts/2023041502_chrome_update_v112/index.html</guid>
  <pubDate>Sat, 15 Apr 2023 16:20:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023041502_chrome_update_v112/images/appleroastp29.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Das Ende von maiLab</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023041501_das_ende_von_mailab/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.dwdl.de/images/1606996726_mai-thi-nguyen-kim.jpg"><img src="https://kantel.github.io/posts/2023041501_das_ende_von_mailab/images/mailab-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Aus der deutschen, nicht gerade mit Highlights verwöhnten Landschaft des Wissenschaftsjournalismus gibt es eine gute und eine schlechte Nachricht zu berichten. <a href="https://www.dwdl.de/nachrichten/92541/mai_thi_nguyenkim_beendet_ihren_youtubekanal_mailab/">Die schlechte Nachricht zuerst</a>: Die Chemikerin und Wissenschaftsjournalistin <em><a href="https://de.wikipedia.org/wiki/Mai_Thi_Nguyen-Kim">Mai Thi Nguyen-Kim</a></em> schließt ihren vielfach (und zu Recht) preisgekrönten und erfolgreichen (zuletzt knapp 1,5 Millionen Abonnentinnen und Abonnenten) YouTube-Kanal <a href="https://www.youtube.com/@maiLab">maiLab</a>. In ihrem <a href="https://www.youtube.com/watch?v=FiBpbWSkXvE">Abschiedsvideo</a> nennt sie als Gründe den Weggang der Redakteurin (und Freundin) <em>Meanie Gath</em> (die sich beruflich umorientieren will), die bevorstehende Geburt ihres zweiten Kindes und nicht zuletzt die Überlastung durch ihre zahlreichen Engagements und andere Aufgaben (<em>Mai Thi Nguyen-Kim</em> ist unter anderem auch Mitglied des Senats der Max-Planck-Gesellschaft – bis zu meiner Pensionierung auch mein Brötchengeber).</p>
<p>Und damit komme ich auch zu der guten Nachricht: <em>Mai Thi Nguyen-Kim</em> bleibt uns als Wissenschaftsjournalistin erhalten und macht (nach der Babypause) weiter. Auf ZDFneo läuft die seit Oktober 2021 produziert Wissenschaftsshow »<a href="https://de.wikipedia.org/wiki/MaiThink_X_%E2%80%93_Die_Show">MaiThink X</a>« (fast jeden Sonntag) und auch ihre Zusammenarbeit mit <em><a href="https://de.wikipedia.org/wiki/Harald_Lesch">Harald Lesch</a></em> und für <a href="https://de.wikipedia.org/wiki/Terra_X">Terra X</a> mit dem ZDF setzt sie fort.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/r0jXfwPQW9k" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Wenn ich ein Argument für das öffentlich-rechtliche Fernsehen und seine Gebühren suche, dann fällt mir unter anderem und als eines der ersten auch und vor allem <em>Mai Thi Nguyen-Kim</em> ein (auch »maiLab« war Teil der Öffentlich-Rechtlichen). Aus Dankbarkeit und zur Erinnerung an einen großen YouTube-Kanal habe ich oben eine meiner Lieblingssendungen daraus veröffentlicht. Denn in »<a href="https://www.youtube.com/watch?v=r0jXfwPQW9k">So habt ihr Farben noch nie gesehen</a>« erklärt mir <em>Mai Thi Nguyen-Kim</em>, daß und warum ich als (Fast-) Farbenblinder nicht alleine stehe und warum es erst sehr spät in der Menschheitsgeschichte ein Wort für die Farbe »Blau« gab. <em>Hättet Ihr’s gewußt?</em></p>



 ]]></description>
  <category>Medien</category>
  <category>Science</category>
  <guid>https://kantel.github.io/posts/2023041501_das_ende_von_mailab/index.html</guid>
  <pubDate>Sat, 15 Apr 2023 13:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023041501_das_ende_von_mailab/images/mailab.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Crab Dance Stage 3: Auch tanzende Krabben haben Gegner</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023041403_dancing_crab_3/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52815218979/"><img src="https://kantel.github.io/posts/2023041403_dancing_crab_3/images/crabstage3-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Da ich dringend ein paar andere Dinge ausprobieren möchte, habe ich meiner <a href="https://kantel.github.io/posts/2023040803_dancing_crab_stage_2/">kleinen, tanzenden Krabbe</a> ein (vorläufiges) finales Update verpaßt. Die Krabbe kann nun die herunterschwebenden Luftblasen zum Platzen bringen. Und da ein Spiel ohne Gegner wenig Sinn macht, gibt es jetzt auch gefährliche, rote Blasen, die mit etwas größer Geschwindigkeit nach unten fallen. Kollidiert die Krabbe mit einer dieser Blasen, stirbt sie und das Spiel ist verloren:</p>
<iframe src="https://trinket.io/embed/python/2f0553e21c?outputOnly=true&amp;runOption=run&amp;start=result" width="85%" height="570" frameborder="0" marginwidth="0" marginheight="0" allowfullscreen="">
</iframe>
<p>Wie gewohnt wird die Krabbe mit der rechten und der linken Maustaste gesteuert. Es ist nicht wirklich schwer, damit den roten Blasen auszuweichen, aber das Spiel ist ja auch nur ein <em>proof of concept</em>.</p>
<p>Für die Kollisionserkennung habe ich die Erkennung zweier Kreise implementiert, so wie ich sie <a href="http://blog.schockwellenreiter.de/2019/11/2019111103.html">hier schon einmal vorgestellt</a> hatte. Die Blasen sind sowieso schon Kreise und auch die Krabbe sieht sehr kreisförmig aus. Also drängte sich diese einfach zu implementierende Kollionserkennung geradezu auf. In meinem Krabbenprogramm sieht der Code so aus:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1">  <span class="kw" style="color: #003B4F;">def</span> is_circle_collision(<span class="va" style="color: #111111;">self</span>, other):</span>
<span id="cb1-2">    distance <span class="op" style="color: #5E5E5E;">=</span> dist(<span class="va" style="color: #111111;">self</span>.x, <span class="va" style="color: #111111;">self</span>.y, other.x, other.y)</span>
<span id="cb1-3">    <span class="cf" style="color: #003B4F;">if</span> distance <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="va" style="color: #111111;">self</span>.r <span class="op" style="color: #5E5E5E;">+</span> other.r:</span>
<span id="cb1-4">      <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">True</span></span>
<span id="cb1-5">    <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">False</span></span></code></pre></div>
<p>Dafür mußten in den Klassen der Akteure <code>Crab()</code>, <code>Bubble()</code> und <code>EnemyBubble()</code> (neu) jeweils noch der Radius implementiert werden. Bei der Krabbe und den roten Blasen war das einfach, sie besitzen jeweils nur einen Radius. Bei den verschieden großen Luftblasen erledigte</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1">    <span class="va" style="color: #111111;">self</span>.r <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.img.width<span class="op" style="color: #5E5E5E;">//</span><span class="dv" style="color: #AD0000;">2</span></span></code></pre></div>
<p>in der <code>reset()</code>-Methode dies. (Da bei den Bildern der Blasen Höhe und Weite identisch sind, ist es völlig egal, ob der Durchmesser über <code>img.width</code> oder <code>img.height</code> bestimmt wird.)</p>
<p>Die Klasse <code>EnemyBubble()</code> weist noch eine Besonderheit auf. Als Unterklasse von <code>Bubble()</code> erbt sie alle Eigenschaften und Methoden, die sie nicht selber überschreibt. In diesem Fall sind das insbesondere die Methoden <code>update()</code>, <code>display()</code> und <code>is_circle_collision()</code>.</p>
<p>Ich habe in diesem Falle erstmals zur Initialisierung der Oberklasse Pythons <code>super().__init__()</code>-Methode verwendet. Sie kommt ohne explizite Erwähnung des Parameters <code>self</code> aus.</p>
<p>Wie gewohnt nun der komplette Quellcode für alle, die gerne Quellcode lesen und das Programm nachvollziehen wollen:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># Dancing Crab</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;"># Jörg Kantel 2023</span></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;"># Inspiriert von Heiko Fehr: »Let's Code Python«, Bonn (Rheinwerk-Verlag) 2019, Seiten 247ff.</span></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;"># Krabbe: Nitin Chowdary (CC0), https://opengameart.org/content/crab</span></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;"># Luftblasen: HorrorPen (CC-BY 3.0), https://opengameart.org/content/bubbles8-colors</span></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;"># Bildhintergrund: Kenney.nl Fish Pack (CC0), https://www.kenney.nl/assets/fish-pack</span></span>
<span id="cb3-7"></span>
<span id="cb3-8"><span class="im" style="color: #00769E;">from</span> processing <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span>
<span id="cb3-9"><span class="im" style="color: #00769E;">from</span> random <span class="im" style="color: #00769E;">import</span> randint</span>
<span id="cb3-10"></span>
<span id="cb3-11">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">640</span>, <span class="dv" style="color: #AD0000;">416</span></span>
<span id="cb3-12">NUM_BUBBLES <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">50</span></span>
<span id="cb3-13">NUM_ENEMIES <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb3-14"></span>
<span id="cb3-15"><span class="kw" style="color: #003B4F;">class</span> Background():</span>
<span id="cb3-16">  </span>
<span id="cb3-17">  <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, _img):</span>
<span id="cb3-18">    <span class="va" style="color: #111111;">self</span>.img <span class="op" style="color: #5E5E5E;">=</span> loadImage(_img)</span>
<span id="cb3-19">    </span>
<span id="cb3-20">  <span class="kw" style="color: #003B4F;">def</span> display(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb3-21">    image(<span class="va" style="color: #111111;">self</span>.img, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb3-22"></span>
<span id="cb3-23"><span class="kw" style="color: #003B4F;">class</span> Crab():</span>
<span id="cb3-24">  </span>
<span id="cb3-25">  <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb3-26">    <span class="va" style="color: #111111;">self</span>.img1 <span class="op" style="color: #5E5E5E;">=</span> loadImage(<span class="st" style="color: #20794D;">"crab1.png"</span>)</span>
<span id="cb3-27">    <span class="va" style="color: #111111;">self</span>.img2 <span class="op" style="color: #5E5E5E;">=</span> loadImage(<span class="st" style="color: #20794D;">"crab2.png"</span>)</span>
<span id="cb3-28">    <span class="va" style="color: #111111;">self</span>.img <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.img1</span>
<span id="cb3-29">    <span class="va" style="color: #111111;">self</span>.w <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">64</span></span>
<span id="cb3-30">    <span class="va" style="color: #111111;">self</span>.h <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">64</span></span>
<span id="cb3-31">    <span class="va" style="color: #111111;">self</span>.r <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">32</span></span>
<span id="cb3-32">    <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">=</span> width<span class="op" style="color: #5E5E5E;">//</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="va" style="color: #111111;">self</span>.w<span class="op" style="color: #5E5E5E;">//</span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb3-33">    <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">=</span> height<span class="op" style="color: #5E5E5E;">//</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">100</span></span>
<span id="cb3-34">    <span class="va" style="color: #111111;">self</span>.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"None"</span></span>
<span id="cb3-35">    <span class="va" style="color: #111111;">self</span>.speed <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb3-36">    <span class="va" style="color: #111111;">self</span>.animation_count <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb3-37">    <span class="va" style="color: #111111;">self</span>.score <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb3-38">    </span>
<span id="cb3-39">  <span class="kw" style="color: #003B4F;">def</span> update(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb3-40">    <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"None"</span>:</span>
<span id="cb3-41">      <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb3-42">    <span class="cf" style="color: #003B4F;">elif</span> <span class="va" style="color: #111111;">self</span>.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"RIGHT"</span>:</span>
<span id="cb3-43">      <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">&lt;=</span> width <span class="op" style="color: #5E5E5E;">-</span> <span class="va" style="color: #111111;">self</span>.w <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">5</span>:</span>
<span id="cb3-44">        <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">+=</span> <span class="va" style="color: #111111;">self</span>.speed</span>
<span id="cb3-45">    <span class="cf" style="color: #003B4F;">elif</span> <span class="va" style="color: #111111;">self</span>.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"LEFT"</span>:</span>
<span id="cb3-46">      <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">2</span>:</span>
<span id="cb3-47">        <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">-=</span> <span class="va" style="color: #111111;">self</span>.speed</span>
<span id="cb3-48">    <span class="va" style="color: #111111;">self</span>.animation_count <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb3-49">    <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.animation_count <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">10</span>:</span>
<span id="cb3-50">      <span class="va" style="color: #111111;">self</span>.animation_count <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb3-51">    <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.animation_count <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="dv" style="color: #AD0000;">5</span>:</span>
<span id="cb3-52">      <span class="va" style="color: #111111;">self</span>.img <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.img1</span>
<span id="cb3-53">    <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb3-54">      <span class="va" style="color: #111111;">self</span>.img <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.img2</span>
<span id="cb3-55"></span>
<span id="cb3-56">  <span class="kw" style="color: #003B4F;">def</span> display(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb3-57">    image(<span class="va" style="color: #111111;">self</span>.img, <span class="va" style="color: #111111;">self</span>.x, <span class="va" style="color: #111111;">self</span>.y)</span>
<span id="cb3-58">    </span>
<span id="cb3-59"><span class="kw" style="color: #003B4F;">class</span> Bubble():</span>
<span id="cb3-60">  </span>
<span id="cb3-61">  <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb3-62">    <span class="va" style="color: #111111;">self</span>.reset()</span>
<span id="cb3-63">    <span class="va" style="color: #111111;">self</span>.speed <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb3-64">    </span>
<span id="cb3-65">  <span class="kw" style="color: #003B4F;">def</span> reset(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb3-66">    dia <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">str</span>(randint(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">2</span>))</span>
<span id="cb3-67">    <span class="va" style="color: #111111;">self</span>.img <span class="op" style="color: #5E5E5E;">=</span> loadImage(<span class="st" style="color: #20794D;">"bubbleblue"</span> <span class="op" style="color: #5E5E5E;">+</span> dia <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">".png"</span>)</span>
<span id="cb3-68">    <span class="va" style="color: #111111;">self</span>.r <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.img.width<span class="op" style="color: #5E5E5E;">//</span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb3-69">    <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">=</span> randint(<span class="dv" style="color: #AD0000;">0</span>, width)</span>
<span id="cb3-70">    <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">=</span> randint(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">*</span>height, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">50</span>)</span>
<span id="cb3-71">    </span>
<span id="cb3-72">  <span class="kw" style="color: #003B4F;">def</span> is_circle_collision(<span class="va" style="color: #111111;">self</span>, other):</span>
<span id="cb3-73">    distance <span class="op" style="color: #5E5E5E;">=</span> dist(<span class="va" style="color: #111111;">self</span>.x, <span class="va" style="color: #111111;">self</span>.y, other.x, other.y)</span>
<span id="cb3-74">    <span class="cf" style="color: #003B4F;">if</span> distance <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="va" style="color: #111111;">self</span>.r <span class="op" style="color: #5E5E5E;">+</span> other.r:</span>
<span id="cb3-75">      <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">True</span></span>
<span id="cb3-76">    <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">False</span></span>
<span id="cb3-77">  </span>
<span id="cb3-78">  <span class="kw" style="color: #003B4F;">def</span> update(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb3-79">    <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">+=</span> <span class="va" style="color: #111111;">self</span>.speed</span>
<span id="cb3-80">    <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">&gt;</span> height <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">50</span>:</span>
<span id="cb3-81">      <span class="va" style="color: #111111;">self</span>.reset()</span>
<span id="cb3-82">    </span>
<span id="cb3-83">  <span class="kw" style="color: #003B4F;">def</span> display(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb3-84">    image(<span class="va" style="color: #111111;">self</span>.img, <span class="va" style="color: #111111;">self</span>.x, <span class="va" style="color: #111111;">self</span>.y)</span>
<span id="cb3-85"></span>
<span id="cb3-86"><span class="kw" style="color: #003B4F;">class</span> EnemyBubble(Bubble):</span>
<span id="cb3-87">  </span>
<span id="cb3-88">  <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb3-89">    <span class="bu" style="color: null;">super</span>().<span class="fu" style="color: #4758AB;">__init__</span>()</span>
<span id="cb3-90">    <span class="va" style="color: #111111;">self</span>.reset()</span>
<span id="cb3-91">    <span class="va" style="color: #111111;">self</span>.r <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">15</span></span>
<span id="cb3-92">    <span class="va" style="color: #111111;">self</span>.speed <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb3-93">    </span>
<span id="cb3-94">  <span class="kw" style="color: #003B4F;">def</span> reset(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb3-95">    <span class="va" style="color: #111111;">self</span>.img <span class="op" style="color: #5E5E5E;">=</span> loadImage(<span class="st" style="color: #20794D;">"bubblere1.png"</span>)</span>
<span id="cb3-96">    <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">=</span> randint(<span class="dv" style="color: #AD0000;">0</span>, width)</span>
<span id="cb3-97">    <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">=</span> randint(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">*</span>height, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">50</span>)</span>
<span id="cb3-98">    </span>
<span id="cb3-99"></span>
<span id="cb3-100">bubbles <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb3-101">enemybubbles <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb3-102">    </span>
<span id="cb3-103"><span class="kw" style="color: #003B4F;">def</span> setup():</span>
<span id="cb3-104">  <span class="kw" style="color: #003B4F;">global</span> bg, crab</span>
<span id="cb3-105">  size(WIDTH, HEIGHT)</span>
<span id="cb3-106">  <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"🐠 Crab Dancing with Bubbles - Stage 3 🐡"</span>)</span>
<span id="cb3-107">  bg <span class="op" style="color: #5E5E5E;">=</span> Background(<span class="st" style="color: #20794D;">"background.png"</span>)</span>
<span id="cb3-108">  <span class="cf" style="color: #003B4F;">for</span> _ <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(NUM_BUBBLES):</span>
<span id="cb3-109">    bubble <span class="op" style="color: #5E5E5E;">=</span> Bubble()</span>
<span id="cb3-110">    bubbles.append(bubble)</span>
<span id="cb3-111">  <span class="cf" style="color: #003B4F;">for</span> _ <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(NUM_ENEMIES):</span>
<span id="cb3-112">    enemybubble <span class="op" style="color: #5E5E5E;">=</span> EnemyBubble()</span>
<span id="cb3-113">    enemybubbles.append(enemybubble)</span>
<span id="cb3-114">  crab <span class="op" style="color: #5E5E5E;">=</span> Crab()</span>
<span id="cb3-115">  </span>
<span id="cb3-116"><span class="kw" style="color: #003B4F;">def</span> draw():</span>
<span id="cb3-117">  background(<span class="dv" style="color: #AD0000;">49</span>, <span class="dv" style="color: #AD0000;">197</span>, <span class="dv" style="color: #AD0000;">244</span>) <span class="co" style="color: #5E5E5E;"># Hellblau</span></span>
<span id="cb3-118">  bg.display()</span>
<span id="cb3-119">  crab.update()</span>
<span id="cb3-120">  crab.display()</span>
<span id="cb3-121">  <span class="cf" style="color: #003B4F;">for</span> bubble <span class="kw" style="color: #003B4F;">in</span> bubbles:</span>
<span id="cb3-122">    bubble.update()</span>
<span id="cb3-123">    <span class="cf" style="color: #003B4F;">if</span> bubble.is_circle_collision(crab):</span>
<span id="cb3-124">      bubble.reset()</span>
<span id="cb3-125">      crab.score <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb3-126">    bubble.display()</span>
<span id="cb3-127">  <span class="cf" style="color: #003B4F;">for</span> enemybubble <span class="kw" style="color: #003B4F;">in</span> enemybubbles:</span>
<span id="cb3-128">    enemybubble.update()</span>
<span id="cb3-129">    <span class="cf" style="color: #003B4F;">if</span> enemybubble.is_circle_collision(crab):</span>
<span id="cb3-130">      <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"GAME OVER"</span>)</span>
<span id="cb3-131">      crab.x <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">2000</span></span>
<span id="cb3-132">      crab.y <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">2000</span></span>
<span id="cb3-133">    enemybubble.display()</span>
<span id="cb3-134">  </span>
<span id="cb3-135"><span class="kw" style="color: #003B4F;">def</span> mousePressed():</span>
<span id="cb3-136">  <span class="cf" style="color: #003B4F;">if</span> mouseButton <span class="op" style="color: #5E5E5E;">==</span> LEFT:</span>
<span id="cb3-137">    crab.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"LEFT"</span></span>
<span id="cb3-138">  <span class="cf" style="color: #003B4F;">elif</span> mouseButton <span class="op" style="color: #5E5E5E;">==</span> RIGHT:</span>
<span id="cb3-139">    crab.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"RIGHT"</span></span>
<span id="cb3-140"></span>
<span id="cb3-141"><span class="kw" style="color: #003B4F;">def</span> mouseReleased():</span>
<span id="cb3-142">  crab.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"NONE"</span></span>
<span id="cb3-143"></span>
<span id="cb3-144">run()</span></code></pre></div>
<p>Den <a href="https://github.com/kantel/trinket/tree/main/crabdance/stage3">Quellcode mit allen Assets</a> gibt es wieder in meinem GitHub Repositorium. Außerdem könnt Ihr hier das <a href="https://trinket.io/python/2f0553e21c">Trinket remixen</a> und Eure eigenen Ideen einbauen.</p>
<p>Dieses Krabben-Trinket-Tutorial besteht aus diesen drei Teilen:</p>
<ol type="1">
<li>Stage 1: <a href="https://kantel.github.io/posts/2023040403_crabdance%E2%80%93stage1/">Crab Dancing with Bubbles</a>, die spontan aus einer Laune heraus erstellte erste Fassung.</li>
<li>Stage 2: <a href="https://kantel.github.io/posts/2023040803_dancing_crab_stage_2/">Die tanzende Krabbe mit neuen (freien) Bildchen</a>, eine von <a href="http://blog.schockwellenreiter.de/2022/10/2022103001.html">TigerJython</a>-Bezügen gereinigte Version.</li>
<li>Crab Dance Stage 3: Auch tanzende Krabben haben Gegner - diese, die vorläufig letzte Fassung.</li>
</ol>
<p>Natürlich ist das nur ein Prototyp und es sind Erweiterungen denkbar, zum Beispiel eine Anzeige des Punktestands, ein Start- und ein Endebildschirm und so weiter. Vielleicht fasse ich das Programm daher irgendwann noch einmal an, aber momentan möchte ich mich mit anderen Schmuckstücken befassen. <em>Still digging!</em></p>



 ]]></description>
  <category>Python</category>
  <category>Processing</category>
  <category>Spieleprogrammierung</category>
  <category>Trinket</category>
  <guid>https://kantel.github.io/posts/2023041403_dancing_crab_3/index.html</guid>
  <pubDate>Fri, 14 Apr 2023 18:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023041403_dancing_crab_3/images/crabstage3.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Creative Coding und Physik-Simulationen – Video-Tutorials am Freitag</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023041402_creative_coding_und_physik/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://en.wikipedia.org/wiki/File:Blender3D_HiddenTextSoftbody.ogv#/media/File:Blender3D_HiddenTextSoftbody.jpg"><img src="https://kantel.github.io/posts/2023041402_creative_coding_und_physik/images/softbody-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Auch für den heutigen Freitag habe ich wieder einen Bunch von Video-Tutorials für Euch (und für mich) herausgesucht, damit Ihr am dem zu erwartenden verregneten Wochenende nicht von Langeweile geplagt wird und Ihr aus lauter Verzweiflung in die Kirchen rennt. Das Thema an diesem Wochenende ist einmal »Creative Coding mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/p5js.html">P5.js</a>« und zum zweiten – inspiriert von <em>Daniel Shiffman</em> – »Physiksimulationen und Physik-Engines«.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/4fkRdKQ3DSM" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Ich beginne mir Creative Coding und P5.js: Die Playlist »<a href="https://www.youtube.com/playlist?list=PLnJOmsprq3bErSNvxK0OV-Adh1uxRhVdo">P5.js Projects &amp; Programming</a>« von <em>Steve`s Makerspace</em> ist eine Monsterplaylist mit 52 im Schnitt etwa viertelstündigen Videos, die sich um Creative Coding mit P5.js drehen. Nachdem ich in die ersten Videos hineingeschaut habe, bekomme ich große Lust, den <a href="https://editor.p5js.org/">P5.js-Webeditor</a> anzuwerfen und mich selber endlich intensiver mit P5.js auseinanderzusetzen. <em>So viel zu spielen, so wenig Zeit</em>.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/-YhzDuF_kLs" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Der <a href="https://www.youtube.com/@jeffkthompson">YouTube-Kanal von <em>Jeff Thompson</em></a> zu <em>Creative Programming</em> will auch noch von mir erforscht werden.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/-CzNlgpOVgs" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Das gleiche gilt für den Workshop »<a href="https://www.youtube.com/watch?v=-CzNlgpOVgs">Procedural pattern programming with p5.js</a>« und für die Playlist »<a href="https://www.youtube.com/playlist?list=PLyhIajiyZLlPhrFYJqOFRq9aoY-Q0AYjU">P5.js Spirals</a>« (fünf Videos á etwa 15 Minuten Spieldauer).</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/IxdGyqhppis" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Einen eleganten Übergang zur Physik schafft dann – wie angekündigt – <em>Daniel Shiffman</em> mit seiner 177. Coding Challenge »<a href="https://www.youtube.com/watch?v=IxdGyqhppis">Soft Body Physics</a>«, in der er zeigt, was er alles mit der Physik Engine »<a href="http://haptic-data.com/toxiclibsjs/">Toxiclibs.js</a>« anstellen kann. Ein weiterer Grund für mich, den P5.js-Webeditor wieder hervorzukramen. Dazu gibt es auch eine nette <a href="https://en.wikipedia.org/wiki/Soft-body_dynamics">Seite in der englischsprachigen Wikipedia</a>, in der auch eine Reihe von <em>Physik Engines</em> und -Spielen vorgestellt werden.</p>
<p>In diesem Video erzählt <em>Shiffman</em> auch, daß seine <a href="https://nature-of-code-2nd-edition.netlify.app/">Neuauflage von »The Nature of Code«</a> kurz vor der Fertigstellung steht. Ich bin gespannt wie ein Flitzebogen.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/alhpH6ECFvQ" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>In seiner 132. Coding Challenge programmierte <em>Daniel Shiffman</em> eine »<a href="https://thecodingtrain.com/challenges/132-fluid-simulation">Fluid Simulation</a>« in knallbunt und mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processing.html">Processing (Java)</a>. Physik kann so schön (bunt) sein.&nbsp;🤓</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/tLsi2DeUsak" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Doch es gibt natürlich auch andere Physik (2D) Engines, die interessante Projekte erlauben. Eine sehr populäre Engine ist <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/pymunk.html">Pymunk</a>, die auf der auf die sehr leistungsfähigen, in C geschriebenen 2D-Physikbibliothek <a href="https://chipmunk-physics.net/">Chipmunk</a> basiert. Pymunk arbeitet unter anderem auch sehr schön mit <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a> zusammen, wie <em>Tech With Tim</em> in obigem, einstündigen Video »<a href="https://www.youtube.com/watch?v=tLsi2DeUsak">Physics Simulations With Python and PyMunk</a>« demonstriert.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/cCiXqK9c18g" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Da aber auch andere Mütter schöne Töchter haben, möchte ich Euch auch <a href="https://kantel.github.io/posts/2023012601_covid_is_over/">noch einmal</a> die Playlist »<a href="https://www.youtube.com/playlist?list=PL_N_kL9gRTm8lh7GxFHh3ym1RXi6I6c50">Pymunk Basics</a>« des YouTubers <em>Ear Of Corn</em> vorstellen, die aus sieben Videos zwischen fünf und dreissig Minuten Spieldauer besteht.</p>
<p>Und dann habe ich kürzlich <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/vpython.html">VPython</a>, genauer <a href="https://glowscript.org/">WebVPython/GlowScript</a> (wieder-) entdeckt, eine Python-3D-Physics-Engine, die auch mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/trinket.html">Trinket</a> zusammenspielt. Doch das ist eine ganz andere, neue Geschichte, über die ich in einem separaten Beitrag berichten möchte. Da will ich erst noch eine Weile selber experimentieren.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/5ncQDRvkpP8" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p><strong>War sonst noch was?</strong> Ach ja, <em>Wassily Kandinskys</em> brachte in »<a href="https://shop.bauhaus-movement.com/poster-wassily-kandinsky-circles-de">Circles in a Circle</a>« von 1923 erstmals seine Kreise in den Vordergrund. Es ist ein besonders ordentliches Werk, in dem die meisten Elemente sauber in einem großen dicken Kreis platziert sind. Das schreit nach einem Re-enactment. Aber ich wiederhole mich: <em>So viel zu spielen, so wenig Zeit!</em></p>



 ]]></description>
  <category>Creative Coding</category>
  <category>P5.js</category>
  <category>Pymunk</category>
  <category>Pygame</category>
  <category>Physik</category>
  <category>Simulation</category>
  <guid>https://kantel.github.io/posts/2023041402_creative_coding_und_physik/index.html</guid>
  <pubDate>Fri, 14 Apr 2023 14:45:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023041402_creative_coding_und_physik/images/softbody.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
