<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Der Schockwellenreiter</title>
<link>https://kantel.github.io/</link>
<atom:link href="https://kantel.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description>Schockwellenreiter</description>
<generator>quarto-1.4.549</generator>
<lastBuildDate>Fri, 10 May 2024 13:00:00 GMT</lastBuildDate>
<item>
  <title>Security Alert: Google Chrome</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024051001_security_alert_chrome/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53560541107/"><img src="https://kantel.github.io/posts/2024051001_security_alert_chrome/images/octopussynotfall-b.jpg" class="img-fluid"></a></p>
<p>Wenn unser aller Datenkrake so kurz nach dem regulären, wöchentlichen <a href="https://kantel.github.io/posts/2024050801_chrome_update/">Sicherheits-Rundumschlag von Mittwoch</a> außer der Reihe ein neues Update unters Volk bringt, dann gehe ich mal davon aus, daß wirklich die Kacke am Dampfen ist: Google veröffentlicht eine weitere Version 124 (124.0.6367.201/202) seines Browsers Chrome und schließt damit <a href="https://chromereleases.googleblog.com/2024/05/stable-channel-update-for-desktop_7.html">kritische Sicherheitslücken</a>.</p>
<p>Chrome aktualisiert sich (außer bei Linux) über die integrierte Update-Funktion, kann aber – wenn es pressiert – auch <a href="https://www.google.com/intl/de/chrome/browser/">hier geladen</a> werden. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/53560541107/">Octopussy</a></em>, erstellt mit <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/scenario.html">Scneario</a>. Prompt: »<em>A sexy female robot flees from a gigantic data octopus, colored french comic style</em>«. Negative Prompt: »<em>ugly, deformed, noisy, blurry, distorted, out of focus, bad anatomy, extra limbs, poorly drawn face, poorly drawn hands, missing fingers</em>«. Modell: Stable Diffusion XL, Style: Scifi Magic + Belgian School.</p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2024051001_security_alert_chrome/</guid>
  <pubDate>Fri, 10 May 2024 13:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024051001_security_alert_chrome/images/octopussynotfall.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Monogatari und RenJS: Zwei Engines für Visual Novels (und mehr)</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024050901_monogatari_renjs/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53708372012/"><img src="https://kantel.github.io/posts/2024050901_monogatari_renjs/images/monogatari-b.jpg" class="img-fluid"></a></p>
<p>Mein in schöner Regelmäßigkeit auf diesen Seiten auftauchender Freund und Diskussionspartner <em>Kalle aus Bremen</em> wollte mich für diesen automatischen <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processing.html">Processing</a>/Java nach <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/p5js.html">P5.js</a>/JavaScript-<a href="https://dkessner.github.io/processing-p5-convert/">Konverter</a> begeistern und war – glaube ich – ein wenig enttäuscht, weil sich meine Begeisterung in Grenzen hielt<sup>1</sup>. Aber mich begeisterte etwas ganz anderes. Denn auf den <a href="https://dkessner.github.io/project_current/">Seiten von <em>Darren Kessner</em></a> fand ich einen <a href="https://dkessner.github.io/alice/">Link zu einer Visual Novel über Alice im Wunderland</a> und dort wieder einen Link zu der Engine <a href="https://monogatari.io/">Monogatari</a>, mit der er diese interaktive Geschichte gebastelt hatte, und dort wiederum – über einige Umwege – einen Link zu <a href="https://renjs.net/index.html">RenJS</a>, eine weitere interessante <em>Visual Novel Engine</em>.</p>
<p>Beide Engines berufen sich auf <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/renpy.html">Ren’Py</a> und folgen einer ähnlichen, Skript-orientierten Vorgehensweise, haben aber ihren Fokus auf Webtechniken (HTML5, JavaScript, CSS).</p>
<iframe class="if16_9" src="https://www.youtube.com/embed/byObSXXFAnM?si=3Y0ZdypeRMLPqcku" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p>Die <strong>Monogatari Visual Novel Engine</strong> (MIT-Lizenz)<sup>2</sup> verlangt einen Texteditor, einen lokalen Webserver (zum Beispiel <a href="http://cognitiones.kantel-chaos-team.de/webworking/mamp.html">MAMP</a> oder <a href="http://cognitiones.kantel-chaos-team.de/webworking/xampp.html">XAMPP</a>) und einen einigermaßen modernen Browser als Entwicklungsumgebung. Die Software besitzt eine <a href="https://developers.monogatari.io/documentation">ausführliche Dokumentation</a> und ist auch auf <a href="https://developers.monogatari.io/documentation">GitHub zu finden</a>. Zusätzlich führt eine <a href="https://monogatari.io/demo/">nett gemachte Demo</a> (siehe <a href="https://www.flickr.com/photos/schockwellenreiter/53708372012/">Screenshot</a> im Bannerbild oben) in die vielfältigen Möglichkeiten des Programms ein.</p>
<iframe class="if16_9" src="https://www.youtube.com/embed/Es1nmMqUDHg?si=l774lUNqm6Cpqr4E" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p>Die Voraussetzungen, um mit <strong>RenJS V2</strong> (CC-BY-SA-4.0) eine interaktive Geschichte entwickeln zu können, sind genau dieselben wie bei Monogatari (Texteditor, Browser und lokaler Entwicklungsserver). Hier zeigt schon der Name die Nähe zu Ren’Py, doch ist <a href="https://phaser.io/">Phaser</a> die (JavaScript-) Engine, die im Hintergrund werkelt. Auch RenJS besitzt eine <a href="https://renjs.net/docs-page.html">umfangreiche Dokumentation</a> und ein <a href="https://github.com/lunafromthemoon/RenJS-V2">GitHub-Repositorium</a>. Zusätzlich ist das Teil auch noch auf <a href="https://lunafromthemoon.itch.io/renjs">Itch.io zu finden</a>, wo auch eine kleine Demo gestartet werden kann.</p>
<p>Für beide Engines gilt, daß sie neben einer browserbasierten Version auch – vermutlich via <a href="http://cognitiones.kantel-chaos-team.de/webworking/frameworks/electron.html">Electron</a> – Desktop-Applikationen für Windows, macOS und Linux erzeugen können.</p>
<p>Monogatari wie auch RenJS klingen sehr vielversprechend und scheinen sehr ähnlich zu sein. Um sie besser beurteilen zu können, müßte ich sie anscheinend wirklich auf Herz und Nieren testen. Und wißt Ihr was? Ich glaube, ich habe Lust darauf!</p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Fußnoten</h2>

<ol>
<li id="fn1"><p>Ich bin kein Berufs-, sondern ein Hobby-Programmierer. Folgerichtig ist Programmieren für mich in erster Linie eine kreative Tätigkeit. Daher lasse ich mir die Freude an der Kreativität doch nicht von solch einem Automatisierungstool verderben. (Wohlgemerkt, wäre ich ein Profi-Programmierer und müßte mich mit so langweiligen Aufgaben wie zum Beispiel der Programmierung eines Warenwirtschaftssystems herumschlagen, dann sähe meiner Einschätzung solch eines Automatisierungs-Werkzeiges vermutlich anders aus.)↩︎</p></li>
<li id="fn2"><p>Der Name <a href="https://de.wikipedia.org/wiki/Monogatari_Series">Monogatari</a> leitet sich von einer in Japan populären, gleichnamigen <a href="https://de.wikipedia.org/wiki/Light_Novel">Light-Novel</a>-Reihe ab, die auch als Anime und in diversen Fernsehserien umgesetzt wurde.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Monogatari</category>
  <category>RenJS</category>
  <category>Interacitive Fiction</category>
  <category>Spieleprogrammierung</category>
  <guid>https://kantel.github.io/posts/2024050901_monogatari_renjs/</guid>
  <pubDate>Thu, 09 May 2024 12:45:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024050901_monogatari_renjs/images/monogatari.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Foam und Dendron: Freie Alternativen zu Obsidian</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024050802_foam_dendron/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53705074626/"><img src="https://kantel.github.io/posts/2024050802_foam_dendron/images/madhatterfriends-b.jpg" class="img-fluid"></a></p>
<p>Nachdem sich <a href="http://cognitiones.kantel-chaos-team.de/webworking/auszeichnungssprachen/zettlr.html">Zettlr</a> leider <a href="https://kantel.github.io/posts/2024050501_zettlr_catalina/">selbst ins Abseits geschossen</a> hat, weil es einfach nicht mehr mit meinem (zugegebenermaßen betagten, aber ich habe nichts anderes und als Rentner kann ich mir ein neues nicht leisten) MacBook Pro zusammenspielt, bin ich weiterhin auf der Suche nach einer Alternative für mein »zweites Gehirn«, wenn <a href="http://cognitiones.kantel-chaos-team.de/webworking/auszeichnungssprachen/logseq.html">Logseq</a> seine <a href="https://kantel.github.io/posts/2024050402_logseq_oder_zettlr/">Androhung umsetzt</a> und den Wechsel von flachen Markdown-Dateien zu einer datenbankbasierten Version vollzieht.</p>
<p>Da <a href="http://cognitiones.kantel-chaos-team.de/webworking/auszeichnungssprachen/obsidian.html">Obsidian</a> für mich keine echte Alternative ist, weil ich der Überzeugung bin, daß mensch sowohl einen Zettelkasten wie auch einen <a href="https://kantel.github.io/posts/2024050701_digital_garden/">digitalen Garten</a> mit freier Software betreiben sollte, bin ich froh, mit <a href="https://foambubble.github.io/foam/">Foam</a> wie auch mit <a href="https://wiki.dendron.so/">Dendron</a> zwei freie Obsidian-Alternativen gefunden zu haben.</p>
<iframe class="if16_9" src="https://www.youtube.com/embed/lBNyJXYDGLA?si=pDBGFDlky-52sllP" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p>Dabei versteht sich <strong>Foam</strong> nicht nur als Obsidian-, sondern vor allem – wie der Name schon vermuten läßt – als Alternative zum kommerziellen <a href="https://roamresearch.com/">Roam</a>. Foam kommt als <a href="http://cognitiones.kantel-chaos-team.de/produktivitaet/visualstudiocode.html">Visual Studio Code</a>-Plugin mit GitHub als Backend. Die Installation scheint nicht ganz unproblematisch, aber es gibt eine Reihe von Tutorials, die über die ersten Hürden hinweghelfen wollen:</p>
<ul>
<li>Phil Wornath: <em><a href="https://bootcamp.uxdesign.cc/automating-my-second-brain-how-technology-makes-information-management-effortless-afb2a1e4ab11">Build &amp; Automate Your Second Brain: Web Clipper, GitHub Actions, Foam for VSCode</a></em>, Bootcamp vom 1. August 2023</li>
<li>Matthew Hodkins: <em><a href="https://hodgkins.io/vscode-second-brain">Creating a VSCode Second Brain</a></em>, Matthew Hodkins Blog vom 19. Oktober 2020</li>
<li>Fred Grott: <em><a href="https://fredgrott.medium.com/vscode-mastery-set-up-your-second-brain-first-71a14619dc8e">VSCode Mastery, Set Up Your Second Brain First</a></em>, Medium.com vom 12. Mai 2023</li>
<li>Ben Holmes: <em><a href="https://bholmes.dev/blog/giving-up-on-notion-to-build-a-second-brain/">Leaving Notion to build a second brain in VS Code</a></em> Ben Holmes Blog vom 11. Januar 2021</li>
</ul>
<p>Foam ist Open Source (MIT-Lizenz), gut dokumentiert und der Quellcode ist auf <a href="https://github.com/foambubble/foam">GitHub zu finden</a>.</p>
<iframe class="if16_9" src="https://www.youtube.com/embed/Pd63xxRktgE?si=cGYvUY4SZv16_j78" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p><strong>Dendron</strong> habe ich mir noch nicht so genau angeschaut. Auch diese Software kommt als Visual Studio Code Plugin, allerdings erwähnt sie explizit, daß sie auch mit der weniger neugierigen VS-Code-Alternative <a href="https://vscodium.com/">VSCodium</a> funzt (das ist – trotz der gleichen Code-Basis – leider nicht immer gegeben). Der größte Unterschied zu Foam scheint zu sein, daß Dendron auf eine Hierarchie setzt. Das schlägt sich zwar nicht im Dateisystem nieder (das ist ebenfalls flach), sondern in seltsamen Dateinamen, die die Hierarchie durch.Punkte.erzeugen. Das ist nicht nur gewöhnungsbedürftig, sondern ich bin mir auch nicht sicher, ob Hierarchien in einem <em>Second Brain</em> überhaupt sinnvoll sind.</p>
<p>Es gibt ebenfalls viel Literatur und Tutorials zu Dendron, die ich aber noch nicht gesichtet habe. Ein guter Einstieg scheint das zweistündig YouTube-Tutorial »<a href="https://www.youtube.com/watch?v=nfvx8rv77NA">Dendron: A Unique Approach To Knowledge Management</a>« von <em>Brian Jenks</em> zu sein.</p>
<p>Auch Dendron ist Open Source (Apache-2.0 Lizenz) und der Quellcode ist natürlich ebenfalls auf GitHub zu finden.</p>
<p>Beide Applikationen existieren schon ein paar Jahre und weisen eine beträchtliche Anzahl an Mit-Entwicklern auf, so daß man sich um die Zukunft erst einmal keine Sorgen machen muß. Ich werde mit ihnen ein wenig herumspielen und dann vielleicht eine Entscheidung treffen. Wenn mir nicht doch noch ein besseres Stück Software unter die Finger kommt. <em>Still digging!</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/53705074626/">Mad Hatter sucht Freunde</a></em>, erstellt mit <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/scenario.html">Scenario</a>. Prompt: »<em>The Mad Hatter finds a large blue obsidian in an enchanted garden in spring</em>«. Negative Prompt: »<em>ugly, beard, deformed, noisy, blurry, distorted, out of focus, bad anatomy, extra limbs, poorly drawn face, poorly drawn hands, missing fingers</em>«. Modell: Stable Diffusion XL, Style: Creepy Nordic + Belgian + Semi-Realistic</p>



 ]]></description>
  <category>Foam</category>
  <category>Dendron</category>
  <category>Zettelkasten</category>
  <category>Digital Garden</category>
  <guid>https://kantel.github.io/posts/2024050802_foam_dendron/</guid>
  <pubDate>Wed, 08 May 2024 14:45:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024050802_foam_dendron/images/madhatterfriends.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Google korrigiert mit neuer Version 124 seines Browsers Chrome kritische Sicherheitslücken</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024050801_chrome_update/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53559689645/"><img src="https://kantel.github.io/posts/2024050801_chrome_update/images/datenkrake52-b.jpg" class="img-fluid"></a></p>
<p>Es ist wieder Mittwoch und wie jeden Mittwoch haut unser aller Datenkrake ein Update seines Flaggschiffs heraus, damit wir weiterhin sicher ausspioniert werden können: Google veröffentlicht das Update der Version 124 (124.0.6367.155/156) seines Browsers Chrome und schließt damit <a href="https://chromereleases.googleblog.com/2024/05/stable-channel-update-for-desktop_7.html">kritische Sicherheitslücken</a>.</p>
<p>Chrome aktualisiert sich (außer bei Linux) über die integrierte Update-Funktion, kann aber – wenn es pressiert – auch <a href="https://www.google.com/intl/de/chrome/browser/">hier geladen</a> werden. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/53705427354/">Octopussy</a></em>, erstellt mit <a href="https://beta.dreamstudio.ai/generate">DreamStudio</a>. Prompt: »<em>A beauty female robot flees from a gigantic data octopus, colored french comic style</em>«. Negative Prompt: »<em>ugly, deformed, noisy, blurry, distorted, out of focus, bad anatomy, extra limbs, poorly drawn face, poorly drawn hands, missing fingers</em>«. Modell: Stable Diffusion XL, Style: Comic Book</p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2024050801_chrome_update/</guid>
  <pubDate>Wed, 08 May 2024 14:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024050801_chrome_update/images/datenkrake52.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Für umme lesen: Unterwegs in der Stadt der Zukunft</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024050702_urban_gardening/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53705427354/"><img src="https://kantel.github.io/posts/2024050702_urban_gardening/images/madhatterliest-b.jpg" class="img-fluid"></a></p>
<p>Weil es inhaltlich (wenn auch nur über Ecken) zum <a href="https://kantel.github.io/posts/2024050701_digital_garden/">letzten Beitrag</a> passt und als Reminiszenz an <a href="http://www.gabi-kantel.de/">Gabi</a>, die seit ihrem Studium der Landschaftsplanung von dem Konzept urbaner Gemeinschaftsgärten fasziniert war und auch erfolgreich mit ein paar Nachbarinnen aus unserem Gärtchen mal einen Gemeinschaftsgarten geschaffen hatte (bis die Nachbarinnen weggezogen waren) und ohne Erfolg (mit der <a href="https://de.wikipedia.org/wiki/Die_Autobahn_GmbH_des_Bundes">Bundesautobahngesellschaft</a> war nicht zu verhandeln – das führte nur zu dem Berlin-üblichen Behörden-Ping-Pong) einen Gemeinschaftsgarten im <a href="https://de.wikipedia.org/wiki/Carl-Weder-Park">Carl-Weder-Park</a> hochziehen wollte.</p>
<p>Von der <a href="https://anstiftung.de/">Anstiftung</a> ist ein neues Open-Access-Buch erschienen: Es heißt »<a href="https://anstiftung.de/blog/allgemein/unterwegs-in-die-stadt-der-zukunft">Unterwegs in die Stadt der Zukunft. Urbane Gärten als Orte der Transformation</a>« und wurde von <em>Andrea Baier</em>, <em>Christa Müller</em> und <em>Karin Werner</em> herausgegeben. Aus dem Klappentext:</p>
<blockquote class="blockquote">
<p>Urbane Gemeinschaftsgärten sind aus der Stadt nicht mehr wegzudenken. Aus vereinzelten Pionierprojekten entstand im Laufe der vergangenen zwei Jahrzehnte ein Netzwerk von rund 1000 Initiativen. Als erdverbundene Orte haben sie das Potenzial, Stadt wie Gesellschaft grundlegend zu verändern. Was das Besondere an urbanen Gärten ist und warum sie unverzichtbar sind, davon handelt dieses Buch. Gemeinsam mit Autor*innen aus Wissenschaft, Forschung und Aktivismus beleuchten wir die unterschiedlichen Dimensionen der neuen urbanen Gartenbewegung. Wir wollen wissen, welche Rolle ihr bei der Mitgestaltung einer menschen- und naturgerechten Stadt der Zukunft zukommt.</p>
</blockquote>
<p>Das Buch ist im [transcript]-Verlag als <a href="https://www.transcript-verlag.de/978-3-8376-7163-6/unterwegs-in-die-stadt-der-zukunft/">aufwändig gestaltete Druckversion</a> sowie online als kostenfreies <a href="https://www.transcript-verlag.de/978-3-8376-7163-6/unterwegs-in-die-stadt-der-zukunft/?number=978-3-8394-7163-0">Open-Access-eBook</a> (PDF, 40 MB) erhältlich.</p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/53705427354/">Mad Hatter liest ein Buch</a></em>, erstellt mit <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/scenario.html">Scenario</a>. Prompt: »<em>The Mad Hatter finds a large blue obsidian in an enchanted garden in spring</em>«. Negative Prompt: »<em>ugly, beard, deformed, noisy, blurry, distorted, out of focus, bad anatomy, extra limbs, poorly drawn face, poorly drawn hands, missing fingers</em>«. Modell: Stable Diffusion XL, Style: Creepy Nordic + Belgian + Semi-Realistic</p>



 ]]></description>
  <category>Garten</category>
  <category>Städte für Menschen</category>
  <category>Umwelt</category>
  <guid>https://kantel.github.io/posts/2024050702_urban_gardening/</guid>
  <pubDate>Tue, 07 May 2024 15:50:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024050702_urban_gardening/images/madhatterliest.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Mad Hatter trifft Obsidian im digitalen Wundergarten</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024050701_digital_garden/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53705094961/"><img src="https://kantel.github.io/posts/2024050701_digital_garden/images/madhatterobsidian01-b.jpg" class="img-fluid"></a></p>
<p>Bei der Suche nach Alternativen zum <a href="https://kantel.github.io/posts/2024050402_logseq_oder_zettlr/">hier beschriebenen Untergangsszenario</a>, in dem <a href="http://cognitiones.kantel-chaos-team.de/webworking/auszeichnungssprachen/logseq.html">Logseq</a>, mein bisherig mit Erfolg betriebenes »zweites Gehirn« für mich unbrauchbar wird, weil es von flachen Markdown-Dateien zu einer Datenbank-basierten Version wechselt, bin ich auch immer wieder über das Konzept der »digitalen Gärten« gestolpert.</p>
<p><a href="https://hapgood.us/2015/10/17/the-garden-and-the-stream-a-technopastoral/">Ein digitaler Garten ist in gewisser Weise ein Gegenentwurf zum Weblog</a>. Die Idee ist, daß dort Beiträge in einem Beet (auf einer Seite) gepflanzt werden und sie nicht im Stream verschwinden, sondern man ihnen Zeit zum Wachsen läßt und die Veränderungen auf dieser Seite dokumentiert.</p>
<iframe class="if16_9" src="https://www.youtube.com/embed/Hn6_4ZzcpiY?si=viAQzvTyFJ2VzkIn" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p>Einen <em>Content Stream</em> wie in einem Blog kann es dennoch geben: Logseq macht es vor, die Software unterscheidet zwischen <em>Journal</em> und <em>Pages</em>. Im Journal werden die Notizen in (umgekehrter) zweitlicher Reihenfolge festgehalten und sie verlinken auf die (permanenten) Seiten, die auch ständig aktualisiert werden. Um bei der Garten-Metapher zu bleiben: Das Journal ist eine Art Gartentagebuch, in dem die Arbeiten in chronologischer Folge dokumentiert werden und die Seiten sind die Beete, in denen die Früchte der Arbeit wachsen.</p>
<p>Die Idee kommt mir sehr entgegen, denn sie drückt auch mein Unbehagen aus, warum ich seit geraumer Zeit den <em>Schockwellenreiter</em> nicht mehr als Weblog, sondern als <em>(digitales) Kritzelheft</em> beschreibe. Um aus diesen Seiten jedoch einen digitalen Wundergarten zu machen, muß ich noch viele konzeptionelle Überlegungen anstellen. So schnell wird sich hier also nichts verändern.</p>
<p>Wie immer in solchen Fällen habe ich erst einmal ein paar Links zum Thema gesammelt:</p>
<ul>
<li>Tim Rodenbröker: <em><a href="https://timrodenbroeker.de/digital-garden/">How I built myself a Digital Garden</a></em>, trcc vom 10. September 2023, last modified 16. März 2024</li>
<li>Carsten Nichte: <em><a href="https://carsten-nichte.de/docs/digital-garden/">Digital Garden</a></em>, 2. April 2024</li>
<li>Holger Moller: <em><a href="https://hackmd.io/@holger-moller/ljdg-was-ist-digital-gardening">Was ist Digital Gardening?</a></em>, 4. Mai 2021</li>
<li>Holger Moller: <em><a href="https://hackmd.io/@holger-moller/learning-journey-digital-gardening-toc/">Learning Journey Digital Gardening</a></em>, 5. Mai 2021</li>
<li>Christian Beier: <em><a href="https://wiki.cbeier.net/digital_garden">Digital Garden / Digitaler Garten</a></em>, 2. August 2021</li>
<li>Simon Späti: <em><a href="https://www.ssp.sh/brain/digital-garden/">Digital Garden</a></em>, 9. Februar 2024</li>
<li>Esteban Thilliez: <em><a href="https://medium.com/the-obsidianist/what-is-a-digital-garden-eeae89c7c483">What is a Digital Garden?</a></em>, The Obsidianist vom 3. Februar 2023</li>
</ul>
<p>Das Thema kochte deshalb bei mir hoch, weil sich <a href="http://cognitiones.kantel-chaos-team.de/webworking/auszeichnungssprachen/obsidian.html">Obsidian</a> gerne als <em>die</em> Software zum Anlegen eines digitalen Gartens empfiehlt. Das ist nicht ganz uneigennützig, da Obsidian seinen eigenen Publikationsdienst <a href="https://obsidian.md/publish">Obsidian Publish</a> für aktuell US-$&nbsp;8/Monat anbietet. Es geht aber auch anders, wie das Video »<a href="https://www.youtube.com/watch?v=eULVrTjT11w">How to Publish Obsidian Notes Online For Free</a>« <em>(Obsidian Publish Alternative)</em> aufzeigt. Die bekannteste freie Alternative ist <strong><a href="https://www.ssp.sh/brain/quartz-publish-obsidian-vault/">Quartz</a></strong>, die etwas großspurig in diesem Video als »<a href="https://www.youtube.com/watch?v=6s6DT1yN4dw">Best Tool for Obsidian</a> angepriesen wird. Wie dem auch sei, ich habe <a href="https://quartz.jzhao.xyz/">Quartz&nbsp;4.0</a> auf meine Liste der zu testenden Software gesetzt.</p>
<p>Zwei Playlisten zu Obsidian für Anfänger buhlten ebenfalls um meine Gunst:</p>
<ul>
<li>Einmal das deutschsprachige »<a href="https://www.youtube.com/playlist?list=PLzp2ZLXTBP0uMYXsnxVjJMrtWJ9JIncPC">Zettelkasten für Beginner</a>« mit sechs je knapp einstündige Videos, und dann</li>
<li>die ebenfalls deutschsprachigen Obsidian Basics – <a href="https://www.youtube.com/playlist?list=PL85A1_NUz_zr6dfszT0kMmfbsEVEIw7Xi">Alles was du zum Markdown-Editor wissen mußt</a>, vier weitere, eher kurze Tutorials.</li>
</ul>
<p><strong>War sonst noch was?</strong> Ach ja, in meinen Kommentaren wurde mir noch <strong><a href="https://silverbullet.md/">SilverBullet</a></strong> als freie (MIT-Lizenz) Logseq-Alternative empfohlen. Das Teil läuft im Browser (Ihr müßt also irgendwo einen Webserver laufen haben, funzt aber auch lokal auf dem Desktop zum Beispiel mit <a href="http://cognitiones.kantel-chaos-team.de/webworking/mamp.html">MAMP</a> oder <a href="http://cognitiones.kantel-chaos-team.de/webworking/xampp.html">XAMPP</a>), das heißt, die Installation ist nicht ohne – das Video »<a href="https://www.youtube.com/watch?v=8btx9HeuZ4s">SilverBullet: The One With The Introduction And Demo</a>« zeigt aber, wie es geht. Auf dem <a href="https://www.youtube.com/@ZefHemel">Kanal von <em>Zef Hemel</em></a> gibt es noch weitere Tutorials zu SilverBullet und das Teil <a href="https://github.com/silverbulletmd/silverbullet">ist auch auf GitHub</a> zu finden. Definitiv ein weiterer Testkandidat, denn es muß ja nicht unbedingt Obsidian sein!</p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/53705094961/">Mad Hatter meets Obsidian</a></em>, erstellt mit <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/scenario.html">Scenario</a>. Prompt: »<em>The Mad Hatter finds a large blue obsidian in an enchanted garden in spring</em>«. Negative Prompt: »<em>ugly, beard, deformed, noisy, blurry, distorted, out of focus, bad anatomy, extra limbs, poorly drawn face, poorly drawn hands, missing fingers</em>«. Modell: Stable Diffusion XL, Style: Creepy Nordic + Belgian + Semi-Realistic</p>



 ]]></description>
  <category>Digital Garden</category>
  <category>Logseq</category>
  <category>Obsidian</category>
  <category>SilverBullet</category>
  <category>Zettelkasten</category>
  <guid>https://kantel.github.io/posts/2024050701_digital_garden/</guid>
  <pubDate>Tue, 07 May 2024 14:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024050701_digital_garden/images/madhatterobsidian01.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Google schließt am »Mai-Patchday« wieder Sicherheitslücken in Android</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024050601_android_update/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53562161170/"><img src="https://kantel.github.io/posts/2024050601_android_update/images/android202405-b.jpg" class="img-fluid"></a></p>
<p>Google hat auf seinem <a href="https://source.android.com/docs/security/bulletin/2024-05-01?hl=de">monatlichen Flickentag für Android</a> (und damit auch auf seinen <a href="https://source.android.com/docs/security/bulletin/pixel/2024-05-01?hl=de">Pixel-Geräten</a>) wieder Sicherheitslücken geschlossen.</p>
<p>Die Updates werden so nach und nach per OTA <em>(over the air)</em> auf Pixel 8/8 pro, Pixel Tablet, Pixel Fold, Pixel 7a, Pixel 7/7 pro, Pixel 6a, Pixel 6/6 pro verteilt.</p>
<p>Die anderen Hersteller werden wie üblich in Bälde nachziehen, sofern sie überhaupt noch entsprechenden Support leisten. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/53562161170/">Vier kleine Roboter</a></em>, erstellt mit <a href="https://www.freepik.com/ai/image-editor">Pikaso</a>. Prompt: »<em>Three little green robots dance on a colorful meadow in front of a small garden house, two goats in checkered vests watch them, the sun shines on the scenery, colored french comic style</em>«. Modell: ?, Style: Comic.</p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2024050601_android_update/</guid>
  <pubDate>Mon, 06 May 2024 18:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024050601_android_update/images/android202405.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Zettlr 3.1.0 ohne Catalina</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024050501_zettlr_catalina/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53700210046/"><img src="https://kantel.github.io/posts/2024050501_zettlr_catalina/images/zettlr305-b.jpg" class="img-fluid"></a></p>
<p>Die Situation um mein »zweites Gehirn« spitzt sich noch schlimmer zu, als ich <a href="https://kantel.github.io/posts/2024050402_logseq_oder_zettlr/">gestern befürchtet</a> hatte. Denn nicht nur, daß <a href="http://cognitiones.kantel-chaos-team.de/webworking/auszeichnungssprachen/logseq.html">Logseq</a> mit seinen Datenbankträumen meiner Nutzung im Wege steht, auch das als Alternative angedachte <a href="http://cognitiones.kantel-chaos-team.de/webworking/auszeichnungssprachen/zettlr.html">Zettlr</a> fällt offensichtlich flach.</p>
<p>Denn Zettlr 3.1.0 startet nicht mehr unter MacOS 10.15 (Catalina). Und da dies die letzte Betriebssystem-Version ist, die auf meinem betagten MacBook Pro (von Mitte 2012) noch läuft, fällt Zettlr als Alternative für Logseq ebenfalls aus.</p>
<p>Es sieht so aus, als ob Zettlr 3.0.5 die letzte Version ist, die mit meinem Rechnerchen spielt (siehe <a href="https://www.flickr.com/photos/schockwellenreiter/53700210046/">Screenshot</a> im Bannerbild oben). Die Release Notes dieser Version geben wenigstens an, daß sie die Unterstützung von macOS 10.14 und kleiner aufkündigen, Zettlr 3.1.0 cancelt dagegen Catalina still und heimlich.</p>
<p>Verstehen tue ich es allerdings nicht, denn das darunterliegende Framework <a href="http://cognitiones.kantel-chaos-team.de/webworking/frameworks/electron.html">Electron</a> unterstützt Catalina (noch), was <a href="http://cognitiones.kantel-chaos-team.de/produktivitaet/visualstudiocode.html">Visual Studio Code</a>, aber auch Obsidian zeigen.</p>
<p>Also doch <a href="http://cognitiones.kantel-chaos-team.de/webworking/auszeichnungssprachen/obsidian.html">Obsidian</a>? Offensichtlich bleibt mir – auch wenn Obsidian nicht Open Source ist – bald keine Alternative mehr. (Sicherheitshalber habe ich Obsidian schon einmal heruntergeladen. Die aktuelle Version 1.5.12 startet noch auf meinem Mac.)</p>
<p>Ich bin ziemlich sauer. Sowohl auf Logseq wie auch auf Zettlr. So still und heimlich wichtige Features aufzukündigen, ist einfach nicht die feine, englische Art.</p>



 ]]></description>
  <category>Zettelkasten</category>
  <category>Zettlr</category>
  <guid>https://kantel.github.io/posts/2024050501_zettlr_catalina/</guid>
  <pubDate>Sun, 05 May 2024 16:20:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024050501_zettlr_catalina/images/zettlr305.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Logseq oder Zettlr? Was wird aus meinem zweiten Gehirn?</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024050402_logseq_oder_zettlr/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53589908454/"><img src="https://kantel.github.io/posts/2024050402_logseq_oder_zettlr/images/zettelkasten1-b.jpg" class="img-fluid"></a></p>
<p>Gestern erreichte mich eine Meldung, die mich doch ein wenig beunruhigt. Es geht um <a href="http://cognitiones.kantel-chaos-team.de/webworking/auszeichnungssprachen/logseq.html">Logseq</a>, dem Markdown-basierten Outliner, der seit Monaten klaglos und zu meiner vollsten Zufriedenheit als mein Zettelkasten und mein »zweites Gehirn« fungiert. Doch jetzt spülte eine Meldung bei mir rein, die sagt, daß die Macher von Logseq einen <a href="https://discuss.logseq.com/t/why-the-database-version-and-how-its-going/26744">Wechsel von flachen Markdown-Dateien zu einer Datenbank-basierten Version planen</a>. Begründet wird dies mit einer besseren Effizienz.</p>
<p>Ich halte dies – sollte der Wechsel wirklich vollzogen werden – für eine mittlere Katastrophe. In meiner ganzen, über vierzigjährigen Berufserfahrung hat sich immer wieder gezeigt, daß Daten, wenn sie erst einmal in einer Datenbank versenkt wurden, nur noch schwer zugänglich sind und kaum wieder daraus befreit werden können. In einer (relationalen) Datenbank kann man ein Warenwirtschaftssystem oder Personaldaten unterbringen, aber keine schwach strukturierten Daten, wie sie (m)ein zweites Gehirn aufnimmt.</p>
<iframe class="if16_9" src="https://www.youtube.com/embed/gB2VvIKafZk?si=X3J4Osfo6Q5DJzvk" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p>Die Diskussion scheint es bei Logseq schon länger zu geben. Im YouTube-Kanal <em>Tools on Tech</em>, auf dem ich obiges Video »<a href="https://www.youtube.com/watch?v=gB2VvIKafZk">Logseq talks about the DB version</a>« ausgegraben habe, gibt es auch noch zwei weitere Videos zum Thema:</p>
<ol type="1">
<li>»<a href="https://www.youtube.com/watch?v=_5ynDqk54z4">Building and Playing with the Logseq DB Branch</a>«</li>
<li>»<a href="https://www.youtube.com/watch?v=fRWwznJFkJM">The future of Logseq - Sneak peek at the DB Branch</a>«</li>
</ol>
<p>Wie gesagt, ich bin beunruigt. Und ich glaube ich nicht den Beteuerungen der Macher, daß die Unterstützung von Markdown-Dateien auch weiter gewährleistet wird. Zwei divergierende Entwicklungsumgebungen zu pflegen, ist ein Aufwand, denn niemand auf Dauer durchhält. Und eine Datenbank-Version von Logseq <a href="https://www.youtube.com/watch?v=qgXjl1vcVYo">läßt sich auch nicht mit Git(Hub/Lab) verheiraten</a>, ein Feature, das für jemanden wie mich – der sein zweites Gehirn zum Beispiel auf seinem Desktop wie auch auf seinem Chromebook pflegt – unabdingbar ist.</p>
<p>Was ist die Alternative? <a href="http://cognitiones.kantel-chaos-team.de/webworking/auszeichnungssprachen/obsidian.html">Obsidian</a> soll zwar ganz nett sein, ist aber nicht Open Source. Da passt es ganz gut, daß zeitglich die Meldung bei mir hereinschneite, daß <a href="https://github.com/Zettlr/Zettlr/releases/tag/v3.1.0">Zettlr in der Version 3.1.0</a> erschienen sei. Dieses Update bringt der freien (GPL&nbsp;3), auf Markdown-Dateien basierende <a href="http://cognitiones.kantel-chaos-team.de/webworking/auszeichnungssprachen/zettlr.html">Zettelkasten-Software</a> eine bessere Unterstützung von Wiki-Links. Damit bietet sie sich als Logseq-Alternative an.</p>
<p>Ich hatte mit Zettlr schon einmal intensiver herumgespielt, die Software dann aber zugunsten von Logseq fallen gelassen. Jetzt sollte ich sie wieder hervorkramen. Denn nur solange Logseq mein zweites Gehirn in flachen Markdown-Dateien ablegt, ist ein Übername der Daten nach Zettlr (oder Obsidian) noch möglich. Es scheint also, als ob Zettlr eine zweite Chance bekommt. <em>Still digging!</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/53589908454/">Mein (begehbarer) Zettelkasten</a></em>, erstellt mit <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/scenario.html">Scenario</a>. Prompt: <em>»An old man, white hair, clean-shaven, without beard+, blue eyes, glasses, sits at a desk in front of huge monitors with lots of colorful diagrams, there are other open books on the desk, and there is a large mug of steaming coffee next to them, and a computer keyboard in front of the monitor, on the wall there are shelves with files and books, the spring sun shines through a large window, colored french comic style«</em>. Negative Prompt: <em>»ugly, beard, deformed, noisy, blurry, distorted, out of focus, bad anatomy, extra limbs, poorly drawn face, poorly drawn hands, missing fingers, tie«</em>. Modell: Stable Diffusion XL, Style: Scifi Magic + Belgian School.</p>



 ]]></description>
  <category>Logseq</category>
  <category>Outliner</category>
  <category>Zettelkasten</category>
  <category>Zettlr</category>
  <guid>https://kantel.github.io/posts/2024050402_logseq_oder_zettlr/</guid>
  <pubDate>Sat, 04 May 2024 18:50:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024050402_logseq_oder_zettlr/images/zettelkasten1.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Bitsy 8.12 ist draußen</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024050401_bitsy_8_12/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53575236328/"><img src="https://kantel.github.io/posts/2024050401_bitsy_8_12/images/maerchenwald4-b.jpg" class="img-fluid"></a></p>
<p><a href="https://kantel.github.io/posts/2024042502_bitsy_8_11/">Nur 10 Tage</a>, nachdem <em>Adam Le Doux</em> die Version 8.11 von <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/bitsy.html">Bitsy</a>, der bewußt minimalistisch gehaltenen Engine für narrative 2D-Spiele, veröffentlich hatte, hat er eine neue <a href="https://ledoux.itch.io/bitsy/devlog/724941/v812-bugfixes-docs-update-to-blip-tool">Version 8.12 freigegeben</a>.</p>
<p>Der Grund für das schnell nachgeschobene Update war wohl ein Bug, der Spiele abstürzen ließ, deren Räume mit <a href="https://ruin.itch.io/pixsy">Pixsy</a> generiert wurden. Aber in diesem Zusammenhang wurde auch das »Blip«-Tool, das für Töne in Bitsy zuständig ist, überarbeitet und die Dokumentation um eine Anleitung erweitert, wie man verschlossene Räume, die der Spieler erst öffnen muß, generiert und behandelt.</p>
<p>Und wie immer gibt es auch noch einige weitere Fehlerbehebungen und Verbesserungen, die alle im <a href="https://ledoux.itch.io/bitsy/devlog/724941/v812-bugfixes-docs-update-to-blip-tool">Devlog aufgeführt</a> sind.</p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/53575236328/">Nymphe im Märchenwald</a></em>, erstellt mit <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/scenario.html">Scenario</a>. Prompt: <em>»three naked nymphs, reddish-brown hair, green eyes, big boobs, nice butt, red lips, dance in a sunny clearing, in an enchanted garden with many colorful flowers, A Pan+, with beard, with goat legs, sits on a pedestal, and accompanies her on his flute+, Fox and hare watch the scenario in amazement«</em>. Negative Prompt: <em>»ugly, deformed, noisy, blurry, distorted, out of focus, bad anatomy, extra limbs, poorly drawn face, poorly drawn hands, missing fingers«</em>. Modell: Stable Diffusion XL, Style: Stylized Fantasy + Storybook + 3D.</p>



 ]]></description>
  <category>Bitsy</category>
  <category>Interactive Fiction</category>
  <category>Spieleprogrammierung</category>
  <guid>https://kantel.github.io/posts/2024050401_bitsy_8_12/</guid>
  <pubDate>Sat, 04 May 2024 18:05:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024050401_bitsy_8_12/images/maerchenwald4.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Aus der Nachbarschaft: Kaffeetrinken auf dem Kulturbunker</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024050103_nachbarschaftskaffee/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53682243439/"><img src="https://kantel.github.io/posts/2024050103_nachbarschaftskaffee/images/pflanzenboerse-b.jpg" class="img-fluid"></a></p>
<p>Nachdem die <a href="https://kantel.github.io/posts/2024042501_kulturbunker_fruehling/">diesjährige Eröffnungsveranstaltung</a> des Kulturlabors »<a href="https://www.trial-error.org/">Trial &amp; Error</a>« auf dem Dach des <a href="https://kantel.github.io/posts/2023100601_kulturbunker/">Kulturbunkers in der Neuköllner Rungiusstraße</a> von einer recht bunten Mischung aus der Nachbarschaft besucht worden war, geht es nun Schlag auf Schlag weiter:</p>
<p>Am morgigen 2. Mai 2024 startet das wöchentliche Nachbarschaftskaffee, das die ganze Saison über jeden Donnerstag (außer an Feiertagen) von 15:00 Uhr bis 19:00 Uhr auf dem Kulturbunkerdach stattfinden soll. Alle aus der Nachbarschaft (und darüber hinaus) sind eingeladen, Ideen mitzubringen, wie man den Bunker aus seinem Dornröschenschlaf wecken kann. Doch auch wer einfach nur Kaffee trinken und Waffeln verzehren oder Nachbarn treffen möchte, kann gerne vorbeikommen. Ich werde auf jeden Fall dort sein.</p>
<p>Und am Sonnabend, den 4. Mai 2024 folgt das Event »Endlich wieder draußen«, das zusammen mit dem <a href="https://www.freilandlabor-britz.de/">Freilandlabor Britz</a> und dem Projekt <a href="https://werkstadt.berlin/kulturbruecke-jugenddemokratie">Kulturbrücke Jugenddemokratie von der Werkstadt</a> veranstaltet wird.</p>
<p>Merkt Euch also einfach die Adresse: Kulturbunker, Rungiusstraße 19, 12347 Berlin. Denn ein Besuch dort lohnt allemal.</p>
<hr>
<p><strong>Photo</strong>: Pflanzenbörse auf dem Kulturbunkerdach, (<a href="http://creativecommons.org/licenses/by-nc-nd/2.0/">cc</a>) 2024, <em><a href="http://cognitiones.kantel-chaos-team.de/cv.html">Jörg Kantel</a></em></p>



 ]]></description>
  <category>Neukölln</category>
  <category>Kiezfest</category>
  <category>Kulturbunker</category>
  <guid>https://kantel.github.io/posts/2024050103_nachbarschaftskaffee/</guid>
  <pubDate>Wed, 01 May 2024 15:50:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024050103_nachbarschaftskaffee/images/pflanzenboerse.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Google korrigiert mit neuer Version 124 seines Browsers Chrome kritische Sicherheitslücken</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024050102_chrome_update/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53559692950/"><img src="https://kantel.github.io/posts/2024050102_chrome_update/images/octopussy_5_1-b.jpg" class="img-fluid"></a></p>
<p>Egal ob »Tag der Arbeit« oder sonstiger Feiertag: Mittwochs ist der Tag, an dem unser aller Datenkrake seinem Flaggschiff ein Update verpaßt, damit wir auch weiterhin sicher ausspioniert werden. Google veröffentlicht eine neue Version 124 (124.0.6367.118/119) seines Browsers Chrome und schließt damit wieder <a href="https://chromereleases.googleblog.com/2024/04/stable-channel-update-for-desktop_30.html">kritische Sicherheitslücken</a>.</p>
<p>Chrome aktualisiert sich (außer bei Linux) über die integrierte Update-Funktion, kann aber – wenn es pressiert – auch <a href="https://www.google.com/intl/de/chrome/browser/">hier geladen</a> werden. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/53559692950/">Octopussy</a></em>, erstellt mit <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/leonardoai.html">Leonardo AI</a>. Prompt: <em>»A sexy female robot flees from a gigantic data octopus, colored french comic style</em>«. Negative Prompt: »<em>ugly, deformed, noisy, blurry, distorted, out of focus, bad anatomy, extra limbs, poorly drawn face, poorly drawn hands, missing fingers</em>«. Modell: Stable Diffusion XL, Style: None.</p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2024050102_chrome_update/</guid>
  <pubDate>Wed, 01 May 2024 13:10:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024050102_chrome_update/images/octopussy_5_1.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Die Zahlen für den Monat April 2024</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024050101_mediadaten_april_2024/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53589908449/"><img src="https://kantel.github.io/posts/2024050101_mediadaten_april_2024/images/mediadaten202404-b.jpg" class="img-fluid"></a></p>
<p>Der vergangene Monat war <a href="https://kantel.github.io/posts/2024041901_rip_gabi/">alles andere als ein normaler Monat</a>. Das schläg sich auch in den Zahlen nieder, die hochtrabend manches Mal auch <em>Mediadaten</em> genannt werden. Im April 2024 hatte der <em>Schockwellenreiter</em> laut seinem nicht immer wirklich zuverlässigen, aber dafür (hoffentlich!) datenschutzkonformen <del>Geißenpeter</del> <a href="https://www.goatcounter.com/">Neugiertool</a> exakt <strong>4.932 Seitenaufrufe</strong>. Auch wenn diese Exaktheit der Ziffern eine Genauigkeit der Zahlen nur vortäuscht, freue ich mich – gerade in dieser für mich schwierigen Zeit – über jede Besucherin und jeden Besucher und bedanke mich bei allen meinen Leserinnen und Lesern.</p>
<p>😎 &nbsp; <em>Bleibt mir gewogen!</em></p>
<p>Die <em>Top Five</em> des Vormonats spiegeln die Ereignisse wieder:</p>
<ol type="1">
<li>Mit Abstand ganz oben steht die <a href="https://kantel.github.io/posts/2024041901_rip_gabi/">Nachricht von Gabis Tod</a>.</li>
<li>Aber auch die Meldung »<a href="https://kantel.github.io/posts/2024011002_ki_ohne_zensor/index.html">Bildgeneratoren und Künstliche Intelligenz – ohne Zensoren</a>« vom Januar dieses Jahres erfreut sich immer noch regen Zuspruchs.</li>
<li>Seltsamerweise hat es <a href="https://kantel.github.io/posts/2024041001_vorher_nachher/">mein neuer Haarschnitt</a> auf Platz&nbsp;3 geschafft.</li>
<li>Auf Platz 4 schaffte es in nur wenigen Tagen die Nachricht »<a href="https://kantel.github.io/posts/2024042401_24_jahre_schockwellenreiter/">Fast ein Vierteljahrhundert: 24 Jahre Schockwellen reiten</a>«.</li>
<li>Und den fünften Platz teilen sich mein Wunsch nach einem <a href="https://kantel.github.io/posts/2024033101_happy_eastern/">Ostern ohne Religion</a> und die schon ein Jahr alte Frage, <a href="https://kantel.github.io/posts/2023052401_brauhaus_rixdorf/index.html">was aus dem Brauhaus Rixdorf wird</a>.</li>
</ol>
<p>Ich versuche, die Ereignisse des Aprils zu verarbeiten. Aber mindestens bis zu Gabis Beisetzung am 16.&nbsp;Mai (ich werde Euch rechtzeitig daran erinnern) kann es zu ungewohnten Pausen hier im <del>Blog</del> Kritzelheft kommen (vielleicht auch noch darüber hinaus). Seht mir das bitte nach.</p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/53589908449/">Alter Mann im Büro</a></em>, erstellt mit <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/scenario.html">Scenario</a>. Prompt: <em>»An old man, white hair, clean-shaven, without beard+, blue eyes, glasses, sits at a desk in front of huge monitors with lots of colorful diagrams, there are other open books on the desk, and there is a large mug of steaming coffee next to them, and a computer keyboard in front of the monitor, on the wall there are shelves with files and books, the spring sun shines through a large window, colored french comic style</em>«. Negative Prompt: »<em>ugly, beard, deformed, noisy, blurry, distorted, out of focus, bad anatomy, extra limbs, poorly drawn face, poorly drawn hands, missing fingers, tie</em>«. Modell: Stable Diffusion XL, Style: Scifi Magic + Belgian School.</p>



 ]]></description>
  <category>Interna</category>
  <guid>https://kantel.github.io/posts/2024050101_mediadaten_april_2024/</guid>
  <pubDate>Wed, 01 May 2024 12:02:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024050101_mediadaten_april_2024/images/mediadaten202404.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Doktorspiele in der Berliner Politik</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024043002_doktorspiele/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53497171197/"><img src="https://kantel.github.io/posts/2024043002_doktorspiele/images/doktorspielerin-b.jpg" class="img-fluid"></a></p>
<p>Offensichtlich ist die Berliner Politik eine Hochburg für Doktorspiele. Nachdem der ehemaligen Bundesministerin <em><a href="https://de.wikipedia.org/wiki/Franziska_Giffey">Franziska Giffey</a></em> (SPD) wegen Schummelns bei ihrer Doktorarbeit der <a href="https://de.wikipedia.org/wiki/Franziska_Giffey#Plagiatsaff%C3%A4ren_um_wissenschaftliche_Abschlussarbeiten">Doktorgrad entzogen wurde</a> und sie als Ministerin zurücktrat, hat es nun die <a href="https://de.wikipedia.org/wiki/Manja_Schreiner">Berliner Verkehrssenatorin <em>Manja Schreiner</em></a> (CDU) kalt erwischt.</p>
<p>Denn als heute bekannt wurde, daß die Universität Rostock <em>Manja Schreiner</em> ebenfalls wegen Schummelns den Doktorgrad entzogen hatte, kündigte sie <a href="https://www.rbb24.de/politik/beitrag/2024/04/ruecktritt-berlin-schreiner-cdu-verkehrssenatorin-statement-doktorarbeit-uni-rostock-plagiatsvorwuerfe.htm">ihren Rücktritt als Verkehrssenatorin</a> an. Der Berliner Regierende Bürgermeister <em>Kai Wegner</em> (Kai wer?) hat ihren Rücktritt angenommen.</p>
<p>Ganz konsequent ist dieser Rücktritt nicht. Denn <em>Franziska Giffey</em> wurde nach dem Entzug des Doktortitels (genauer: Ihre Doktorarbeit wurde zuerst gerügt und dann in einem zweiten Prüfverfahren wurde ihr 2021 der Doktorgrad entzogen) und nach ihrem Rücktritt als Bundesministerin von der Berliner SPD erst in das Amt der Regierenden Bürgermeisterin von Berlin gehievt, und dann – nachdem die SPD 2023 mit Giffey als Spitzenkandidatin bei der Wiederholungswahl zu Berliner Abgeordnetenhaus das schlechteste Ergebnis ihrer Geschichte einfuhr – auf den Posten einer Senatorin für Wirtschaft, Energie und Betriebe sowie Bürgermeisterin von Berlin gerettet.</p>
<p>Der Berliner Senat scheint also offensichtlich eine warme Heimstatt für ertappte Betrügerinnen zu sein. Daher gehe ich davon aus, daß auch auf <em>Manja Schreiner</em> – wenn sich die Wogen ein wenig geglättet haben – ein lukrativer Posten in Umfeld der Berliner Politik oder Wirtschaft wartet. Denn auch sie hat sich wie Giffey als Lobbyistin Verdienste um die Berliner Beton- und Automafia erworben.</p>
<p>Wundert sich jetzt noch jemand über die wachsende Politikverdrossenheit der Bürgerinnen und Bürger?</p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/53497171197/">Doktorspielerin</a></em>, erstellt mit <a href="https://beta.dreamstudio.ai/generate">DreamStudio</a>. Prompt: »<em>A female pharmacist, like Laocoon, entangled in the cables of her computer, is looking for a receipt. colored steampunk style</em>«. Negative Prompt: »<em>ugly, deformed, noisy, blurry, distorted, out of focus, bad anatomy, extra limbs, poorly drawn face, poorly drawn hands, missing fingers</em>« Modell: Stable Diffusion XL, Style: Comic Book.</p>



 ]]></description>
  <category>Failed State Berlin</category>
  <category>Politik</category>
  <guid>https://kantel.github.io/posts/2024043002_doktorspiele/</guid>
  <pubDate>Tue, 30 Apr 2024 16:10:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024043002_doktorspiele/images/doktorspielerin.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Godot für Anfänger (mit einer Sammlung an freien Tiles und Sprites)</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024043001_godot_tutorial/</link>
  <description><![CDATA[ 




<p><a href="https://img.itch.zone/aW1hZ2UvMjU4NTUzNS8xNTM5NDk2NC5wbmc=/original/2L76mA.png"><img src="https://kantel.github.io/posts/2024043001_godot_tutorial/images/brackkeys-b.jpg" class="img-fluid"></a></p>
<p>Seit dem <a href="https://kantel.github.io/posts/2023091502_renpy_statt_unity/">Unity-Desaster</a> sind ja viele Spieleentwickler zur quelloffenen (MIT-Lizenz) Engine <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/godot.html">Godot</a> gewechselt. Auch ich hatte damit geliebäugelt, aber bisher habe ich das Godot-eigene Konzept der »Nodes« mit seiner arg unübersichtlichen Hierarchie nicht verstanden und so hat mich die Engine verwirrt zurückgelassen.</p>
<iframe class="if16_9" src="https://www.youtube.com/embed/LOhfqjmasi0?si=q4dt20IHvKrVlZhO" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p>Doch nun ist mit »<a href="https://www.youtube.com/watch?v=LOhfqjmasi0">How to make a Video Game</a>« ein gut einstündiges Beginner-Tutorial in meinen Feedreader gespült worden, das verspricht, alle Unklarheiten restlos zu beseitigen. Hoffen wir mal, daß es hält, was es verspricht.</p>
<p>Es ist aber auch noch aus mehreren anderen Gründen interessant. Das Tutorial ist von einer Website »<a href="https://brackeys.com/">Brackeys</a>« (ab in den Feedreader damit), die nicht nur einige weitere freie Tutorials, sondern auch Links zu freien Assets für Spieleprogrammierer anbietet.</p>
<p>Folgerichtig verwendet auch das Tutorial seine eigenen freien (<a href="http://creativecommons.org/publicdomain/zero/1.0/">CC0</a>) Assets, die Ihr unter dem Namen <a href="https://brackeysgames.itch.io/brackeys-platformer-bundle">Brackeys’ Platformer Bundle</a> auf Itch.io herunterladen könnt. Das Paket basiert unter anderem auf freie Tiles und Sprites von <a href="https://analogstudios.itch.io/">analogStudios_</a> und <a href="https://rottingpixels.itch.io/">Rotting Pixels</a>. Beide habe ich <em>stante pede</em> abonniert, weil sie unter anderem Dutzende von freien Assets Packs in dem von mir favorierten Raster von 16x16 Pixel anbieten.</p>
<p>Denn ich glaube nicht, daß ich in absehbarer Zeit etwas mit Godot anstellen werde (so viel zu spielen, so wenig Zeit), aber für meine Experimente und Tutorials mit <a href="https://rottingpixels.itch.io/">microStudio</a> (mit Python) und den frisch in meine Planung gekommenen Tutorials zu <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/p5js.html">P5.js</a> (und <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/p5play.html">P5.play</a>) kann nicht nur das obige Godot-Tutorial eine Quelle der Inspiration sein, sondern auch die Assets können als Materialsteinbruch dienen (denn auch freie Tiles und Sprites kann man nie genug besitzen). <em>Still digging!</em></p>



 ]]></description>
  <category>Godot</category>
  <category>Tiles und Sprites</category>
  <category>Spieleprogrammierung</category>
  <category>P5.js</category>
  <category>P5.play</category>
  <guid>https://kantel.github.io/posts/2024043001_godot_tutorial/</guid>
  <pubDate>Tue, 30 Apr 2024 14:20:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024043001_godot_tutorial/images/brackkeys.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>OpenMoji – Open Source Emojis für alle</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024042902_openmoji/</link>
  <description><![CDATA[ 




<p><a href="https://openmoji.org/samples-pasture.svg"><img src="https://kantel.github.io/posts/2024042902_openmoji/images/openmoji-b.jpg" class="img-fluid"></a></p>
<p>Wie regelmäßige Leser dieser Seiten wissen, gehöre ich nicht zu den Menschen, die mit einem Zeichenstift in der Hand geboren wurden. Wenn ich also für Spiele oder sonstige kreative Programmierprojekte (freie) Emojis oder Emoji-ähnliche Bildchen brauchte, hatte ich bisher immer zu Twitters <a href="https://twemoji.twitter.com/">Twemoji</a> (CC-BY 4.0) gegriffen. Doch ist deren Website seit einiger Zeit down. Zwar gibt es die <a href="https://github.com/twitter/twemoji">Twemojis noch auf GitHub</a>, doch scheint ein Ende absehbar. Daher bin ich froh, daß ich mehr oder weniger per Zufall über das Projekt <a href="https://openmoji.org/">OpenMoji</a> gestolpert bin.</p>
<p><a href="https://www.hfg-gmuend.de/aktuelles/openmoji-emojis-von-designern-f%C3%BCr-alle">Das Projekt Open­Moji</a> wurde von den Profes­soren <em>Daniel Utz</em> und <em>Bene­dikt Groß</em> zusammen mit mittlerweile über 80 Studentinnen und Studenten an der <a href="https://www.hfg-gmuend.de/">Hochschule für Gestaltung Schwäbisch Gmünd</a> entwickelt und ist ein Versuch, ein umfas­sendes open-source Emoji- und Iconset ​»von Desi­gner für Desi­gner, Maker, Entwickler … und jeder­mann« zu gestalten. Gleichzeitig ist das Projekt auch als Reaktion auf die Frage »warum über­lässt die Design-Commu­nity es den großen Tech-Compa­nies à la GAFA, wie Emojis für Milli­arden von Menschen aussehen?« zu werten.</p>
<iframe class="if16_9" src="https://www.youtube.com/embed/ZyOk21gUJdc?si=fyxfPea6mxs76vqQ" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p>Die Bildchen folgen einem einheitlichen Stil, sind wie die Twemojis unter die freie CC-BY-4.0-Lizenz gestellt, sehen farbig wie auch monochrom verdammt gut aus, es gibt sie unter anderem sowohl als auflösungsunabhängige SVG, wie auch als hochaufgelöste PNG (gut für Collagen – siehe Bannerbild oben) und sie sind auch auf <a href="https://github.com/hfg-gmuend/openmoji">GitHub zu finden</a>. Aktuell ist die <a href="https://github.com/hfg-gmuend/openmoji/releases/tag/15.0.0">Version 15.0</a> vom 21. Dezember 2023.</p>
<p><em>Daniel Shiffman</em> hat für das Reboot der <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/p5js.html">P5.js</a>-Neuauflage seiner Processing-Bibel »<a href="https://natureofcode.com/">The Nature of Code</a>« viel die OpenMojis genutzt (darüber habe ich sie gefunden) und auch ich werde die Bildchen in Zukunft mindestens überall dort einsetzen, wo ich bisher auf die Twemojis zurückgegriffen hatte. Ich freue mich schon darauf. <em>Still digging!</em></p>



 ]]></description>
  <category>Tiles und Sprites</category>
  <category>Game Design</category>
  <category>Spieleprogrammierung</category>
  <category>Creative Coding</category>
  <guid>https://kantel.github.io/posts/2024042902_openmoji/</guid>
  <pubDate>Mon, 29 Apr 2024 18:10:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024042902_openmoji/images/openmoji.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Sicherheitsupdate des Foxit Reader auf 2024.2</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024042901_foxit_update/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53568598147/"><img src="https://kantel.github.io/posts/2024042901_foxit_update/images/foxit2-b.jpg" class="img-fluid"></a></p>
<p>Mit der Version 2024.2 des nicht nur unter Windows beliebten PDF Betrachters Foxit Reader haben die Entwickler auch wieder <a href="https://www.foxit.com/support/security-bulletins.html">Schwachstellen</a> behoben.</p>
<p>Die neue Version kann <a href="https://www.foxitsoftware.com/downloads/#Foxit-Reader/">hier geladen</a> werden. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/53568598147/">Aktenfuchs</a></em>, erstellt mit <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/scenario.html">Scenario</a>. Prompt: »<em>A fox wearing a vest and glasses sits at a desk in a tree hollow and writes in a thick file. In front of him there are still open files on the desk. There are shelves on the walls with lots of file folders. The spring sun shines into the cave through a tree window. colored french comic style</em>«. Negative Prompt: »<em>other animals</em>«. Modell: Stable Diffusion XL, Style: Creepy Nordic Fairytale.</p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2024042901_foxit_update/</guid>
  <pubDate>Mon, 29 Apr 2024 13:20:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024042901_foxit_update/images/foxit2.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>MicroStudio und Python: Ein Partikelsystem (Part 2)</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024042801_microstudio_particle2/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53684873703/"><img src="https://kantel.github.io/posts/2024042801_microstudio_particle2/images/pythontutorial12-b.jpg" class="img-fluid"></a></p>
<p>Meinen <a href="https://kantel.github.io/posts/2024042702_microstudio_partikel/">Beitrag von gestern</a> über ein Partikelsystem mit <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/microstudio.html">microStudio</a> und Python/<a href="https://brython.info/">Brython</a> wollte ich noch ein wenig aufmotzen. Die Partikel sollten nicht nur einfach durch den Raum schweben, sondern dabei auch noch rotieren. Da man Kreisen aber eine Rotation schwer ansehen kann, habe ich dem System auch noch rechteckige (genauer quadratische) Partikel spendiert, die fröhlich drehend durch das Weltall schweben, bis sie – wie die Kreise – verblassen.</p>
<iframe src="pythontutorial12/index.html" class="if16_9" name="Ein Partikelsystem (2)">
</iframe>
<p>Dafür waren eigentlich nur wenige Änderungen im Code notwendig. Die größte Schwierigkeit war, die richtige Funktion in der <a href="https://microstudio.dev/documentation/API/">microStudio-API</a> für die Rotation einzelner Shapes (und Sprites) zu finden. Nachdem ich endlich den Unterschied zwischen <code>screen.setRotation()</code> (dreht den kompletten Bildschirm) und <code>screen.drawRotation()</code> (dreht einzelne Shapes und Sprites) begriffen hatte, war die Klasse <code>RectParticle</code>, die eine Unterklasse von <code>Particle</code> ist, schnell implementiert:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> RectParticle(Particle):</span>
<span id="cb1-2">  </span>
<span id="cb1-3">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, _x, _y):</span>
<span id="cb1-4">    Particle.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, _x, _y)</span>
<span id="cb1-5">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">360</span>)</span>
<span id="cb1-6">    </span>
<span id="cb1-7">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-8">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.acc</span>
<span id="cb1-9">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel</span>
<span id="cb1-10">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb1-11">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">360</span></span>
<span id="cb1-12">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> uniform(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb1-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>:</span>
<span id="cb1-14">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.done <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb1-15">      </span>
<span id="cb1-16">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> display(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-17">    screen.setAlpha(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>)</span>
<span id="cb1-18">    screen.setDrawRotation(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.angle)</span>
<span id="cb1-19">    screen.fillRect(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col)</span>
<span id="cb1-20">    screen.drawRect(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(33, 41, 70)"</span>)</span>
<span id="cb1-21">    screen.setDrawRotation(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-22">    screen.setAlpha(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>)</span></code></pre></div>
<p>Die <code>update()</code>-Methode erhielt zusätzliche Befehle, die für die Rotation zuständig waren und in <code>display()</code> wurde mit <code>screen.setDrawRotation(self.angle)</code> das rotierende Quadrat gezeichnet. Wie bei <code>screen.setAlpha()</code> darf nicht vergessen werden, den Wert anschließend wieder auf seinen Default zurückzusetzen.</p>
<p>In der Hauptroutine <code>main</code> war lediglich in <code>update()</code> eine zusätzliche Abfrage nötig, um den Zufallszahlengenerator zu befragen, ob man ein Quadrat oder einen Kreis erzeugt:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update():</span>
<span id="cb2-2">  choice <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb2-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> choice <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>:</span>
<span id="cb2-4">    particle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Particle(START_X, START_Y)</span>
<span id="cb2-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb2-6">    particle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RectParticle(START_X, START_Y)</span>
<span id="cb2-7">  particles.append(particle)</span></code></pre></div>
<p>Alles andere blieb wie in der letzten Version des Skriptes, das ich auch dieses Mal wieder auf meinem microStudio-Account <a href="https://microstudio.dev/i/kantel/pythontutorial12/">hochgeladen</a>habe. Und das Hintergrundbild habe ich wieder von der <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/scenario.html">gekünstelten Intelligenzia meines Vertrauens</a> erstellen lassen (siehe unten). Um ein wenig Abwechslung in die Sache zu bringen, bestaunen dieses Mal zwei Jungen das Partikelsystem.</p>
<p>Das ist das zwöfte Tutorial meiner »microStudio mit Python«-Reihe. Alle bisher im Schockwellenreiter erschienenen Beiträge habe ich wieder hier aufgeführt, um Euch eine Suche zu ersparen:</p>
<ul>
<li>MicroStudio und Python (Teil 1): <a href="https://kantel.github.io/posts/2024032201_microstudio_python_1/">Hallo Brython</a>!</li>
<li>MicroStudio und Python (Teil 2): <a href="https://kantel.github.io/posts/2024032401_microstudio_python_2/">Zombie Apokalypse</a></li>
<li>MicroStudio und Python (Teil 3): <a href="https://kantel.github.io/posts/2024032502_microstudio_python_3/">Dancing Crab</a></li>
<li>MicroStudio und Python (Teil 4): <a href="https://kantel.github.io/posts/2024032703_flying_badger_python/">Flying Badger</a></li>
<li>MicroStudio und Python (Teil 5): <a href="https://kantel.github.io/posts/2024032801_microstudio_noc_1/">PVector2 und »The Nature of Code«</a></li>
<li>MicroStudio und Python (Teil 6): <a href="https://kantel.github.io/posts/2024033102_bouncing_balls_microstudio/">Bouncing Balls</a></li>
<li>MicroStudio und Python (Teil 7): <a href="https://kantel.github.io/posts/2024040201_collision_detection_1/">Kollisionserkennung mit Kreisen</a></li>
<li>MicroStudio und Python (Teil 8): <a href="https://kantel.github.io/posts/2024040401_bouncing_birds/">Bouncing Birds</a></li>
<li>MicroStudio und Python (Teil 9): <a href="https://kantel.github.io/posts/2024040701_rect_collision/">Kollisionserkennung mit Rechtecken</a></li>
<li>MicroStudio und Python (Teil 10): <a href="https://kantel.github.io/posts/2024042301_bubbling_emojis/">Bubbly Emojis</a></li>
<li>MicroStudio und Python (Teil 11): <a href="https://kantel.github.io/posts/2024042702_microstudio_partikel/">Ein Partikelsystem</a></li>
<li>MicroStudio und Python (Teil 12): Ein Partikelsystem (2)</li>
</ul>
<p>Damit ist das Dutzend erst einmal voll. Ich werde die Reihe mindestens für ein paar Tage pausieren lassen, denn der hier auf diesen Seiten schon mehrfach erwähnte Freund aus Bremen hat mich auf die Idee gebracht, ein <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/p5js.html">P5.js</a>-Tutorial für absolute Beginner zu schreiben. Er wünschte sich das. Schaun wir mal, ob ich das hinbekomme. Ich habe jedenfalls Lust darauf. <em>Still digging!</em></p>
<hr>
<p><strong>(Hintergrund-) Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/53619207904/">Space Opera (Belgian Comic Style)</a></em>, erstellt mit <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/scenario.html">Scenario</a>. Prompt: »<em>Full moon with a human face smiles at a nightly sky with stars and a few clouds. colored french comic style</em>«. Modell: Stable Diffusion XL, Style: Scifi Magic + Belgian School.</p>



 ]]></description>
  <category>microStudio</category>
  <category>Python</category>
  <category>Brython</category>
  <category>Nature of Code</category>
  <category>Creative Coding</category>
  <guid>https://kantel.github.io/posts/2024042801_microstudio_particle2/</guid>
  <pubDate>Sun, 28 Apr 2024 17:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024042801_microstudio_particle2/images/pythontutorial12.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Spiele mit Agenten und NetLogo programmieren</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024042703_netlogo_games/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53579014801/"><img src="https://kantel.github.io/posts/2024042703_netlogo_games/images/chesslionunicorn-b.jpg" class="img-fluid"></a></p>
<p>Ich habe das dringende Bedürfnis, etwas Verrücktes anzustellen, damit ich auf andere Gedanken komme. Und da scheint mir die Idee, die <a href="http://cognitiones.kantel-chaos-team.de/programmierung/softcomputing/multiagenten.html">Multi-Agenten</a>-Programmiersprache <a href="http://cognitiones.kantel-chaos-team.de/programmierung/netlogo.html">NetLogo</a> dahingehend aufzubohren, daß man damit Computerspiele programmiert, verrückt genug, um mich ablenken zu können.</p>
<iframe class="if16_9" src="https://www.youtube.com/embed/Of_PNwd1bRs?si=ZJZhgKTiKlF7vV3F" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p>Jedenfalls habe ich die Playlist »<a href="https://www.youtube.com/playlist?list=PLJTCLffaZ2Ztxx1Pzp1qTkBX9hphS1YsZ">NetLogo Tutorial - Agent Based Model to Make a Video Game</a>« mit 18 Videos (meist) zwischen fünf und fünfundzwanzig Minuten Spieldauer auf die Liste dessen gesetzt, was ich mir in den nächsten Tagen reinziehen werde.</p>
<p>Schaun wir mal, vielleicht entsteht daraus etwas völlig Neues. <em>Still digging!</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/53579014801/">Einhorn und Löwe beim Schachspiel</a></em>, erstellt mit <a href="https://beta.dreamstudio.ai/generate">DreamStudio</a>. Prompt: »<em>A unicorn in a red dressing gown and a lion in a blue suit sit at a beer garden table with a beer and playing chess. It’s spring and the sun is shining over the beer garden. colored french comic style</em>«. Modell: Stable Diffusion XL, Style: Comic Book.</p>



 ]]></description>
  <category>NetLogo</category>
  <category>Spieleprogrammierung</category>
  <category>Turtle</category>
  <guid>https://kantel.github.io/posts/2024042703_netlogo_games/</guid>
  <pubDate>Sat, 27 Apr 2024 17:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024042703_netlogo_games/images/chesslionunicorn.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>MicroStudio und Python: Ein Partikelsystem</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024042702_microstudio_partikel/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53681074464/"><img src="https://kantel.github.io/posts/2024042702_microstudio_partikel/images/pythontut11-b.jpg" class="img-fluid"></a></p>
<p>Da spülte doch dieses wunderschöne Video »<a href="https://www.youtube.com/watch?v=QlpadcXok8U">Basics of Particle Systems</a>« in meinen Feedreader, in dem <em>Patt Vira</em> in Anlehnung an <em>Daniel Shiffmans</em> wunderbarem Buch »<a href="https://natureofcode.com/">The Nature of Code</a>« ein <a href="https://natureofcode.com/particles/">Partikelsystem</a> in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/p5js.html">P5.js</a> programmiert. Und da fiel mir doch wieder ein, daß ich erst <a href="https://kantel.github.io/posts/2024032801_microstudio_noc_1/">jüngst die Idee hatte</a>, wenigstens Teile aus dem Buch auch mal in <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/microstudio.html">microStudio</a> (in der Python/<a href="https://brython.info/">Brython</a>-Variante) zu implementieren.</p>
<iframe src="pythontutorial11/index.html" class="if16_9" name="Ein Partikelsystem">
</iframe>
<p>Dafür brauchte ich natürlich wieder meine Klasse <code>PVector2</code>. Da sie sehr lang ist, verzichte ich <a href="https://kantel.github.io/posts/2024033102_bouncing_balls_microstudio/">auch dieses Mal</a> auf einen erneuten Abdruck, Ihr könnt sie von <a href="https://kantel.github.io/posts/2024032801_microstudio_noc_1/">dieser Seite kopieren</a> und in Eure Projekte einfügen.</p>
<p>Ansonsten gibt es die Klasse <code>Particle</code>, die die Grundlage für das Skript legt:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Particle():</span>
<span id="cb1-2">  </span>
<span id="cb1-3">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, _x, _y):</span>
<span id="cb1-4">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PVector2(_x, _y)</span>
<span id="cb1-5">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PVector2(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.005</span>)</span>
<span id="cb1-6">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PVector2(uniform(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>), uniform(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>))</span>
<span id="cb1-7">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> choice(colors)</span>
<span id="cb1-8">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">255.0</span></span>
<span id="cb1-9">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> uniform(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb1-10">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.done <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb1-11">    </span>
<span id="cb1-12">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-13">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.acc</span>
<span id="cb1-14">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel</span>
<span id="cb1-15">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> uniform(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb1-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>:</span>
<span id="cb1-17">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.done <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb1-18">      </span>
<span id="cb1-19">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> display(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-20">    screen.setAlpha(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>)</span>
<span id="cb1-21">    screen.fillRound(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col)</span>
<span id="cb1-22">    screen.drawRound(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(33, 41, 70)"</span>)</span>
<span id="cb1-23">    screen.setAlpha(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>)</span></code></pre></div>
<p>Den meisten von Euch wird auffallen, daß diese Klasse kaum Besonderheiten der microStudio-API nutzt. Lediglich die Methode <code>display()</code> macht naturgemäß davon Gebrauch.</p>
<p>Das gilt auch für das Hauptprogramm <code>main</code>, in dem lediglich die <code>draw()</code>-Funktion Befehle aus der microStudio-API benötigt. Alles andere ist Python pur:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random, choice, uniform</span>
<span id="cb2-2"></span>
<span id="cb2-3">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(8, 247, 254)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(254, 83, 187)"</span>,</span>
<span id="cb2-4">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(245, 211, 0)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(0, 255, 65)"</span>,</span>
<span id="cb2-5">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(250, 25, 25)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(148, 103, 89)"</span>]</span>
<span id="cb2-6">          </span>
<span id="cb2-7">START_X, START_Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span></span>
<span id="cb2-8"></span>
<span id="cb2-9">particles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-10"></span>
<span id="cb2-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> init():</span>
<span id="cb2-12">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb2-13"></span>
<span id="cb2-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update():</span>
<span id="cb2-15">  particle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Particle(START_X, START_Y)</span>
<span id="cb2-16">  particles.append(particle)</span>
<span id="cb2-17">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> particle <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reversed</span>(particles):</span>
<span id="cb2-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> particle.done:</span>
<span id="cb2-19">      particles.remove(particle)</span>
<span id="cb2-20">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> particle <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> particles:</span>
<span id="cb2-21">    particle.update()</span>
<span id="cb2-22"></span>
<span id="cb2-23"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> draw():</span>
<span id="cb2-24">  screen.clear()</span>
<span id="cb2-25">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># screen.fillRect(0, 0, screen.width, screen.height, "rgb(33, 41, 70)")</span></span>
<span id="cb2-26">  screen.drawSprite(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"background"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, screen.width, screen.height)</span>
<span id="cb2-27">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> particle <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> particles:</span>
<span id="cb2-28">    particle.display()</span></code></pre></div>
<p>Um ein wenig Abwechslung in die Farben zu bringen, habe ich die <a href="https://kantel.github.io/posts/2024041201_neonbunt/">kürzlich vorgestellte</a>, neonbunte Palette <a href="http://cognitiones.kantel-chaos-team.de/multimedia/farbpaletten/mplcyberpunk.html">MPL Cyberpunk</a> benutzt. Und um die Angelegenheit ein wenig spielerischer zu gestalten, habe ich das Hintergrundbild, in dem ein Junge auf einem fernen Planeten das Partikelsystem bestaunt, von der <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/scenario.html">gekünstelten Intelligenzia meines Vertrauens</a> erstellen lassen (siehe unten).</p>
<p>Das ist das elfte Tutorial meiner »microStudio mit Python«-Reihe. Alle bisher im <em>Schockwellenreiter</em> erschienenen Beiträge habe ich hier aufgeführt, um Euch eine Suche zu ersparen:</p>
<ul>
<li>MicroStudio und Python (Teil 1): <a href="https://kantel.github.io/posts/2024032201_microstudio_python_1/">Hallo Brython</a>!</li>
<li>MicroStudio und Python (Teil 2): <a href="https://kantel.github.io/posts/2024032401_microstudio_python_2/">Zombie Apokalypse</a></li>
<li>MicroStudio und Python (Teil 3): <a href="https://kantel.github.io/posts/2024032502_microstudio_python_3/">Dancing Crab</a></li>
<li>MicroStudio und Python (Teil 4): <a href="https://kantel.github.io/posts/2024032703_flying_badger_python/">Flying Badger</a></li>
<li>MicroStudio und Python (Teil 5): <a href="https://kantel.github.io/posts/2024032801_microstudio_noc_1/">PVector2 und »The Nature of Code«</a></li>
<li>MicroStudio und Python (Teil 6): <a href="https://kantel.github.io/posts/2024033102_bouncing_balls_microstudio/">Bouncing Balls</a></li>
<li>MicroStudio und Python (Teil 7): <a href="https://kantel.github.io/posts/2024040201_collision_detection_1/">Kollisionserkennung mit Kreisen</a></li>
<li>MicroStudio und Python (Teil 8): <a href="https://kantel.github.io/posts/2024040401_bouncing_birds/">Bouncing Birds</a></li>
<li>MicroStudio und Python (Teil 9): <a href="https://kantel.github.io/posts/2024040701_rect_collision/">Kollisionserkennung mit Rechtecken</a></li>
<li>MicroStudio und Python (Teil 10): <a href="https://kantel.github.io/posts/2024042301_bubbling_emojis/">Bubbly Emojis</a></li>
<li>MicroStudio und Python (Teil 11): Ein Partikelsystem</li>
</ul>
<p>Und natürlich habe ich dieses Programm auch wieder auf meinen <a href="https://microstudio.dev/i/kantel/pythontutorial11/">microStudio-Account hochgeladen</a>, damit Ihr es anschauen und damit weiter experimentieren könnt. Je länger ich damit Spiele, desto mehr Spaß habe ich mit der Python-Variante von microStudio (auch wenn ich hin und wieder über Beschränkungen der API stolpere). Habt also auch Spaß mit Eurer Version der bunten Kreise!</p>
<hr>
<p><strong>(Hintergrund-) Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/53619313480/">Space Opera (Belgian Comic Style)</a></em>, erstellt mit <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/scenario.html">Scenario</a>. Prompt: »<em>Full moon with a human face smiles at a nightly sky with stars and a few clouds. colored french comic style</em>«. Modell: Stable Diffusion XL, Style: Scifi Magic + Belgian School.</p>



 ]]></description>
  <category>microStudio</category>
  <category>Python</category>
  <category>Brython</category>
  <category>Nature of Code</category>
  <category>Creative Coding</category>
  <guid>https://kantel.github.io/posts/2024042702_microstudio_partikel/</guid>
  <pubDate>Sat, 27 Apr 2024 15:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024042702_microstudio_partikel/images/pythontut11.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
