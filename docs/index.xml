<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Der Schockwellenreiter</title>
<link>https://kantel.github.io/index.html</link>
<atom:link href="https://kantel.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description>Schockwellenreiter</description>
<generator>quarto-1.2.269</generator>
<lastBuildDate>Wed, 05 Apr 2023 16:35:00 GMT</lastBuildDate>
<item>
  <title>Google korrigiert in der neuen Version 112 auch wieder Sicherheitslücken in Chrome</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023040501_chrome_update/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.gutenberg.org/files/61671/61671-h/images/i006.jpg"><img src="https://kantel.github.io/posts/2023040501_chrome_update/images/flyingrug-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Google veröffentlicht ein neues Update der Version 112 (112.0.5615.49/50) seines Browsers Chrome und schließt erneut <a href="https://chromereleases.googleblog.com/2023/04/stable-channel-update-for-desktop.html">kritische Sicherheitslücken</a>.</p>
<p>Chrome aktualisiert sich (außer bei Linux) über die integrierte Update-Funktion, kann aber – wenn es pressiert – auch <a href="https://www.google.com/intl/de/chrome/browser/">hier geladen</a> werden. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<p><em>(Bild: <a href="https://www.gutenberg.org/files/61671/61671-h/61671-h.htm">Uncle Wiggly on the Flying Rug</a>, page 3, pictured by Lang Campbell.)</em></p>



 ]]></description>
  <category>News</category>
  <guid>https://kantel.github.io/posts/2023040501_chrome_update/index.html</guid>
  <pubDate>Wed, 05 Apr 2023 16:35:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023040501_chrome_update/images/flyingrug.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Crab Dancing with Bubbles (Trinket)</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023040403_crabdance–stage1/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52791136884/"><img src="https://kantel.github.io/posts/2023040403_crabdance–stage1/images/crabdance-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Die <a href="https://kantel.github.io/posts/2023040401_spiele_und_programmierung/">heute vorgestellte</a> schießwütige Krabbe hat mir keine Ruhe gelassen. Ich wollte nun unbedingt auch etwas mit Krabben, aber in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/trinket.html">Trinket</a>, anstellen. Also habe ich mich hingesetzt und als Prototyp erst einmal eine kleine Krabbe auf den Schirm gezaubert, die mit der rechten oder linken Maustaste nach rechts oder links bewegt werden kann, und die den Luftblasen zusieht, die – entgegen den Gesetzen der Physik – im Wasser nach unten schweben.</p>
<iframe src="https://trinket.io/embed/python/bdb2a4a880?outputOnly=true&amp;runOption=run&amp;start=result" width="85%" height="570" frameborder="0" marginwidth="0" marginheight="0" allowfullscreen="">
</iframe>
<p>Es ist wirklich erst einmal nur ein Fingerübung, die sich an einem Programm, das <em>Hauke Fehr</em> in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/tigerjython.html">TigerJython</a> implementiert hat<sup>1</sup>, orientiert. Daher hier erst einmal der Quellcode:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">from</span> processing <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;">from</span> random <span class="im" style="color: #00769E;">import</span> randint</span>
<span id="cb1-3"></span>
<span id="cb1-4">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">640</span>, <span class="dv" style="color: #AD0000;">416</span></span>
<span id="cb1-5">NUM_BUBBLES <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">50</span></span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="kw" style="color: #003B4F;">class</span> Background():</span>
<span id="cb1-8">  </span>
<span id="cb1-9">  <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, _img):</span>
<span id="cb1-10">    <span class="va" style="color: #111111;">self</span>.img <span class="op" style="color: #5E5E5E;">=</span> loadImage(_img)</span>
<span id="cb1-11">    </span>
<span id="cb1-12">  <span class="kw" style="color: #003B4F;">def</span> display(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-13">    image(<span class="va" style="color: #111111;">self</span>.img, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="kw" style="color: #003B4F;">class</span> Crab():</span>
<span id="cb1-16">  </span>
<span id="cb1-17">  <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-18">    <span class="va" style="color: #111111;">self</span>.img <span class="op" style="color: #5E5E5E;">=</span> loadImage(<span class="st" style="color: #20794D;">"crab.png"</span>)</span>
<span id="cb1-19">    <span class="va" style="color: #111111;">self</span>.w <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">68</span></span>
<span id="cb1-20">    <span class="va" style="color: #111111;">self</span>.h <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">50</span></span>
<span id="cb1-21">    <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">=</span> width<span class="op" style="color: #5E5E5E;">//</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="va" style="color: #111111;">self</span>.w<span class="op" style="color: #5E5E5E;">//</span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb1-22">    <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">=</span> height<span class="op" style="color: #5E5E5E;">//</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">100</span></span>
<span id="cb1-23">    <span class="va" style="color: #111111;">self</span>.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"None"</span></span>
<span id="cb1-24">    <span class="va" style="color: #111111;">self</span>.speed <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb1-25">    </span>
<span id="cb1-26">  <span class="kw" style="color: #003B4F;">def</span> update(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-27">    <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"None"</span>:</span>
<span id="cb1-28">      <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb1-29">    <span class="cf" style="color: #003B4F;">elif</span> <span class="va" style="color: #111111;">self</span>.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"RIGHT"</span>:</span>
<span id="cb1-30">      <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">&lt;=</span> width <span class="op" style="color: #5E5E5E;">-</span> <span class="va" style="color: #111111;">self</span>.w <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">5</span>:</span>
<span id="cb1-31">        <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">+=</span> <span class="va" style="color: #111111;">self</span>.speed</span>
<span id="cb1-32">    <span class="cf" style="color: #003B4F;">elif</span> <span class="va" style="color: #111111;">self</span>.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"LEFT"</span>:</span>
<span id="cb1-33">      <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">2</span>:</span>
<span id="cb1-34">        <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">-=</span> <span class="va" style="color: #111111;">self</span>.speed</span>
<span id="cb1-35"></span>
<span id="cb1-36">  <span class="kw" style="color: #003B4F;">def</span> display(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-37">    image(<span class="va" style="color: #111111;">self</span>.img, <span class="va" style="color: #111111;">self</span>.x, <span class="va" style="color: #111111;">self</span>.y)</span>
<span id="cb1-38">    </span>
<span id="cb1-39"><span class="kw" style="color: #003B4F;">class</span> Bubble():</span>
<span id="cb1-40">  </span>
<span id="cb1-41">  <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-42">    <span class="va" style="color: #111111;">self</span>.reset()</span>
<span id="cb1-43">    <span class="va" style="color: #111111;">self</span>.speed <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb1-44">    </span>
<span id="cb1-45">  <span class="kw" style="color: #003B4F;">def</span> reset(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-46">    dia <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">str</span>(randint(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">2</span>))</span>
<span id="cb1-47">    <span class="va" style="color: #111111;">self</span>.img <span class="op" style="color: #5E5E5E;">=</span> loadImage(<span class="st" style="color: #20794D;">"bubble"</span> <span class="op" style="color: #5E5E5E;">+</span> dia <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">".png"</span>)</span>
<span id="cb1-48">    <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">=</span> randint(<span class="dv" style="color: #AD0000;">0</span>, width)</span>
<span id="cb1-49">    <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">=</span> randint(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">*</span>height, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">50</span>)</span>
<span id="cb1-50">  </span>
<span id="cb1-51">  <span class="kw" style="color: #003B4F;">def</span> update(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-52">    <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">+=</span> <span class="va" style="color: #111111;">self</span>.speed</span>
<span id="cb1-53">    <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">&gt;</span> height <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">50</span>:</span>
<span id="cb1-54">      <span class="va" style="color: #111111;">self</span>.reset()</span>
<span id="cb1-55">    </span>
<span id="cb1-56">  <span class="kw" style="color: #003B4F;">def</span> display(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-57">    image(<span class="va" style="color: #111111;">self</span>.img, <span class="va" style="color: #111111;">self</span>.x, <span class="va" style="color: #111111;">self</span>.y)</span>
<span id="cb1-58"></span>
<span id="cb1-59">bubbles <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb1-60">    </span>
<span id="cb1-61"><span class="kw" style="color: #003B4F;">def</span> setup():</span>
<span id="cb1-62">  <span class="kw" style="color: #003B4F;">global</span> bg, crab</span>
<span id="cb1-63">  size(WIDTH, HEIGHT)</span>
<span id="cb1-64">  <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"🐠 Crab Dancing with Bubbles 🐡"</span>)</span>
<span id="cb1-65">  bg <span class="op" style="color: #5E5E5E;">=</span> Background(<span class="st" style="color: #20794D;">"background.png"</span>)</span>
<span id="cb1-66">  <span class="cf" style="color: #003B4F;">for</span> _ <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(NUM_BUBBLES):</span>
<span id="cb1-67">    bubble <span class="op" style="color: #5E5E5E;">=</span> Bubble()</span>
<span id="cb1-68">    bubbles.append(bubble)</span>
<span id="cb1-69">  crab <span class="op" style="color: #5E5E5E;">=</span> Crab()</span>
<span id="cb1-70">  </span>
<span id="cb1-71"><span class="kw" style="color: #003B4F;">def</span> draw():</span>
<span id="cb1-72">  background(<span class="dv" style="color: #AD0000;">49</span>, <span class="dv" style="color: #AD0000;">197</span>, <span class="dv" style="color: #AD0000;">244</span>) <span class="co" style="color: #5E5E5E;"># Hellblau</span></span>
<span id="cb1-73">  bg.display()</span>
<span id="cb1-74">  crab.update()</span>
<span id="cb1-75">  crab.display()</span>
<span id="cb1-76">  <span class="cf" style="color: #003B4F;">for</span> bubble <span class="kw" style="color: #003B4F;">in</span> bubbles:</span>
<span id="cb1-77">    bubble.update()</span>
<span id="cb1-78">    bubble.display()</span>
<span id="cb1-79">  </span>
<span id="cb1-80"><span class="kw" style="color: #003B4F;">def</span> mousePressed():</span>
<span id="cb1-81">  <span class="cf" style="color: #003B4F;">if</span> mouseButton <span class="op" style="color: #5E5E5E;">==</span> LEFT:</span>
<span id="cb1-82">    crab.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"LEFT"</span></span>
<span id="cb1-83">  <span class="cf" style="color: #003B4F;">elif</span> mouseButton <span class="op" style="color: #5E5E5E;">==</span> RIGHT:</span>
<span id="cb1-84">    crab.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"RIGHT"</span></span>
<span id="cb1-85"></span>
<span id="cb1-86"><span class="kw" style="color: #003B4F;">def</span> mouseReleased():</span>
<span id="cb1-87">  crab.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"NONE"</span></span>
<span id="cb1-88"></span>
<span id="cb1-89">run()</span></code></pre></div>
<p>Das Programm ist in dem Python-Processing-Mode von Trinket programmiert und bisher <em>straigt forward</em>: Es gibt eine Klasse <code>Crab()</code>, die eine Krabbe erzeugt, die mit den Maustasten auf dem Bildschirm hin- und hergeschoben wird (siehe die Funktionen <code>mousePressed()</code> und <code>mouseReleased()</code>), und eine Klasse <code>Bubble()</code>, die zufallsgesteuert drei verschieden große Blasen erzeugt, die vom oberen Bildschirmrand nach unten schweben. Ist der untere Bildschirmrand erreicht, werden die Blasen (wieder zufallsgesteuert) an einer neuen Position und in einer neuen Größe weit oberhalb des Bildschirmfensters neu instanziert (siehe die Methode <code>reset()</code>).</p>
<p>Das Bild der Krabbe wie auch die Bilder der Blasen habe ich dem <a href="https://www.tigerjython4kids.ch/index.php?inhalt_links=turtle/navigation.inc.php&amp;inhalt_mitte=sprites.html">Fundus von TigerJython</a> entnommen. Ich denke jedoch, daß dies – wegen meines <a href="http://blog.schockwellenreiter.de/2022/10/2022103001.html">Abschieds von TigerJython</a> – nicht wirklich fair ist. Daher habe ich ein wenig auf OpenGameArt.org gestöbert und dort eine freie (<a href="http://creativecommons.org/publicdomain/zero/1.0/">CC0</a>) <a href="https://opengameart.org/content/crab">Krabbe</a> von <em>malekith97</em> und eine ebenfalls freie (<a href="http://creativecommons.org/licenses/by/3.0/">CC-BY 3.0</a>) <a href="https://opengameart.org/content/bubbles8-colors">Sammlung bunter Blasen</a> des Users <em>HorrorPen</em> gefunden, die ich in Stage 2 (der hoffentlich bald fertig wird) verwenden möchte. Die Krabbe hat zudem noch den Vorteil, daß sie eine Zwei-Frame-Animation besitzt und so etwas mehr Bewegung ins Spiel kommt. <em>Still digging!</em></p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Fußnoten</h2>

<ol>
<li id="fn1"><p>Hauke Fehr: <em>Let’s code Python</em>, Bonn (Rheinwerk Computing) 2019, Seiten 247 ff.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Python</category>
  <category>Processing</category>
  <category>Trinket</category>
  <category>Spieleprogrammierung</category>
  <guid>https://kantel.github.io/posts/2023040403_crabdance–stage1/index.html</guid>
  <pubDate>Tue, 04 Apr 2023 19:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023040403_crabdance–stage1/images/crabdance.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Google schließt am »April-Patchday« wieder Sicherheitslücken in Android</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023040402_android_update/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjB7FUHoavlOyTuvTRIZEQhN-fk8hPDkVmlaMNSUhrlvfxlidIZXlbP990Lr417pLsRoWBLygcY4Kg3ZlYWe-XJSymnWU8L8pGDEKN5P4EgIf7GrsFROKiotWnAu9xnu0KKdh_S-zhhvMAsX1D--hU9xYYdeWKGe7iTJ5Wi9CjFbqyctq3OKiHTUXQo/s1304/unclewiggilygoes00gari_0005.jpg"><img src="https://kantel.github.io/posts/2023040402_android_update/images/goswimming-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Google hat mit seinem monatlichen Sicherheitsupdate für Android (und damit auch auf seinen <a href="https://source.android.com/docs/security/bulletin/pixel/2023-04-01">Pixel</a>-Geräten) wieder <a href="https://source.android.com/docs/security/bulletin/2023-04-01?hl=de">Sicherheitslücken</a> geschlossen.</p>
<p>Die Updates werden so nach und nach per OTA <em>(over the air)</em> auf Pixel 7/7 pro, Pixel 6a, Pixel 6/6 pro, Pixel 5, Pixel 4a 5G, Pixel 4a verteilt.</p>
<p>Die anderen Hersteller werden wie üblich in Bälde nachziehen, sofern sie überhaupt noch entsprechenden Support leisten. Samsung beispielsweise liefert für seine S23-Serie ebenfalls bereits Updates aus. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<p><em>(Bild: Uncle Wiggily goes swimming, page 5, pictured by <a href="https://pierangelo-boog.blogspot.com/2023/03/uncle-wiggily-goes-swimming-pictured-by.html">Lang Campbell</a>.)</em></p>



 ]]></description>
  <category>News</category>
  <guid>https://kantel.github.io/posts/2023040402_android_update/index.html</guid>
  <pubDate>Tue, 04 Apr 2023 17:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023040402_android_update/images/goswimming.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Linkschleuder: Spiele und Tutorials zur Spieleprogrammierung</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023040401_spiele_und_programmierung/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://cdn.mos.cms.futurecdn.net/Rn4dsge4Usg9BPLSDrNsvW.jpg"><img src="https://kantel.github.io/posts/2023040401_spiele_und_programmierung/images/crabwithgun-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Nicht selten sind selbst Rezensionen zu Spielen eine Quelle für neue Inspirationen. Daher beginnt eine heutige Linkschleuder mit Berichten über <a href="http://cognitiones.kantel-chaos-team.de/medien/retrogames/rogue.html">Roguelikes</a> und Simulationsspielen, über die ich noch ein wenig nachdenken möchte. Dann gibt es aber auch weitere <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a>-Tutorials, etwas über Graphiken und Sprites und mehr. Eine wüste Linkschleuder eben&nbsp;…</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/FvCVgeI6-e4" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p><strong>Crabs with Guns</strong>: Den Anfang macht eine vielversprechende Idee. Denn <em>Noisestorm</em>, der Schöpfer des vor fünf Jahren viral gegangenen <a href="https://www.youtube.com/watch?v=cE0wfjsybIQ">Musikvideos mit tanzenden Krabben</a> hat daraus nun ein <a href="https://www.pcgamer.com/obviously-this-is-a-fast-paced-roguelike-where-you-are-a-crab-with-a-gun/">rasantes Roquelike geschaffen</a>, in dem der Spieler zur Rave-Musik eine Krabbe mit einer Handfeuerwaffe steuert und alles abknallen muß, was sich bewegt. Wie <em>crab</em> ist das denn? Das Spiel heißt <a href="https://crabchampions.com/">Crab Champion</a> und ist für kleines Geld (rund US-$ 10) seit dem 1.&nbsp;April als <em>Early Access</em> erhältlich. Es soll dennoch kein Aprilscherz sein.</p>
<p><strong>Von Roguelikes zu Simulationsspielen mit »Permadeath«</strong>: Die Seite <em>GameRant</em> hat eine Liste von zehn bemerkenswerten Simulationsspielen und Roguelikes veröffentlicht. Neben Klassikern wie »The Sims« oder »The Oregon Trail« sind auch Perlen wie »<a href="https://en.wikipedia.org/wiki/Caves_of_Qud">Caves of Qud</a>« darunter, ein Spiel, das ich mir allein wegen seiner minimalistischen Graphik, die an <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/bitsy.html">Bitsy</a>-Spiele erinnert, unbedingt einmal genauer anschauen sollte. Vielleicht komme ich da auf neue Ideen für meine <a href="http://blog.schockwellenreiter.de/2022/06/2022060901.html">nächtlichen Streifzüge durch den Bürgerpark</a>.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/M6e3_8LHc7A" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p><strong>Noch mehr von »Coding with Russ«</strong>: Aus der Playlist »<a href="https://www.youtube.com/playlist?list=PLjcN1EyupaQmZw8C-q6a4Zekidxf8SUj3">PyGame - Misc Tutorials</a>« (Fünfundzwanzig eher kurze Videos zwischen fünf Minuten und einer halben Stunde Spieldauer).</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/jlKNOirh66E" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p><strong>Doch jetzt was ganz anderes</strong>: Der <a href="https://www.youtube.com/@uselessgamedev">nutzlose Spieleprogrammierer</a> zeigt uns in dem Video »<a href="https://www.youtube.com/watch?v=jlKNOirh66E">Moebius-style 3D Rendering</a>, wie man Graphiken im Stil des bekannten französischen Comic-Künstlers <a href="https://de.wikipedia.org/wiki/Jean_Giraud">Moebius</a> <em>(Jean Giraud</em>) erzeugt. Und weil auch einige andere Videos mein Interesse weckten, habe ich den Kanal abonniert.</p>
<p><strong>Weil ich lange danach gesucht habe</strong>: Die Graphiken (Sprites) aus der <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/tigerjython.html">TigerJython</a>-Distribution kann man unter anderem <a href="https://www.tigerjython4kids.ch/index.php?inhalt_links=turtle/navigation.inc.php&amp;inhalt_mitte=sprites.html">hier herunterladen</a>.</p>
<p><strong>War sonst noch was?</strong> Ach ja, <em>Jessica Cherry</em> zeigt Euch und mir, <a href="https://opensource.com/article/23/4/emojicode">wie man niedliche Programme mit Emojicode</a> schreibt. Diese freie (<a href="https://github.com/emojicode/emojicode/blob/master/LICENSE">Artistic License 2.0</a>) <a href="https://www.emojicode.org/">Programmiersprache</a> mit Emojis (<a href="https://www.emojicode.org/docs/">Dokumentation</a>, <a href="https://github.com/emojicode/emojicode">GitHub-Repo</a>) wolltet Ihr alle doch schon immer einmal kennenlernen. 😀😜🔂</p>



 ]]></description>
  <category>Spieleprogrammierung</category>
  <category>Game Design</category>
  <category>Pygame</category>
  <guid>https://kantel.github.io/posts/2023040401_spiele_und_programmierung/index.html</guid>
  <pubDate>Tue, 04 Apr 2023 14:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023040401_spiele_und_programmierung/images/crabwithgun.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Photostrecke: Palmsonntag im Britzer Garten</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023040202_palmsonntag_britzer_garten/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52787834506/"><img src="https://kantel.github.io/posts/2023040202_palmsonntag_britzer_garten/images/palmsonntagbritzergarten01-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Heute war wieder ein günstiger Tag, um mein <a href="https://kantel.github.io/posts/2023031502_fruehlingsplaene/">Vorhaben</a> umzusetzen, den Jahresverlauf im <a href="https://www.britzergarten.de/">Britzer Garten</a> photographisch zu begleiten. Zwar zierte sich der Frühling immer noch gewaltig, dennoch sind ein paar nette Bilder dabei herausgekommen, die ich Euch präsentieren möchte. Und da das Fratzenbuch und ich immer noch nicht wieder Freunde geworden sind – und es in diesem Leben wohl auch nicht mehr werden –, muß ich die Photostrecke hier veröffentlichen. Da müßt Ihr einfach durch!</p>
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52788261083/"><img src="https://kantel.github.io/posts/2023040202_palmsonntag_britzer_garten/images/palmsonntagbritzergarten02.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/52787815976/"><img src="https://kantel.github.io/posts/2023040202_palmsonntag_britzer_garten/images/palmsonntagbritzergarten03.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/52788044274/"><img src="https://kantel.github.io/posts/2023040202_palmsonntag_britzer_garten/images/palmsonntagbritzergarten04.jpg" class="img-fluid"></a><br><br> <a href="https://www.flickr.com/photos/schockwellenreiter/52788215885/"><img src="https://kantel.github.io/posts/2023040202_palmsonntag_britzer_garten/images/palmsonntagbritzergarten05.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/52788271218/"><img src="https://kantel.github.io/posts/2023040202_palmsonntag_britzer_garten/images/palmsonntagbritzergarten06.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/52788220920/"><img src="https://kantel.github.io/posts/2023040202_palmsonntag_britzer_garten/images/palmsonntagbritzergarten07.jpg" class="img-fluid"></a><br><br> <a href="https://www.flickr.com/photos/schockwellenreiter/52787825451/"><img src="https://kantel.github.io/posts/2023040202_palmsonntag_britzer_garten/images/palmsonntagbritzergarten08.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/52788273938/"><img src="https://kantel.github.io/posts/2023040202_palmsonntag_britzer_garten/images/palmsonntagbritzergarten09.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/52787276327/"><img src="https://kantel.github.io/posts/2023040202_palmsonntag_britzer_garten/images/palmsonntagbritzergarten10.jpg" class="img-fluid"></a><br><br> <a href="https://www.flickr.com/photos/schockwellenreiter/52787277922/"><img src="https://kantel.github.io/posts/2023040202_palmsonntag_britzer_garten/images/palmsonntagbritzergarten11.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/52787284137/"><img src="https://kantel.github.io/posts/2023040202_palmsonntag_britzer_garten/images/palmsonntagbritzergarten12.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/52787834351/"><img src="https://kantel.github.io/posts/2023040202_palmsonntag_britzer_garten/images/palmsonntagbritzergarten13.jpg" class="img-fluid"></a></p>
<p><em>Mit einem Klick auf die Vorschaubilder kommt Ihr auf eine Seite mit einer Vergrößerung.</em></p>
<p>Diese Photostrecke ist dazu eine Premiere. Ich hatte vor einigen Jahren bei einem großen Discounter – denselben, bei dem ich vor drei Tagen vergeblich versucht hatte, für <a href="http://www.gabi-kantel.de/">Gabi</a> ein neues Mobilphone <a href="https://kantel.github.io/posts/2023033002_abenteuer_handy_kaufen/">zu ergattern</a> – <a href="https://www.testberichte.de/p/medion-tests/life-x44026-md-86826-testbericht.html">günstig eine Spiegelreflexkamera erstanden</a>, die damals gerade für kleines Geld im Sonderangebot war. Wegen anderer Interessen und auch bedingt durch meinen Schlaganfall hatte ich sie bisher jedoch kaum genutzt. Nun sah ich also die Gelegenheit, das Teil wieder hervorzukramen und einzusetzen. Und ich bin sehr zufrieden – ich mußte weniger üben, als ich dachte.</p>
<p>Dennoch werde ich heute abend in Ruhe erst einmal die <a href="https://www.manualslib.de/manual/113390/Medion-X44026-Md-86826.html">Gebrauchsanleitung</a> durchlesen, damit es noch besser flutscht. <em>Still digging!</em></p>
<p><em>(Photos (<a href="http://creativecommons.org/licenses/by-nc-nd/2.0/">cc</a>): <a href="http://cognitiones.kantel-chaos-team.de/cv.html">Jörg Kantel</a>)</em></p>



 ]]></description>
  <category>Parks und Gärten</category>
  <category>Neukölln</category>
  <category>Photographie</category>
  <guid>https://kantel.github.io/posts/2023040202_palmsonntag_britzer_garten/index.html</guid>
  <pubDate>Sun, 02 Apr 2023 17:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023040202_palmsonntag_britzer_garten/images/palmsonntagbritzergarten01.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Tiny Ski: Noch mehr winzige, freie Tiles und Sprites</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023040201_tiny_ski/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.kenney.nl/media/pages/assets/tiny-ski/2d7ed528e6-1680201502/sample.png"><img src="https://kantel.github.io/posts/2023040201_tiny_ski/images/tinyski-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p><strong>Tiny, aber nicht süüüß!</strong> <a href="https://www.kenney.nl/assets">Kenney</a> hat seine Tiny-Reihe mit freien (<a href="https://creativecommons.org/share-your-work/public-domain/cc0/">CC0</a>) 16x16 großen Sprites und Tiles um eine weitere Sammlung erweitert: Nach dem <a href="https://www.kenney.nl/assets/tiny-dungeon">Tiny Dungeon</a> und der <a href="https://www.kenney.nl/assets/tiny-town">Tiny Town</a> gibt es jetzt auch noch <a href="https://www.kenney.nl/assets/tiny-ski">winzige Wintersportler</a>.</p>
<p>Die Bildchen lassen sich nicht nur untereinander, sondern – je nach Anwendung – auch mit der ebenfalls freien (CC0) 16x16 Pixel-Reihe aus dem gleichen Haus kombinieren. Neben dem namensgebenden Hauptset <a href="https://www.kenney.nl/assets/pixel-platformer">Pixel Platformer</a> gibt es davon noch die Sets <a href="https://www.kenney.nl/assets/pixel-shmup">Pixel Shmup</a>, die <a href="https://www.kenney.nl/assets/pixel-platformer-blocks">Pixel Platformer Blocks</a>, die <a href="https://www.kenney.nl/assets/pixel-platformer-farm-expansion">Pixel Platformer Farm Expansion</a> und – ebenfalls recht neu – die <a href="https://www.kenney.nl/assets/pixel-platformer-industrial-expansion">Pixel Platformer Industrial Expansion</a>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.kenney.nl/media/pages/assets/pixel-platformer-industrial-expansion/c60ccf7ee5-1668793437/sample.png"><img src="https://kantel.github.io/posts/2023040201_tiny_ski/images/platformer_industrial.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Ich sehe das Spiel schon vor meinem inneren Auge: Böse Alien-Flieger (Pixel Shmup) greifen gute Wintersportler an. 🤪 <em>Still digging!</em></p>



 ]]></description>
  <category>Spieleprogrammierung</category>
  <category>Tiles und Sprites</category>
  <guid>https://kantel.github.io/posts/2023040201_tiny_ski/index.html</guid>
  <pubDate>Sun, 02 Apr 2023 12:05:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023040201_tiny_ski/images/tinyski.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Trinket Startseite aufgehübscht</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023040102_trinket_startseite/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52786030049/"><img src="https://kantel.github.io/posts/2023040102_trinket_startseite/images/trinketstartseite-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Nachdem ich mich wochenlang über die häßlichen, abgeschnittenen Vorschaubilder auf meiner <a href="https://trinket.io/library/trinkets">Trinket-Startseite</a> geärgert hatte (auch, wenn vermutlich nur ich sie sehen kann), habe ich jetzt endlich einen Weg gefunden, diese Vorschaubilder so zu erzeugen, daß sie nicht abgeschnitten werden: Man muß die Programme einmal mit voller Fenstergröße im Browser ausführen lassen und sie dann sichern. Voilà, und schon erzeugt auch Trinket eine Vorschau in voller Pracht.</p>
<p>Jetzt hat mein armes Seelchen Ruhe und ich kann endlich meine <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/trinket.html">Trinket</a>-Experimente mit dem <a href="https://kantel.github.io/posts/2023032602_pizza_plane_with_pizzas/">kleinen, grünen Flieger und den Pizzas</a> fortsetzen. <em>Still digging!</em></p>



 ]]></description>
  <category>Trinket</category>
  <guid>https://kantel.github.io/posts/2023040102_trinket_startseite/index.html</guid>
  <pubDate>Sat, 01 Apr 2023 18:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023040102_trinket_startseite/images/trinketstartseite.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Die Zahlen für den März 2023</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023040101_media_daten_maerz_2023/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52785155386/"><img src="https://kantel.github.io/posts/2023040101_media_daten_maerz_2023/images/mediadaten202303-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Der März hatte leider nicht den erhofften Frühling gebracht. Auch wenn das nasse Wetter sicher gut für die Berliner Straßenbäume ist, hätte ich mir aus rein egoistischen Motiven ein wenig mehr Sonnenschein gewünscht. Nun muß ich wohl auf den April hoffen.</p>
<p>Wie dem auch sei, der Monat ist vorbei und daher ist es an der Zeit für ein paar Zahlen, die hochtrabend manches Mal auch <em>Mediadaten</em> genant werden: Im März 2023 hatte der <em>Schockwellenreiter</em> laut dem (hoffentlich!) datenschutzkonformen <del>Geißenpeter</del> <a href="https://www.goatcounter.com/">GoatCounter</a> exakt <strong>4.690 Besucherinnen und Besucher</strong>. Dafür, daß der <em>Geißenpeter</em> erst seit Dezember letzten Jahres auf diesen Seiten werkelt und daher noch auf keinen nennenswerten Backkatalog zurückgreifen kann, sind das wirklich schöne Zahlen.</p>
<p>Und wie immer täuscht die Exaktheit der Ziffern eine Genauigkeit der Zahlen nur vor. Aber ich freue mich dennoch über jede Besucherin und jeden Besucher und bedanke mich bei allen meinen Leserinnen und Lesern.</p>
<p>😎 &nbsp; <em>Bleibt mir gewogen!</em></p>
<p>Die <em>Top Five</em> des Vormonats hat dieses Mal einen eindeutigen Sieger. Aber die SPD kann sicher nicht stolz darauf sein:</p>
<ol type="1">
<li>Mit großem Abstand vorne liegt der Beitrag »<a href="https://kantel.github.io/posts/2023030401_berliner_spd_teufel/">Die Berliner SPD geht zum Teufel</a>«, der sich als eine Art Dauerbrenner etabliert hat.</li>
<li>Schon mit weitem Abstand folgt darauf »<a href="https://kantel.github.io/posts/2023030702_nord_stream-anschlag/">Nord-Stream-Anschlag: Ach, es war doch nicht der Russe?</a>«, obwohl auch er auf großes Interesse gestoßen ist.</li>
<li>Welche Seite das Dauerinteress an dem <a href="http://cognitiones.kantel-chaos-team.de/utopien/verkehr/pedalpower/fahrradcamper02.html">Camper Bike</a> ausgelöst hat, habe ich immer noch nicht herausgefunden.</li>
<li>Viele Leserinnen und Leser haben sich auch für meine »<a href="https://kantel.github.io/posts/2023031502_fruehlingsplaene/">Pläne für Frühling und Sommer (bis in den Herbst)</a>« interessiert.</li>
<li>Und <em>last but not least</em> endlich auch ein technischer Beitrag: »<a href="https://kantel.github.io/posts/2023032701_jupyter_and_jupyterlab/">Von Jupyter zu JupyterLab (Desktop) und darüber hinaus</a>«.</li>
</ol>
<p>Das war es für den März. Jetzt schaue ich hoffnungsvoll in den April und hoffe auf viele Inspirationen für neue und interessante Beiträge.</p>



 ]]></description>
  <category>Interna</category>
  <guid>https://kantel.github.io/posts/2023040101_media_daten_maerz_2023/index.html</guid>
  <pubDate>Sat, 01 Apr 2023 12:05:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023040101_media_daten_maerz_2023/images/mediadaten202303.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Flappy Bird: Retrogaming und Künstliche Intelligenz</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023033102_flappy_bird_retrogaming_und_ki/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.youtube.com/watch?v=ihX3-WDua2I"><img src="https://kantel.github.io/posts/2023033102_flappy_bird_retrogaming_und_ki/images/neatandgenalg-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p><strong>Zum Zehnjährigen</strong>: Obwohl eigentlich noch recht jung (von 2013) ist <a href="https://de.wikipedia.org/wiki/Flappy_Bird">Flappy Bird</a> wegen seines riesigen Erfolgs sehr schnell ein Computerspielklassiger geworden, der mittlerweile in unzähligen Versionen nachprogrammiert wurde und nicht nur für die Ausbildung der Spieleprogrammierer, sondern auch als Forschungsobjekt im Bereich <em>Künstliche Intelligenz</em> herhalten muß.</p>
<p>So ist es einfach folgerichtig, daß <em>Flappy Bird</em> auch mein nächstes <a href="https://kantel.github.io/#category=Trinket">Trinket</a>-Projekt werden soll (es drängelt sich als Nachfolgeprojekt zu <a href="https://kantel.github.io/posts/2023032602_pizza_plane_with_pizzas/">Pizza Plane</a> geradezu auf). Daher habe ich zur Einstimmung ein paar Video-Tutorials zusammengestellt, die Lust auf das Projekt machen sollen.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/IIrGAvlNckw" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Den Anfang macht die Playlist »<a href="https://www.youtube.com/playlist?list=PLAE4MzuQm3Gwj2QLcqpepbTuIuzi_18mS">Create Flappy Bird in Processing</a> von <em>Allen Thoe</em>, die in sechs etwa zehnminütigen bis viertelstündigen Videos eine klassische Version von <em>Flappy Bird</em> implementiert.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/YHaax4jP0ps" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Etwas mehr Phantasie bezüglich der Spielegestaltung und auch eine größere Nähe und Verbindung zu meinem kleinen, grünen Pizzaflieger zeigt die Implementierung »<a href="https://www.youtube.com/watch?v=YHaax4jP0ps">Tappy Plane Game in Python and Pygame</a> von <em>Click Clack Code</em>. Es nutzt die freien <a href="https://opengameart.org/content/tappy-plane">Tappy Plane Assets</a> von <a href="https://www.kenney.nl/assets/tappy-plane">Kenney.nl</a> (die ihrer <a href="https://www.kenney.nl/">Website</a> frisch ein Redesign gegönnt habe) und kommt – wie alles von <em>Click Clack Code</em> – ohne störende Kommentare aus, nur Code pur.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/cXgA1d_E-jY" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Doch der eigentlich Klassiker ist natürlich <em>Daniel Shiffman</em>, der schon vor sechs Jahren seine Version von <em>Flappy Bird</em> in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/p5js.html">P5.js</a> programmierte und <a href="https://www.youtube.com/watch?v=cXgA1d_E-jY">online stellte</a>. Kurz darauf folgte noch <a href="https://www.youtube.com/watch?v=aKiyCeIuwn4">Clappy Bird</a>, wo er den Vogel mit Händeklatschen steuerte.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/c6y21FkaUqw" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Der Höhepunkt ist jedoch seine Coding Challenge 100: Neuroevolution Flappy Bird, <a href="https://www.youtube.com/watch?v=c6y21FkaUqw">Part&nbsp;1</a>, <a href="https://www.youtube.com/watch?v=YtRA6tqgJBc">Part 2</a>, <a href="https://www.youtube.com/watch?v=3lvj9jvERvs">Part 3</a>, <a href="https://www.youtube.com/watch?v=HrvNpbnjEG8">Part 4</a> und <a href="https://www.youtube.com/watch?v=U9wiMM3BqLU">Part 5</a>, in der er seine eigene <a href="https://github.com/CodingTrain/Toy-Neural-Network-JS/">JavaScript-Neural-Network-Bibliothek</a> und einen ebenfalls selbst geschriebenen Genetischen Algorithmus nutzt, um dem Vogel künstliche Intelligenz beizubringen.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/cdUNkwXx-I4" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Es folgte noch eine Version, in der er seine eigene Bibliothek durch <a href="https://de.wikipedia.org/wiki/TensorFlow">TensorFlow</a> ersetzte. Und alles dies – und mehr – hat er in seiner Playlist <a href="https://www.youtube.com/playlist?list=PLRqwX-V7Uu6Yd3975YwxrR0x40XGJ_KGO">The Nature of Code, Part 11: Neurovolution</a> zusammengefaßt.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/ihX3-WDua2I" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Natürlich gibt es unzählige ähnliche Implementierungen. Eine der wie ich finde interessantestens findet Ihr in der Playlist »<a href="https://www.youtube.com/playlist?list=PLnICFpQDyZRErLFGJffSEFtRFO5uq5hQm">Arcade Games with Genetic Algorithms and Neural Net AI</a>, in der eine Implementierung allgemein ohne Bezug auf eine spezielle Programmiersprache erklärt wird.</p>
<p>Das alles sollte Material genug sein, um mich auf mein Vorhaben einzustimmen. <em>Still digging!</em></p>



 ]]></description>
  <category>Spieleprogrammierung</category>
  <category>Trinket</category>
  <category>Retrogaming</category>
  <category>Künstliche Intelligenz</category>
  <guid>https://kantel.github.io/posts/2023033102_flappy_bird_retrogaming_und_ki/index.html</guid>
  <pubDate>Fri, 31 Mar 2023 19:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023033102_flappy_bird_retrogaming_und_ki/images/neatandgenalg.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Coding with Russ – Video-Tutorials zum Wochenende</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023033101_coding_with_russ/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="http://www.codingwithruss.com/wp-content/uploads/2023/02/platformer.png"><img src="https://kantel.github.io/posts/2023033101_coding_with_russ/images/platformer-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>An diesem Freitag gibt es wieder die Video-Tutorials zum Wochenende, damit Euch während der nächsten, verregneten Tage nicht die Langeweile übermannt und Ihr um Gottes willen nicht in die Kirchen rennt. Dieses Wochenende ist es eine <em>Special Edition</em>, die Euch den Videokanal »<a href="https://www.youtube.com/@CodingWithRuss">Coding with Russ</a>« vorstellt. Denn dieser Kanal ist immer eine gute Adresse, wenn es um Tutorials zur Spieleprogrammierung mit <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a> geht. Seine <a href="https://www.youtube.com/@CodingWithRuss/playlists">vielen Playlists</a> waren vor einigen Monaten schon einmal eine <a href="http://blog.schockwellenreiter.de/2022/11/2022111101.html">Empfehlung im <em>Schockwellenreiter</em></a> und sein ziemlich geniales <a href="https://www.youtube.com/playlist?list=PLjcN1EyupaQnjjBvXn4Ew1a9Ms-9QzVub">Castle Defender</a> hatte ich zum Zeitpunkt seiner Entstehung sogar <a href="http://blog.schockwellenreiter.de/2021/07/2021070902.html">mehrmals</a> im <a href="http://blog.schockwellenreiter.de/2021/07/2021071101.html">Visier</a>. Trotz der Gefahr der Wiederholung möchte ich dennoch auf einige Highlights aus diesem Kanal hinweisen (im Fernsehen wird schließlich auch alles wiederholt):</p>
<p>Den Anfang macht das »<a href="https://www.youtube.com/playlist?list=PLjcN1EyupaQnHM1I9SmiXfbT6aG4ezUvu">PyGame Tile Based Platformer Game Beginner Tutorial</a>«, eine dreizehnteilige Playlist, die gründlich in die Programmierung von Pygame einführt. Für das Tutorial gibt es auch eine <a href="http://www.codingwithruss.com/gamepage/Platformer/">Webseite</a>, alle Assets sind Open Source und den <a href="https://github.com/russs123/Platformer">Quellcode und die Assets</a> gibt es bei GitHub.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/DHgj5jhMJKg" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Auf das Plattformer-Tutorial baut das »<a href="https://www.youtube.com/playlist?list=PLjcN1EyupaQm20hlUE11y9y8EY2aXLpnv">PyGame Scrolling Shooter Game Beginner Tutorial</a> auf, das ebenfalls aus dreizehn Videos besteht. Auch für dieses Tutorial existieren eine <a href="http://www.codingwithruss.com/gamepage/Shooter/">Webseite</a> und ein <a href="https://github.com/russs123/Shooter">GitHub-Repositorium</a> mit dem Quellcode und allen Assets. Bei den in der <em>Video Description</em> verlinkten Credits finde ich die Seite mit dem freien <a href="https://erayzesen.itch.io/pixel-platformer">Pixel Platformer Game Tileset Pack</a> hochinteressant. Für mein nächstes Spieleprojekt kommt dies auf die Merkliste.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/s5bd9KMSSW4" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Ein ganz eigenes Genre sind die <a href="https://de.wikipedia.org/wiki/Street_Fighter_(Spieleserie)">Street Fighter</a> ähnlichen Videospiele, die erstmals 1987 erschienen und auch als Vorlage für einige Kinofilme dienten. Auch daran hat sich <em>Russ</em> gewagt und mit seinem <a href="https://www.youtube.com/watch?v=s5bd9KMSSW4">Brawler</a> eine eigene Pygame-Version programmiert. Das ist <em>Retrogaming as its best</em>! Auch dieses Spiel hat eine <a href="http://www.codingwithruss.com/gamepage/Brawler/">Webseite</a> und ein GitHub-Repositorium mit dem <a href="https://github.com/russs123/brawler_tut">Quellcode und allen Assets</a>.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/z_tLkRMw-2Y" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p><strong>War sonst noch was?</strong> Ach ja, <em>Russ</em> erklärt mir und Euch endlich verständlich den Unterschied zwischen <code>convert()</code> und <code>convert_alpha()</code> in Pygame. Allein dies ist Begründung genug dafür, daß ich die Seiten von <a href="http://www.codingwithruss.com/">Coding with Russ</a> auch in meinem Feedreader aufgenommen habe.</p>
<p><strong>Und warum das alles?</strong> Wenn ich mit <a href="https://kantel.github.io/#category=Trinket">Trinket</a> durch bin, möchte ich meine (objektorientierten) Experimente mit Pygame wieder aufnehmen. Auch wenn ich einiges anders implementieren werde, haben mir speziell die Videos von <em>Russ</em> zu seinem »Scrolling Shooter Game« einige Anregungen gegeben die ich ausprobieren, realisieren und eventuell weiterentwickeln möchte. <em>Still digging!</em></p>



 ]]></description>
  <category>Spieleprogrammierung</category>
  <category>Pygame</category>
  <guid>https://kantel.github.io/posts/2023033101_coding_with_russ/index.html</guid>
  <pubDate>Fri, 31 Mar 2023 16:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023033101_coding_with_russ/images/platformer.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Abenteuer Handy kaufen</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023033002_abenteuer_handy_kaufen/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52772457449/"><img src="https://kantel.github.io/posts/2023033002_abenteuer_handy_kaufen/images/gartengoblin-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p><a href="http://www.gabi-kantel.de/">Gabis</a> Mobilphone hatte nach fünfjähriger Betriebsdauer seinen Geist aufgegeben. Der Akku ließ sich nicht mehr aufladen und – wie bei heutigen Geräten leider üblich – auch nicht austauschen. Also mußte ein neues her. Und da traf es sich eigentlich gut, daß ein großer Discounter ein Galaxy A13 gerade ab heute für knapp 180 Euronen im Angebot hatte.</p>
<p>Ich also hin. In der ersten, eine Neuköllner Filiale dieses Discounters erklärte man mir, daß man nur zwei Geräte bekommen hätte und die schon am frühen Morgen ausverkauft gewesen seien. Also habe ich mich in die S-Bahn geschwungen und eine Filiale in Tempelhof aufgesucht. Dort bekam ich die gleiche Erklärung serviert: Ausverkauft, weil nur ganz wenige Exemplare geliefert.</p>
<p>Okay, da die beiden mir bekannten Handy-Shops in der Neuköllner Karl-Marx-Straße das Handy nur zu deutlich teureren Mondpreisen verkaufen oder mir gleich einen Vertrag andrehen wollten, habe ich mich noch einmal in die U-Bahn geschwungen, weil ich wußte, daß der Discounter in Britz-Süd eine weitere eine Filiale besaß. Doch nicht nur, daß dort das gleiche Bild vorherrschte (ausverkauft), ich bin dann auch noch in ein heftiges Gewitter mit Blitz, Donner und Platzregen geraten, das meinen Aufenthalt an einer zugigen Bushaltestelle noch einmal um 20 Minuten verängerte.</p>
<p>Als ich nach dieser Odyssee dann endlich völlig durchnässt und entnervt zuhause mein warmes und trocknes Arbeitszimmer erreichte, habe ich mir erst einmal einen Kaffee gekocht und dann das Mobilphone in der gleichen Ausstattung bei Amazon bestellt und es auch noch für zehn Euro billiger bekommen. Spätestens Mittwoch liegt es in der Abholstation meines Vertrauens bereit.</p>
<p><strong>Fazit</strong>: Erfolglos vier Stunden Lebenszeit verplempert und dabei auch noch völlig durchnässt worden. Hätte ich gleich online bestellt, hätte ich die warme und trockene Wohnung nicht verlassen müssen und die Angelegenheit wäre nach spätestens zehn Minuten erledigt gewesen. Wundert Ihr Euch jetzt noch, warum ich lieber bei Amazon einkaufe? <em>(Photo (<a href="http://creativecommons.org/licenses/by-nc-nd/2.0/">cc</a>): <a href="http://cognitiones.kantel-chaos-team.de/cv.html">Jörg Kantel</a>)</em></p>



 ]]></description>
  <category>Digitales Leben</category>
  <guid>https://kantel.github.io/posts/2023033002_abenteuer_handy_kaufen/index.html</guid>
  <pubDate>Thu, 30 Mar 2023 17:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023033002_abenteuer_handy_kaufen/images/gartengoblin.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Update für iTunes for Windows behebt Sicherheitslücken</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023033001_itunes_update/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://cruikshankart.com/shop/enlarge-cruikshank-glasses-enlarge.jpg"><img src="https://kantel.github.io/posts/2023033001_itunes_update/images/opspectakles-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Vor <a href="https://kantel.github.io/posts/2023032802_apple_update_im_maerz/">zwei Tagen</a> gab es den großen Apfel-Flickentag und heute gibt es einen Nachschlag: Apple hat seinem iTunes for Windows ein Update für Windows ab Version&nbsp;10 und größer spendiert, daß unter anderem auch mehrere, teils <a href="https://support.apple.com/de-de/HT210384">kritische Schwachstellen</a> korrigiert.</p>
<p>Das Update erhält man auch im Microsoft Store. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<p><em>(Bild: »The OP Spectacles«, Karikatur von <a href="https://cruikshankart.com/">George Cruikshank</a>. Bildquelle: CruishankArt.com.)</em></p>



 ]]></description>
  <category>News</category>
  <guid>https://kantel.github.io/posts/2023033001_itunes_update/index.html</guid>
  <pubDate>Thu, 30 Mar 2023 16:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023033001_itunes_update/images/opspectakles.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>PyScript.net: (Anaconda-) Python in der Cloud</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023032902_pyscript_saas/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://cdn.thenewstack.io/media/2023/03/92b35e06-image1.png"><img src="https://kantel.github.io/posts/2023032902_pyscript_saas/images/pyscriptpyxeldemo-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Im Nachtrag meinem <a href="https://kantel.github.io/posts/2023032701_jupyter_and_jupyterlab/">Beitrag vom Montag</a> spülte heute eine Meldung bei mir rein, daß nicht nur Google (via <a href="https://colab.research.google.com/">Colab</a>) mit Python in die Cloud drängt, sondern daß auch <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/anaconda.html">Anaconda</a> mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/pyscript.html">PyScript</a> Ähnliches vorhat. Wie nämlich <a href="https://thenewstack.io/python-in-the-browser-free-pyscript-saas-launches/">The New Stack berichtete</a>, hat Anaconda mit <a href="https://pyscript.net/">PyScript.net</a> diese Woche einen Servive an den Start gebracht, in dem man eine PyScript-IDE online im Browser nutzen kann.</p>
<p>Der Dienst ist noch beta, doch neugierig, wie ich bin, habe ich mir einen (kostenlosen) Account zugelegt, um ein wenig damit herumzuspielen. Denn zum einen wäre dies ein großartiges Betätgungsfeld für <a href="http://blog.schockwellenreiter.de/2021/12/2021120701.html">mein Chromebook</a> und zum anderen versprach der <a href="https://cdn.thenewstack.io/media/2023/03/92b35e06-image1.png">Screenshot</a>, daß ich damit auch die von <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/tic80.html">TIC-80</a> inspirierte Python-Retrogame-Engine <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/tic80.html">Pyxel</a> – die aus irgendwelchen geheimnisvollen Gründen auf meinem betagten MacBook Pro nicht läuft – wenigstens auf meinem Chromebook zur Mitarbeit bewegen könnte.</p>
<p>Allerdings mangelt es momentan noch an Dokumentation: Was kommt wann und warum in die <code>TOML</code>-Datei und wie binde ich Pakete wie <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/numpy.html">NumPy</a> oder die <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/matplotlib.html">Matplotlib</a> ein? Fragen über Fragen. Leider wird ein unerfahrener PyScript-Nutzer damit noch völlig alleine gelassen. Und gemächlich scheint der Dienst auch (noch) zu sein.</p>
<p>Aber PyScript.net ist noch jung und beta. Ich warte erst einmal ab, wie sich der Dienst weiter entwickeln wird. Bis dahin habe ich mit Googles Colab und mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/trinket.html">Trinket</a> ja schon zwei Spielzeuge, mit denen ich Python im Browser (und damit auch auf meinem Chromebook) nutzen kann.</p>
<p>Und ich sollte nicht vergessen, daß ich ja auch <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/thonny.html">Thonny</a> auf meinem Chromebook <a href="http://blog.schockwellenreiter.de/2022/07/2022071501.html">zum Laufen bekommen</a> habe. Ich bin also nicht notwendigerweise von einer Python-im-Browser-Implementierung abhängig. Und das ist auch gut so!</p>



 ]]></description>
  <category>Python</category>
  <category>PyScript</category>
  <guid>https://kantel.github.io/posts/2023032902_pyscript_saas/index.html</guid>
  <pubDate>Wed, 29 Mar 2023 18:45:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023032902_pyscript_saas/images/pyscriptpyxeldemo.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Thunderbird-Update</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023032901_thunderbird_update/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://proxy.europeana.eu/2048202/europeana_fashion_DE_MUS_018313_875572?view=http%3A%2F%2Fwww.smb-digital.de%2FeMuseumPlus%3Fservice%3DImageAsset%26module%3Dcollection%26objectId%3D875572%26resolution%3DsuperImageResolution&amp;disposition=inline&amp;api_url=https%3A%2F%2Fapi.europeana.eu%2Fapi"><img src="https://kantel.github.io/posts/2023032901_thunderbird_update/images/mushroommonstrositis-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Es gibt mal wieder ein Update des Donnervogels ohne daß – wie normalerweise üblich – ein Update des kleinen, roten Pandas (aka Feuerfuchs) vorausgegangen war. Die Entwickler des <a href="http://www.mozillamessaging.com/">Mozilla Thunderbird</a> haben außer der Reihe das Update auf die Version 102.9.1 freigegeben und damit auch <a href="https://www.thunderbird.net/en-US/thunderbird/102.9.1/releasenotes/">Sicherheitslücken</a> behoben.</p>
<p>Thunderbird weist selbst auf dieses Update hin. Diese Prozedur kann aber auch wie immer über das Menü <code>Hilfe &gt; Über Thunderbird</code> angestoßen werden. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<p><em>(Bild: »Mushroom Monstrosities«, Karikatur von George Cruikshank, 1826. Bildquelle: <a href="https://recherche.smb.museum/detail/875572">Kunstbibliothek der Staatlichen Museen zu Berlin</a>.)</em></p>



 ]]></description>
  <category>News</category>
  <guid>https://kantel.github.io/posts/2023032901_thunderbird_update/index.html</guid>
  <pubDate>Wed, 29 Mar 2023 17:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023032901_thunderbird_update/images/mushroommonstrositis.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Apfel-Flickentag im März</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023032802_apple_update_im_maerz/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.loc.gov/pictures/resource/cph.3b49754/"><img src="https://kantel.github.io/posts/2023032802_apple_update_im_maerz/images/ indigestion-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Apple hat auf seinem gestrigen <em>Patch Day</em> sowohl für alle noch unterstützten Desktop-Betriebssysteme wie auch für die noch gewarteten mobilen Geräte eine Reihe von sicherheitsrelevanten Updates herausgehauen, die ich – wie gewohnt – <em>en bloc</em> abhandeln möchte:</p>
<section id="apple-veröffentlicht-macos-ventura-13.3" class="level3">
<h3 class="anchored" data-anchor-id="apple-veröffentlicht-macos-ventura-13.3">Apple veröffentlicht macOS Ventura 13.3</h3>
<p>Apple hat das Update auf die neue Betriebssystemversion macOS Ventura 13.3 freigegeben und bietet unter anderem <a href="https://support.apple.com/de-de/HT213606">Sicherheitsupdates</a>.</p>
<p>Das Update steht über die Systemeinstellungen zur Verfügung.</p>
</section>
<section id="apple-veröffentlicht-sicherheitsupdate-für-macos-big-sur-und-monterey" class="level3">
<h3 class="anchored" data-anchor-id="apple-veröffentlicht-sicherheitsupdate-für-macos-big-sur-und-monterey">Apple veröffentlicht Sicherheitsupdate für macOS Big Sur und Monterey</h3>
<p>Apple hat auch das Sicherheitsupdate auf <a href="https://support.apple.com/de-de/HT213675">macOS Big Sur 11.7.5</a> und macOS <a href="https://support.apple.com/de-de/HT213677">Monterey 12.6.4</a> freigegeben.</p>
<p>Die Updates stehen wie üblich über die Softwareaktualisierung bereit.</p>
</section>
<section id="apple-veröffentlicht-ios-16.4-ipados-16.4-und-watchos-9.4" class="level3">
<h3 class="anchored" data-anchor-id="apple-veröffentlicht-ios-16.4-ipados-16.4-und-watchos-9.4">Apple veröffentlicht iOS 16.4, iPadOS 16.4 und watchOS 9.4</h3>
<p>Wie angekündigt hat Apple das Update auf iOS 16.4, iPadOS 16.4 und watchOS 9.4 bereitgestellt. Die Neuerungen können im wesentlichen hier verfolgt werden (sobald verfügbar):</p>
<ul>
<li>Für <a href="https://support.apple.com/en-us/HT213407">iOS 16.4</a> und</li>
<li>für <a href="https://support.apple.com/en-us/HT213408">iPadOS 16.4</a>.</li>
</ul>
<p>Wie immer wurden auch hier wieder <a href="https://support.apple.com/en-us/HT201222">Sicherheitslücken</a> behoben (sobald verfügbar).</p>
<p>Das Update auf auf iOS 16.4/ iPadOS 16.4 kann über OTA (<em>Over the Air</em> - in <code>Einstellungen &gt; Allgemein &gt; Softwareaktualisierung</code>, an ausreichender Akku-Kapazität und freien Speicherplatz sollte gedacht werden) oder über iTunes erfolgen.</p>
<p>Eine vorherige Sicherung des Geräts ist wie immer sehr zu empfehlen.</p>
<p>Darüber hinaus hat Apple für die Apple Watch auch watchOS 9.4 bereitgestellt. Die <a href="https://support.apple.com/en-us/HT213436">Neuerungen</a> finden sich hier und für die behobenen <a href="https://support.apple.com/en-us/HT201222">Sicherheitsprobleme</a> (sobald verfügbar).</p>
<p>Die Aktualisierung wird über die Apple-Watch-App auf dem iPhone gestartet unter <code>Allgemein &gt; Softwareupdate</code>. Dabei sollte sich die Uhr in Reichweite des iPhones befinden, mit dem Ladekabel verbunden und mindestens zu 50 Prozent geladen sein.</p>
</section>
<section id="apple-veröffentlicht-ein-sicherheitsupdate-auf-ios-15.7.4-ür-ältere-systeme" class="level3">
<h3 class="anchored" data-anchor-id="apple-veröffentlicht-ein-sicherheitsupdate-auf-ios-15.7.4-ür-ältere-systeme">Apple veröffentlicht ein Sicherheitsupdate auf iOS 15.7.4 ür ältere Systeme</h3>
<p><em>Last but not least</em> hat Apple das Update auf iOS/iPadOS 15.7.4 für ältere Systeme bereitgestellt und behebt damit ebenfalls kritische <a href="https://support.apple.com/de-de/HT213673">Sicherheitsprobleme</a>.</p>
<p>Auch das Update auf auf iOS/iPadOS 15.7.4 kann über OTA (<em>Over the Air</em> - in <code>Einstellungen &gt; Allgemein &gt; Softwareaktualisierung</code>, an ausreichender Akku-Kapazität und freien Speicherplatz sollte gedacht werden) oder über iTunes erfolgen.</p>
<p>Eine vorherige Sicherung des Geräts ist auch hier wie immer sehr zu empfehlen.</p>
<p><em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<p><em>(Bild: »Indiguestion«, Karikatur von <a href="https://donkeyhotey.com/master-caricature-artists/tag/George+Cruikshank">George Cruikshank</a>, 1825. Bildquelle: <a href="https://www.loc.gov/pictures/item/2002721265/">Library of Congress</a>.)</em></p>


</section>

 ]]></description>
  <category>News</category>
  <guid>https://kantel.github.io/posts/2023032802_apple_update_im_maerz/index.html</guid>
  <pubDate>Tue, 28 Mar 2023 14:35:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023032802_apple_update_im_maerz/images/ indigestion.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>April im März</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023032801_april_im_maerz/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52775835812/"><img src="https://kantel.github.io/posts/2023032801_april_im_maerz/images/aprilimmaerz-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Gestern Hagel, Regen und Sonne, heute Sonnenschein mit Schnee – ja, ist denn schon April oder was? <em>(Photo (<a href="http://creativecommons.org/licenses/by-nc-nd/2.0/">cc</a>): <a href="http://cognitiones.kantel-chaos-team.de/cv.html">Jörg Kantel</a>)</em></p>



 ]]></description>
  <category>Photographie</category>
  <category>Parks und Gärten</category>
  <guid>https://kantel.github.io/posts/2023032801_april_im_maerz/index.html</guid>
  <pubDate>Tue, 28 Mar 2023 14:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023032801_april_im_maerz/images/aprilimmaerz.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Katzenvideos für den Frieden</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023032702_katzenvideos_frieden/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://upload.wikimedia.org/wikipedia/commons/thumb/0/07/George_Cruikshank%2C_Seizing_the_Italian_Relics%2C_1815.jpg/1280px-George_Cruikshank%2C_Seizing_the_Italian_Relics%2C_1815.jpg"><img src="https://kantel.github.io/posts/2023032702_katzenvideos_frieden/images/italianrelicts-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Die gute Nachricht des Tages kommt aus Norwegen: <a href="https://www.golem.de/news/nammo-tiktok-strombedarf-bremst-expansion-von-munitionshersteller-2303-172990.html">TikTok-Strombedarf bremst Expansion von Rüstungskonzern</a>. Der norwegische Rüstungskonzern Nammo ist bei den Plänen, seine größte Fabrik zu erweitern, auf ein Hindernis gestoßen: Ein neues Datenzentrum für TikTok hat einen so hohen Strombedarf, daß die Expansion von Nammo scheitern könnte. Der Konzern wurde von seinem Stromversorger informiert, daß es keine überschüssige Energie für das Werk in Raufoss in Mittelnorwegen gäbe, da das Datenzentrum, das TikTok als seinen Hauptkunden zählt, den gesamten Strom in der Region benötige.</p>
<p>Der Geschäftsführer von Nammo, <em>Morten Brandtzæg</em>, ist laut Financial Times besorgt, da das künftige Wachstum des Unternehmens durch das Speichern von Katzenvideos im Datenzentrum gefährdet sei. Die Nachfrage nach Munition sei aufgrund des andauernden Kriegs in der Ukraine sprunghaft angestiegen. Die Ukraine verbraucht rund 6.000 Artilleriegeschosse pro Tag – das entspräche den Jahresbestellungen eines kleinen europäischen Landes.</p>
<p>Dazu kann ich nur sagen: Leute, postet mehr Katzenvideos. Das hilft dem Frieden!</p>
<p><em>(Bild: »Seizing the Italian Relics«, Karikatur von George Cruikshank, 1825. Bildquelle: <a href="https://commons.wikimedia.org/wiki/Image:George_Cruikshank,_Seizing_the_Italian_Relics,_1815.jpg?uselang=de">Wikimedia Commons</a>)</em></p>



 ]]></description>
  <category>Politik</category>
  <category>Ukraine</category>
  <guid>https://kantel.github.io/posts/2023032702_katzenvideos_frieden/index.html</guid>
  <pubDate>Mon, 27 Mar 2023 19:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023032702_katzenvideos_frieden/images/italianrelicts.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Von Jupyter zu JupyterLab (Desktop) und darüber hinaus</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023032701_jupyter_and_jupyterlab/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*8xMIZPHtmjJFVoJ8Vh6Lig.png"><img src="https://kantel.github.io/posts/2023032701_jupyter_and_jupyterlab/images/jlabdesktop-b.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Letzte Woche ist <a href="https://github.com/jupyterlab/jupyterlab-desktop">JupyterLab Desktop</a>, die Applikation, die <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/jupyterlab.html">JupyterLab</a> aus den Klauen der Webbrowser befreien will, in der Version 3.6.2 erschienen. Das erinnerte mich daran, daß ich mir anläßlich des Erscheinens der Version 3.6.1 vorgenommen hatte, JupyterLab eine neue Chance zu geben. Neben den <a href="https://kantel.github.io/posts/2023021301_jypterlab_desktop_3_6_1/">damals schon verlinkten Tutorials</a> ist mir dieses <a href="https://www.youtube.com/watch?v=5pf0_bpNbkw">relativ frische Video</a> von <em>Rob Mulla</em> untergekommen, das mich bei meinem Wiedereinstieg unterstützen könnte:</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/5pf0_bpNbkw" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Es ist vor allem für mich auch deshalb interessant, weil es auch die cloudbasierten Jupyter-Implementierungen <a href="https://colab.research.google.com/">Google Colab</a> und <a href="https://www.kaggle.com/">Kaggle</a> (gehört ebenfalls zu Google) behandelt. Denn zwei Seelen wohnen ach in meiner Brust. Während die eine Seele Jupyter aus den Klauen der Browser befreit sehen will, denkt die andere daran, daß das Wetter ja immer frühlingshafter wird und ich bald mit <a href="http://blog.schockwellenreiter.de/2021/12/2021120701.html">meinem Chromebook</a> wieder auf der Terrasse spielen kann (denn mein WLAN reicht bis in unser Gärtchen). Und womit spielt ein Chromebook am Besten? Bingo! Mit Googles Cloud.</p>
<p>Daher habe ich auch noch das Tutorial »<a href="https://towardsdatascience.com/getting-started-with-google-colab-f2fff97f594c">Getting Started With Google Colab</a>« von <em>Anne Bonner</em> ausgegraben, das für die frustierten und verwirrten Seelen, also für mich, gedacht ist. Es ist auf Medium.com erschienen, daher müßt ihr – falls Ihr Eure drei kostenlosen Zugriffe pro Monat schon ausgeschöpft habt – entweder bis zum 1. April warten oder es mir nachtun, in den sauren Apfel beißen und ein Abo abschließen, um hinter Mediums Bezahlschranke zu gelangen.</p>
<p>Egal wie: Falls ich in einigen der nächsten Beiträge das in der letzten Zeit dominante Thema »<a href="https://kantel.github.io/#category=Spieleprogrammierung">Spieleprogrammierung</a>« verlasse und wieder etwas über Numerik, Chaos und Fraktale, Simulationen oder agentenbasierte Programmierung erscheint, dann wißt Ihr, daß das neue JupyterLab (Desktop) der Grund dafür ist. <em>Still digging!</em></p>



 ]]></description>
  <category>Python</category>
  <category>Jupyter</category>
  <guid>https://kantel.github.io/posts/2023032701_jupyter_and_jupyterlab/index.html</guid>
  <pubDate>Mon, 27 Mar 2023 17:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023032701_jupyter_and_jupyterlab/images/jlabdesktop.png" medium="image" type="image/png" height="111" width="144"/>
</item>
<item>
  <title>Weiter mit dem kleinen, grünen Flieger auf Trinket: Jetzt mit Pizzas</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023032602_pizza_plane_with_pizzas/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52770799214/"><img src="https://kantel.github.io/posts/2023032602_pizza_plane_with_pizzas/images/pizzaplanestage3-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Mit der Portierung meines <a href="https://kantel.github.io/posts/2023032301_pizza_plane_oop_trinket_stage_1/">kleinen, grünen Fliegers</a> von <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a> nach <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/trinket.html">Trinket</a> (in der <a href="https://kantel.github.io/posts/2023021601_my_first_trinket/">Processing.py-Variante</a>) bin ich ein gutes Stück vorangekommen. Ich habe dem Flieger Pizzas als Gegner spendiert (denn was ist ein Pizzaflieger ohne Pizzas? Nur ein simples Flugzeug) und Waffen, um diese Pizzen abzuschießen. Doch der Reihe nach:</p>
<iframe src="https://trinket.io/embed/python/3ae6ef087c?outputOnly=true&amp;runOption=run&amp;start=result" width="95%" height="700" frameborder="0" marginwidth="0" marginheight="0" allowfullscreen="">
</iframe>
<p>Getreu dem Motto »Don’t repeat Yourself« habe ich eine Oberklasse <code>Sprite()</code> implementiert, denn jede (Unter-) Klasse hatte ihre eigene, identische <code>display()</code>-Methode:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;">## Oberklasse für alles, was sich bewegt</span></span>
<span id="cb1-2"><span class="kw" style="color: #003B4F;">class</span> Sprite():</span>
<span id="cb1-3"></span>
<span id="cb1-4">  <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-5">    <span class="cf" style="color: #003B4F;">pass</span></span>
<span id="cb1-6"></span>
<span id="cb1-7">  <span class="kw" style="color: #003B4F;">def</span> display(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-8">    image(<span class="va" style="color: #111111;">self</span>.img, <span class="va" style="color: #111111;">self</span>.x, <span class="va" style="color: #111111;">self</span>.y)</span></code></pre></div>
<p>Und weil ich gerade dabei war, bekam diese Klasse auch noch eine Methode (<code>collide_rect()</code>) zur Kollisionskerkennung verpaßt. Zwar wird diese momentan nur von der Klasse <code>Missile()</code> (siehe weiter unten) aufgerufen, aber in einer späteren Version soll auch der Flieger erkennen, ob er mit einer Pizza (oder anderen Gegnern) kollidiert, und dann benötigt er diese Methode ebenfalls:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1">  <span class="kw" style="color: #003B4F;">def</span> collide_rect(<span class="va" style="color: #111111;">self</span>, other):</span>
<span id="cb2-2">    distance_x <span class="op" style="color: #5E5E5E;">=</span> (<span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">+</span> <span class="va" style="color: #111111;">self</span>.w<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span>) <span class="op" style="color: #5E5E5E;">-</span> (other.x <span class="op" style="color: #5E5E5E;">+</span> other.w<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb2-3">    distance_y <span class="op" style="color: #5E5E5E;">=</span> (<span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">+</span> <span class="va" style="color: #111111;">self</span>.h<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span>) <span class="op" style="color: #5E5E5E;">-</span> (other.y <span class="op" style="color: #5E5E5E;">+</span> other.h<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb2-4">    half_w <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.w<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">+</span> other.w<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb2-5">    half_h <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.h<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">+</span> other.h<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb2-6">    <span class="cf" style="color: #003B4F;">if</span> (<span class="bu" style="color: null;">abs</span>(distance_x) <span class="op" style="color: #5E5E5E;">&lt;</span> half_w):</span>
<span id="cb2-7">      <span class="cf" style="color: #003B4F;">if</span> (<span class="bu" style="color: null;">abs</span>(distance_y) <span class="op" style="color: #5E5E5E;">&lt;</span> half_h):</span>
<span id="cb2-8">        <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">True</span></span>
<span id="cb2-9">    <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">False</span></span></code></pre></div>
<p>Diese Methode und ihre Implementierung hatte ich schon im November 2019 für <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processingpy.html">Processing.py</a> und <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/p5js.html">P5.js</a> ausführlich <a href="http://blog.schockwellenreiter.de/2019/11/2019112002.html">vorgestellt</a> (im Anschluß an einen Beitrag zur <a href="http://blog.schockwellenreiter.de/2019/11/2019111103.html">Kollisionserkennung zweier Kreise</a>).</p>
<p>Ein Flieger, der Pizzas abschießen will, braucht natürlich Geschosse. Diese werden durch die Klasse <code>Missile()</code> repräsentiert:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;">class</span> Missile(Sprite):</span>
<span id="cb3-2">  </span>
<span id="cb3-3">  <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, _x, _y):</span>
<span id="cb3-4">    Sprite.<span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>)</span>
<span id="cb3-5">    <span class="va" style="color: #111111;">self</span>.img <span class="op" style="color: #5E5E5E;">=</span> loadImage(<span class="st" style="color: #20794D;">"missile.png"</span>)</span>
<span id="cb3-6">    <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">=</span> _x</span>
<span id="cb3-7">    <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">=</span> _y</span>
<span id="cb3-8">    <span class="va" style="color: #111111;">self</span>.w <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">19</span></span>
<span id="cb3-9">    <span class="va" style="color: #111111;">self</span>.h <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">7</span></span>
<span id="cb3-10">    <span class="va" style="color: #111111;">self</span>.speed <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb3-11">  </span>
<span id="cb3-12">  <span class="kw" style="color: #003B4F;">def</span> update(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb3-13">    <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">+=</span> <span class="va" style="color: #111111;">self</span>.speed</span>
<span id="cb3-14">    <span class="cf" style="color: #003B4F;">for</span> enemy <span class="kw" style="color: #003B4F;">in</span> enemies:</span>
<span id="cb3-15">      <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.collide_rect(enemy):</span>
<span id="cb3-16">        missiles.remove(<span class="va" style="color: #111111;">self</span>)</span>
<span id="cb3-17">        <span class="co" style="color: #5E5E5E;"># Enemy Explosion</span></span>
<span id="cb3-18">        e_x, e_y <span class="op" style="color: #5E5E5E;">=</span> enemy.x, enemy.y <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb3-19">        enemy.reset()</span>
<span id="cb3-20">        hit <span class="op" style="color: #5E5E5E;">=</span> Explosion(e_x, e_y)</span>
<span id="cb3-21">        hits.append(hit)</span>
<span id="cb3-22">    <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">&gt;=</span> width <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">20</span>:</span>
<span id="cb3-23">      missiles.remove(<span class="va" style="color: #111111;">self</span>)</span></code></pre></div>
<p>Diese Geschosse leben entweder so lange, bis sie rechts den Bildschirm verlassen oder auf eine Pizza treffen. Wenn solch ein Geschoß auf eine Pizza trifft, löst es eine Explosion aus. Diese besitzt natürlich eine eigene Klasse:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;">class</span> Explosion(Sprite):</span>
<span id="cb4-2">  </span>
<span id="cb4-3">  <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, _x, _y):</span>
<span id="cb4-4">    Sprite.<span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>)</span>
<span id="cb4-5">    <span class="va" style="color: #111111;">self</span>.img <span class="op" style="color: #5E5E5E;">=</span> loadImage(<span class="st" style="color: #20794D;">"explosion.png"</span>)</span>
<span id="cb4-6">    <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">=</span> _x</span>
<span id="cb4-7">    <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">=</span> _y</span>
<span id="cb4-8">    <span class="va" style="color: #111111;">self</span>.w <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">38</span></span>
<span id="cb4-9">    <span class="va" style="color: #111111;">self</span>.h <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">38</span></span>
<span id="cb4-10">    <span class="va" style="color: #111111;">self</span>.timer <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb4-11">    </span>
<span id="cb4-12">  <span class="kw" style="color: #003B4F;">def</span> update(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb4-13">    <span class="va" style="color: #111111;">self</span>.timer <span class="op" style="color: #5E5E5E;">-=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb4-14">    <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.timer <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb4-15">      hits.remove(<span class="va" style="color: #111111;">self</span>)</span></code></pre></div>
<p>Auch eine Explosion hat natürlich nur eine begrenzte Lebensdauer. Diese wird durch die Variable <code>timer</code> gesteuert, die von einem Startwert aus zurückgezählt wird. Wird der <code>timer</code> kleiner oder gleich Null, ist das Leben der Explosion beendet.</p>
<p>Die Instanzen der Klassen <code>Missile()</code> und <code>Explosion()</code> besitzen noch eine weitere Besonderheit. Sie werden nicht in der Hauptschleife des Programms initialisiert, sondern ein Geschoß wird von der Instanz der Klasse <code>Plane()</code> instanziert, wenn der Spieler die mittlere Maustaste drückt:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1">  <span class="kw" style="color: #003B4F;">def</span> fire(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb5-2">    <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.firecount <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb5-3">      missile <span class="op" style="color: #5E5E5E;">=</span> Missile(<span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">20</span>, <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">20</span>)</span>
<span id="cb5-4">      missiles.append(missile)</span>
<span id="cb5-5">      <span class="va" style="color: #111111;">self</span>.firecount <span class="op" style="color: #5E5E5E;">=</span> MAX_FIRECOUNT</span></code></pre></div>
<p>Um den Spieler am Dauerfeuer zu hindern, kann ein neues Geschoß erst dann wieder abgefeuert werden, wenn die Variable <code>firecount</code>, die nach jedem Schuß auf <code>MAX_FIRECOUNT</code>gesetzt und in jeder Programmschleife um Eins zurückgezählt wird, wieder kleiner oder gleich Null ist.</p>
<p>Und eine Explosion wird in dieser Version von der Klasse <code>Missile()</code> ausgelöst, wenn diese einen Gegner trifft<sup>1</sup>.</p>
<p><em>Last but not least</em> braucht ein Spiel natürlich Gegner. Diese werden durch die Klasse <code>Enemy()</code> repräsentiert, die beim derzeitigen Stand des Spiels nur pöse Pizzen erzeugt:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;">class</span> Enemy(Sprite):</span>
<span id="cb6-2">  </span>
<span id="cb6-3">  <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, _x, _y):</span>
<span id="cb6-4">    Sprite.<span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>)</span>
<span id="cb6-5">    <span class="va" style="color: #111111;">self</span>.img <span class="op" style="color: #5E5E5E;">=</span> loadImage(<span class="st" style="color: #20794D;">"pizza.png"</span>)</span>
<span id="cb6-6">    <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">=</span> _x</span>
<span id="cb6-7">    <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">=</span> _y</span>
<span id="cb6-8">    <span class="va" style="color: #111111;">self</span>.w <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">36</span></span>
<span id="cb6-9">    <span class="va" style="color: #111111;">self</span>.h <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">36</span></span>
<span id="cb6-10">    <span class="va" style="color: #111111;">self</span>.speed <span class="op" style="color: #5E5E5E;">=</span> randint(<span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">6</span>)</span>
<span id="cb6-11">    </span>
<span id="cb6-12">  <span class="kw" style="color: #003B4F;">def</span> reset(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb6-13">    <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">=</span> width <span class="op" style="color: #5E5E5E;">+</span> randint(<span class="dv" style="color: #AD0000;">30</span>, <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb6-14">    <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">=</span> randint(<span class="dv" style="color: #AD0000;">30</span>, height <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">30</span>)</span>
<span id="cb6-15">    <span class="va" style="color: #111111;">self</span>.speed <span class="op" style="color: #5E5E5E;">=</span> randint(<span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">6</span>)</span>
<span id="cb6-16">    </span>
<span id="cb6-17">  <span class="kw" style="color: #003B4F;">def</span> update(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb6-18">    <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">-=</span> <span class="va" style="color: #111111;">self</span>.speed</span>
<span id="cb6-19">    <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">30</span>:</span>
<span id="cb6-20">      <span class="va" style="color: #111111;">self</span>.reset()</span></code></pre></div>
<p>Die Klasse ist relativ einfach gehalten. Neu ist eigentlich nur die Methode <code>reset()</code>, die die Pizzas nach einem Abschuß oder nachdem sie den linken Bildschirmrand erreicht haben, wieder rechts außen auf eine zufällige Anfangsposition setzt.</p>
<p>Jetzt wie bei jeder neuen Lieferung der vollständige Programmcode, falls Ihr das Programm nachprogrammieren oder remixen wollt:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;">from</span> processing <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span>
<span id="cb7-2"><span class="im" style="color: #00769E;">from</span> random <span class="im" style="color: #00769E;">import</span> randint</span>
<span id="cb7-3"></span>
<span id="cb7-4">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">720</span>, <span class="dv" style="color: #AD0000;">520</span></span>
<span id="cb7-5">BG_WIDTH <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1664</span></span>
<span id="cb7-6">FPS <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">60</span></span>
<span id="cb7-7">ANIM <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">4</span>   <span class="co" style="color: #5E5E5E;"># Animation Cycle</span></span>
<span id="cb7-8">UPDOWN <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb7-9">MAX_FIRECOUNT <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">15</span></span>
<span id="cb7-10">NO_ENEMIES <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb7-11"></span>
<span id="cb7-12"><span class="co" style="color: #5E5E5E;">## Oberklasse für alles, was sich bewegt</span></span>
<span id="cb7-13"><span class="kw" style="color: #003B4F;">class</span> Sprite():</span>
<span id="cb7-14"></span>
<span id="cb7-15">  <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb7-16">    <span class="cf" style="color: #003B4F;">pass</span></span>
<span id="cb7-17"></span>
<span id="cb7-18">  <span class="kw" style="color: #003B4F;">def</span> display(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb7-19">    image(<span class="va" style="color: #111111;">self</span>.img, <span class="va" style="color: #111111;">self</span>.x, <span class="va" style="color: #111111;">self</span>.y)</span>
<span id="cb7-20">  </span>
<span id="cb7-21">  <span class="kw" style="color: #003B4F;">def</span> collide_rect(<span class="va" style="color: #111111;">self</span>, other):</span>
<span id="cb7-22">    distance_x <span class="op" style="color: #5E5E5E;">=</span> (<span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">+</span> <span class="va" style="color: #111111;">self</span>.w<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span>) <span class="op" style="color: #5E5E5E;">-</span> (other.x <span class="op" style="color: #5E5E5E;">+</span> other.w<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb7-23">    distance_y <span class="op" style="color: #5E5E5E;">=</span> (<span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">+</span> <span class="va" style="color: #111111;">self</span>.h<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span>) <span class="op" style="color: #5E5E5E;">-</span> (other.y <span class="op" style="color: #5E5E5E;">+</span> other.h<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb7-24">    half_w <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.w<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">+</span> other.w<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb7-25">    half_h <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.h<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">+</span> other.h<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb7-26">    <span class="cf" style="color: #003B4F;">if</span> (<span class="bu" style="color: null;">abs</span>(distance_x) <span class="op" style="color: #5E5E5E;">&lt;</span> half_w):</span>
<span id="cb7-27">      <span class="cf" style="color: #003B4F;">if</span> (<span class="bu" style="color: null;">abs</span>(distance_y) <span class="op" style="color: #5E5E5E;">&lt;</span> half_h):</span>
<span id="cb7-28">        <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">True</span></span>
<span id="cb7-29">    <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">False</span></span>
<span id="cb7-30"></span>
<span id="cb7-31"><span class="kw" style="color: #003B4F;">class</span> Background(Sprite):</span>
<span id="cb7-32">  </span>
<span id="cb7-33">  <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, _x, _y):</span>
<span id="cb7-34">    Sprite.<span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>)</span>
<span id="cb7-35">    <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">=</span> _x</span>
<span id="cb7-36">    <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">=</span> _y</span>
<span id="cb7-37">    <span class="va" style="color: #111111;">self</span>.start_x <span class="op" style="color: #5E5E5E;">=</span> _x</span>
<span id="cb7-38">    <span class="va" style="color: #111111;">self</span>.img <span class="op" style="color: #5E5E5E;">=</span> loadImage(<span class="st" style="color: #20794D;">"desert.png"</span>)</span>
<span id="cb7-39">    </span>
<span id="cb7-40">  <span class="kw" style="color: #003B4F;">def</span> update(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb7-41">    <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">-=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb7-42">    <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="op" style="color: #5E5E5E;">-</span>BG_WIDTH:</span>
<span id="cb7-43">      <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">=</span> BG_WIDTH</span>
<span id="cb7-44">  </span>
<span id="cb7-45"></span>
<span id="cb7-46"><span class="kw" style="color: #003B4F;">class</span> Missile(Sprite):</span>
<span id="cb7-47">  </span>
<span id="cb7-48">  <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, _x, _y):</span>
<span id="cb7-49">    Sprite.<span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>)</span>
<span id="cb7-50">    <span class="va" style="color: #111111;">self</span>.img <span class="op" style="color: #5E5E5E;">=</span> loadImage(<span class="st" style="color: #20794D;">"missile.png"</span>)</span>
<span id="cb7-51">    <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">=</span> _x</span>
<span id="cb7-52">    <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">=</span> _y</span>
<span id="cb7-53">    <span class="va" style="color: #111111;">self</span>.w <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">19</span></span>
<span id="cb7-54">    <span class="va" style="color: #111111;">self</span>.h <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">7</span></span>
<span id="cb7-55">    <span class="va" style="color: #111111;">self</span>.speed <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb7-56">  </span>
<span id="cb7-57">  <span class="kw" style="color: #003B4F;">def</span> update(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb7-58">    <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">+=</span> <span class="va" style="color: #111111;">self</span>.speed</span>
<span id="cb7-59">    <span class="cf" style="color: #003B4F;">for</span> enemy <span class="kw" style="color: #003B4F;">in</span> enemies:</span>
<span id="cb7-60">      <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.collide_rect(enemy):</span>
<span id="cb7-61">        missiles.remove(<span class="va" style="color: #111111;">self</span>)</span>
<span id="cb7-62">        <span class="co" style="color: #5E5E5E;"># Enemy Explosion</span></span>
<span id="cb7-63">        e_x, e_y <span class="op" style="color: #5E5E5E;">=</span> enemy.x, enemy.y <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb7-64">        enemy.reset()</span>
<span id="cb7-65">        hit <span class="op" style="color: #5E5E5E;">=</span> Explosion(e_x, e_y)</span>
<span id="cb7-66">        hits.append(hit)</span>
<span id="cb7-67">    <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">&gt;=</span> width <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">20</span>:</span>
<span id="cb7-68">      missiles.remove(<span class="va" style="color: #111111;">self</span>)</span>
<span id="cb7-69"></span>
<span id="cb7-70"><span class="kw" style="color: #003B4F;">class</span> Explosion(Sprite):</span>
<span id="cb7-71">  </span>
<span id="cb7-72">  <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, _x, _y):</span>
<span id="cb7-73">    Sprite.<span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>)</span>
<span id="cb7-74">    <span class="va" style="color: #111111;">self</span>.img <span class="op" style="color: #5E5E5E;">=</span> loadImage(<span class="st" style="color: #20794D;">"explosion.png"</span>)</span>
<span id="cb7-75">    <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">=</span> _x</span>
<span id="cb7-76">    <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">=</span> _y</span>
<span id="cb7-77">    <span class="va" style="color: #111111;">self</span>.w <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">38</span></span>
<span id="cb7-78">    <span class="va" style="color: #111111;">self</span>.h <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">38</span></span>
<span id="cb7-79">    <span class="va" style="color: #111111;">self</span>.timer <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb7-80">    </span>
<span id="cb7-81">  <span class="kw" style="color: #003B4F;">def</span> update(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb7-82">    <span class="va" style="color: #111111;">self</span>.timer <span class="op" style="color: #5E5E5E;">-=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb7-83">    <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.timer <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb7-84">      hits.remove(<span class="va" style="color: #111111;">self</span>)</span>
<span id="cb7-85">  </span>
<span id="cb7-86"><span class="kw" style="color: #003B4F;">class</span> Plane(Sprite):</span>
<span id="cb7-87">  </span>
<span id="cb7-88">  <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb7-89">    Sprite.<span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>)</span>
<span id="cb7-90">    <span class="va" style="color: #111111;">self</span>.images <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb7-91">    <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">2</span>):</span>
<span id="cb7-92">      img <span class="op" style="color: #5E5E5E;">=</span> loadImage(<span class="st" style="color: #20794D;">"planegreen_"</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="bu" style="color: null;">str</span>(i) <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">".png"</span>)</span>
<span id="cb7-93">      <span class="va" style="color: #111111;">self</span>.images.append(img)</span>
<span id="cb7-94">    <span class="va" style="color: #111111;">self</span>.img <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.images[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb7-95">    <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">75</span></span>
<span id="cb7-96">    <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">240</span></span>
<span id="cb7-97">    <span class="va" style="color: #111111;">self</span>.w <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">44</span></span>
<span id="cb7-98">    <span class="va" style="color: #111111;">self</span>.h <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">30</span></span>
<span id="cb7-99">    <span class="va" style="color: #111111;">self</span>.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"NONE"</span></span>
<span id="cb7-100">    <span class="va" style="color: #111111;">self</span>.frame <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb7-101">    <span class="va" style="color: #111111;">self</span>.ani <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">20</span></span>
<span id="cb7-102">    <span class="va" style="color: #111111;">self</span>.firecount <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb7-103">  </span>
<span id="cb7-104">  <span class="kw" style="color: #003B4F;">def</span> update(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb7-105">    <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"NONE"</span>:</span>
<span id="cb7-106">      <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb7-107">    <span class="cf" style="color: #003B4F;">elif</span> <span class="va" style="color: #111111;">self</span>.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"UP"</span>:</span>
<span id="cb7-108">      <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">20</span>:</span>
<span id="cb7-109">        <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">-=</span> UPDOWN</span>
<span id="cb7-110">    <span class="cf" style="color: #003B4F;">elif</span> <span class="va" style="color: #111111;">self</span>.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"DOWN"</span>:</span>
<span id="cb7-111">      <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">&lt;</span> height <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">20</span>:</span>
<span id="cb7-112">        <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">+=</span> UPDOWN</span>
<span id="cb7-113">    <span class="va" style="color: #111111;">self</span>.ani <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb7-114">    <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.ani <span class="op" style="color: #5E5E5E;">&gt;=</span> ANIM:</span>
<span id="cb7-115">      <span class="va" style="color: #111111;">self</span>.ani <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb7-116">      <span class="va" style="color: #111111;">self</span>.frame <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb7-117">      <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.frame <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">1</span>:</span>
<span id="cb7-118">        <span class="va" style="color: #111111;">self</span>.frame <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb7-119">    <span class="va" style="color: #111111;">self</span>.firecount <span class="op" style="color: #5E5E5E;">-=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb7-120">    <span class="va" style="color: #111111;">self</span>.img <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.images[<span class="va" style="color: #111111;">self</span>.frame]</span>
<span id="cb7-121">      </span>
<span id="cb7-122">  <span class="kw" style="color: #003B4F;">def</span> fire(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb7-123">    <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.firecount <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb7-124">      missile <span class="op" style="color: #5E5E5E;">=</span> Missile(<span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">20</span>, <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">20</span>)</span>
<span id="cb7-125">      missiles.append(missile)</span>
<span id="cb7-126">      <span class="va" style="color: #111111;">self</span>.firecount <span class="op" style="color: #5E5E5E;">=</span> MAX_FIRECOUNT</span>
<span id="cb7-127"></span>
<span id="cb7-128"><span class="kw" style="color: #003B4F;">class</span> Enemy(Sprite):</span>
<span id="cb7-129">  </span>
<span id="cb7-130">  <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, _x, _y):</span>
<span id="cb7-131">    Sprite.<span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>)</span>
<span id="cb7-132">    <span class="va" style="color: #111111;">self</span>.img <span class="op" style="color: #5E5E5E;">=</span> loadImage(<span class="st" style="color: #20794D;">"pizza.png"</span>)</span>
<span id="cb7-133">    <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">=</span> _x</span>
<span id="cb7-134">    <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">=</span> _y</span>
<span id="cb7-135">    <span class="va" style="color: #111111;">self</span>.w <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">36</span></span>
<span id="cb7-136">    <span class="va" style="color: #111111;">self</span>.h <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">36</span></span>
<span id="cb7-137">    <span class="va" style="color: #111111;">self</span>.speed <span class="op" style="color: #5E5E5E;">=</span> randint(<span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">6</span>)</span>
<span id="cb7-138">    </span>
<span id="cb7-139">  <span class="kw" style="color: #003B4F;">def</span> reset(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb7-140">    <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">=</span> width <span class="op" style="color: #5E5E5E;">+</span> randint(<span class="dv" style="color: #AD0000;">30</span>, <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb7-141">    <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">=</span> randint(<span class="dv" style="color: #AD0000;">30</span>, height <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">30</span>)</span>
<span id="cb7-142">    <span class="va" style="color: #111111;">self</span>.speed <span class="op" style="color: #5E5E5E;">=</span> randint(<span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">6</span>)</span>
<span id="cb7-143">    </span>
<span id="cb7-144">  <span class="kw" style="color: #003B4F;">def</span> update(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb7-145">    <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">-=</span> <span class="va" style="color: #111111;">self</span>.speed</span>
<span id="cb7-146">    <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">30</span>:</span>
<span id="cb7-147">      <span class="va" style="color: #111111;">self</span>.reset()</span>
<span id="cb7-148">    </span>
<span id="cb7-149"><span class="co" style="color: #5E5E5E;"># Listen</span></span>
<span id="cb7-150">backs <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb7-151">missiles <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb7-152">hits <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb7-153">enemies <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb7-154">    </span>
<span id="cb7-155"><span class="kw" style="color: #003B4F;">def</span> setup():</span>
<span id="cb7-156">  <span class="kw" style="color: #003B4F;">global</span> plane</span>
<span id="cb7-157">  size(WIDTH, HEIGHT)</span>
<span id="cb7-158">  frameRate(FPS)</span>
<span id="cb7-159">  <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"🍕 Pizza Plane Stage 3 🍕"</span>)</span>
<span id="cb7-160">  <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Linke Maustaste: Flieger fliegt nach oben."</span>)</span>
<span id="cb7-161">  <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Rechte Maustaste: Flieger fliegt nach unten."</span>)</span>
<span id="cb7-162">  <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Mittlere Maustaste: Feuern!"</span>)</span>
<span id="cb7-163">  <span class="co" style="color: #5E5E5E;"># Hintergrund</span></span>
<span id="cb7-164">  back1 <span class="op" style="color: #5E5E5E;">=</span> Background(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb7-165">  back2 <span class="op" style="color: #5E5E5E;">=</span> Background(BG_WIDTH, <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb7-166">  backs.append(back1)</span>
<span id="cb7-167">  backs.append(back2)</span>
<span id="cb7-168">  <span class="co" style="color: #5E5E5E;"># Den Flieger initialisieren</span></span>
<span id="cb7-169">  plane <span class="op" style="color: #5E5E5E;">=</span> Plane()</span>
<span id="cb7-170">  <span class="co" style="color: #5E5E5E;"># Die Gegner (Pizzas)</span></span>
<span id="cb7-171">  <span class="cf" style="color: #003B4F;">for</span> _ <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(NO_ENEMIES):</span>
<span id="cb7-172">    pizza <span class="op" style="color: #5E5E5E;">=</span> Enemy(width <span class="op" style="color: #5E5E5E;">+</span> randint(<span class="dv" style="color: #AD0000;">30</span>, <span class="dv" style="color: #AD0000;">100</span>), randint(<span class="dv" style="color: #AD0000;">30</span>, height <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">30</span>))</span>
<span id="cb7-173">    enemies.append(pizza)</span>
<span id="cb7-174">  </span>
<span id="cb7-175"><span class="kw" style="color: #003B4F;">def</span> draw():</span>
<span id="cb7-176">  background(<span class="dv" style="color: #AD0000;">231</span>, <span class="dv" style="color: #AD0000;">229</span>, <span class="dv" style="color: #AD0000;">226</span>)   <span class="co" style="color: #5E5E5E;"># Wüstenhimmel</span></span>
<span id="cb7-177">  <span class="cf" style="color: #003B4F;">for</span> back <span class="kw" style="color: #003B4F;">in</span> backs:</span>
<span id="cb7-178">    back.update()</span>
<span id="cb7-179">    back.display()</span>
<span id="cb7-180">  plane.update()</span>
<span id="cb7-181">  plane.display()</span>
<span id="cb7-182">  <span class="cf" style="color: #003B4F;">for</span> missile <span class="kw" style="color: #003B4F;">in</span> missiles:</span>
<span id="cb7-183">    missile.update()</span>
<span id="cb7-184">    missile.display()</span>
<span id="cb7-185">  <span class="cf" style="color: #003B4F;">for</span> enemy <span class="kw" style="color: #003B4F;">in</span> enemies:</span>
<span id="cb7-186">    enemy.update()</span>
<span id="cb7-187">    enemy.display()</span>
<span id="cb7-188">  <span class="cf" style="color: #003B4F;">for</span> hit <span class="kw" style="color: #003B4F;">in</span> hits:</span>
<span id="cb7-189">    hit.update()</span>
<span id="cb7-190">    hit.display()</span>
<span id="cb7-191">  </span>
<span id="cb7-192"><span class="kw" style="color: #003B4F;">def</span> mousePressed():</span>
<span id="cb7-193">  <span class="cf" style="color: #003B4F;">if</span> mouseButton <span class="op" style="color: #5E5E5E;">==</span> LEFT:</span>
<span id="cb7-194">    plane.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"UP"</span></span>
<span id="cb7-195">  <span class="cf" style="color: #003B4F;">elif</span> mouseButton <span class="op" style="color: #5E5E5E;">==</span> RIGHT:</span>
<span id="cb7-196">    plane.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"DOWN"</span></span>
<span id="cb7-197">  <span class="cf" style="color: #003B4F;">elif</span> mouseButton <span class="op" style="color: #5E5E5E;">==</span> CENTER:</span>
<span id="cb7-198">    plane.fire()</span>
<span id="cb7-199"></span>
<span id="cb7-200"><span class="kw" style="color: #003B4F;">def</span> mouseReleased():</span>
<span id="cb7-201">  plane.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"NONE"</span></span>
<span id="cb7-202"></span>
<span id="cb7-203">run()</span></code></pre></div>
<p>Mit etwa zweihundert Zeilen ist das Programm, das nun in einer spielbaren Version vorliegt, immer noch recht kompakt. Den <a href="https://github.com/kantel/trinket/tree/main/pizzaplane/stage3">Quellcode und die Assets</a> gibt es einmal auch in meinem GitHub-Repositorium und dann natürlich auch <a href="https://trinket.io/python/3ae6ef087c">als Trinket</a> – das macht einen Remix noch einfacher.</p>
<p>Und natürlich darf und will ich die <em>Credits</em> nicht vergessen: Das <a href="https://opengameart.org/content/seamless-desert-background-in-parts">Hintergrundbild</a> stammt vom User »<a href="https://opengameart.org/users/pwl">PWL</a>«, der es auf OpenGameArt.org zur freien Vewendung (<a href="http://creativecommons.org/publicdomain/zero/1.0/">CC0</a>) hochgeladen hat. Den <a href="https://opengameart.org/content/free-plane-sprite">grünen Flieger</a> von »<a href="https://opengameart.org/users/pzuh">pzUH</a>« gibt es als <a href="http://creativecommons.org/publicdomain/zero/1.0/">Public Domain</a> ebenfalls auf OpenGameArt.org. Und das Bild der Pizzas, der Geschosse und der Explosion habe ich den freien (<a href="https://creativecommons.org/licenses/by/4.0/">CC-BY 4.0</a>) <a href="https://twemoji.twitter.com/">Twemojis von Twitter</a> entnommen und mit der <a href="https://de.wikipedia.org/wiki/GraphicConverter">Bildverarbeitung meines Vertrauens</a> ein wenig auf Vordermann gebracht.</p>
<p>Das Programm ist noch nicht komplett. Auf jeden Fall will ich noch eine Kollision der Pizzas mit dem Spieler implementieren, bei der der Spieler Lebenspunkte verliert. Dann möchte ich noch eine Anzeige des Punktestands implementieren. Hierfür muß ich aber erst noch herausbekommen, wie man in Trinket Fonts als Assets installiert. <em>Still digging!</em></p>
<section id="die-bisherigen-beiträge-zu-dem-kleinen-grünen-flieger-im-schockwellenreiter" class="level3">
<h3 class="anchored" data-anchor-id="die-bisherigen-beiträge-zu-dem-kleinen-grünen-flieger-im-schockwellenreiter">Die bisherigen Beiträge zu dem kleinen, grünen Flieger im <em>Schockwellenreiter</em>:</h3>
<section id="als-pygame-projekt" class="level4">
<h4 class="anchored" data-anchor-id="als-pygame-projekt">1. Als Pygame-Projekt:</h4>
<ol type="1">
<li>Auf ein neues: <a href="https://kantel.github.io/posts/20221222501_pizzaplane1_pygame/">Pizzaplane in Pygame</a> (Stage 1)</li>
<li><a href="https://kantel.github.io/posts/20221222601_pizzaplane2_pygame/">Jetzt mit Killer-Pizzas</a>: Pizzaplane in Pygame (Stage 2)</li>
<li>Pizzaplane Stage 3: <a href="https://kantel.github.io/posts/2022123101_pizzaplane3/">Jetzt mit Punktestand</a>!</li>
<li>Pizzaplane Stage 4 – <a href="https://kantel.github.io/posts/2023010102_pizzaplane4/">jetzt mit grünem Spieler</a></li>
</ol>
</section>
<section id="exkurse-immer-noch-pygame" class="level4">
<h4 class="anchored" data-anchor-id="exkurse-immer-noch-pygame">2. Exkurse (immer noch Pygame)</h4>
<ol start="5" type="1">
<li>Exkurs 1: <a href="https://kantel.github.io/posts/2023010701_pygame_oop/">Pygame objektorientiert</a></li>
<li>Exkurs 2: <a href="https://kantel.github.io/posts/2023011001_pizzaplane_trailer/">Pizza Plane Trailer</a> – ebenfalls objektorientiert</li>
</ol>
</section>
<section id="und-nun-als-trinket-mit-einer-processing-python-variante" class="level4">
<h4 class="anchored" data-anchor-id="und-nun-als-trinket-mit-einer-processing-python-variante">3. Und nun als Trinket (mit einer Processing (Python) Variante)</h4>
<ol start="7" type="1">
<li><a href="https://kantel.github.io/posts/2023032301_pizza_plane_oop_trinket_stage_1/">Pizza Plane OOP</a> (Jetzt in Trinket)</li>
<li>Weiter mit dem kleinen, grünen Flieger auf Trinket: Jetzt mit Pizzas</li>
</ol>
<p>Wird fortgesetzt …</p>


</section>
</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Fußnoten</h2>

<ol>
<li id="fn1"><p>In einer späteren Variante können Explosionen zum Beispiel auch von den Gegnern (Pizzas) ausgelöst werden, wenn diese mit dem Spieler kollidieren.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Python</category>
  <category>Processing</category>
  <category>Spieleprogrammierung</category>
  <category>Trinket</category>
  <guid>https://kantel.github.io/posts/2023032602_pizza_plane_with_pizzas/index.html</guid>
  <pubDate>Sun, 26 Mar 2023 17:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023032602_pizza_plane_with_pizzas/images/pizzaplanestage3.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Zeitumstellung: Summertime</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023032601_zeitumstellung/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52770341521/"><img src="https://kantel.github.io/posts/2023032601_zeitumstellung/images/juliusstrasseregen-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Guten Morgen! Habt Ihr auch alle brav Eure Uhren <del>vor</del> <del>zurück</del> umgestellt? Zweimal im Jahr das gleiche, gesundheitsschädliche Ritual: Die Umstellung auf die euphemistisch so genannte »Sommerzeit« im Frühjahr (in dem uns eine Stunde Schlaf geklaut wird – der Jetlag des kleinen Mannes) und dann im Herbst wieder zurück auf die »Normalzeit« (in weiten Teilen Europas ist das die Mitteleuropäische Zeit – MEZ).</p>
<p>Der Sinn dieser Maßnahme ist gelinde gesagt mehr als zweifelhaft. Denn die erhoffte Energieeinsparung tritt nicht ein – was abends an Licht gespart wird, wird morgens an Heizung wieder verpulvert. Daher hat die Europäische Union nach einer 2018 mit viel Tam-Tam durchgeführten Bürgerbefragung (die großen Volksparteien wollten bei der Europawahl 2019 wiedergewählt werden) versprochen, diese ungeliebte Umstellung spätestens 2021 abzuschaffen.</p>
<p>Jetzt haben wir 2023 und passiert ist nichts. Und es wird auch in den nächsten Jahren nichts passieren. Denn die EU-Politikerinnen und -Politier üben sich in dem, was sie am Besten können: In Bedenkenträgerei und Uneinigkeit. So bricht angeblich die gesamte europäische Wirtschaft und Infrastruktur zusammen, wenn in Europa wieder unterschiedliche Zeitzonen existieren. Klar doch, die Bevölkerung der USA nagt am Hungertuch, weil das Land in vier Zeitzonen aufgeteilt ist (sechs, wenn man Alaska und Hawaii hinzunimmt). Und in diesen Zeitzonen gibt es Staaten mit Sommerzeit und Staaten ohne. Da muß ein Land ja im Chaos versinken.</p>
<p>Im Ernst: Wenn die EU nicht einmal in der Lage ist, solch ein kleines Problem wie die Abschaffung der Zeitumstellung in den Griff zu bekommen, wie soll sie dann mit wirklichen Problemen wie zum Beispiel die Klimakrise fertig werden? Sie kann ja nicht einmal die Probleme lösen, die ohne die EU gar nicht erst existieren würden.</p>
<p>Und noch etwas zum Abschluß: Die beste Eselsbrücke für die Frage, wann die Uhr vor- oder zurückgestellt wird, fand ich auf Fratzenbuch: Zweimal im Jahr stellt der Hipster seine Uhr um: Im Frühjahr vor die Stube in den Flur und im Herbst wieder zurück. <em>(Photo (<a href="http://creativecommons.org/licenses/by-nc-nd/2.0/">cc</a>): <a href="http://cognitiones.kantel-chaos-team.de/cv.html">Jörg Kantel</a>)</em></p>



 ]]></description>
  <category>Politik</category>
  <guid>https://kantel.github.io/posts/2023032601_zeitumstellung/index.html</guid>
  <pubDate>Sun, 26 Mar 2023 15:20:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023032601_zeitumstellung/images/juliusstrasseregen.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
