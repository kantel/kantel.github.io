<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Der Schockwellenreiter</title>
<link>https://kantel.github.io/</link>
<atom:link href="https://kantel.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description>Schockwellenreiter</description>
<generator>quarto-1.5.47</generator>
<lastBuildDate>Mon, 08 Sep 2025 19:50:00 GMT</lastBuildDate>
<item>
  <title>Animierte GIFs in Proceso</title>
  <dc:creator>JÃ¶rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025090801_anim_gif_proceso/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54774654379/"><img src="https://kantel.github.io/posts/2025090801_anim_gif_proceso/images/animgif-b.jpg" class="img-fluid"></a></p>
<p>Gestern abend stolperte ich Ã¼ber <a href="https://www.youtube.com/watch?v=YGBi4lR0swY">dieses Video</a>, in dem der User <em><a href="https://www.kennyyipcoding.com/">Kenney Yip Coding</a></em> ein Entenjagdspiel in <em>pure JavaScript</em> und dem HTML Canvas programmierte. Das ist an sich noch nichts Besonderes, aber die Bilder der Enten, die er verwendete, waren animierte GIFs, und da stellte sich mir die Frage, ob das nicht auch in Python ginge. Die kurze Antwort ist: <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/py5.html">Py5</a> kann mit den animierten GIFs nichts anfangen, aber <a href="https://proceso.cc/">Proceso</a>, die <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/pyscript.html">PyScript</a>-Version von <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processing.html">Processing</a> und Python, kann es.</p>
<p>FÃ¼r meine Versuche habe ich mir die Entenbildchen und das Hintergrundbild aus dem <a href="https://github.com/ImKennyYip/duck-hunt">GitHub-Repositorium von <em>KennyYip</em></a> Â»ausgeborgtÂ« und daraus ein kleines Skriptchen gebastelt, das zwei kleine Enten ziellos Ã¼ber den Monitor flattern lÃ¤sst:</p>
<iframe src="giftest/index.html" width="100%" height="338">
</iframe>
<p>Wenn Ihr mit der Maus in das Fenster klickt, wird das Skript zurÃ¼ckgesetzt, soviel InteraktivitÃ¤t muÃŸ sein.&nbsp;ðŸ˜Ž</p>
<p>Proceso, wie auch <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/p5js.html">P5.js</a>, behandelt animierte GIFs wie jedes andere Bild auch, so daÃŸ es in dem Skript eigentlich nichts neues zu entdecken gibt:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> proceso <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Sketch</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> randint</span>
<span id="cb1-3"></span>
<span id="cb1-4">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">640</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">338</span></span>
<span id="cb1-5">DUCK_W, DUCK_H <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">78</span></span>
<span id="cb1-6">START_X, START_Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span></span>
<span id="cb1-7">BOTTOM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span></span>
<span id="cb1-8"></span>
<span id="cb1-9">p5 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Sketch()</span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> preload():</span>
<span id="cb1-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">global</span> bg, duck_r, duck_l</span>
<span id="cb1-13">    bg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.load_image(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data/duckhunt-bg.png"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the images</span></span>
<span id="cb1-14">    duck_r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.load_image(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data/duck-right.gif"</span>)</span>
<span id="cb1-15">    duck_l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.load_image(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data/duck-left.gif"</span>)</span>
<span id="cb1-16"></span>
<span id="cb1-17">ducks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb1-18"></span>
<span id="cb1-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> setup():</span>
<span id="cb1-20">    p5.create_canvas(WIDTH, HEIGHT)</span>
<span id="cb1-21">    reset()</span>
<span id="cb1-22"></span>
<span id="cb1-23"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> reset():</span>
<span id="cb1-24">    ducks.append(Duck(randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, p5.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, BOTTOM), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"right"</span>))</span>
<span id="cb1-25">    ducks.append(Duck(randint(p5.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, p5.width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> DUCK_W), randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, BOTTOM), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span>))</span>
<span id="cb1-26">    </span>
<span id="cb1-27"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw():</span>
<span id="cb1-28">    p5.image(bg, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> duck <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ducks:</span>
<span id="cb1-30">        duck.update()</span>
<span id="cb1-31">        duck.display()</span>
<span id="cb1-32"></span>
<span id="cb1-33"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> mouse_clicked():</span>
<span id="cb1-34">    ducks.clear()</span>
<span id="cb1-35">    reset()</span>
<span id="cb1-36">    </span>
<span id="cb1-37"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Duck():</span>
<span id="cb1-38"></span>
<span id="cb1-39">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, _x, _y, _dir):</span>
<span id="cb1-40">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.Vector(_x, _y)</span>
<span id="cb1-41">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.Vector(randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), randint(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb1-42">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> _dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span>:</span>
<span id="cb1-43">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> duck_l</span>
<span id="cb1-44">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-45">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-46">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> duck_r</span>
<span id="cb1-47"></span>
<span id="cb1-48">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-49">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel</span>
<span id="cb1-50">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.check_borders()</span>
<span id="cb1-51"></span>
<span id="cb1-52">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> check_borders(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-53">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pos.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> p5.width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> DUCK_W:</span>
<span id="cb1-54">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-55">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> duck_l</span>
<span id="cb1-56">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pos.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb1-57">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-58">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> duck_r</span>
<span id="cb1-59">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pos.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pos.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> BOTTOM:</span>
<span id="cb1-60">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-61"></span>
<span id="cb1-62">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> display(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-63">        p5.image(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.img, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pos.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pos.y, DUCK_W, DUCK_H)</span>
<span id="cb1-64">        </span>
<span id="cb1-65">p5.run_sketch(preload<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>preload, setup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>setup, draw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>draw, mouse_clicked<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mouse_clicked)</span></code></pre></div>
<p>Die von P5.js bekannte <code>preload()</code>-Funktion lÃ¤dt die Bilder vor, so daÃŸ sie geladen sind, bevor <code>setup()</code> das eigentliche Skript startet.</p>
<p>Die Enten habe ich in die Klasse <code>Duck()</code> ausgelagert, wo ihre Position und ihr Geschwindigkeit <em>(Velocity)</em> durch Vektoren reprÃ¤sentiert wird. Daher ruft die <code>draw()</code>-Funktion im Hauptprogramm eigentlich nur noch die Methoden <code>update()</code> und <code>display()</code> fÃ¼r die einzelnen Enten auf.</p>
<p>Ich bin mir nicht sicher, ob die Nutzung animierter GIFs in Spielen wirklich ein Fortschritt ist, Spielefiguren lassen sich in einer Einzelanimation <em>(Frame bei Frame)</em> meiner Meinung nach viel lebendiger gestalten. Aber Â»weil es gehtÂ« muÃŸte schon so oft als BegrÃ¼ndung herhalten und hier habe ich eben gezeigt, daÃŸ es geht.</p>
<p>Wie immer gibt es den <a href="https://github.com/kantel/pythoncuriosa/tree/main/pyscript/proseco/giftest">Quellcode und die Assets</a> nicht nur in meinem GitHub-Repositorium, sondern ich habe das Projekt auch auf meine PyScript-Seiten <a href="https://kantel.pyscriptapps.com/proceso-gif-test/">hochgeladen</a>, wo Ihr es klonen und fÃ¼r eigene Experimente weiterentwickeln kÃ¶nnt.</p>



 ]]></description>
  <category>Proceso</category>
  <category>Python</category>
  <category>PyScript</category>
  <category>Processing</category>
  <category>Creative Coding</category>
  <category>Spieleprogrammierung</category>
  <guid>https://kantel.github.io/posts/2025090801_anim_gif_proceso/</guid>
  <pubDate>Mon, 08 Sep 2025 19:50:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025090801_anim_gif_proceso/images/animgif.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Herbst-Update: Py5 Release 0.10.7a0 freigegeben</title>
  <dc:creator>JÃ¶rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025090701_py5_0_10_7a0/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54770609862/"><img src="https://kantel.github.io/posts/2025090701_py5_0_10_7a0/images/rabbitpython-b.jpg" class="img-fluid"></a></p>
<p>Das erste (fÃ¼r mich) wichtige Update in diesem Herbst: Letzte Woche verkÃ¼ndete <em>James Schmitz</em> stolz, daÃŸ er das <a href="https://ixora.io/blog/new-release-0107a0/">Release 0.10.7a0</a> von <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/py5.html">Py5</a>, dem <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processing.html">Processing</a>-Python3-Modul, das Processings Original-Bibliotheken (via JPype) nutzt, freigegeben habe, das auf dem jÃ¼ngsten <a href="https://github.com/processing/processing4/releases/tag/processing-1306-4.4.6">Processing-Release 4.4.6</a> beruhe.</p>
<p>Neben einigen Bugfixes ist das einzige neue Feature, daÃŸ das Py5Image-Objekt nun ebenfalls eine <code>resize()</code>-Methode besitzt. Processings PImage-Objekt besaÃŸ schon jeher eine <code>PImage.resize()</code>-Methode, die es bisher aber nicht nach Py5 geschafft hatte. StandardmÃ¤ÃŸig verwendet diese Methode eine bilineare Interpolation fÃ¼r die Bildumrechnung, unterstÃ¼tzt aber auch die Methoden Â»Nearest NeighborÂ« und Â»BicubicÂ«. Weitere Informationen findet Ihr in der <a href="https://py5coding.org/reference/py5image_resize.html">Dokumentation zu <code>Py5Image.resize()</code></a>.</p>
<p>ZusÃ¤tzlich wurde an der Geschwindigkeit des Ãœbersetzters geschraubt.</p>
<p>Da ich in der Regel Py5 mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/jupyterlabdesktop.html">JypterLab-Desktop</a> oder <a href="https://www.jetbrains.com/de-de/pycharm/">PyCharm CE</a> in einer <a href="https://kantel.github.io/posts/2024062801_conda_env_python/">eigenen, virtuellen Py5-Umgebung</a> nutze, war das Update mit</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> activate py5</span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--upgrade</span> py5 py5jupyter</span></code></pre></div>
<p>recht einfach und verlief schnell und problemlos. Dabei wurden gleichzeitig auch noch JPype&nbsp;1.6.0 mitinstalliert. Da ich aber weiÃŸ, daÃŸ der Freund aus Bremen, dem ich so <a href="https://kantel.github.io/posts/2025071601_fraktale_xxl/">viele schÃ¶ne BÃ¼cher zu Fraktalen</a> verdanke, gerne mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/thonny.html">Thonny</a> spielt, habe ich auch dieses Ã¼ber das MenÃ¼ <code>Werkzeuge -&gt; Verwalte Plugins</code> auf die neue Py5-Version aktualisiert. Sicherheitshalber habe ich mir Ã¼ber das gleiche MenÃ¼ auch noch bestÃ¤tigen lassen, daÃŸ der von mir verwendete <a href="https://github.com/tabreturn/thonny-py5mode">thonny-py5mode</a> in der <a href="https://kantel.github.io/posts/2024111401_py5_updates/">Version 0.4.7a0</a> immer noch aktuell ist. Hier ist also fÃ¼r Thonny-Nutzer kein zusÃ¤tzliches Update nÃ¶tig. (Das wird <em>Kalle</em> freuen!)</p>
<p>Nun stehen neue Experimente mit Py5 an. Insbesondere will ich testen, welche Code-Ã„nderungen notwendig sind, wenn ich Py5-Skripte nach <a href="https://proceso.cc/">Proceso</a>, der <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/pyscript.html">PyScript</a>-Version von Processing und Python, portiere (oder <em>vice versa</em>). Ich kÃ¶nnte ja erst einmal mit <a href="https://kantel.github.io/posts/2025072101_partikel_proceso/">diesem Partikelsystem</a> anfangen. <em>Still digging!</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54770609862/">Kaninchen und Schlange</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: Â»<em>Colored Franco-Belgian comic style. Illustration of a green python wearing glasses and a white rabbit in a blue vest and with a large pocket watch are standing in front of a whiteboard in an autumnal magical garden with giant mushrooms. The whiteboard is covered with strange drawings, which the python is pointing at with a stick.</em>Â«. Modell: Flux Kontext.</p>



 ]]></description>
  <category>Py5</category>
  <category>Python</category>
  <category>Creative Coding</category>
  <category>JupyterLab Desktop</category>
  <category>PyCharm</category>
  <category>Thonny</category>
  <category>Proceso</category>
  <category>PyScript</category>
  <guid>https://kantel.github.io/posts/2025090701_py5_0_10_7a0/</guid>
  <pubDate>Sun, 07 Sep 2025 16:50:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025090701_py5_0_10_7a0/images/rabbitpython.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Die letzten Zahlen fÃ¼r diesen Sommer</title>
  <dc:creator>JÃ¶rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025090101_mediadaten/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54758908363/"><img src="https://kantel.github.io/posts/2025090101_mediadaten/images/dachs-b.jpg" class="img-fluid"></a></p>
<p>Mit dem scheidenden August wird sich langsam fÃ¼r dieses Jahr auch der Sommer verabschieden und einem (hoffentlich!) goldenen Herbst Platz machen. Auf jeden Fall ist es Zeit fÃ¼r die Daten des Vormonats, die manches Mal hochtrabend auch <em>Mediadaten</em> genannt werden: Im August 2025 hatte der <em>Schockwellenreiter</em> laut seinem nicht wirklich immer zuverlÃ¤ssigen, aber dafÃ¼r (noch einmal: hoffentlich!) datenschutzkonformen <del>GeiÃŸenpeter</del> <a href="https://www.goatcounter.com/">Neugiertool</a> <strong>5.827 Seitenaufrufe</strong>. Wie immer tÃ¤uscht die Exaktheit der Ziffer eine Genauigkeit der Zahl nur vor, doch dafÃ¼r, daÃŸ ich im letzten Monat ziemlich geschwÃ¤chelt hatte, ist das immer noch eine ziemlich groÃŸe Menge an Zugriffen. Daher freue ich mich Ã¼ber jede Besucherin und jeden Besucher und bedanke mich bei allen meinen Leserinnen und Lesern.</p>
<p>ðŸ˜Ž &nbsp; <em>Bleibt mir gewogen!</em></p>
<p>Die <em>Top Five</em> des August ist der schwachen Artikel-Frequenz angemessen:</p>
<ol type="1">
<li>Dauerbrenner ist immer noch der Beitrag Â»<a href="https://kantel.github.io/posts/2024011002_ki_ohne_zensor/">Bildgeneratoren und KÃ¼nstliche Intelligenz â€“ ohne Zensoren</a>Â« vom 10.&nbsp;Januar&nbsp;2024.</li>
<li>Darauf folgt â€“ aber schon weit abgeschlagen â€“ der mittlerweile auch schon ein Jahr alte Artikel Â»<a href="https://kantel.github.io/posts/2024081201_anytype/">All about Anytype â€“ meine neue, digitale Rumpelkammer?</a>Â« vom 12.&nbsp;August&nbsp;2024.</li>
<li>Jetzt folgen nur noch aktuelle BeitrÃ¤ge: Erstens die Frage Â»<a href="https://kantel.github.io/posts/2025081101_qownnotes/">Ein Schritt in die Digitale SouverÃ¤nitÃ¤t mit QOwnNotes? Wohl eher nicht</a>Â« vom 11.&nbsp;August&nbsp;2025.</li>
<li>Dann mit Ã¼berraschend vielen Zugriffen <em>(Sex sells</em> ðŸ¥¸<em>)</em> der taufrische Bericht Ã¼ber das jÃ¼ngste LibreOffice-Update: Â»<a href="https://kantel.github.io/posts/2025082301_libreoffice_25_8/">Es muÃŸ nicht immer Microsoft sein: LibreOffice 25.8 ist erschienen</a>Â« vom 23.&nbsp;August&nbsp;2025.</li>
<li>Und zum SchluÃŸ noch zwei mal Anytype: Â»<a href="https://kantel.github.io/posts/2025081301_anytype_048/">Aus meiner digitalen Rumpelkammer: Anytype Desktop 0.48 freigegeben</a>Â« vom 13.&nbsp;August&nbsp;2025, dicht gefolgt von der Â»<a href="https://kantel.github.io/posts/2025082001_anytype_tut/">Anytype-Lobhudelei: SchÃ¶ner, sicherer, offline-first</a>Â« vom 20.&nbsp;August&nbsp;2025.</li>
</ol>
<p>Ich werde versuchen, im Herbst wieder fleiÃŸiger und bunter zu schreiben, damit die Zahlen nicht weiter so monothematisch wirken.</p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54758908363/">Dachs am Fenster (Herbst)</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: Â»<em>Colored Franco-Belgian Comic Style. Illustration of a badger in a red dressing gown sits in the afternoon at a cafÃ© table in front of a large window with a laptop. There is a steaming pot of coffee on the table. The autumn sun shines golden through the window</em>Â«. Modell: Flux (Pro).</p>



 ]]></description>
  <category>Mediadaten</category>
  <category>Interna</category>
  <guid>https://kantel.github.io/posts/2025090101_mediadaten/</guid>
  <pubDate>Mon, 01 Sep 2025 15:35:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025090101_mediadaten/images/dachs.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Es muÃŸ nicht immer Microsoft sein: LibreOffice 25.8 ist erschienen</title>
  <dc:creator>JÃ¶rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025082301_libreoffice_25_8/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54355466457/"><img src="https://kantel.github.io/posts/2025082301_libreoffice_25_8/images/libreofficewoman-b.jpg" class="img-fluid"></a></p>
<p>Gerade in diesen Zeiten, wo es wichtig ist, seine digitale SouverÃ¤nitÃ¤t zu verteidigen, macht fÃ¼r diejenigen, die nicht auf ein Office-Paket verzichten kÃ¶nnen (weil â€“ aus welchen GrÃ¼nden auch immer â€“ zu Beispiel <a href="http://cognitiones.kantel-chaos-team.de/produktivitaet/latex/latex.html">LaT<sub>E</sub>X</a> keine Alternative ist), ein Umstieg auf <a href="https://de.wikipedia.org/wiki/LibreOffice">LibreOffice</a> Sinn. Denn hinter LibreOffice steht keine US-amerikanische Firma, sondern die <em><a href="https://de.wikipedia.org/wiki/LibreOffice#The_Document_Foundation">Document Foundation</a></em>, eine gemeinnÃ¼tzige Stiftung nach deutschem Recht.</p>
<p>Vor wenigen Tagen wurde von LibreOffice in neues Update freigegeben. <a href="https://www.deskmodder.de/blog/2025/08/20/libreoffice-25-8-ist-erschienen-windows-7-8-1-32-bit-wird-nicht-mehr-unterstuetzt/">Es handelt sich um die Version&nbsp;25.8</a> und sie kommt mit neuen Funktionen und auch einer verbesserten Leistung. So sollen gerade die Geschwindigkeitsverbesserungen auf weniger leistungsstarken Rechnern gewaltig sein. In den einigen Benchmarks sind Writer und Calc bis zu 30% schneller.</p>
<p>Aber wo Licht ist, da ist auch Schatten: LibreOffice 25.8 unterstÃ¼tzt Windows 7/8.1 nicht mehr und Windows&nbsp;10 32-Bit (x86) gilt als veraltet. FÃ¼r macOS 10.15 ist es die letzte Version. Aber es werden damit immer noch weit Ã¤ltere Betriebssystem-Versionen unterstÃ¼tzt, als beim Quasi-Monopolisten aus Redmond.</p>
<p>Den <a href="https://www.libreoffice.org/download/download-libreoffice/">Download</a> gibt es hier und alle Ã„nderungen und die neuen Funktionen kÃ¶nnt ihr euch genauer in den <a href="https://wiki.documentfoundation.org/ReleaseNotes/25.8/de">Release Notes</a> anschauen.</p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54355466457/">(Libre-) Office Woman</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: Â»<em>Colored French Comic Style. A sexy young woman with long red hair, green eyes and red lipstick is sitting in an office at a desk in front of a monitor and a keyboard. She is wearing a white, open blouse with a low neckline and a rust-colored vest. She has a pencil in one hand. On the desk is an open notepad, a cup with writing utensils and a stack of books. There are shelves on the walls with many more books and files. The spring sun is shining through a window in the background.</em>Â«. Modell: Flux (Pro).</p>



 ]]></description>
  <category>LibreOffice</category>
  <category>ProduktivitÃ¤t</category>
  <category>Digitale SouverÃ¤nitÃ¤t</category>
  <guid>https://kantel.github.io/posts/2025082301_libreoffice_25_8/</guid>
  <pubDate>Sat, 23 Aug 2025 15:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025082301_libreoffice_25_8/images/libreofficewoman.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Noch mehr fraktale BÃ¤ume mit Python und der SchildkrÃ¶te</title>
  <dc:creator>JÃ¶rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025082201_fractal_trees/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54695679963/"><img src="https://kantel.github.io/posts/2025082201_fractal_trees/images/fraktalerbaum-b.jpg" class="img-fluid"></a></p>
<p>Meine <a href="https://kantel.github.io/posts/2025073001_fraktaler_baum/">bisherigen</a>, recht gelungenen <a href="https://kantel.github.io/posts/2025080201_arbor_pythagorae/">Experimente</a> mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/turtlepython.html">CPythons Turtle</a> und nahezu identischem Quellcode mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/trinket.html">Trinkets SchildkrÃ¶te</a> haben mich zu weiteren Versuchen animiert. Dieses Mal habe ich wieder einen fraktalen Baum konstruiert und sowohl in Trinket wie auch in Standard-Python implementiert:</p>
<iframe src="https://trinket.io/embed/python/08915dce7bd0?outputOnly=true&amp;runOption=run&amp;start=result" width="657" height="539" frameborder="0" marginwidth="0" marginheight="0" allowfullscreen="">
</iframe>
<p>Die Idee zu dieser Konstruktion habe ich von hier<sup>1</sup> und der rekursive Quellcode ist meinem <a href="https://kantel.github.io/posts/2025073001_fraktaler_baum/">ersten Beispielen mit fraktalen BÃ¤umen</a> sehr Ã¤hnlich, nur daÃŸ der Â»BaumÂ« nun absolut symmetrisch ist:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> turtle</span>
<span id="cb1-2"></span>
<span id="cb1-3">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">640</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span></span>
<span id="cb1-4">factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span></span>
<span id="cb1-5"></span>
<span id="cb1-6">wn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> turtle.Screen()</span>
<span id="cb1-7">wn.setup(width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> WIDTH, height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> HEIGHT, startx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>, starty <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb1-8">wn.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fractal Tree"</span>)   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># FÃ¼r Trinket auskommentieren</span></span>
<span id="cb1-9">wn.colormode(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>)          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># FÃ¼r Trinket auskommentieren</span></span>
<span id="cb1-10">wn.bgcolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">222</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">217</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">177</span>)</span>
<span id="cb1-11">wn.tracer(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-12"></span>
<span id="cb1-13">alice <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> turtle.Turtle()</span>
<span id="cb1-14">alice.speed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Schnelle Geschwindigkeit</span></span>
<span id="cb1-15">alice.hideturtle()</span>
<span id="cb1-16">alice.penup()</span>
<span id="cb1-17">alice.goto(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>)</span>
<span id="cb1-18">alice.left(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Nach oben ausrichten</span></span>
<span id="cb1-19">alice.pendown()</span>
<span id="cb1-20"></span>
<span id="cb1-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> fractal_tree(laenge, tiefe):</span>
<span id="cb1-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> tiefe <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> laenge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Basis der Rekursion</span></span>
<span id="cb1-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb1-24">    alice.pensize(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(laenge<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">42.0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb1-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Farben in AbÃ¤ngigkeit von der Dicke des Stammes</span></span>
<span id="cb1-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> laenge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>:</span>
<span id="cb1-27">        alice.pencolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">139</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">69</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>)</span>
<span id="cb1-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> laenge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:</span>
<span id="cb1-29">        alice.pencolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">107</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">47</span>)</span>
<span id="cb1-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-31">        alice.pencolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">139</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">69</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>)</span>
<span id="cb1-32"></span>
<span id="cb1-33">    alice.forward(laenge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb1-34">    alice.left(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Nach links drehen</span></span>
<span id="cb1-35">    fractal_tree(laenge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> factor, tiefe <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Rekursiver Aufruf</span></span>
<span id="cb1-36">    alice.right(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Nach rechts drehen</span></span>
<span id="cb1-37">    fractal_tree(laenge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> factor, tiefe <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Rekursiver Aufruf</span></span>
<span id="cb1-38">    alice.left(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ZurÃ¼ck zur Ausrichtung des Elternastes</span></span>
<span id="cb1-39">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Auf dem RÃ¼ckweg durch die Rekursion</span></span>
<span id="cb1-40">    alice.backward(laenge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb1-41"></span>
<span id="cb1-42">fractal_tree(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">650</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb1-43">wn.update()</span>
<span id="cb1-44"></span>
<span id="cb1-45"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I did it, Babe!"</span>)</span>
<span id="cb1-46">wn.mainloop()</span></code></pre></div>
<p>Wie bei meinen anderen Beipielen auch mÃ¼ssen, damit der Code in Trinket lauffÃ¤hig ist, lediglich die Code-Zeilen <img src="https://latex.codecogs.com/png.latex?7"> und <img src="https://latex.codecogs.com/png.latex?8"> auskommentiert werden.</p>
<p>Nur ist das Ergebnis ein wenig langweilig. Der Baum wirkt nicht sehr natÃ¼rlich und Ihr kÃ¶nnt so oft den Â»RunÂ«-Button drÃ¼cken, wie Ihr wollt, es kommt immer der gleiche Baum dabei heraus.</p>
<p>Daher habe ich bei einem zweiten Versuch das Skript ein wenig aufgehÃ¼bscht und â€“ in MaÃŸen â€“ den Zufall ein wenig Ã¼ber das Aussehen des Baumes entscheiden lassen:</p>
<iframe src="https://trinket.io/embed/python/f47c933d23ba?outputOnly=true&amp;runOption=run&amp;start=result" width="657" height="539" frameborder="0" marginwidth="0" marginheight="0" allowfullscreen="">
</iframe>
<p>Nun wird der Verzweigungswinkel bei jedem rekusiven Durchlauf leicht abgewandelt und auch die AstlÃ¤nge Ã¤ndert sich fÃ¼r jeden Ast ein wenig:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> turtle</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> randint, uniform</span>
<span id="cb2-3"></span>
<span id="cb2-4">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">640</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span></span>
<span id="cb2-5">DELTA_ANGLE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span></span>
<span id="cb2-6"></span>
<span id="cb2-7">wn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> turtle.Screen()</span>
<span id="cb2-8">wn.setup(width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>WIDTH, height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>HEIGHT, startx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>, starty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb2-9">wn.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fractal Tree"</span>)   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># FÃ¼r Trinket auskommentieren</span></span>
<span id="cb2-10">wn.colormode(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>)          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># FÃ¼r Trinket auskommentieren</span></span>
<span id="cb2-11">wn.bgcolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">222</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">217</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">177</span>)</span>
<span id="cb2-12">wn.tracer(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb2-13"></span>
<span id="cb2-14">alice <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> turtle.Turtle()</span>
<span id="cb2-15">alice.speed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Schnelle Geschwindigkeit</span></span>
<span id="cb2-16">alice.hideturtle()</span>
<span id="cb2-17">alice.penup()</span>
<span id="cb2-18">alice.goto(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>)</span>
<span id="cb2-19">alice.left(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Nach oben ausrichten</span></span>
<span id="cb2-20">alice.pendown()</span>
<span id="cb2-21"></span>
<span id="cb2-22"></span>
<span id="cb2-23"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> fractal_tree(laenge, tiefe):</span>
<span id="cb2-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> tiefe <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> laenge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Basis der Rekursion</span></span>
<span id="cb2-25">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb2-26">    alice.pensize(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(laenge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">42.0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb2-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Farben in AbÃ¤ngigkeit von der Dicke des Stammes</span></span>
<span id="cb2-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> laenge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>:</span>
<span id="cb2-29">        alice.pencolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">139</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">69</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>)</span>
<span id="cb2-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> laenge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>:</span>
<span id="cb2-31">        alice.pencolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">107</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">47</span>)</span>
<span id="cb2-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb2-33">        alice.pencolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">139</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">69</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>)</span>
<span id="cb2-34"></span>
<span id="cb2-35">    delta_angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>DELTA_ANGLE, DELTA_ANGLE)</span>
<span id="cb2-36">    factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> uniform(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.55</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.65</span>)</span>
<span id="cb2-37">    alice.forward(laenge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb2-38">    alice.left(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> delta_angle)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Nach links drehen</span></span>
<span id="cb2-39">    fractal_tree(laenge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> factor, tiefe <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Rekursiver Aufruf</span></span>
<span id="cb2-40">    alice.right(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Nach rechts drehen</span></span>
<span id="cb2-41">    fractal_tree(laenge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> factor, tiefe <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Rekursiver Aufruf</span></span>
<span id="cb2-42">    alice.left(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> delta_angle)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ZurÃ¼ck zur Ausrichtung des Elternastes</span></span>
<span id="cb2-43">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Auf dem RÃ¼ckweg durch die Rekursion</span></span>
<span id="cb2-44">    alice.backward(laenge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb2-45"></span>
<span id="cb2-46"></span>
<span id="cb2-47">fractal_tree(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">650</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb2-48">wn.update()</span>
<span id="cb2-49"></span>
<span id="cb2-50"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I did it, Babe!"</span>)</span>
<span id="cb2-51">wn.mainloop()</span></code></pre></div>
<p>Wenn Ihr nun den Â»RunÂ«-Button betÃ¤tigt, erhaltet Ihr bei jedem Durchlauf einen anders aussehenden Baum.</p>
<p>Mit der Konstante <code>DELTA_ANGLE</code> in Zeile&nbsp;<img src="https://latex.codecogs.com/png.latex?5"> kÃ¶nnt Ihr Ã¼brigens experimentieren: Je kleiner sie ist, desto mehr gleicht der Baum dem ersten Skript, je grÃ¶ÃŸer sie wird, desto bizarrer sieht der Baum aus. Wenn zum Beispiel <code>DELTA_ANGLE = 45</code> gesetzt wird, entstehen BÃ¤ume, die so aussehen, als hÃ¤tte der Nordseewind sie arg zerrupft.</p>
<section id="verwendete-und-weiterfÃ¼hrende-literatur" class="level3">
<h3 class="anchored" data-anchor-id="verwendete-und-weiterfÃ¼hrende-literatur">Verwendete und weiterfÃ¼hrende Literatur</h3>
<ul>
<li>David Peak, Michael Frame: <em>KomplexitÃ¤t â€“ das gezÃ¤hmte Chaos</em>, Basel (BirkhÃ¤user Verlag) 1995</li>
<li>Daniel Shiffman: <em>The Nature of Code. Simulating Natural Systems with JavaScript</em>, San Francisco CA (no starch press) 2024</li>
<li>Al Sweigart: <em>The Recursive Book of Recursion. Ace the Coding Interview with Python and JavaScript</em>, San Francisco CA (no starch press) 2022</li>
</ul>
<p>Den Quellcode fÃ¼r die Trinket-Versionen <a href="https://trinket.io/python/08915dce7bd0">Fraktaler Baum</a> und <a href="https://trinket.io/python/f47c933d23ba">Fraktaler Baum (2)</a> kÃ¶nnt ihr in meinen Trinkets finden, die Quellcodes fÃ¼r CPython (<a href="https://github.com/kantel/turtlepy/blob/master/sources/trees/fraktaltree1.py">fraktaltree1.py</a> und <a href="https://github.com/kantel/turtlepy/blob/master/sources/trees/fraktaltree2.py">fraktaltree2.py</a>) findet Ihr auch in meinem GitHub-Repositorium.</p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54695679963/">Eine Python und eine SchildkrÃ¶te unter BÃ¤umen</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: Â»<em>Colored franco-belgian comic style. Illustration of a turte with motorcycle goggles and a python with glasses wandering through a surreal, hexagonal landscape</em>Â«. Modell: Flux Kontext.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">FuÃŸnoten</h2>

<ol>
<li id="fn1"><p>Daniel Shiffman: <em>The Nature of Code</em>, 2024, Seiten 398ff.â†©ï¸Ž</p></li>
</ol>
</section></div> ]]></description>
  <category>Python</category>
  <category>Turtle</category>
  <category>Trinket</category>
  <category>Creative Coding</category>
  <guid>https://kantel.github.io/posts/2025082201_fractal_trees/</guid>
  <pubDate>Fri, 22 Aug 2025 17:25:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025082201_fractal_trees/images/fraktalerbaum.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Anytype-Lobhudelei: SchÃ¶ner, sicherer, offline-first</title>
  <dc:creator>JÃ¶rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025082001_anytype_tut/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54717881007/"><img src="https://kantel.github.io/posts/2025082001_anytype_tut/images/anytype2-b.jpg" class="img-fluid"></a></p>
<p>Wer â€“ wie ich â€“ nicht genug von <a href="https://anytype.io/">Anytype</a>, meiner digitalen Rumpelkammer und (fast) freien Notion-Alternative bekommen kann, dem sei das Video Â»<a href="https://www.youtube.com/watch?v=MKvDdsa6oyY">Endlich Leben im Griff ðŸ¤“ mit Anytype</a>Â« von câ€™t&nbsp;3003 empfohlen, das nicht nur Anytype mit Notion vergleicht und Anytype dabei besser abschneidet, sondern auch gleichzeitig eine EinfÃ¼hrung und ein Tutorial in die grundlegenden Funktion des High-End-Zettelkasten ist. Durch dieses Video habe auch ich endlich den Unterschied zwischen <em>Sets</em> und <em>Collections</em> begriffen.</p>
<iframe class="if16_9" src="https://www.youtube.com/embed/MKvDdsa6oyY?si=vry1CFzRrhkyqF74" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p>Ansonsten ist es nicht nur eine ultimative Lobhudelei auf meine digitale Rumpelkammer, sondern vor allem ein Tutorial, das Ã¼ber viele EinstiegshÃ¼rden hinweghilft. Und wer lieber liest, statt Filmchen zu schauen, kann alternativ das Transkript Â»<a href="https://www.heise.de/news/Notion-Alternative-Anytype-Schoener-sicherer-offline-first-10349463.html">Notion-Alternative Anytype: SchÃ¶ner, sicherer, offline-first</a>Â« auf den Seiten von <em>heise online</em> nutzen.</p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54717881007/">Digitale Rumpelkammer</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: Â»<em>Colored belgian comic style, illustration of an clean shaven man, short white hair, blue eyes, glasses, sits at a desk in front of two huge monitors, there are a few open books on the desk, and large mug of steaming coffee next to them, and a computer keyboard in front of the monitor, on the wall there are many shelves with a lot of files and books, the shelves looks unorganized, the sun shines through a large window</em>Â«. Modell: Flux Kontext.</p>



 ]]></description>
  <category>Anytype</category>
  <category>Notion</category>
  <category>Digitale SouverÃ¤nitÃ¤t</category>
  <category>Zettelkasten</category>
  <guid>https://kantel.github.io/posts/2025082001_anytype_tut/</guid>
  <pubDate>Wed, 20 Aug 2025 14:05:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025082001_anytype_tut/images/anytype2.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Aus meiner digitalen Rumpelkammer: Anytype Desktop 0.48 freigegeben</title>
  <dc:creator>JÃ¶rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025081301_anytype_048/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54719044550/"><img src="https://kantel.github.io/posts/2025081301_anytype_048/images/anytype-b.jpg" class="img-fluid"></a></p>
<p><a href="https://anytype.io/">Anytype</a>, die <a href="https://blog.anytype.io/our-open-philosophy/">freie</a>, auÃŸerhalb der USA, nÃ¤mlich in der Schweiz (und damit DSGVO-konform) beheimatete Notion-Alternative, ist nicht nur bei mir, sondern â€“ wenn ich meinem <del>GeiÃŸenpeter</del> <a href="https://www.goatcounter.com/">Neugiertool</a> trauen darf â€“ auch bei Euch sehr beliebt. Daher will ich Euch die Nachricht nicht vorenthalten, daÃŸ von dem Teil gestern die Version 0.48 Desktop Beta (August&nbsp;2025) freigegeben wurde:</p>
<iframe class="if16_9" src="https://www.youtube.com/embed/iRUjGENs7eQ?si=yvB21Iqrdd8hTQsT" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p>Wie bei jedem Update gibt die fokussierte (und personifizierte) Neugier <em>(Focused Curiosity)</em> in <a href="https://www.youtube.com/watch?v=iRUjGENs7eQ">einem YouTube-Video</a> einen Ãœberblick Ã¼ber die wichtigsten Neuerungen. Dieses Mal ging es um den Feinschliff der App. Bei der Ãœberarbeitung wurde der Schwerpunkt auf die StabilitÃ¤t und auf kleinere Verbesserungen gelegt.</p>
<p>Wer lieber liest, statt Filmchen zu schauen, findet die Ã„nderung aber auch in <a href="https://community.anytype.io/t/anytype-desktop-0-48-0-released/28523">diesem Artikel</a> gelistet.</p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54719044550/">Digitale Rumpelkammer</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: Â»<em>Colored belgian comic style, illustration of an clean shaven man, short white hair, blue eyes, glasses, sits at a desk in front of two huge monitors, there are a few open books on the desk, and large mug of steaming coffee next to them, and a computer keyboard in front of the monitor, on the wall there are many shelves with a lot of files and books, the shelves looks unorganized, the sun shines through a large window</em>Â«. Modell: Flux Kontext.</p>



 ]]></description>
  <category>Anytype</category>
  <category>Digitale SouverÃ¤nitÃ¤t</category>
  <category>Zettelkasten</category>
  <guid>https://kantel.github.io/posts/2025081301_anytype_048/</guid>
  <pubDate>Wed, 13 Aug 2025 18:20:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025081301_anytype_048/images/anytype.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Ein Schritt in die Digitale SouverÃ¤nitÃ¤t mit QOwnNotes? Wohl eher nicht</title>
  <dc:creator>JÃ¶rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025081101_qownnotes/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54468940209/"><img src="https://kantel.github.io/posts/2025081101_qownnotes/images/qownnote-b.jpg" class="img-fluid"></a></p>
<p><a href="https://en.wikipedia.org/wiki/QOwnNotes">QOwnNotes</a> ist ein freier (GPL) und kostenloser Open-Source-Notizblock im Klartextformat. Das Programm unterstÃ¼tzt Markdown und enthÃ¤lt einen To-Do-Listen-Manager, der unter FreeBSD, Linux, macOS und Windows funktioniert. Das Programm hatte ich schon lÃ¤nger auf meiner Testliste und als vor ein paar Tagen mir die Meldung in meinen Feedreader schneite, daÃŸ es nun auch ein <em><a href="https://www.qownnotes.org/blog/2025-07-22-Universal-binary-for-macOS.html">Universal binary for macOS</a></em> gÃ¤be, hatte ich mich endlich zu einem Test entschlossen.</p>
<p><a href="https://www.qownnotes.org/">QOwnNotes</a> ist nÃ¤mlich vor allen deswegen interessant, weil es auch optional mit den Notiz-Anwendungen von ownCloud oder <a href="https://nextcloud.com/de/">Nextcloud</a> zusammenarbeiten soll. Und seit <a href="https://kantel.github.io/posts/2025042302_nextcloud/">April dieses Jahres</a> werkelt bei mir still und unauffÃ¤llig, aber zuverlÃ¤ssig eine Nextcloud-Instanz von <a href="https://tab.digital/">Tab Digital</a> als <a href="http://cognitiones.kantel-chaos-team.de/webworking/webservices/dropbox.html">Dropbox</a>-Replacement im Hintergrund. <a href="https://cloud.tab.digital/companyprivacypolicy">Die Firma sitzt in Riga, der Hauptstadt von Lettland, ihre Server stehen in den Niederlanden</a> und die <a href="https://de.wikipedia.org/wiki/Nextcloud">Software</a> ist OpenSource und DSGVO-konform. Und als <a href="https://cloud.tab.digital/de">Cloud-LÃ¶sung</a> gibt es von Tab-Digital eine <a href="https://de.wikipedia.org/wiki/Nextcloud">kostenlose Tier mit 8&nbsp;Gigabyte Speicher</a>, das ist weit mehr, als sich in all den vergangenen Jahren in meiner Tropfenschachtel angesammelt hatte.</p>
<p>Wenn QOwnNotes das hÃ¤lt, was es verspricht, wÃ¼rde es doch prima in meine eigene, digital souverÃ¤ne Cloud passen und kÃ¶nnte vielleicht auch das von mir bisher als <a href="https://kantel.github.io/posts/2025050203_joplin_3_3_9/">digitalen Zettelkasten</a> verwendete <a href="http://cognitiones.kantel-chaos-team.de/webworking/staticsites/joplin.html">Joplin</a> ablÃ¶sen. Ja, wenn&nbsp;â€¦ erste Versuche verliefen jedenfalls enttÃ¤uschend:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/54713580322/"><img src="https://kantel.github.io/posts/2025081101_qownnotes/images/qownnotes.jpg" class="img-fluid figure-img" alt="Formeln und FuÃŸnoten in QOwnNotes"></a></p>
<figcaption>Formeln und FuÃŸnoten in QOwnNotes</figcaption>
</figure>
</div>
<p>QOwnNotes beherrscht weder FuÃŸnoten noch mathematischen Formelsatz. Der Ehrlichkeit halber muÃŸ ich zugeben, daÃŸ das im <a href="https://www.qownnotes.org/getting-started/markdown.html">Handbuch von QOwnNotes</a> auch nirgendwo versprochen wird, auch wenn Googles KI da eine Integration von <a href="https://de.wikipedia.org/wiki/MathJax">MathJax</a> herbeihalluziniert, sogar mit konkreten Schritten, wie MathJax Ã¼ber das Einstellungs-MenÃ¼ von QOwnNotes aktiviert werden kann. Nur, es gibt diese angesprochenen Checkboxen nirgendwo im Einstellungs-MenÃ¼. Ich hatte sowieso in den letzten Monaten die Erfahrung gemacht, daÃŸ Googles KI sehr gerne etwas nicht Vorhandenes herbeihalluziniert und somit ein schlechter Ratgeber ist.</p>
<p>Doch nun zum Vergleich: So sehen Formeln und FuÃŸnoten in Joplin aus:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/54713580317/"><img src="https://kantel.github.io/posts/2025081101_qownnotes/images/joplin.jpg" class="img-fluid figure-img" alt="Formeln und FuÃŸnoten in Joplin"></a></p>
<figcaption>Formeln und FuÃŸnoten in Joplin</figcaption>
</figure>
</div>
<p>Wer â€“ wie ich â€“ weder auf mathematische Formeln noch auf FuÃŸnoten verzichten kann, fÃ¼r den ist QOwnNotes daher kein Schritt in Richtung Digitale SouverÃ¤nitÃ¤t. Das ist eigentlich kein Beinbruch, denn ich bin mit Joplin zufrieden. Auch wenn ich gerne die MÃ¶glichkeit von internen Links hÃ¤tte und meine Notizen auch ebenso gerne in meiner NextCloud-Instanz ohne einen expliziten Markdown-Export aus Joplin, aber auch ohne den Joplin-eigenen Zusatzdateien-Overkill ablegen wÃ¼rde. Wenn also jemand von Euch da drauÃŸen eine Idee hat? <em>Still digging!</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54468940209/">A Man in an Office</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: Â»<em>colored belgian comic style, illustration of an clean shaven man, short white hair, blue eyes, glasses, sits at a desk in front of two huge monitors, there are a few open books on the desk, and large mug of steaming coffee next to them, and a computer keyboard in front of the monitor, on the wall there are many shelves with a lot of files and books, the shelves looks unorganized, the sun shines through a large window</em>Â«. Modell: Flux (Pro).</p>



 ]]></description>
  <category>Digitale SouverÃ¤nitÃ¤t</category>
  <category>Joplin</category>
  <category>Zettelkasten</category>
  <category>Nextcloud</category>
  <category>QOwnNotes</category>
  <guid>https://kantel.github.io/posts/2025081101_qownnotes/</guid>
  <pubDate>Mon, 11 Aug 2025 18:20:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025081101_qownnotes/images/qownnote.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Arbor Pythagorae mit CPythons SchildkrÃ¶te und mit Trinkets Turtle</title>
  <dc:creator>JÃ¶rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025080201_arbor_pythagorae/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54695317548/"><img src="https://kantel.github.io/posts/2025080201_arbor_pythagorae/images/arborpythagorae-b.jpg" class="img-fluid"></a></p>
<p>Nachdem mein <a href="https://kantel.github.io/posts/2025073001_fraktaler_baum/">letztes Experiment</a> mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/turtlepython.html">CPythons Turtle</a> und dem nahezu identischen Quellcode in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/trinket.html">Trinket</a> so erfolgreich verlaufen war, hatte ich Blut geleckt und wollte eines meiner Lieblingsobjekte, den <a href="https://de.wikipedia.org/wiki/Pythagoras-Baum">Pythagoras-Baum</a>, auch mit Pythons Turtle (und parallel dazu auch mit Trinkets SchildkrÃ¶te) realisieren. Zwar hatte ich ihn <a href="https://kantel.github.io/posts/2025071101_pythagoras_baum_py5/">vor etwa drei Wochen</a> mit einem Algorithmus, der ohne Turtle-Kommandos auskommt, in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/py5.html">Py5</a>, dem Python3-Port von Processing, implementiert, und <a href="https://kantel.github.io/posts/2025060201_spass_mit_tigerjython/">davor auch schon einmal</a> mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/tigerjython.html">TigerJythons</a> Turtle, aber die Implementierung der SchildkrÃ¶te in TigerJython weicht doch stark von Pythons Turtle ab. Daher wollte ich den Pythagoras-Baum einfach auch mal mit den Kommandos realisieren, die Python in seiner Standard-Bibliothek zur VerfÃ¼gung stellt, ohne daÃŸ man zusÃ¤tzliche Module installieren muÃŸ.</p>
<p>In den folgenden Abschnitten ist jeweils das Trinket-Skript in diese Seiten eingebettet, das Ihr mit Â»RunÂ« neu starten kÃ¶nnt. Zwar habe ich noch keine weiteren Interaktionen eingeplant, aber Â»Weil es geht!Â« ist doch auch ein hinreichender Grund fÃ¼r dieses Experiment.&nbsp;ðŸ¤“</p>
<section id="der-symmetrische-pythagoras-baum" class="level2">
<h2 class="anchored" data-anchor-id="der-symmetrische-pythagoras-baum">Der symmetrische Pythagoras-Baum</h2>
<iframe src="https://trinket.io/embed/python/6de8871e3e4d?outputOnly=true&amp;runOption=run&amp;start=result" width="657" height="539" frameborder="0" marginwidth="0" marginheight="0" allowfullscreen="">
</iframe>
<p>Der symmetrische Pythagoras-Baum ist die einfachste Form der Realisierung, weil hier die rechte wie die linke Seite gleichbehandelt werden, es also keine Unterscheidungen gibt. Daher ist der Quellcode auch entsprechend kurz geraten:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Symmetrischer Pythagorasbaum</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> turtle <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> t</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb1-4"></span>
<span id="cb1-5">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">640</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span></span>
<span id="cb1-6"></span>
<span id="cb1-7">palette <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">54</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">51</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">46</span>),</span>
<span id="cb1-8">           (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">105</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">215</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">158</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>),</span>
<span id="cb1-9">           (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">180</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">144</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">55</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">140</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">82</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">48</span>)]</span>
<span id="cb1-10"></span>
<span id="cb1-11">wn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> t.Screen()</span>
<span id="cb1-12">wn.setup(width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> WIDTH, height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> HEIGHT, startx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>, starty <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb1-13">wn.colormode(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>)               <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># fÃ¼r Trinket auskommentieren</span></span>
<span id="cb1-14">wn.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Arbor Pythagorae 1"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># fÃ¼r Trinket auskommentieren</span></span>
<span id="cb1-15">wn.bgcolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">230</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">226</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">204</span>)</span>
<span id="cb1-16"></span>
<span id="cb1-17">p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> t.Turtle()</span>
<span id="cb1-18">p.speed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-19">p.pencolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dunkles GrÃ¼n</span></span>
<span id="cb1-20">p.setheading(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>)</span>
<span id="cb1-21"></span>
<span id="cb1-22"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> tree(s):</span>
<span id="cb1-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:</span>
<span id="cb1-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb1-25">    quadrat(s)</span>
<span id="cb1-26">    p.forward(s)</span>
<span id="cb1-27">    s1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>math.sqrt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-28">    p.left(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>)</span>
<span id="cb1-29">    tree(s1)</span>
<span id="cb1-30">    p.right(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>)</span>
<span id="cb1-31">    p.forward(s1)</span>
<span id="cb1-32">    tree(s1)</span>
<span id="cb1-33">    p.back(s1)</span>
<span id="cb1-34">    p.left(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>)</span>
<span id="cb1-35">    p.back(s)</span>
<span id="cb1-36"></span>
<span id="cb1-37"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> quadrat(s):</span>
<span id="cb1-38">    p.fillcolor(palette[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(palette) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)])</span>
<span id="cb1-39">    p.begin_fill()</span>
<span id="cb1-40">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>):</span>
<span id="cb1-41">        p.forward(s)</span>
<span id="cb1-42">        p.right(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>)</span>
<span id="cb1-43">    p.end_fill()</span>
<span id="cb1-44"></span>
<span id="cb1-45">p.penup()</span>
<span id="cb1-46">p.setpos(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>HEIGHT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb1-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bildschirm-Refresh ausschalten</span></span>
<span id="cb1-48">wn.tracer(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-49">p.pendown()</span>
<span id="cb1-50">tree(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>)</span>
<span id="cb1-51">p.hideturtle()</span>
<span id="cb1-52"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bildschirm-Refresh wieder einschalten</span></span>
<span id="cb1-53">wn.update()</span>
<span id="cb1-54"></span>
<span id="cb1-55"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I did it, Babe!"</span>)</span>
<span id="cb1-56"></span>
<span id="cb1-57">wn.mainloop()</span></code></pre></div>
<p>Die Implementierung in Trinket unterscheidet sich nur dadurch, daÃŸ die Zeilen <img src="https://latex.codecogs.com/png.latex?13"> und <img src="https://latex.codecogs.com/png.latex?14"> auskommentiert oder gelÃ¶scht werden mÃ¼ssen. AuÃŸerdem sind in Zeile <img src="https://latex.codecogs.com/png.latex?12"> die Parameter <code>startx</code> und <code>starty</code> sinnlos, denn sie sind nur dafÃ¼r gedacht, die Position des Ausgabefenster festzulegen (in diesem Fall auf meinen zweiten Monitor). Aber Trinket ignoriert sie einfach, Ihr mÃ¼sst sie also nicht lÃ¶schen.</p>
</section>
<section id="der-asymmetrische-pythagoras-baum" class="level2">
<h2 class="anchored" data-anchor-id="der-asymmetrische-pythagoras-baum">Der asymmetrische Pythagoras-Baum</h2>
<iframe src="https://trinket.io/embed/python/73d448ee70e2?outputOnly=true&amp;runOption=run&amp;start=result" width="657" height="539" frameborder="0" marginwidth="0" marginheight="0" allowfullscreen="">
</iframe>
<p>Der Code fÃ¼r den asymmetrischen Pythagoras-Baum unterscheidet sich doch deutlich von dem des symmetrischen Baums (im Gegensatz zu der <a href="https://kantel.github.io/posts/2025071101_pythagoras_baum_py5/">Implementierung ohne Turtle in Py5</a>, wo im Prinzip nur die Winkelkonstanten geÃ¤ndert werden muÃŸten â€“ alle anderen Ã„nderungen waren nur kosmetischer Natur).</p>
<p>WÃ¤hrend der symmetrische Pythagorasbaum die Rekursion stoppte, wenn die LÃ¤nge der einzelnen Schritte kleiner <img src="https://latex.codecogs.com/png.latex?2"> wurde (die Rekursionstiefe also von der SeitenlÃ¤nge des Startquadrates abhing), wird beim asymmetrischen Baum die Rekursionstiefe explizit festgelegt und als Parameter der Funktion <code>tree()</code> mit Ã¼bergeben. Das ist deshalb notwendig, weil die rechte und die linke Seite des Baumes unterschiedlich behandelt werden. WÃ¤hrend der linken Seite bei jeder Rekursion eine SeitenlÃ¤nge von <img src="https://latex.codecogs.com/png.latex?s%20%5Csqrt(%5Cfrac%7B3%7D%7B2%7D)"> zugewiesen wird, bekommt die rechte Seite jeweils eine neue SeitenlÃ¤nge von <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7Bs%7D%7B2%7D">.</p>
<p>Da es fÃ¼r mich daher schwierig war, zu entscheiden, welche SeitenlÃ¤nge (die rechte oder die linke?) fÃ¼r den Abbruch der Rekursion zustÃ¤ndig sein soll, habe ich mich entschieden, einen Rekursionslevel als Abbruchkriterium mitzugeben.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Asymmetrischer Pythagorasbaum</span></span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> turtle <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> t</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb2-4"></span>
<span id="cb2-5">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">640</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span></span>
<span id="cb2-6">REC_LEVEL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Rekursionstiefe</span></span>
<span id="cb2-7"></span>
<span id="cb2-8">palette <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">54</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">51</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">46</span>),</span>
<span id="cb2-9">           (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">105</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">215</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">158</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>),</span>
<span id="cb2-10">           (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">180</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">144</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">55</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">140</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">82</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">48</span>)]</span>
<span id="cb2-11"></span>
<span id="cb2-12">wn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> t.Screen()</span>
<span id="cb2-13">wn.setup(width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> WIDTH, height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> HEIGHT, startx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>, starty <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb2-14">wn.colormode(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>)               <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># fÃ¼r Trinket auskommentieren</span></span>
<span id="cb2-15">wn.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Arbor Pythagorae 2"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># fÃ¼r Trinket auskommentieren</span></span>
<span id="cb2-16">wn.bgcolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">230</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">226</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">204</span>)</span>
<span id="cb2-17"></span>
<span id="cb2-18">p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> t.Turtle()</span>
<span id="cb2-19">p.speed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb2-20">p.pencolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dunkles GrÃ¼n</span></span>
<span id="cb2-21">p.setheading(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>)</span>
<span id="cb2-22"></span>
<span id="cb2-23"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> tree(s, level):</span>
<span id="cb2-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> level <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb2-25">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb2-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb2-27">        quadrat(s)</span>
<span id="cb2-28">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Linke Seite</span></span>
<span id="cb2-29">        ls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>math.sqrt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-30">        p.forward(s)</span>
<span id="cb2-31">        p.left(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>)</span>
<span id="cb2-32">        p.forward(s)</span>
<span id="cb2-33">        p.right(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>)</span>
<span id="cb2-34">        p.forward(ls)</span>
<span id="cb2-35">        p.left(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>)</span>
<span id="cb2-36">        tree(ls, level <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-37">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Rechte Seite</span></span>
<span id="cb2-38">        rs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-39">        p.right(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">180</span>)</span>
<span id="cb2-40">        p.forward(rs)</span>
<span id="cb2-41">        p.left(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>)</span>
<span id="cb2-42">        tree(rs, level <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-43">        p.left(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>)</span>
<span id="cb2-44">        p.back(s)</span>
<span id="cb2-45"></span>
<span id="cb2-46"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> quadrat(s):</span>
<span id="cb2-47">    p.fillcolor(palette[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(palette) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)])</span>
<span id="cb2-48">    p.begin_fill()</span>
<span id="cb2-49">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>):</span>
<span id="cb2-50">        p.forward(s)</span>
<span id="cb2-51">        p.left(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>)</span>
<span id="cb2-52">    p.end_fill()</span>
<span id="cb2-53"></span>
<span id="cb2-54">p.penup()</span>
<span id="cb2-55">p.setpos(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>HEIGHT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb2-56"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bildschirm-Refresh ausschalten</span></span>
<span id="cb2-57">wn.tracer(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb2-58">p.pendown()</span>
<span id="cb2-59"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># FÃ¼r eine Rekursionstiefe &gt; 14 braucht man schon sehr viel Geduld</span></span>
<span id="cb2-60">tree(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, REC_LEVEL)</span>
<span id="cb2-61">p.hideturtle()</span>
<span id="cb2-62"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bildschirm-Refresh wieder einschalten</span></span>
<span id="cb2-63">wn.update()</span>
<span id="cb2-64"></span>
<span id="cb2-65"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I did it, Babe!"</span>)</span>
<span id="cb2-66"></span>
<span id="cb2-67">wn.mainloop()</span></code></pre></div>
<p>Auch hier gilt fÃ¼r die Trinket-Version fÃ¼r die Zeilen <img src="https://latex.codecogs.com/png.latex?13">, <img src="https://latex.codecogs.com/png.latex?14"> und <img src="https://latex.codecogs.com/png.latex?15"> was ich oben schon fÃ¼r die Zeilen <img src="https://latex.codecogs.com/png.latex?12"> bis <img src="https://latex.codecogs.com/png.latex?14"> geschrieben hatte: Sie kÃ¶nnen auskommentiert werden, respektive bei der <code>wn.setup()</code>-Zeile werden die letzten beiden Parameter von Trinket einfach ignoriert.</p>
<p>Wie schon beim symmetrischen Pythagoras-Baum sind die Werte in <code>p.setpos()</code> und die SeitenlÃ¤nge des Startquadrats in <code>tree()</code> kosmetischer Natur. Ich habe durch wildes Experimentieren herausgefunden, mit welchen Werten der Baum am Besten ins Fenster passt.</p>
</section>
<section id="die-farben" class="level2">
<h2 class="anchored" data-anchor-id="die-farben">Die Farben</h2>
<p>Damit meine Pythagoras-Skripte nicht immer gleich aussehen, habe ich dieses Mal eine <a href="http://cognitiones.kantel-chaos-team.de/multimedia/farbpaletten/malewitsch.html">andere Farbpalette</a> ausgewÃ¤hlt. Sie ist inspiriert von Werken des russisch-sowjetischen Malers <em><a href="https://de.wikipedia.org/wiki/Kasimir_Sewerinowitsch_Malewitsch">Kasimir Malewitsch</a></em> (1879-1935), eines Hauptvertreters der Russischen Avantgarde, Wegbereiter des Konstruktivismus und BegrÃ¼nder des Suprematismus. Ich finde die Farben passen sehr gut zum extrem kÃ¼nstlich konstruierten Pythagoras-Baum.</p>
<p>Den Quellcode findet Ihr natÃ¼rlich wieder in meinem GitHub-Repositorium (<a href="https://github.com/kantel/turtlepy/blob/master/sources/trees/arborpythagorae1.py">arborpythagorae1.py</a> und <a href="https://github.com/kantel/turtlepy/blob/master/sources/trees/arborpythagorae2.py">arborpythagorae2.py</a>) und die Trinkets fÃ¼r <a href="https://trinket.io/python/6de8871e3e4d">Arbor Pythagorae 1</a> und <a href="https://trinket.io/python/73d448ee70e2">Arbor Pythagorae 2</a> kÃ¶nnt Ihr von meinem Trinket-Account remixen. Stellt damit an, was Ihr wollt und habt SpaÃŸ damit.</p>


</section>

 ]]></description>
  <category>Python</category>
  <category>Turtle</category>
  <category>Trinket</category>
  <category>Creative Coding</category>
  <guid>https://kantel.github.io/posts/2025080201_arbor_pythagorae/</guid>
  <pubDate>Sat, 02 Aug 2025 17:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025080201_arbor_pythagorae/images/arborpythagorae.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Die Zahlen fÃ¼r den verregneten Juli</title>
  <dc:creator>JÃ¶rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025080101_mediadaten/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54693501575/"><img src="https://kantel.github.io/posts/2025080101_mediadaten/images/regendachs-b.jpg" class="img-fluid"></a></p>
<p>Entgegen meiner <a href="https://kantel.github.io/posts/2025070101_mediadaten/">optimistischen EinschÃ¤tzung zu Beginn des letzten Monats</a> hat uns der Juli nicht gerade mit hochsommerlichen Tagen verwÃ¶hnt. Dennoch ist es wieder Zeit fÃ¼r die Zahlen, die hochtrabend manches Mal auch <em>Mediadaten</em> genannt werden: Im Juli 2025 hatte der <em>Schockwellenreiter</em> laut seinem nicht immer wirklich zuverlÃ¤ssigen (er war auch schon mal fÃ¼r ein paar Tage ausgefallen), aber dafÃ¼r (hoffentlich!) datenschutzkonformen <del>GeiÃŸenpeter</del> Neugiertool exakt <strong>6.821&nbsp;Seitenaufrufe</strong>. Wie immer tÃ¤uscht die Exaktheit der Ziffer eine Genauigkeit der Zahl nur vor, trotzdem freue ich mich Ã¼ber jede Besucherin und jeden Besucher und bedanke mich bei allen meinen Leserinnen und Lesern.</p>
<p>ðŸ˜Ž &nbsp; <em>Bleibt mir gewogen!</em></p>
<p>Die <em>Top Five</em> des verregneten Monats sind wenig Ã¼berraschend:</p>
<ol type="1">
<li>Immer noch â€“ wie schon seit Monaten â€“ liegt der Beitrag Â»<a href="https://kantel.github.io/posts/2024011002_ki_ohne_zensor/">Bildgeneratoren und KÃ¼nstliche Intelligenz â€“ ohne Zensoren</a>Â« vom 10. Januar 2024 weit vorne.</li>
<li>Dann folgt â€“ ebenfalls schon seit Monaten â€“ der Artikel Ã¼ber meine <em>neue digitale Rumpelkammer</em> Â»<a href="https://kantel.github.io/posts/2024081201_anytype/">All about Anytype</a>Â« vom 12. August 2024.</li>
<li>Ebenfalls viele Freunde gefunden hatte mein Hinweis vom 1. Juli 2025, daÃŸ man Â»<a href="https://kantel.github.io/posts/2025070102_history_math_beauty/">Die Geschichte der SchÃ¶nheit in der Mathematik</a>Â« fÃ¼r umme lesen kann.</li>
<li>Meine am 6. Juli 2025 gestellte Frage, ob <a href="https://kantel.github.io/posts/2025070601_escooter/">es denn nur noch Gehirnamputierte in NeukÃ¶lln</a> gÃ¤be, fand offensichtlich viel Zustimmung.</li>
<li>Und <em>last but not least</em> noch der Hinweis auf Lesefutter vom 9.&nbsp;Juli&nbsp;2025: Â»<a href="https://kantel.github.io/posts/2025070901_fraktale_dynamische_systeme/">Neu in meiner Bibliothek: Fraktale und Dynamische Systeme (2 BÃ¤nde)</a>Â«.</li>
</ol>
<p>Dieser fÃ¼nfte Platz im Ranking wird sicher meinen schon so oft zitierten Â»Freund aus BremenÂ« sehr freuen.</p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54693501575/">Ein Dachs im Regen</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: Â»<em>Colored Franco-Belgian Comic Style. Illustration of a badger in a red dressing gown sits in the afternoon at a cafÃ© table in front of a large window with a laptop. There is a steaming pot of coffee on the table. Outside, itâ€™s raining, and drops are falling on the windowpane and into large puddles on the street</em>Â«. Modell: Flux (Pro).</p>



 ]]></description>
  <category>Mediadaten</category>
  <category>Interna</category>
  <guid>https://kantel.github.io/posts/2025080101_mediadaten/</guid>
  <pubDate>Fri, 01 Aug 2025 16:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025080101_mediadaten/images/regendachs.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Ein fraktaler Baum mit Pythons Turtle</title>
  <dc:creator>JÃ¶rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025073001_fraktaler_baum/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54680488356/"><img src="https://kantel.github.io/posts/2025073001_fraktaler_baum/images/fractaltree2-b.jpg" class="img-fluid"></a></p>
<p>In diesem Beitrag mÃ¶chte ich wieder Pythons Turtle bemÃ¼hen, um damit fraktale, selbstÃ¤hnliche BÃ¤ume zu erzeugen. Und auch wenn ich groÃŸe Sympathien fÃ¼r die Turtle-Implementierung in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/tigerjython.html">TigerJython</a> habe, ihr Nachteil ist, daÃŸ sie groÃŸe Unterschiede zu der <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/turtlepython.html">Turtle-Implementierung in Standard-Python</a> besitzt. Daher habe ich mich bei diesem Beispiel entschieden, <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/trinket.html">Trinkets</a>-Turtle wieder hervorzukramen, da ihre Implementierung sich â€“ bis auf <a href="https://kantel.github.io/posts/2023031101_trinket_turtle_ontimer/">wenige Ausnahmen</a> â€“ streng an CPythons Turtle orientiert. In der Regel kÃ¶nnen die Programme Eins-zu-Eins Ã¼bernommen werden.</p>
<iframe src="https://trinket.io/embed/python/95628cb89c3f?outputOnly=true&amp;runOption=run&amp;start=result" width="657" height="539" frameborder="0" marginwidth="0" marginheight="0" allowfullscreen="">
</iframe>
<p>Also habe ich erst einmal einen perfekt selbstÃ¤hnlichen Baum konstruiert. Es ist ein rekursiver Aufruf und bei der Implementierung habe ich mich an <em>Al Sweigarts</em> wunderbarem Buch<sup>1</sup> orientiert, allerdings konnte ich mit Hilfe von Trinket auch ohne JavaScript ein im Browser lauffÃ¤higes Programm erzeugen.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> turtle</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> randint</span>
<span id="cb1-3"></span>
<span id="cb1-4">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">640</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span></span>
<span id="cb1-5">LEFT_ANGLE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb1-6">LEFT_DECREASE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span>
<span id="cb1-7">RIGHT_ANGLE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb1-8">RIGHT_DECREASE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span>
<span id="cb1-9"></span>
<span id="cb1-10">wn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> turtle.Screen()</span>
<span id="cb1-11">wn.setup(width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> WIDTH, height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> HEIGHT)</span>
<span id="cb1-12">wn.setworldcoordinates(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, WIDTH, HEIGHT)</span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># wn.title("Fractal Tree")</span></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># wn.colormode(255)</span></span>
<span id="cb1-15">wn.bgcolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">210</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">219</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">142</span>)</span>
<span id="cb1-16">wn.tracer(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-17"></span>
<span id="cb1-18">alice <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> turtle.Turtle()</span>
<span id="cb1-19">alice.speed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-20">alice.hideturtle()</span>
<span id="cb1-21"></span>
<span id="cb1-22"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw_branch(start_position, direction, branch_length):</span>
<span id="cb1-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> branch_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:</span>
<span id="cb1-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb1-25">    </span>
<span id="cb1-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Startposition und initiale Richtung</span></span>
<span id="cb1-27">    alice.penup()</span>
<span id="cb1-28">    alice.goto(start_position)</span>
<span id="cb1-29">    alice.setheading(direction)</span>
<span id="cb1-30">    </span>
<span id="cb1-31">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Zeichne einen Zweig</span></span>
<span id="cb1-32">    alice.pendown()</span>
<span id="cb1-33">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Die Dicke des Zweiges betrÃ¤gt 1/7 der ZweiglÃ¤nge, aber mindestens 1</span></span>
<span id="cb1-34">    alice.pensize(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(branch_length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb1-35">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Farben in AbÃ¤ngigkeit von der Dicke des Stammes</span></span>
<span id="cb1-36">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> branch_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>:</span>
<span id="cb1-37">        alice.pencolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">139</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">69</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>)</span>
<span id="cb1-38">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> branch_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">65</span>:</span>
<span id="cb1-39">        alice.pencolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">139</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">115</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>)</span>
<span id="cb1-40">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> branch_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>:</span>
<span id="cb1-41">        alice.pencolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">139</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">134</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">78</span>)</span>
<span id="cb1-42">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> branch_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">55</span>:</span>
<span id="cb1-43">        alice.pencolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">189</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">183</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">110</span>)</span>
<span id="cb1-44">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> branch_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>:</span>
<span id="cb1-45">        alice.pencolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">107</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">47</span>)</span>
<span id="cb1-46">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> branch_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>:</span>
<span id="cb1-47">        alice.pencolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">107</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">142</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span>)</span>
<span id="cb1-48">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-49">        alice.pencolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-50">        </span>
<span id="cb1-51">    alice.forward(branch_length)</span>
<span id="cb1-52">    </span>
<span id="cb1-53">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Speichere die Position am Ende des Zweiges</span></span>
<span id="cb1-54">    end_position <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> alice.position()</span>
<span id="cb1-55">    left_direction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> direction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> LEFT_ANGLE</span>
<span id="cb1-56">    left_branch_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> branch_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> LEFT_DECREASE</span>
<span id="cb1-57">    right_direction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> direction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> RIGHT_ANGLE</span>
<span id="cb1-58">    right_branch_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> branch_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> RIGHT_DECREASE</span>
<span id="cb1-59">    </span>
<span id="cb1-60">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Rekursion</span></span>
<span id="cb1-61">    draw_branch(end_position, left_direction, left_branch_length)</span>
<span id="cb1-62">    draw_branch(end_position, right_direction, right_branch_length)</span>
<span id="cb1-63">    </span>
<span id="cb1-64"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (Pseudo-) Zufallswert fÃ¼r die StartlÃ¤nge des Stamms</span></span>
<span id="cb1-65">start_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>)</span>
<span id="cb1-66"></span>
<span id="cb1-67"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Zeichne den Baum</span></span>
<span id="cb1-68">draw_branch((WIDTH<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, start_length)</span>
<span id="cb1-69">wn.update()</span>
<span id="cb1-70"></span>
<span id="cb1-71"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I did it, Babe!"</span>)</span>
<span id="cb1-72">wn.mainloop()</span></code></pre></div>
<p>Das Programm ist fast ohne Ã„nderung auch in CPython lauffÃ¤hig (siehe <a href="https://www.flickr.com/photos/schockwellenreiter/54680488356/">Screenshot</a> im Bannerbild oben), lediglich die beiden oben auskommentierten Zeilen</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1">wn.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fractal Tree"</span>)</span>
<span id="cb2-2">wn.colormode(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>)</span></code></pre></div>
<p>mÃ¼ssen in dem CPython-Skript aktiviert werden<sup>2</sup>.</p>
<p>Jeder Durchlauf erzeugt einen neuen Baum (einfach auf den Â»RunÂ«-Button klicken). Die Paramenter zu Beginn des Programms (<code>LEFT_ANGLE</code>, <code>LEFT_DECREASE</code>, <code>RIGHT_ANGLE</code> und <code>RIGHT_DECREASE</code>) sind zwar zufÃ¤llig, aber durch wildes Experimentieren so ausgewÃ¤hlt, daÃŸ die meisten BÃ¤ume in das Fenster passen.</p>
<p>Die BÃ¤ume sehen ja schon sehr nett, aber nicht sehr natÃ¼rlich aus, da jede Verzweigung eine exakte, wenn auch verkleinerte Kopie der ursprÃ¼nglichen Verzweigung ist. Das macht den Baum zwar perfekt selbstÃ¤hnlich, aber solche perfekte SelbstÃ¤hnlichkeit kommt in der Natur selten vor.</p>
<iframe src="https://trinket.io/embed/python/bcef87d53b36?outputOnly=true&amp;runOption=run&amp;start=result" width="657" height="539" frameborder="0" marginwidth="0" marginheight="0" allowfullscreen="">
</iframe>
<p>Um die erzeugten BÃ¤ume natÃ¼rlicher aussehen zu lassen, habe ich in einer zweiten Version des Programms die Deklaration fÃ¼r <code>LEFT_ANGLE</code>, <code>LEFT_DECREASE</code>, <code>RIGHT_ANGLE</code> und <code>RIGHT_DECREASE</code> gelÃ¶scht und dafÃ¼r den Abschnitt</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Speichere die Position am Ende des Zweiges</span></span>
<span id="cb3-2">    end_position <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> alice.position()</span>
<span id="cb3-3">    left_direction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> direction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb3-4">    left_branch_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> branch_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span>
<span id="cb3-5">    right_direction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> direction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb3-6">    right_branch_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> branch_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span></code></pre></div>
<p>wie oben geÃ¤ndert. Dadurch wird jede Verzweigung zufÃ¤llig erzeugt und der Baum sieht schon viel natÃ¼rlicher aus.</p>
<section id="verwendete-und-weiterfÃ¼hrende-literatur" class="level3">
<h3 class="anchored" data-anchor-id="verwendete-und-weiterfÃ¼hrende-literatur">Verwendete und weiterfÃ¼hrende Literatur</h3>
<ul>
<li>Karl-Heinz Becker, Michael DÃ¶rfler: <em>Fraktale und Dynamische Systeme. Computergrafische Experimente mit Processing</em>, Bremen (Kindle Direct Publishing) 2025</li>
<li>David Peak, Michael Frame: <em>KomplexitÃ¤t â€“ das gezÃ¤hmte Chaos</em>, Basel (BirkhÃ¤user Verlag) 1995</li>
<li>Heinz-Otto Peitgen, Hartmut JÃ¼rgens und Dietmar Saupe: <em>Bausteine des Chaos â€“ Fraktale</em>, Berlin, Heidelberg (Springer) und Stuttgart (Klett-Cotta) 1992</li>
<li>Heinz-Otto Peitgen, Hartmut JÃ¼rgens und Dietmar Saupe: <em>Chaos â€“ Bausteine der Ordnung</em>, Berlin, Heidelberg (Springer) und Stuttgart (Klett-Cotta) 1994</li>
<li>Al Sweigart: <em>The Recursive Book of Recursion. Ace the Coding Interview with Python and JavaScript</em>, San Francisco CA (no starch press) 2022</li>
</ul>
<p>Den Quellcode fÃ¼r die Trinket-Versionen <a href="https://trinket.io/python/95628cb89c3f">Recursive Tree 1</a> und <a href="https://trinket.io/python/bcef87d53b36">Recursive Tree 2</a> kÃ¶nnt ihr in meinen Trinkets finden, die Quellcodes fÃ¼r CPython (<a href="https://github.com/kantel/pythoncuriosa/blob/main/turtle/fractaltree1.py">fractatree1.py</a> und <a href="https://github.com/kantel/pythoncuriosa/blob/main/turtle/fractaltree2.py">fractaltree2.py</a>) findet Ihr in meinem GitHub-Repositorium.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">FuÃŸnoten</h2>

<ol>
<li id="fn1"><p>Al Sweigart: <em>The Recursive Book of Recursion. Ace the Coding Interview with Python and JavaScript</em>, San Francisco (no starch press) 2022, S. 187ff.â†©ï¸Ž</p></li>
<li id="fn2"><p>Die Zeile <code>wn.title("Fractal Tree")</code> ist optional, ohne die Zeile <code>wn.colormode(255)</code> bricht die CPython-Version aber mit einer Fehlermeldung ab.â†©ï¸Ž</p></li>
</ol>
</section></div> ]]></description>
  <category>Python</category>
  <category>Turtle</category>
  <category>Trinket</category>
  <category>Mathematik</category>
  <category>Dynamische Systeme</category>
  <category>Creative Coding</category>
  <guid>https://kantel.github.io/posts/2025073001_fraktaler_baum/</guid>
  <pubDate>Wed, 30 Jul 2025 15:25:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025073001_fraktaler_baum/images/fractaltree2.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Aus der Nachbarschaft: Schon wieder Verkehrschaos</title>
  <dc:creator>JÃ¶rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025072501_erneutes_verkehrschaos/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54600538825/"><img src="https://kantel.github.io/posts/2025072501_erneutes_verkehrschaos/images/verkehr-b.jpg" class="img-fluid"></a></p>
<p>Auch an diesem Wochenende wird zum fÃ¼nften Mal seit Mai dieses Jahres die Autobahn mal wieder in unseren Kiez gekotzt. Zwar wird dieses Mal nicht â€“ wie im <a href="https://kantel.github.io/posts/2025050702_verkehrschaos_im_kiez/">Mai</a> und <a href="https://kantel.github.io/posts/2025060701_verkehrschaos_ii/">Juni</a> â€“ der Britzer Autobahntunnel dichtgemacht, sondern die <a href="https://www.rbb24.de/panorama/beitrag/2025/07/a100-autobahn-dreieck-neokoelln-berlin-gesperrt.html">A100 am Dreieck NeukÃ¶lln bis Montagmorgen gesperrt</a>, doch die Folgen dÃ¼rften die gleichen sein: FuÃŸgÃ¤ngerinnen und FuÃŸgÃ¤nger, Radfahrerinnen und Radfahrer werden als Folge einer miÃŸlungenen Verkehrsplanung durch die Auto(-bahn)-Lobby des Berliner Senats erneut an den Rand der StraÃŸen gedrÃ¤ngt und mÃ¼ssen abgasgeschwÃ¤ngerte Luft atmen. Und auch die Busse der BVG werden wieder im Stau stecken, so daÃŸ die Menschen, die keinen PKW besitzen (und das ist in unserem Kiez die Mehrheit der Familien) in ihrem Quartier gefangen gehalten werden.</p>
<p>Von diesem Senat ist aber nichts anderes zu erwarten: Zu glauben, daÃŸ die PKW- und Parkplatz-Fetischisten der CDU und die der Autobahn-Lobby hÃ¶rige SPD mit einer Vorsitzenden, die sich einen Doktortitel erschwindelt hat, die Interessen der BÃ¼rger wahrnehmen, ist mehr als naiv.</p>
<p>Also, liebe MitbÃ¼rgerinnen und MitbÃ¼rger, im September nÃ¤chsten Jahres sind Wahlen. WÃ¤hlt diese unfÃ¤hige BleifuÃŸkoalition dann doch einfach ab!</p>
<hr>
<p><strong>Bild</strong> <em><a href="https://www.flickr.com/photos/schockwellenreiter/54600538825/">Verkehrs-Chaos</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: Â»<em>Colored Franco-Belgian Comic Style: Illustration of a multitude of cars trudge through narrow city streets. The air is filled with exhaust fumes and Pedestrians are pushed to the side of the road by the cars</em>Â«. Modell: Flux (Pro), Style: None.</p>



 ]]></description>
  <category>NeukÃ¶lln</category>
  <category>StÃ¤dte fÃ¼r Menschen</category>
  <category>Verkehr</category>
  <category>Verkehrswende</category>
  <category>Failed State Berlin</category>
  <guid>https://kantel.github.io/posts/2025072501_erneutes_verkehrschaos/</guid>
  <pubDate>Fri, 25 Jul 2025 20:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025072501_erneutes_verkehrschaos/images/verkehr.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Anytype auf meinem Chromebook</title>
  <dc:creator>JÃ¶rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025072201_anytype_chromebook/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54672050399/"><img src="https://kantel.github.io/posts/2025072201_anytype_chromebook/images/anytypechrome-b.jpg" class="img-fluid"></a></p>
<p>Ich hatte ja schon lange nichts mehr Ã¼ber <a href="https://kantel.github.io/#category=Chromebook">mein Chromebook</a> auf diesen Seiten. Das lag vor allen daran, daÃŸ ich momentan fast alles von meinem Desktop in meinem Arbeitszimmer erledige. Nun hat sich allerdings ergeben, daÃŸ in der nÃ¤chsten Zeit doch hÃ¤ufiger eine mobile Nutzung gefragt ist. Und da wollte ich wissen, ob ich meine digitale Rumpelkammer <a href="https://anytype.io/">Anytpye</a>, die <a href="https://blog.anytype.io/our-open-philosophy/">freie</a>, auÃŸerhalb der USA, nÃ¤mlich in der Schweiz (und damit DSGVO-konform) beheimatete <a href="http://cognitiones.kantel-chaos-team.de/produktivitaet/notion.html">Notion</a>-Alternative nicht auch auf dem Chromebook installiert bekomme, und auch, ob sie genauso zuverlÃ¤ssig synchronisiert, wie mit meinem Android-Smartphone. Spoiler: Die Installation verlief schmerzfreier, als erwartet.</p>
<p>Zwar war die Installation nicht ganz so einfach mit einem Einzeiler in der Kommandozeile erledigt, wie das bei <a href="http://cognitiones.kantel-chaos-team.de/webworking/staticsites/joplin.html">Joplin</a> der <a href="https://kantel.github.io/posts/2024112502_joplin_chromebook/">Fall war</a>, ein wenig Mausschubserei war doch vonnÃ¶ten. Zuerst einmal habe ich das <a href="https://download.anytype.io/">Linux Debian Paket von Anytypes Downloadseite</a> heruntergeladen. Dann genÃ¼gte allerdings ein Doppelklick auf die heruntergeladene Datei und Anytype war installiert (inklusive Icon fÃ¼r das Dock â€“ siehe <a href="https://www.flickr.com/photos/schockwellenreiter/54672050399/">Screenshot oben</a>).</p>
<p>Danach bekam ich allerdings erst einmal einen Schreck. Denn nach der Eingabe der aasig langen Anytype Passwort-Phrase behauptete das Programm, daÃŸ ich wohl noch keinen Vault angelegt hÃ¤tte und legte mir erst einmal einen leeren <code>untitled</code> Vault an. WÃ¤hrend ich dann minutenlang hektisch nach einer MÃ¶glichkeit suchte, Anytype mit meiner schon existierenden Vault bekannt zu machen, fand das Programm sie dann doch selber und sychronisierte sie. Erleichtert muÃŸte ich dann nur noch die <code>untitled</code> Vault lÃ¶schen und alles war schick.</p>
<p>Die Moral von der Geschichte? Manchmal muÃŸ man einem Programm einfach nur ein wenig Zeit geben, damit es sich im Netz umschauen kann. <em>Donâ€™t Panic!</em></p>



 ]]></description>
  <category>Anytype</category>
  <category>Zettelkasten</category>
  <category>Chromebook</category>
  <guid>https://kantel.github.io/posts/2025072201_anytype_chromebook/</guid>
  <pubDate>Tue, 22 Jul 2025 16:50:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025072201_anytype_chromebook/images/anytypechrome.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Ein Partikelsystem mit Proceso und PyScript</title>
  <dc:creator>JÃ¶rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025072101_partikel_proceso/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54670075413/"><img src="https://kantel.github.io/posts/2025072101_partikel_proceso/images/stage2-b.jpg" class="img-fluid"></a></p>
<p>Das <a href="https://kantel.github.io/posts/2025071301_planetensystem_proceso/">kleine Planetensystem mit den rotierenden Kisten</a>, das ich vor etwa einer Woche mit <a href="https://proceso.cc/">Proceso</a> und <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/pyscript.html">PyScript</a> realisierte, erinnerte mich an das Partikelsystem in <a href="https://kantel.github.io/posts/2024042702_microstudio_partikel/">zwei Stufen</a>, an dem ich mich vor mehr als einem Jahr in <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/microstudio.html">microStudio</a> mit <a href="https://brython.info/">Brython</a> versucht hatte. Vor allem, da in der <a href="https://kantel.github.io/posts/2024042801_microstudio_particle2/">zweiten Stufe</a> die Partikel teilweise ebenfalls rotierende Quadrate waren.</p>
<iframe src="proceso/stage1/index.html" width="100%" height="360">
</iframe>
<p>Ã„hnliches mÃ¼ÃŸte man doch auch in Proceso und PyScript programmieren kÃ¶nnen, dachte ich mir, vor allem da <em>Nick McIntyre</em>, der Kopf hinter Proceso, verspricht, daÃŸ die Vektor-Klasse von Proceso Â»lovingly borrowedÂ« von <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/py5.html">Py5</a>, dem Python3-Port von Processing sei. Also habe ich als ersten Schritt erst einmal eine Version mit runden Partikeln erstellt, die noch nicht rotieren.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> proceso <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Sketch</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> uniform, choice</span>
<span id="cb1-3"></span>
<span id="cb1-4">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">640</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">360</span></span>
<span id="cb1-5">START_X, START_Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">450</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span></span>
<span id="cb1-6"></span>
<span id="cb1-7">p5 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Sketch()</span>
<span id="cb1-8"></span>
<span id="cb1-9">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">247</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">254</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">254</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">83</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">187</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">245</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">211</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb1-10">          (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">65</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">148</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">103</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">89</span>)]</span>
<span id="cb1-11"></span>
<span id="cb1-12">particles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> preload():</span>
<span id="cb1-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">global</span> bg1</span>
<span id="cb1-16">    bg1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.load_image(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"assets/bg1.jpg"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the image</span></span>
<span id="cb1-17"></span>
<span id="cb1-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> setup():</span>
<span id="cb1-19">    p5.create_canvas(WIDTH, HEIGHT)</span>
<span id="cb1-20"></span>
<span id="cb1-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw():</span>
<span id="cb1-22">    p5.image(bg1, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-23">    update_particles()</span>
<span id="cb1-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> particle <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> particles:</span>
<span id="cb1-25">       particle.display()</span>
<span id="cb1-26">    </span>
<span id="cb1-27"></span>
<span id="cb1-28"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update_particles():</span>
<span id="cb1-29">    particle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Particle(START_X, START_Y)</span>
<span id="cb1-30">    particles.append(particle)</span>
<span id="cb1-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> particle <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reversed</span>(particles):</span>
<span id="cb1-32">       <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> particle.done:</span>
<span id="cb1-33">          particles.remove(particle)</span>
<span id="cb1-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> particle <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> particles:</span>
<span id="cb1-35">       particle.update()</span>
<span id="cb1-36">          </span>
<span id="cb1-37"></span>
<span id="cb1-38"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Particle():</span>
<span id="cb1-39">  </span>
<span id="cb1-40">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, _x, _y):</span>
<span id="cb1-41">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.Vector(_x, _y)</span>
<span id="cb1-42">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.Vector(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.005</span>)</span>
<span id="cb1-43">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.Vector(uniform(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>), uniform(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>))</span>
<span id="cb1-44">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> choice(colors)</span>
<span id="cb1-45">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">255.0</span></span>
<span id="cb1-46">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> uniform(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span>
<span id="cb1-47">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.done <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb1-48">    </span>
<span id="cb1-49">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-50">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.acc</span>
<span id="cb1-51">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel</span>
<span id="cb1-52">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> uniform(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span></span>
<span id="cb1-53">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan</span>
<span id="cb1-54">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>:</span>
<span id="cb1-55">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.done <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb1-56">      </span>
<span id="cb1-57">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> display(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-58">    p5.fill(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.alpha)</span>
<span id="cb1-59">    p5.circle(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d)</span>
<span id="cb1-60"></span>
<span id="cb1-61">p5.run_sketch(preload<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>preload, setup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>setup, draw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>draw)</span></code></pre></div>
<p>Kern ist die Klasse <code>Particle()</code>, die neben dem Konstruktor die beiden Methoden <code>update()</code> und <code>display()</code> besitzt. Im Hauptprogramm wird innerhalb der <code>draw()</code>-Funktion dann mit <code>update_particles()</code> bei jedem Durchlaufes ein neues Partikel erzeugt und an die Liste <code>particles[]</code> angehÃ¤ngt. Jedes Partikel besitzt nur eine bestimmte Lebensdauer (<code>lifespan</code>). Geht diese zuende, wird das Partikel mit <code>particles.remove(particle)</code> aus der Liste enfernt. Damit es dabei nicht zu einem Schhluckauf beim Durcharbeiten der Liste kommt, wird diese mit</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> particle <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reversed</span>(particles):</span>
<span id="cb2-2">       <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> particle.done:</span>
<span id="cb2-3">          particles.remove(particle)</span></code></pre></div>
<p>rÃ¼ckwÃ¤rts durchlaufen.</p>
<p>Wie <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/p5js.html">P5.js</a>, die JavaScript-Version von Processing, besitzt auch Proceso eine <code>preload()</code>-Funktion, in der in diesem Skript das Hintergrundbild geladen wird. Die <code>preload()</code>-Funktion sorgt dafÃ¼r, daÃŸ das Skript erst dann <code>setup()</code> aufruft, wenn alle dort zu ladenden Assets tatsÃ¤chlich geladen sind. Dadurch ist leider die Variable <code>bg1</code> lokal in <code>preload()</code> und muÃŸ explizit als <code>global</code> deklariert werden, damit sie in <code>draw()</code> auch verwendet werden kann.</p>
<p>Ich mag globale Deklarationen ja bekanntlich nicht, aber ich glaube in diesem Fall ist das zu verschmerzen.</p>
<p>Die verwendete, neonbunte Palette ist Â»<a href="http://cognitiones.kantel-chaos-team.de/multimedia/farbpaletten/mplcyberpunk.html">MPL Cyberpunk</a>Â«, die ich hier erstmalig <a href="https://kantel.github.io/posts/2024041201_neonbunt/">vorgestellt hatte</a>. Sie steht unter der MIT-Lizenz und kann daher auch von Euch verwendet werden.</p>
<iframe src="proceso/stage2/index.html" width="100%" height="360">
</iframe>
<p>Nun aber zum zweiten Sketch mit den rotierenden Quadraten. Die Python vom Hintergrundbild des ersten Sketches ist so stolz auf ihre SchÃ¶pfung, daÃŸ sie ihren Freund, das weiÃŸe Kaninchen mit der groÃŸen Uhr, mitgenommen hat, damit dieses gebÃ¼hrend das Schauspiel bewundert.</p>
<p>Im Skript selber muÃŸten nur wenige Ã„nderungen vorgenommen werden:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> proceso <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Sketch</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> uniform, choice</span>
<span id="cb3-3"></span>
<span id="cb3-4">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">640</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">360</span></span>
<span id="cb3-5">START_X, START_Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">450</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span></span>
<span id="cb3-6"></span>
<span id="cb3-7">p5 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Sketch()</span>
<span id="cb3-8"></span>
<span id="cb3-9">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">247</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">254</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">254</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">83</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">187</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">245</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">211</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb3-10">          (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">65</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">148</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">103</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">89</span>)]</span>
<span id="cb3-11"></span>
<span id="cb3-12">particles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb3-13"></span>
<span id="cb3-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> preload():</span>
<span id="cb3-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">global</span> bg2</span>
<span id="cb3-16">    bg2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.load_image(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"assets/bg2.jpg"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the image</span></span>
<span id="cb3-17"></span>
<span id="cb3-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> setup():</span>
<span id="cb3-19">    p5.create_canvas(WIDTH, HEIGHT)</span>
<span id="cb3-20">    p5.rect_mode(p5.CENTER)</span>
<span id="cb3-21"></span>
<span id="cb3-22"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw():</span>
<span id="cb3-23">    p5.image(bg2, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb3-24">    update_particles()</span>
<span id="cb3-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> particle <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> particles:</span>
<span id="cb3-26">       particle.display()</span>
<span id="cb3-27">    </span>
<span id="cb3-28"></span>
<span id="cb3-29"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update_particles():</span>
<span id="cb3-30">    particle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Particle(START_X, START_Y)</span>
<span id="cb3-31">    particles.append(particle)</span>
<span id="cb3-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> particle <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reversed</span>(particles):</span>
<span id="cb3-33">       <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> particle.done:</span>
<span id="cb3-34">          particles.remove(particle)</span>
<span id="cb3-35">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> particle <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> particles:</span>
<span id="cb3-36">       particle.update()</span>
<span id="cb3-37">          </span>
<span id="cb3-38"></span>
<span id="cb3-39"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Particle():</span>
<span id="cb3-40">  </span>
<span id="cb3-41">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, _x, _y):</span>
<span id="cb3-42">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.Vector(_x, _y)</span>
<span id="cb3-43">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.Vector(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.005</span>)</span>
<span id="cb3-44">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.Vector(uniform(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>), uniform(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>))</span>
<span id="cb3-45">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> choice(colors)</span>
<span id="cb3-46">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb3-47">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.delta_angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> uniform(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.1</span>)</span>
<span id="cb3-48">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">255.0</span></span>
<span id="cb3-49">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> uniform(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span>
<span id="cb3-50">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.done <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb3-51">    </span>
<span id="cb3-52">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-53">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.acc</span>
<span id="cb3-54">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel</span>
<span id="cb3-55">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.delta_angle</span>
<span id="cb3-56">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> uniform(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span></span>
<span id="cb3-57">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan</span>
<span id="cb3-58">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>:</span>
<span id="cb3-59">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.done <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb3-60">      </span>
<span id="cb3-61">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> display(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-62">    p5.fill(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.alpha)</span>
<span id="cb3-63">    p5.push()</span>
<span id="cb3-64">    p5.translate(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y)</span>
<span id="cb3-65">    p5.rotate(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.angle)</span>
<span id="cb3-66">    p5.rect(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d)</span>
<span id="cb3-67">    p5.pop()</span>
<span id="cb3-68"></span>
<span id="cb3-69">p5.run_sketch(preload<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>preload, setup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>setup, draw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>draw)</span></code></pre></div>
<p>Damit die Boxen um ihren eigenen Mittelpunkt rotieren habe ich ihnen im <code>setup()</code> den <code>rect_mode(CENTER)</code> verpasst. Die Rotation selber wird in der Methode <code>display()</code> der Klasse <code>Particle()</code> durchgefÃ¼hrt,</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> display(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-2">    p5.fill(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.alpha)</span>
<span id="cb4-3">    p5.push()</span>
<span id="cb4-4">    p5.translate(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y)</span>
<span id="cb4-5">    p5.rotate(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.angle)</span>
<span id="cb4-6">    p5.rect(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d)</span>
<span id="cb4-7">    p5.pop()</span></code></pre></div>
<p>die erst einmal mit <code>translate()</code> den Ursprung des Koordinatensystems in den Mittelpunkt des Quadrats legt und dann die Rotation um die eigenen Achse vornimmt. NatÃ¼rlich muÃŸ diese Koordinaten-Transformation mit <code>push()</code> und <code>pop()</code> geklammert werden, damit nach jeder Rotation das Koordinatensystem wieder auf seinen ursprÃ¼nglichen Zustand zurÃ¼ckgesetzt wird.</p>
<p>Jedes Partikel hat seinen eigenen Rotationswinkel, der mit <code>self.delta_angle = uniform(-.1, .1)</code> im Konstruktor festgelegt wird. Das sind eigentlich alle Ã„nderungen gegenÃ¼ber dem ersten Sketch.</p>
<section id="verwendete-und-weiterfÃ¼hrende-quellen" class="level3">
<h3 class="anchored" data-anchor-id="verwendete-und-weiterfÃ¼hrende-quellen">Verwendete und weiterfÃ¼hrende Quellen:</h3>
<ul>
<li>Mia Dwyer: <em><a href="https://towardsdatascience.com/how-to-make-cyberpunk-dark-mode-data-visualizations-in-python-b28f82386e75/">How to Make Cyberpunk Â»Dark ModeÂ« Data Visualizations in Python</a></em>, toward data science vom 8&nbsp;April&nbsp;2024 (Bezahlschranke)</li>
<li>JÃ¶rg Kantel: <em>MicroStudio und Python: Ein Partikelsystem, <a href="https://kantel.github.io/posts/2024042702_microstudio_partikel/">Part 1</a> und <a href="https://kantel.github.io/posts/2024042801_microstudio_particle2/">Part 2</a></em>, Der Schockwellenreiter vom 27. und 28.&nbsp;April&nbsp;2024</li>
<li>Nick McIntyre: <em><a href="https://proceso.cc/examples/creative_coding/load_display_image">Load and Display Image</a></em> und <em><a href="https://proceso.cc/examples/creative_coding/flocking">Flocking</a></em>, Proceso-Tutorial 2023</li>
<li>Patt Vira: <em><a href="https://www.youtube.com/watch?v=QlpadcXok8U">P5.js Coding Tutorial â€“ Basics of Particle Systems</a></em>, YouTube 2024</li>
</ul>
<p>Die Programmierung mit Proceso und PyScript macht vor allem deshalb SpaÃŸ, weil man die Ergebnisse wie hier ziemlich schmerzfrei in die eigenen Seiten einbinden kann. Dies wird daher mit Sicherheit nicht das letzte Experiment sein, das ich mit Proceso durchfÃ¼hre. <em>Still digging!</em></p>
<hr>
<p><strong>Hintergrundbilder</strong>: <em>Planetenbeobachter <a href="https://www.flickr.com/photos/schockwellenreiter/54669818985/">Stage 1</a> und <a href="https://www.flickr.com/photos/schockwellenreiter/54668659117/">Stage 2</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: Â»<em>Colored Franco-Belgian comic style: A green python with glasses and a rabbit standing side by side on a distant planet, observing the night sky. The rabbit wears a dark blue vest and holds a large pocket watch. A few planets with their moons and gray clouds can be seen in the sky. A planetary base and two spaceships stand in the landscape</em>Â«. Modell: Flux (Pro), Style: None.</p>


</section>

 ]]></description>
  <category>Proceso</category>
  <category>Python</category>
  <category>PyScript</category>
  <category>Processing</category>
  <category>Nature of Code</category>
  <category>Creative Coding</category>
  <guid>https://kantel.github.io/posts/2025072101_partikel_proceso/</guid>
  <pubDate>Mon, 21 Jul 2025 19:35:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025072101_partikel_proceso/images/stage2.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Spandauer Spiegelung</title>
  <dc:creator>JÃ¶rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025071902_spandauer_spiegelung/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54658323768/"><img src="https://kantel.github.io/posts/2025071902_spandauer_spiegelung/images/spandauerspiegel-b.jpg" class="img-fluid"></a></p>
<p>Und wo ich gerade beim Bildchen verÃ¶ffentlichen bin: Am Dienstag war ich <a href="https://kantel.github.io/posts/2025062501_spandau_bei_berlin/">mal wieder</a> mit der schon mehrfach auf diesen Seiten erwÃ¤hnten netten jungen Dame in <a href="https://de.wikipedia.org/wiki/Berlin-Spandau">Spandau</a> an der <a href="https://de.wikipedia.org/wiki/Zitadelle_Spandau">Zitadelle</a>, dieses Mal im Landschaftsschutzgebiet neben der <a href="https://de.wikipedia.org/wiki/Schleuse_Spandau">Spandauer Schleuse</a> an der Westseite des Zitadellengrabens. Dabei geriet mir diese Spiegelung der Bastion Kronprinz vor die Linse meines Smartphones. Und dieses Photo wollte ich Euch ebenfalls nicht vorenthalten.</p>
<hr>
<p><strong>Photo</strong> (<a href="https://creativecommons.org/licenses/by-sa/4.0/deed.de">cc</a>) 2025: <em><a href="http://cognitiones.kantel-chaos-team.de/cv.html">JÃ¶rg Kantel</a></em></p>



 ]]></description>
  <category>Atlas Curiosa</category>
  <category>Parks und GÃ¤rten</category>
  <category>Photographie</category>
  <guid>https://kantel.github.io/posts/2025071902_spandauer_spiegelung/</guid>
  <pubDate>Sat, 19 Jul 2025 14:25:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025071902_spandauer_spiegelung/images/spandauerspiegel.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Endlich habe ich wieder die Haare schÃ¶n</title>
  <dc:creator>JÃ¶rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025071901_haare_schoen/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54663977751/"><img src="https://kantel.github.io/posts/2025071901_haare_schoen/images/haareschoen-b.jpg" class="img-fluid"></a></p>
<p>Wieder war ein Vierteljahr vergangen und so muÃŸte ich gestern nach SchweineÃ¶de fahren, um mir die Locken richten zu lassen. Aber jetzt habe ich dafÃ¼r auch wieder die Haare schÃ¶n, dank <a href="https://www.facebook.com/coiffeuremarinaundteam/?locale=de_DE">Coiffeure Marina &amp; Team</a> (Facebook-Link).</p>
<p><strong>Da mÃ¼ÃŸt Ihr jetzt durch</strong>! Seit meinem <a href="https://kantel.github.io/posts/2025010601_bye_social_media/">Abschied aus den asozialen Medien</a> habe ich keine Wahl mehr und muÃŸ auch solch belanglose Selfies, die ich frÃ¼her immer ins Gesichtsbuch hochgeladen hatte, in diesem <del>Weblog</del> Kritzelheft verÃ¶ffentlichen. DafÃ¼r ist (m)ein Kritzelheft schlieÃŸlich da.</p>
<hr>
<p><strong>Photo</strong> (<a href="https://creativecommons.org/licenses/by-sa/4.0/deed.de">cc</a>) 2025: <em><a href="http://cognitiones.kantel-chaos-team.de/cv.html">JÃ¶rg Kantel</a></em></p>



 ]]></description>
  <category>Modernes Leben</category>
  <category>Photographie</category>
  <guid>https://kantel.github.io/posts/2025071901_haare_schoen/</guid>
  <pubDate>Sat, 19 Jul 2025 13:55:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025071901_haare_schoen/images/haareschoen.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Aller guten Dinge sind vier: Fraktale XXL (neu in meiner Bibliothek)</title>
  <dc:creator>JÃ¶rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025071601_fraktale_xxl/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54644010565/"><img src="https://kantel.github.io/posts/2025071601_fraktale_xxl/images/dachs-b.jpg" class="img-fluid"></a></p>
<p>Als ich gestern Nacht von einem Ausflug nach Hause kam, fand ich erneut (<a href="https://kantel.github.io/posts/2025070901_fraktale_dynamische_systeme/">wie vor einer Woche schon</a>) ein PÃ¤ckchen in meinem Briefkasten. Und abermals hat mich der Inhalt sehr gefreut. Denn darin lag <a href="https://kantel.github.io/posts/2025060502_fraktales_kochbuch/">ein weiteres</a> Buch, das mir meine hier im <del>Blog</del> Kritzelheft schon oft erwÃ¤hnte Inspirationsquelle, der Â»Freund aus BremenÂ«, <em>Karl-Heinz Becker</em> (aka Â»KalleÂ«) geschickt hatte.</p>
<div style="float: right; margin-left: 12px; margin-top: 6px;">
<a href="https://www.amazon.de/Fraktale-XXL-Bilderbuch-Computergrafische-Experimente/dp/B0FF4497KW/"><img src="https://kantel.github.io/posts/2025071601_fraktale_xxl/images/fraktalexxl.jpg" class="img-fluid"></a>
</div>
<p>Es ist ein neuer Band aus einer Reihe, die der Ideenschmiede von <em>Karl-Heinz Becker</em> und <em>Michel DÃ¶rfler</em> entstammt. Nach den BÃ¼chern Â»<a href="https://www.amazon.de/Kochrezepte-f%C3%BCr-Fraktale-Computergrafische-Experimente/dp/B0DLTZ13JY">Kochrezepte fÃ¼r Fraktale: Computergrafische Experimente mit Python</a>Â«, Â»<a href="https://www.amazon.de/Fraktale-Dynamische-Systeme-Computergrafische-Experimente/dp/B0FDW2LWY6/">Fraktale und Dynamische Systeme: Computergrafische Experimente mit Processing</a>Â« und Â»<a href="https://www.amazon.de/Code-Archiv-Dynamische-Computergrafische-Experimente/dp/B0FDGB16TY/">Code Archiv - Fraktale und Dynamische Systeme: Computergrafische Experimente mit Processing</a>Â« liegt nun als vierter Band die 360&nbsp;Seiten fette Schwarte Â»<a href="https://www.amazon.de/Fraktale-XXL-Bilderbuch-Computergrafische-Experimente/dp/B0FF4497KW/">Fraktale XXL - Bilderbuch der Fraktale: Computergrafische Experimente mit Processing</a>Â« der beiden umtriebigen Autoren auf meinem Schreibtisch. Auch wenn es gestern nacht schon spÃ¤t war â€“ es war eigentlich schon heute frÃ¼h â€“, konnte ich nicht umhin, darin noch ein wenig zu blÃ¤ttern. Und was soll ich dazu schreiben? Auch dieses Buch steckt voller Ideen, die ich fÃ¼r meine eigenen Experimente mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/py5.html">Py5</a> (fÃ¼r statische Bilder) und <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/pyscript.html">PyScript</a> mit <a href="https://proceso.cc/">Proceso</a> (fÃ¼r Animationen) umsetzen mÃ¶chte. Vorher muÃŸ ich allerdings noch herausbekommen, wie man PyScript mit <a href="https://docs.python.org/3/library/turtle.html">Pythons SchildkrÃ¶te</a> verheiratet, denn die beiden haben in diesem Buch Â»geometrische FraktaleÂ« mit einer in Java selbstprogrammierten Turtle erstellt. Aber das sollte ich herausbekommen. Ich bin jedenfalls hochmotiviert, auch mit den Ideen aus Â»Fraktale XXLÂ« einiges anzustellen.</p>
<p><strong>Caveat</strong>: Ich bin mit <em>Karl-Heinz Becker</em> und <em>Michael DÃ¶rfler</em> schon seit vielen Jahren befreundet und daher voreingenommen. Trotzdem bin ich sicher, daÃŸ ich all ihre BÃ¼cher mit gutem Gewissen empfehlen kann.</p>
<section id="literatur" class="level3">
<h3 class="anchored" data-anchor-id="literatur">Literatur</h3>
<p>Hier noch einmal die bibliographischen Angaben (mit Links zur Bezugsquelle Amazon) fÃ¼r alle vier bisher erschienenen BÃ¤nde der Reihe:</p>
<ul>
<li>Karl-Heinz Becker, Michael DÃ¶rfler: <em><a href="https://www.amazon.de/Kochrezepte-f%C3%BCr-Fraktale-Computergrafische-Experimente/dp/B0DLTZ13JY">Kochrezepte fÃ¼r Fraktale: Computergrafische Experimente mit Python</a></em>, Bremen 2025</li>
<li>Karl-Heinz Becker, Michael DÃ¶rfler: <em><a href="https://www.amazon.de/Fraktale-Dynamische-Systeme-Computergrafische-Experimente/dp/B0FDW2LWY6/">Fraktale und Dynamische Systeme: Computergrafische Experimente mit Processing</a></em>, Bremen 2025</li>
<li>Karl-Heinz Becker, Michael DÃ¶rfler: <em><a href="https://www.amazon.de/Code-Archiv-Dynamische-Computergrafische-Experimente/dp/B0FDGB16TY/">Code Archiv - Fraktale und Dynamische Systeme: Computergrafische Experimente mit Processing</a></em>, Bremen 2025</li>
<li>Karl-Heinz Becker, Michael DÃ¶rfler: <em><a href="https://www.amazon.de/Fraktale-XXL-Bilderbuch-Computergrafische-Experimente/dp/B0FF4497KW/">Fraktale XXL - Bilderbuch der Fraktale: Computergrafische Experimente mit Processing</a></em>, Bremen 2025</li>
</ul>
<p>Alle BÃ¤nde sind im Selbstverlag bei <em>Kindle Direct Publishing</em> (Amazon) verÃ¶ffentlicht, um die BÃ¼cher mÃ¶glichst gÃ¼nstig unters Volk bringen zu kÃ¶nnen. Laut <em>Kalle</em> ist noch ein weiterer Band Â»Newton FraktaleÂ« in Arbeit. Ich werde das beobachten und gegebenenfalls berichten. Dann heiÃŸt es vielleicht schon bald: Â»Aller guten Dinge sind fÃ¼nfÂ«. <em>Still digging!</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54644010565/">Der Dachs in seiner Bibliothek</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: Â»<em>Colored Franco-Belgian comic style. Illustration of a badger in a red dressing gown sits in a wing chair in his cave in front of a huge library with many shelves and reads a fairy tale from a thick book</em>Â«. Modell: Flux (Pro), Style: None.</p>


</section>

 ]]></description>
  <category>BÃ¼cher</category>
  <category>Dynamische Systeme</category>
  <category>Mathematik</category>
  <category>Processing</category>
  <category>Processing.py</category>
  <category>P5.js</category>
  <category>Creative Coding</category>
  <guid>https://kantel.github.io/posts/2025071601_fraktale_xxl/</guid>
  <pubDate>Wed, 16 Jul 2025 15:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025071601_fraktale_xxl/images/dachs.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Ein kleines Planetensystem mit Proceso</title>
  <dc:creator>JÃ¶rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025071301_planetensystem_proceso/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54652354418/"><img src="https://kantel.github.io/posts/2025071301_planetensystem_proceso/images/planetensystem-b.jpg" class="img-fluid"></a></p>
<p>Als eines meiner nÃ¤chsten Projekte mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/pyscript.html">PyScript</a> und <a href="https://proceso.cc/">Proceso</a> mÃ¶chte ich in drei Stationen eine kleine Animation eines Planetensystems entwickeln. Dabei mÃ¶chte ich zeigen, wie nÃ¼tzlich fÃ¼r solch eine Simulation die Transformationsoperatoren <code>translate()</code> und <code>rotate()</code> sein kÃ¶nnen.</p>
<section id="stage-1-ein-planet-umkreist-seine-sonne" class="level2">
<h2 class="anchored" data-anchor-id="stage-1-ein-planet-umkreist-seine-sonne">Stage 1: Ein Planet umkreist seine Sonne</h2>
<p>Ich beginne mit einem einfachem System eines Planeten, der seinen Fixstern umkreist. Der Einfachheit halber habe ich die Akteure Sonne und Erde genannt:</p>
<iframe src="proceso/stage1/index.html" width="100%" height="360">
</iframe>
<p>Zu Beginn des Sketches lege ich erst einmal ein paar Zahlen fest:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">640</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">360</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Aspect Ratio: 16:9</span></span>
<span id="cb1-2"></span>
<span id="cb1-3">sun_diam <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span></span>
<span id="cb1-4"></span>
<span id="cb1-5">earth_diam <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span></span>
<span id="cb1-6">earth_orbit_radius <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">130</span></span>
<span id="cb1-7">earth_angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span></code></pre></div>
<p>Diese Zahlen sind durch keine physikalische Wirklichkeit gedeckt, sondern einfach so lange durch Experimente herausgesucht worden, bis sie eine ansprechende Animation ergaben.</p>
<p>Die <code>setup()</code>-Funktion legt einfach nur die GrÃ¶ÃŸe des Ausgabefensters fest:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> setup():</span>
<span id="cb2-2">    p5.create_canvas(WIDTH, HEIGHT)</span></code></pre></div>
<p>In <code>draw()</code> setze ich den Hintergrund auf schwarz und dann zeichne ich die Sonne in die Mitte des Ausgabefensters:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw():</span>
<span id="cb3-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">global</span> earth_angle</span>
<span id="cb3-3">    p5.background(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb3-4"></span>
<span id="cb3-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sonne im Zentrum</span></span>
<span id="cb3-6">    p5.translate(p5.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, p5.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb3-7">    p5.fill(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>)</span>
<span id="cb3-8">    p5.circle(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, sun_diam)</span></code></pre></div>
<p>Die Zeile <code>p5.translate(p5.width//2, p5.height//2)</code> sorgt dafÃ¼r, daÃŸ der Nullpunkt des Koordinatensystem vom linken oberen Rand in die Mitte des Ausgabefensters gelegt wird und so die Sonne mit <code>p5.circle(0, 0, sun_diam)</code> auch genau dort gezeichnet wird. Probiert es aus, der Sketch ist so lauffÃ¤hig.</p>
<p>Die Variable <code>earth_angle</code> ist â€“ wie man im Folgenden sieht â€“ eine Variable, die sich in der <code>draw()</code>-Funktion noch Ã¤ndern wird, daher muÃŸ sie leider als <code>global</code> deklariert werden<sup>1</sup>.</p>
<p>Nun zur Erde, die die Sonne umkreist:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Erde dreht sich um die Sonne</span></span>
<span id="cb4-2">    p5.rotate(earth_angle)</span>
<span id="cb4-3">    p5.translate(earth_orbit_radius, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb4-4">    p5.fill(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>)</span>
<span id="cb4-5">    p5.circle(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, earth_diam)</span>
<span id="cb4-6">    earth_angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span></span></code></pre></div>
<p>Wenn Ihr diese Zeilen Code in die <code>draw()</code>-Funktion unterhalb der Sonne einfÃ¼gt, bekommt Ihr eine blaue Erde, die sich langsam um die Sonne bewegt. Denn mit <code>p5.translate(earth_orbit_radius, 0)</code> wurde das Koordinatensystem erneut verschoben, 130 Pixel von der Sonne entfernt aber auf der gleichen y-Achse wie das Koordinatensystem der Sonne. Da <code>p5.rotate(earth_angle)</code> vor der Koordinatentransformation aufgerufen wird, dreht sich die Erde noch um die Sonne und das Koordinatensystem der Sonne rotiert, ein <code>rotate()</code> hinter der Koordinatentransformation wÃ¼rde bewirken, daÃŸ sich die Erde um sich selbst dreht â€“ das heiÃŸt, daÃŸ das Koordinatensystem der Erde rotieren wÃ¼rde.</p>
<p>Der vollstÃ¤ndige Sketch sieht dann so aus:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> proceso <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Sketch</span>
<span id="cb5-2"></span>
<span id="cb5-3">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">640</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">360</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Aspect Ratio: 16:9</span></span>
<span id="cb5-4"></span>
<span id="cb5-5">sun_diam <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span></span>
<span id="cb5-6"></span>
<span id="cb5-7">earth_diam <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span></span>
<span id="cb5-8">earth_orbit_radius <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">130</span></span>
<span id="cb5-9">earth_angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb5-10"></span>
<span id="cb5-11">p5 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Sketch()</span>
<span id="cb5-12"></span>
<span id="cb5-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> setup():</span>
<span id="cb5-14">    p5.create_canvas(WIDTH, HEIGHT)</span>
<span id="cb5-15"></span>
<span id="cb5-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw():</span>
<span id="cb5-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">global</span> earth_angle</span>
<span id="cb5-18">    p5.background(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb5-19"></span>
<span id="cb5-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sonne im Zentrum</span></span>
<span id="cb5-21">    p5.translate(p5.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, p5.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb5-22">    p5.fill(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>)</span>
<span id="cb5-23">    p5.circle(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, sun_diam)</span>
<span id="cb5-24"></span>
<span id="cb5-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Erde dreht sich um die Sonne</span></span>
<span id="cb5-26">    p5.rotate(earth_angle)</span>
<span id="cb5-27">    p5.translate(earth_orbit_radius, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb5-28">    p5.fill(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>)</span>
<span id="cb5-29">    p5.circle(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, earth_diam)</span>
<span id="cb5-30">    earth_angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span></span>
<span id="cb5-31"></span>
<span id="cb5-32">p5.run_sketch(setup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>setup, draw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>draw)</span></code></pre></div>
</section>
<section id="stage-2-der-mond-dreht-sich-um-die-erde-und-beide-werden-zu-kisten" class="level2">
<h2 class="anchored" data-anchor-id="stage-2-der-mond-dreht-sich-um-die-erde-und-beide-werden-zu-kisten">Stage 2: Der Mond dreht sich um die Erde (und beide werden zu Kisten)</h2>
<iframe src="proceso/stage2/index.html" width="100%" height="360">
</iframe>
<p>Wenn ich der Erde nun noch einen Mond spendiere, brauche ich dafÃ¼r natÃ¼rlich auch erst einmal ein paar Parameter, die ich an den Anfang des Sketches (hinter den Parametern fÃ¼r die Erde) festlege:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1">moon_diam <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb6-2">moon_orbit_radius <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span></span>
<span id="cb6-3">moon_angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span></code></pre></div>
<p>Und die Funktion <code>draw()</code> bekommt hinter den Zeilen fÃ¼r die Erde noch die Zeilen fÃ¼r den Mond angehÃ¤ngt:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Mond dreht sich um die Erde</span></span>
<span id="cb7-2">    p5.rotate(moon_angle)</span>
<span id="cb7-3">    p5.translate(moon_orbit_radius, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb7-4">    p5.fill(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">192</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">192</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb7-5">    p5.circle(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, moon_diam)</span>
<span id="cb7-6">    moon_angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span></span></code></pre></div>
<p>Durch diese Koordinatentransformation steht der Mond im gleichen VerhÃ¤ltnis zur Erde wie die Erde zur Sonne, der Ursprung des Koordinatensystems liegt nun 40 Pixel vom Erdmittelpunkt entfernt. NatÃ¼rlich rotiert in diesen Zeilen das Koordinatensystem der Erde, damit der Eindruck entsteht, daÃŸ der Mond um die Erde kreist.</p>
<p>Das alles funktioniert aber nur, weil bei jedem erneuten Durchlauf der <code>draw()</code>-Funktion das Koordinatensystem zurÃ¼ckgesetzt wird, also alle Transformationen Â»vergessenÂ« werden.</p>
<p>Nun kann man bei Kreisen schwer erkennen, ob sie wirklich rotieren, daher habe ich in einer erweiterten Fassung die Kreise von Erde und Mond durch Quadrate ersetzt<sup>2</sup> (ich habe â€“ damit Ihr die Position der Codezeilen finden, die ersetzte Kreisfunktion jeweils auskommentiert stehen lassen, die Rechteckfunktion wird jeweils direkt unter der auskommentierten Zeile eingefÃ¼gt):</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw():</span>
<span id="cb8-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">global</span> earth_angle, moon_angle</span>
<span id="cb8-3">    p5.background(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb8-4"></span>
<span id="cb8-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sonne im Zentrum</span></span>
<span id="cb8-6">    p5.translate(p5.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, p5.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb8-7">    p5.fill(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>)</span>
<span id="cb8-8">    p5.circle(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, sun_diam)</span>
<span id="cb8-9"></span>
<span id="cb8-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Erde dreht sich um die Sonne</span></span>
<span id="cb8-11">    p5.rotate(earth_angle)</span>
<span id="cb8-12">    p5.translate(earth_orbit_radius, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb8-13">    p5.fill(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>)</span>
<span id="cb8-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># p5.circle(0, 0, earth_diam)</span></span>
<span id="cb8-15">    p5.rect(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>earth_diam<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>earth_diam<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, earth_diam, earth_diam)</span>
<span id="cb8-16">    earth_angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span></span>
<span id="cb8-17"></span>
<span id="cb8-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Mond dreht sich um die Erde</span></span>
<span id="cb8-19">    p5.rotate(moon_angle)</span>
<span id="cb8-20">    p5.translate(moon_orbit_radius, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb8-21">    p5.fill(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">192</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">192</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb8-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># p5.circle(0, 0, moon_diam)</span></span>
<span id="cb8-23">    p5.rect(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>moon_diam<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>moon_diam<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, moon_diam, moon_diam)</span>
<span id="cb8-24">    moon_angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span></span></code></pre></div>
<p>Da sich in <code>draw()</code> auch die Variable <code>moon_angle</code> verÃ¤ndert, muÃŸ auch sie als <code>global</code> deklariert werden. Der Rest des Programmes unterscheidet sich nicht von der vorherigen Fassung, daher habe ich auf einen erneuten Komplett-Abdruck verzichtet.</p>
<p>Wenn Ihr das Skript jetzt startet, dreht sich eine groÃŸe blaue Kiste um die Sonne mit einer kleinen grauen Kiste, die sich um die Erde dreht und Ihr kÃ¶nnen die Rotation der beiden Kisten genau beobachten.</p>
</section>
<section id="stage-3-es-erscheint-die-nemesis" class="level2">
<h2 class="anchored" data-anchor-id="stage-3-es-erscheint-die-nemesis">Stage 3: Es erscheint die Nemesis</h2>
<iframe src="proceso/stage3/index.html" width="100%" height="360">
</iframe>
<p>Doch was ist, wenn ein zweiter Mond â€“ nennen wir ihn als Gegenspielerin des Erdmondes einfach <em><a href="https://de.wikipedia.org/wiki/Nemesis">Nemesis</a></em> â€“ um die Erde kreisen soll? Das Koordinatensystem der Erde ist ja schon vom Koordinatensystem des Mondes ersetzt worden. Ich brauche also eine Funktion, die das Koordinatensystem nur temporÃ¤r verschiebt, so daÃŸ man auf das alte Koordinatensystem wieder zrÃ¼ckgreifen kann, wenn es benÃ¶tigt wird. DafÃ¼r stellt Proceso das Funktionenpaar <code>push()</code> und <code>pop()</code> zur VerfÃ¼gung: Mit <code>push()</code> wird das bisherige Koordinatensystem auf einen Stack gelegt und mit <code>pop()</code> wird es wieder zurÃ¼ckgeholt<sup>3</sup>.</p>
<p>Erst einmal braucht natÃ¼rlich <em>Nemesis</em> ihren eigenen Satz Variablen,</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb9-1">nem_diam <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span></span>
<span id="cb9-2">nem_orbit_radius <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb9-3">nem_angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span></code></pre></div>
<p>wobei <code>nem_angle</code> analog zu den anderen Winkeln zu Beginn der <code>draw()</code>-Schleife als <code>global</code> deklariert werden muÃŸ:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb10-1">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">global</span> earth_angle, moon_angle, nem_angle</span></code></pre></div>
<p>Und dann habe ich der Nemesis und dem Mond jeweils eine eigene (Koordinaten-) Matrix spendiert:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb11-1">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Mond dreht sich um die Erde</span></span>
<span id="cb11-2">    p5.push()</span>
<span id="cb11-3">    p5.rotate(moon_angle)</span>
<span id="cb11-4">    p5.translate(moon_orbit_radius, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb11-5">    p5.fill(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">192</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">192</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb11-6">    p5.rect(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>moon_diam<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>moon_diam<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, moon_diam, moon_diam)</span>
<span id="cb11-7">    p5.pop()</span>
<span id="cb11-8"></span>
<span id="cb11-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Nemesis dreht sich um die Erde</span></span>
<span id="cb11-10">    p5.push()</span>
<span id="cb11-11">    p5.rotate(nem_angle)</span>
<span id="cb11-12">    p5.translate(nem_orbit_radius, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb11-13">    p5.fill(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">220</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>)</span>
<span id="cb11-14">    p5.rect(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>nem_diam<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>nem_diam<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, nem_diam, nem_diam)</span>
<span id="cb11-15">    p5.pop()</span></code></pre></div>
<p>Und zum SchluÃŸ <code>nem_angle</code> um <img src="https://latex.codecogs.com/png.latex?0.015"> inkrementiert. Das gesamte Programm in seiner vollen SchÃ¶nheit sieht nun so aus:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> proceso <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Sketch</span>
<span id="cb12-2"></span>
<span id="cb12-3">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">640</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">360</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Aspect Ratio: 16:9</span></span>
<span id="cb12-4"></span>
<span id="cb12-5">sun_diam <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span></span>
<span id="cb12-6"></span>
<span id="cb12-7">earth_diam <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span></span>
<span id="cb12-8">earth_orbit_radius <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">130</span></span>
<span id="cb12-9">earth_angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb12-10"></span>
<span id="cb12-11">moon_diam <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb12-12">moon_orbit_radius <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span></span>
<span id="cb12-13">moon_angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb12-14"></span>
<span id="cb12-15">nem_diam <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span></span>
<span id="cb12-16">nem_orbit_radius <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb12-17">nem_angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb12-18"></span>
<span id="cb12-19">p5 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Sketch()</span>
<span id="cb12-20"></span>
<span id="cb12-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> setup():</span>
<span id="cb12-22">    p5.create_canvas(WIDTH, HEIGHT)</span>
<span id="cb12-23"></span>
<span id="cb12-24"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw():</span>
<span id="cb12-25">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">global</span> earth_angle, moon_angle, nem_angle</span>
<span id="cb12-26">    p5.background(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb12-27"></span>
<span id="cb12-28">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sonne im Zentrum</span></span>
<span id="cb12-29">    p5.translate(p5.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, p5.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb12-30">    p5.fill(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>)</span>
<span id="cb12-31">    p5.circle(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, sun_diam)</span>
<span id="cb12-32"></span>
<span id="cb12-33">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Erde dreht sich um die Sonne</span></span>
<span id="cb12-34">    p5.rotate(earth_angle)</span>
<span id="cb12-35">    p5.translate(earth_orbit_radius, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb12-36">    p5.fill(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>)</span>
<span id="cb12-37">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># p5.circle(0, 0, earth_diam)</span></span>
<span id="cb12-38">    p5.rect(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>earth_diam<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>earth_diam<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, earth_diam, earth_diam)</span>
<span id="cb12-39"></span>
<span id="cb12-40">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Mond dreht sich um die Erde</span></span>
<span id="cb12-41">    p5.push()</span>
<span id="cb12-42">    p5.rotate(moon_angle)</span>
<span id="cb12-43">    p5.translate(moon_orbit_radius, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb12-44">    p5.fill(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">192</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">192</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb12-45">    p5.rect(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>moon_diam<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>moon_diam<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, moon_diam, moon_diam)</span>
<span id="cb12-46">    p5.pop()</span>
<span id="cb12-47"></span>
<span id="cb12-48">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Nemesis dreht sich um die Erde</span></span>
<span id="cb12-49">    p5.push()</span>
<span id="cb12-50">    p5.rotate(nem_angle)</span>
<span id="cb12-51">    p5.translate(nem_orbit_radius, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb12-52">    p5.fill(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">220</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>)</span>
<span id="cb12-53">    p5.rect(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>nem_diam<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>nem_diam<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, nem_diam, nem_diam)</span>
<span id="cb12-54">    p5.pop()</span>
<span id="cb12-55">    </span>
<span id="cb12-56">    earth_angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span></span>
<span id="cb12-57">    moon_angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span></span>
<span id="cb12-58">    nem_angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.015</span></span>
<span id="cb12-59"></span>
<span id="cb12-60">p5.run_sketch(setup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>setup, draw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>draw)</span></code></pre></div>
<p>NatÃ¼rlich hÃ¤tte man sich bei der <em>Nemesis</em> das <code>push()</code>- und <code>pop()</code>-Paar sparen kÃ¶nnen, aber so ist es sauberer und Ihr kÃ¶nnt der Sonne noch mehr Trabanten mit eigenen Monden spendieren, ohne mit den Koordinatensystemen durcheinander zu geraten.</p>
<p>Wenn Ihr Euch das Programm anschaut, werdet Ihr sehen, warum ich fÃ¼r die Erde und ihre Trabanten Rechtecke gewÃ¤hlt habe. So ist zu erkennen, daÃŸ die Erde mit genau einer Seite immer zur Sonne zeigt und die beiden Trabanten ebenfalls mit genau einer Seite zur Erde. Das ist, weil sie sich jeweils in ihrem eigenen Koordinatensystem bewegen, dessen eine Achse immer das Zentrum des darÃ¼berliegenden Koordinatensystems schneidet.</p>
<p>FÃ¼r die Monde ist das okay, wenn Ihr der Erde aber Tag und Nacht spendieren wollt, mÃ¼sst Ihr ihr noch ein zweites <code>rotate()</code> <strong>nach</strong> der Koordinatentransformation spendieren.</p>
<p>Wie immer ist das ProgrÃ¤mmchen ausbaubar. Ihr kÃ¶nnt zum Beispiel mehrere Planeten jeweils mit ihren eigenen Koordinatensystemen um den Fixstern kreisen lassen. Alle diese Planeten kÃ¶nnt Ihr mit beliebig vielen Monden umgeben, die alle wiederum ihr eigenes Koordinatensystem besitzen. Und wenn Ihr wirkliche Heroinnen oder Helden sein wollt: Schnappt Euch ein Buch mit den <a href="https://de.wikipedia.org/wiki/Keplersche_Gesetze">Keplerschen Gesetzen zur Planetenbewegung</a> und simuliert damit ein realistischeres Planetensystem.</p>
</section>
<section id="literatur" class="level2">
<h2 class="anchored" data-anchor-id="literatur">Literatur</h2>
<p>Die Idee zu diesem Sketch und einige der Parameter habe ich dem wunderbaren Buch Â»Processing for Visual Artists â€“ How to Create Expressive Images and Interactive ArtÂ«, Natick, MA (A K Peters) 2010, von <em>Andrew Glassner</em>, Seiten 192-200 entnommen und von Java nach Python portiert.</p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54652354418/">Planetenbeobachter</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: Â»<em>Colored Franco-Belgian comic style: A green python with glasses and a rabbit stand on a distant planet, observing the night sky. The rabbit wears a dark blue vest and holds a large pocket watch. A few planets with their moons and gray clouds can be seen in the sky. A planetary base and two spaceships stand in the landscape</em>Â«. Modell: Flux (Pro), Style: None.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">FuÃŸnoten</h2>

<ol>
<li id="fn1"><p>Eigentlich versuche ich ja, <code>global</code>-Deklarationen zu vermeiden, aber in diesem Falle ist sie â€“ glaube ich â€“ vertretbar.â†©ï¸Ž</p></li>
<li id="fn2"><p>Ich weiÃŸ, Planeten sind meist kugelfÃ¶rmig und keine Kisten, aber in der virtuellen Welt von Proceso ist alles mÃ¶glich.â†©ï¸Ž</p></li>
<li id="fn3"><p>Leider kennt Proceso dafÃ¼r nicht das pythonische <code>with push():</code>-Statement, das die Befehle fÃ¼r das neue Koordinatensystem durch EinrÃ¼cken klammern und so das jeweilige <code>pop()</code> Ã¼berflÃ¼ssig machen wÃ¼rde.â†©ï¸Ž</p></li>
</ol>
</section></div> ]]></description>
  <category>Proceso</category>
  <category>Python</category>
  <category>PyScript</category>
  <category>Processing</category>
  <category>Simulation</category>
  <category>Creative Coding</category>
  <guid>https://kantel.github.io/posts/2025071301_planetensystem_proceso/</guid>
  <pubDate>Sun, 13 Jul 2025 17:40:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025071301_planetensystem_proceso/images/planetensystem.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>SpaÃŸ mit Proceso: For Your Eyes Only</title>
  <dc:creator>JÃ¶rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025071201_for_your_eyes_only/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54650041848/"><img src="https://kantel.github.io/posts/2025071201_for_your_eyes_only/images/eyes-b.jpg" class="img-fluid"></a></p>
<p>Nach meinem <a href="https://kantel.github.io/posts/2025071101_pythagoras_baum_py5/">gestrigen Abenteuer</a> mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/py5.html">Py5</a>, dem Python3-Port von Processing, wollte ich heute etwas vÃ¶llig Sinnbefreites mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/pyscript.html">PyScript</a> und <a href="https://proceso.cc/">Proceso</a> anstellen, denn Proceso lehnt sich sehr stark an Py5 an (es ist in der Syntax nahezu identisch), nur daÃŸ es im Browser lauffÃ¤hige Sketche erzeugt.</p>
<p>Ã„ltere Mac-Nutzer erinnern sich vielleicht noch an ein Gadget, das von System&nbsp;7 bis System&nbsp;9 bei vielen Anwendern den Desktop zierte: Augen, die mit ihren Pupillen dem Mauszeiger folgten<sup>1</sup>. Genau dieses Gadget wollte ich mit Python und Proceso nachbauen:</p>
<iframe src="proceso/index.html" width="100%" height="360">
</iframe>
<p>Herausgekommen ist eine Art Emoji mit einem grellgelben, lÃ¤chelnden Gesicht und groÃŸen, runden Augen, deren Pupillen tatsÃ¤chlich dem Mauszeiger folgen. Erreicht habe ich dies mit folgendem, kleinen Script:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> proceso <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Sketch</span>
<span id="cb1-2"></span>
<span id="cb1-3">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">640</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">360</span></span>
<span id="cb1-4"></span>
<span id="cb1-5">p5 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Sketch()</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> setup():</span>
<span id="cb1-8">    p5.create_canvas(WIDTH, HEIGHT)</span>
<span id="cb1-9">    p5.stroke_weight(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb1-10"></span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw():</span>
<span id="cb1-13">    p5.background(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">139</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">134</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">130</span>)</span>
<span id="cb1-14">    face()</span>
<span id="cb1-15">    eye(p5.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>, p5.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-16">    eye(p5.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>, p5.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-17"></span>
<span id="cb1-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> face():</span>
<span id="cb1-19">    p5.fill(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">244</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">244</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-20">    p5.circle(p5.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, p5.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>)</span>
<span id="cb1-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Den Mund zeichnen</span></span>
<span id="cb1-22">    p5.arc(p5.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, p5.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span>,</span>
<span id="cb1-23">           p5.QUARTER_PI, p5.PI <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> p5.QUARTER_PI)</span>
<span id="cb1-24"></span>
<span id="cb1-25"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> eye(x, y):</span>
<span id="cb1-26">    p5.fill(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>)</span>
<span id="cb1-27">    p5.circle(x, y, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>)</span>
<span id="cb1-28">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Die Pupillen folgen der Maus</span></span>
<span id="cb1-29">    mx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.mouse_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x</span>
<span id="cb1-30">    my <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p5.mouse_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y</span>
<span id="cb1-31">    p5.fill(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb1-32">    p5.circle(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> mx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> my<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>)</span>
<span id="cb1-33">    </span>
<span id="cb1-34">p5.run_sketch(setup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>setup, draw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>draw)</span></code></pre></div>
<p>Es wÃ¤re nicht wirklich notwendig gewesen, aber um der ModularitÃ¤t willen habe ich das Zeichnen des Gesichtes in die Funktion <code>face()</code> und das Zeichnen der Augen in die Funtion <code>eye()</code> ausgelagert. Mit den Parametern in dem <code>circle()</code>-Aufruf in <code>eye()</code> habe ich solange experimentiert, bis das Ergebnis meinen Vorstellungen entsprach.</p>
<p>Die Idee zu den Augen habe ich einem <a href="https://lernprocessing.wordpress.com/2010/01/10/funktionen/">(Java-) Processing-Tutorial</a> von <em>Thomas Koberger</em> entnommen, das ich variiert und nach Proceso Ã¼bertragen habe. Auf <a href="https://lernprocessing.wordpress.com/2010/01/18/processing-links/">seinen Seiten</a> findet Ihr Ã¼brigens noch viele weitere, interessante und lehrreiche Tutorials, so daÃŸ ich Euch einen Besuch dort empfehle â€“ auch wenn sie schon seit lÃ¤ngerem kein Update mehr erfahren haben.</p>
<p>Procesos Syntax ist wirklich sehr stark an Py5 angelehnt, vieles kann man Eins-zu-Eins Ã¼bernehmen. Auch ich habe mich fÃ¼r dieses Skriptchen bei der <a href="https://py5coding.org/reference/sketch_arc.html">Py5-Dokumentation</a> bedient. Wenn ich mir was wÃ¼nschen dÃ¼rfte, wÃ¤re es, daÃŸ sich <em>James Schmitz</em>, der SchÃ¶pfer von Py5, der auch schon Ã¼ber einen <a href="https://kantel.github.io/posts/2024072701_py5_pyscript/">Port nach PyScript spekuliert</a> hatte, und <em>Nick McIntyre</em>, der Kopf hinter Proceso, zusammenraufen und die bestehenden LÃ¼cken in der Syntax von Py5 und Proceso schlieÃŸen. Man wird ja schlieÃŸlich noch trÃ¤umen dÃ¼rfen.</p>
<section id="verwendete-literatur" class="level2">
<h2 class="anchored" data-anchor-id="verwendete-literatur">Verwendete Literatur</h2>
<ul>
<li>Thomas Koberger: <em><a href="https://lernprocessing.wordpress.com/2010/01/10/funktionen/">Funktionen</a></em>, Processing-Tutorial vom 10. Januar 2010</li>
</ul>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">FuÃŸnoten</h2>

<ol>
<li id="fn1"><p>Eigentlich war es ein <a href="https://de.wikipedia.org/wiki/X_Window_System">X11</a>-Gagdet, das nach MacOS portiert worden war.â†©ï¸Ž</p></li>
</ol>
</section></div> ]]></description>
  <category>Proceso</category>
  <category>Python</category>
  <category>Py5</category>
  <category>PyScript</category>
  <category>Processing</category>
  <category>Creative Coding</category>
  <guid>https://kantel.github.io/posts/2025071201_for_your_eyes_only/</guid>
  <pubDate>Sat, 12 Jul 2025 16:10:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025071201_for_your_eyes_only/images/eyes.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Der Pythagoras-Baum in Python (Py5)</title>
  <dc:creator>JÃ¶rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025071101_pythagoras_baum_py5/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54648032963/"><img src="https://kantel.github.io/posts/2025071101_pythagoras_baum_py5/images/rabbit-b.jpg" class="img-fluid"></a></p>
<p>Heute mÃ¶chte ich mein <a href="https://kantel.github.io/posts/2025060201_spass_mit_tigerjython/">vor zwei Tagen gegebenes Versprechen</a> einlÃ¶sen und mal wieder etwas mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/py5.html">Py5</a>, dem Python&nbsp;3-Port von Processing, anstellen. Ich habe dafÃ¼r den <a href="https://de.wikipedia.org/wiki/Pythagoras-Baum">Pythagoras-Baum</a> wieder <a href="https://kantel.github.io/posts/2025060201_spass_mit_tigerjython/">hervorgekramt</a> und in einem leicht anderen Algorithmus<sup>1</sup>, aber auch wieder rekursiv, implementiert.</p>
<p>Die Geschichte des Pythagoras-Baumes<sup>2</sup> geht auf den niederlÃ¤ndischen Ingenieur und spÃ¤teren Mathematiklehrer <em>Albert E. Bosman</em> (1891â€“1961) zurÃ¼ck. Er entwarf 1942 wÃ¤hrend des 2.&nbsp;Weltkrieges in seiner Freizeit an einem Zeichenbrett, an dem er sonst U-Boot-PlÃ¤ne zeichnete, geometrische Muster. Seine Graphiken wurden 1957 in dem Buch Â»<em>Het wondere onderzoekingsveld der vlakke meetkunde</em>Â« verÃ¶ffentlicht. Der Pythagoras-Baum beruht auf einer rekursiven Abbildung des Pythagoras-Lehrsatzes: Die beiden Quadrate auf den Katheten des rechtwinkligen Dreiecks dienen als Verzweigung, auf dem jedes Kathetenquadrat sich wiederum verzweigt.</p>
<section id="der-asymmetrische-pythagoras-baum" class="level2">
<h2 class="anchored" data-anchor-id="der-asymmetrische-pythagoras-baum">Der asymmetrische Pythagoras-Baum</h2>
<p><a href="https://www.flickr.com/photos/schockwellenreiter/54642425458/"><img src="https://kantel.github.io/posts/2025071101_pythagoras_baum_py5/images/asympyth.jpg" class="img-fluid"></a></p>
<p>Der asymmetrische Pythagoras-Baum ist die allgemeine Form des Pythagoras-Baumes. Um die Funktion rekursiv aufrufen zu kÃ¶nnen, muÃŸte ich sie aus der <code>draw()</code>-Funktion auslagern und sie in einen eigenen Aufruf packen:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw_pythagoras(a1, a2, b1, b2, level):</span>
<span id="cb1-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (level <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb1-3">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Eckpunkte berechnen</span></span>
<span id="cb1-4">        n1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>b2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> a2</span>
<span id="cb1-5">        n2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>a1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1</span>
<span id="cb1-6">        c1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n1</span>
<span id="cb1-7">        c2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n2</span>
<span id="cb1-8">        d1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n1</span>
<span id="cb1-9">        d2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n2</span>
<span id="cb1-10">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Start-Rechteck zeichnen</span></span>
<span id="cb1-11">        py5.fill(palette[(level<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>])</span>
<span id="cb1-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> py5.begin_closed_shape():</span>
<span id="cb1-13">            py5.vertex(a1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> xmitte, ymax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> a2)</span>
<span id="cb1-14">            py5.vertex(b1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> xmitte, ymax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> b2)</span>
<span id="cb1-15">            py5.vertex(c1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> xmitte, ymax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> c2)</span>
<span id="cb1-16">            py5.vertex(d1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> xmitte, ymax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> d2)</span>
<span id="cb1-17">        e1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> d1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> w1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(c1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> d1) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> w2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>n1</span>
<span id="cb1-18">        e2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> d2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> w1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(c2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> d2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> w2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>n2</span>
<span id="cb1-19">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Schenkel-Quadrate zeichnen</span></span>
<span id="cb1-20">        draw_pythagoras(e1, e2, c1, c2, level<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-21">        draw_pythagoras(d1, d2, e1, e2, level<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<p>Zum Zeichnen der einzelnen Quadrate habe ich nicht die <code>rect()</code>-Funktion genutzt, sondern Shapes, mit denen sich Punkte zu einem beliebigen Gebilde oder Polygon zusammenfassen lassen. Hierzu mÃ¼ssen sie erst einmal mit <code>with begin_closed_shape()</code> geklammert werden. Darin werden dann mit <code>vertex(x, y)</code> nacheinander die einzelnen Punkte aufgerufen, die (im einfachsten Fall) durch Linien miteinander verbunden werden sollen. Mit <code>begin_closed_shape</code> teile ich dem Sketch auch mit, daÃŸ das entstehende Polygon auf jeden Fall geschlossen werden soll, ein einfaches with <code>begin_shape()</code> wÃ¼rde es im Zweifelsfall offen lassen.</p>
<p>Der Aufruf ist rekursiv: Nachdem zuerst das Grundquadrat gezeichnet wurde, werden die rechten und die linken Schenkelquadrate gezeichnet, die dann wieder als Grundquadrate fÃ¼r den nÃ¤chsten Rekursionslevel fungieren.</p>
<p>Py5 ist gegenÃ¼ber Rekursionstiefen relativ robust. Die benutzte Rekursionstiefe von 12 wird klaglos abgearbeitet, auch Rekursionstiefen bis 20 sind kein Problem. Auch eine Rekursionstiefe von 22 oder gar 25 wurde â€“ mit etwas Geduld â€“ absturzfrei berechnet. Der Erkenntnisgewinn ist dabei aber vergleichsweise gering, da die einzelnen Â»BlÃ¤tterÂ« nur noch ein undurchschaubarer Pixelhaufen sind.</p>
</section>
<section id="die-farben" class="level2">
<h2 class="anchored" data-anchor-id="die-farben">Die Farben</h2>
<p>FÃ¼r die Farben habe ich eine Palette in einer Liste zusammengestellt, die der Reihe nach die Quadrate einfÃ¤rbt. Da die Liste nur 10 Elemente enthÃ¤lt, habe ich mit <code>fill(palette[(level-1)%10])</code> dafÃ¼r gesorgt, daÃŸ nach 10 Leveln die Paletten-Liste wieder von vorne durchlaufen wird.</p>
</section>
<section id="der-quellcode" class="level2">
<h2 class="anchored" data-anchor-id="der-quellcode">Der Quellcode</h2>
<p>Da die eigentliche Aufgabe des Programms in die Funktion <code>draw_pythagoras()</code> ausgelagert wurde, ist der restlich Quellcode von erfrischender KÃ¼rze:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> py5</span>
<span id="cb2-2"></span>
<span id="cb2-3">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">640</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span></span>
<span id="cb2-4"></span>
<span id="cb2-5">palette <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [py5.color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">189</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">183</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">110</span>), py5.color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), py5.color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">34</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">139</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">105</span>),</span>
<span id="cb2-6">           py5.color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">152</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">251</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">152</span>), py5.color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">107</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">47</span>), py5.color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">139</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">69</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>),</span>
<span id="cb2-7">           py5.color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">154</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">205</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>), py5.color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">107</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">142</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span>), py5.color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">139</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">134</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">78</span>),</span>
<span id="cb2-8">           py5.color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">139</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">115</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>)]</span>
<span id="cb2-9"></span>
<span id="cb2-10">xmax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600</span></span>
<span id="cb2-11">xmitte <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span></span>
<span id="cb2-12">ymax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">440</span></span>
<span id="cb2-13">level <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span></span>
<span id="cb2-14">w1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.36</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Winkel 1</span></span>
<span id="cb2-15">w2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.48</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Winkel 2</span></span>
<span id="cb2-16"></span>
<span id="cb2-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> setup():</span>
<span id="cb2-18">    py5.size(WIDTH, HEIGHT)</span>
<span id="cb2-19">    py5.window_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Asymmetrischer Pythagorasbaum"</span>)</span>
<span id="cb2-20">    py5.background(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">234</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">218</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">184</span>)</span>
<span id="cb2-21">    py5.stroke_weight(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-22">    py5.no_loop()</span>
<span id="cb2-23"></span>
<span id="cb2-24"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw_pythagoras(a1, a2, b1, b2, level):</span>
<span id="cb2-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (level <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb2-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Eckpunkte berechnen</span></span>
<span id="cb2-27">        n1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>b2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> a2</span>
<span id="cb2-28">        n2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>a1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b1</span>
<span id="cb2-29">        c1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n1</span>
<span id="cb2-30">        c2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n2</span>
<span id="cb2-31">        d1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n1</span>
<span id="cb2-32">        d2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n2</span>
<span id="cb2-33">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Start-Rechteck zeichnen</span></span>
<span id="cb2-34">        py5.fill(palette[(level<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>])</span>
<span id="cb2-35">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> py5.begin_closed_shape():</span>
<span id="cb2-36">            py5.vertex(a1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> xmitte, ymax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> a2)</span>
<span id="cb2-37">            py5.vertex(b1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> xmitte, ymax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> b2)</span>
<span id="cb2-38">            py5.vertex(c1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> xmitte, ymax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> c2)</span>
<span id="cb2-39">            py5.vertex(d1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> xmitte, ymax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> d2)</span>
<span id="cb2-40">        e1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> d1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> w1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(c1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> d1) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> w2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>n1</span>
<span id="cb2-41">        e2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> d2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> w1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(c2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> d2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> w2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>n2</span>
<span id="cb2-42">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Schenkel-Quadrate zeichnen</span></span>
<span id="cb2-43">        draw_pythagoras(e1, e2, c1, c2, level<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-44">        draw_pythagoras(d1, d2, e1, e2, level<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-45"></span>
<span id="cb2-46"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw():</span>
<span id="cb2-47">    draw_pythagoras(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>(xmax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, xmax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, level)</span>
<span id="cb2-48">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I did it, Babe!"</span>)</span>
<span id="cb2-49"></span>
<span id="cb2-50">py5.run_sketch()</span></code></pre></div>
<p>Auch wenn es nicht nÃ¶tig gewesen wÃ¤re, ich mag es einfach (und es dient der Ãœbersichtlichkeit), wenn ich meine Py5-Sketche mit <code>def setup()</code> und <code>def draw()</code> gliedere. Mit <code>no_loop()</code> habe ich dann dafÃ¼r gesorgt, daÃŸ die <code>draw()</code>-Schleife auch nur einmal abgearbeitet wird.</p>
</section>
<section id="der-symmetrische-pythagoras-baum" class="level2">
<h2 class="anchored" data-anchor-id="der-symmetrische-pythagoras-baum">Der symmetrische Pythagoras-Baum</h2>
<p><a href="https://www.flickr.com/photos/schockwellenreiter/54642425448/"><img src="https://kantel.github.io/posts/2025071101_pythagoras_baum_py5/images/sympyth.jpg" class="img-fluid"></a></p>
<p>Der symmetrische Pythagoras-Baum ist einer der mÃ¶glichen SpezialfÃ¤lle. Man erhÃ¤lt ihn zum Beispiel, wenn man die beiden Winkelkonstanten <code>w1</code> und <code>w2</code> jeweils beide auf <img src="https://latex.codecogs.com/png.latex?0.5"> setzt.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1">xmax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600</span></span>
<span id="cb3-2">xmitte <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">330</span></span>
<span id="cb3-3">ymax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">420</span></span>
<span id="cb3-4">level <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span></span>
<span id="cb3-5">w1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Winkel 1</span></span>
<span id="cb3-6">w2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Winkel 2</span></span></code></pre></div>
<p>Die Ã„nderungen der drei Werte <code>xmax</code>, <code>xmitte</code> und <code>ymax</code> sind rein kosmetischer Natur. Sie dienen nur dazu, den Baum im Ausgabefenster hÃ¼bsch zu zentrieren.</p>
<p>Lediglich diese Parameter sind zu Ã¤ndern, das Ã¼brige Programm bleibt unverÃ¤ndert.</p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54648032963/">Das Kaninchen und die Python</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: Â»<em>Colored Franco-Belgian comic style. Illustration of a green python with glasses walks with a rabbit through a futuristic, cubic world. The rabbit wears a dark blue vest and holds a large pocket watch. The python points to a strange tree made of cubes</em>Â«. Modell: Flux (Pro), Style: None.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">FuÃŸnoten</h2>

<ol>
<li id="fn1"><p>Den rekursiven Algorithmus habe ich einem Pascal-Programm aus JÃ¼rgen Plate: <em>Computergrafik: EinfÃ¼hrung â€“ Algorithmen â€“ Programmentwicklung</em>, MÃ¼nchen (Franzis) 2.&nbsp;Auflage 1988, Seiten 460-462 entnommen.â†©ï¸Ž</p></li>
<li id="fn2"><p>Nach Dietmar Herrmann, <em>Algorithmen fÃ¼r Chaos und Fraktale</em>, Bonn (Addison-Wesley) 1994, Seiten 170f.â†©ï¸Ž</p></li>
</ol>
</section></div> ]]></description>
  <category>Py5</category>
  <category>Python</category>
  <category>Dynamische Systeme</category>
  <category>Mathematik</category>
  <category>Processing</category>
  <category>Creative Coding</category>
  <guid>https://kantel.github.io/posts/2025071101_pythagoras_baum_py5/</guid>
  <pubDate>Fri, 11 Jul 2025 15:20:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025071101_pythagoras_baum_py5/images/rabbit.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
