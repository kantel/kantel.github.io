<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Der Schockwellenreiter</title>
<link>https://kantel.github.io/index.html</link>
<atom:link href="https://kantel.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description>Schockwellenreiter</description>
<generator>quarto-1.2.269</generator>
<lastBuildDate>Fri, 06 Jan 2023 17:30:00 GMT</lastBuildDate>
<item>
  <title>Twine und statische Seiten – Video-Tutorials zum Wochenende</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023010601_twine_und_statische_seiten/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://upload.wikimedia.org/wikipedia/commons/9/9f/Alice%27s_Adventures_in_Wonderland_-_Carroll%2C_Robinson_-_S119_-_%27What_day_of_the_month_is_it%27_he_said%2C_turning_to_Alice.jpg"><img src="https://kantel.github.io/posts/2023010601_twine_und_statische_seiten/images/teapartyrobinson-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Auch wenn es schon spät geworden ist, möchte ich auch eine kurze Tradition nicht brechen und Euch heute ein paar Videos vorstellen, mit denen Ihr Euch vergnügen könnt, falls Euch wegen der zu erwartenden Regentage am Wochenende die Decke auf den Kopf fällt:</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/7nd98qsBVNk" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Zuerst einmal: Ich möchte die Arbeit an meinem kleinen Pizza-Flieger kurz unterbrechen, weil ich große Lust habe, an meinem <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/twine2.html">Twine</a>-Universum zu basteln und daher ein paar <a href="http://blog.schockwellenreiter.de/2022/09/2022090601.html">Ausflüge ins Wunderland</a> zu unternehmen. Inspiration für diesen Entschluß war zum einem das Webinar »<a href="https://www.youtube.com/watch?v=7nd98qsBVNk">Making Interactive Fiction with Twine</a>«, das vor ein paar Tagen in meine Timeline auffpoppte.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/VC7TuFG1WYg" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Und dann tauchte zeitgleich auch noch das Tutorial »<a href="https://www.youtube.com/watch?v=VC7TuFG1WYg">Create Inventory in Harlowe (Twine)</a>« auf, das ich Euch nicht vorenthalten möchte.</p>
<p><strong>Es gibt aber auch noch andere Themen</strong>: Zwar hoffe ich, daß ich mit <a href="http://cognitiones.kantel-chaos-team.de/webworking/staticsites/quarto.html">Quarto</a> meinen endgültigen Generator für statische Seiten (und für dieses <del>Blog</del> Kritzelheft) gefunden habe, aber bekanntermaß interessert mich das Thema »<a href="http://cognitiones.kantel-chaos-team.de/webworking/staticsites/staticsites.html">Statische Seiten</a>« und die Werkzeuge, mit denen man diese erstellen kann.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/F8iOU1ci19Q" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Denn auch andere Mütter haben schöne Töchter. Das ist vor allem der in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/ruby/ruby.html">Ruby</a> geschriebene Platzhirsch <a href="http://cognitiones.kantel-chaos-team.de/webworking/staticsites/jekyll.html">Jekyll</a>, der auch so etwas wie das »offiziöse« Werkzeug für <a href="http://cognitiones.kantel-chaos-team.de/programmierung/ruby/ruby.html">GitHub Pages</a> ist. Das Tool wird in »<a href="https://www.youtube.com/watch?v=F8iOU1ci19Q">Meet Jekyll</a>« ausführlich gewürdigt.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/_STFQc9Y2zY" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Und wenn es um Schnelligkeit geht, soll angeblich kein Weg an <a href="http://cognitiones.kantel-chaos-team.de/webworking/staticsites/hugo.html">Hugo</a>, den in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/go.html">Go</a> geschriebenen Generator für statische Seiten vorbeigehen. Dieses Teil wird in dem Tutorial »<a href="https://www.youtube.com/watch?v=_STFQc9Y2zY">Blogging with Hugo and GitHub Pages</a>« von <em>Sarah Gibson</em> ausführlich vorgestellt.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/RyeWjQET0Zk" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p><strong>War sonst noch was?</strong> Ach ja, zu meinen <a href="https://kantel.github.io/posts/20221222901_tiled_for_dummies/">hier vorgestellten</a> »<a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/tiled.html">Tiled</a>«-Tutorials gibt es noch einen kurzen Nachschlag: »<a href="https://www.youtube.com/watch?v=RyeWjQET0Zk">Tiled - Creating Paths, Terrains, Trees, Collisions</a>« von <em>Mike Cropper</em>. Ich wollte meinen Feedreader ein wenig aufräumen und mir fiel einfach nicht ein, wo ich den Link sonst noch unterbringen könnte.</p>
<p><em>(Bildquelle: <a href="https://commons.wikimedia.org/wiki/File:Alice%27s_Adventures_in_Wonderland_-_Carroll,_Robinson_-_S119_-_%27What_day_of_the_month_is_it%27_he_said,_turning_to_Alice.jpg">Wikimedia Commons</a>)</em></p>



 ]]></description>
  <category>Twine</category>
  <category>Statische Seiten</category>
  <guid>https://kantel.github.io/posts/2023010601_twine_und_statische_seiten/index.html</guid>
  <pubDate>Fri, 06 Jan 2023 17:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023010601_twine_und_statische_seiten/images/teapartyrobinson.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Hilfe! Wo ist »Einfügen« auf meinem Mac?</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023010504_insert_key/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://animationresources.org/pics/opper02-big.jpg"><img src="https://kantel.github.io/posts/2023010504_insert_key/images/opper02-big-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Versehentlich (und unbemerkt) hatte ich bei <a href="http://cognitiones.kantel-chaos-team.de/mathematik/rstudio.html">RStudio</a> vor ein paar Tagen irgendeine Taste gedrückt, die den Editor in den <code>insert</code>-Mode versetzte und aus diesem Mode kam ich ums Verrecken nicht mehr heraus. Nur ein Neustart des Programms half mir aus der Patsche.</p>
<p>Als dies mir heute zum zweiten Mal passierte, war ich es leid und warf die <a href="https://duckduckgo.com/">Suchmaschine meines Vertrauens</a> an. Sie half mir aber auch nicht weiter, da sie meinte, daß ich mit der <code>Insert</code>-Taste dieses Verhalten ein- und wieder ausschalten könne. Nur… mein Apple besitzt keine <code>Insert</code>-Taste. Und die vorgeschlagene Tastenkombination <code>fn</code> + <code>Enter</code> blieb auch wirkungslos.</p>
<p>Nach etlichen Minuten wilden Herumprobierens auf meiner angeschlossenen, erweiterten Tastatur fand ich heraus, daß die dort mit »Hilfe« beschriftete Taste wohl die von RStudio gemeinte <code>Insert</code>-Taste sei. Jedenfalls toggelte diese anstandslos zwischen dem <code>insert</code>- und dem normalen <code>edit</code>-Mode hin und her.</p>
<p>Damit ist mir erst einmal geholfen. Doch die Frage bleibt: Was machen MacBook-Nutzer ohne angeschlossene, externe Tastatur? Und welcher Dödel ist bei RStudio auf die Idee gekommen, solch eine wichtige Funktion auf eine Taste zu legen, die nicht auf allen Keyboards zur Verfügung steht? Wird man ja wohl noch mal fragen dürfen …</p>



 ]]></description>
  <category>Quarto</category>
  <guid>https://kantel.github.io/posts/2023010504_insert_key/index.html</guid>
  <pubDate>Thu, 05 Jan 2023 20:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023010504_insert_key/images/opper02-big.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Code the Classics: Rampart</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023010503_code_the_classics_rampart/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.raspberrypi.com/app/uploads/2023/01/Screenshot-2023-01-05-at-15.33.24-500x358.png"><img src="https://kantel.github.io/posts/2023010503_code_the_classics_rampart/images/towerdefence-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p><a href="https://de.wikipedia.org/wiki/Rampart_(Computerspiel)">Rampart</a> ist ein Computerspiel, das von Atari im Jahre 1990 veröffentlicht wurde. Darin muß der Spieler seine Burgen gegen Angriffe von der See verteidigen, in dem er versucht, seine von den gegnerischen Kanonen zerstörten Mauern wieder zu flicken. Das Spiel begründete ein neues Computerspiel-Genre, das der <a href="https://de.wikipedia.org/wiki/Tower_Defense">Tower Defense Games</a>.</p>
<p>Folgegerichtig beschränkt sich das <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygamezero.html">Pygame Zero</a>-Remake von <em>Mark Vanstone</em>, das in der aktuellen <a href="https://wireframe.raspberrypi.com/articles/out-now-wireframe-70-the-final-print-edition">Wireframe 70</a> und zeitgleich in den Raspberry Pi News <a href="https://www.raspberrypi.com/news/tower-defence-wall-building-in-python-wireframe-70/">veröffentlicht</a> wurde, auf den Bau der Mauern, um die Burg vor den Angriffen zu schützen. Die Implementierung der Angriffe selber wie auch das Zurückschießen der Verteidiger ist der Phantasie der Leserinnen und Leser überlassen.</p>
<p>Den <a href="https://github.com/Wireframe-Magazine/">Quellcode und die Assets</a> wird es sicher bald auf GitHub geben (momentan funktioniert <a href="https://github.com/Wireframe-Magazine/Wireframe-70">der Link</a> noch nicht (»Coming Soon«)). Und die aktuelle Wireframe könnt Ihr Euch wie jeden Monat <a href="https://wireframe.raspberrypi.com/issues/70/pdf">hier kostenlos als PDF</a> herunterladen.</p>



 ]]></description>
  <category>Retrogaming</category>
  <category>Pygame Zero</category>
  <guid>https://kantel.github.io/posts/2023010503_code_the_classics_rampart/index.html</guid>
  <pubDate>Thu, 05 Jan 2023 18:50:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023010503_code_the_classics_rampart/images/towerdefence.png" medium="image" type="image/png" height="103" width="144"/>
</item>
<item>
  <title>CodeEdit: Nicht schon wieder eine Mac-only-Falle</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023010502_codeedit_mac_only_falle/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://images.ifun.de/wp-content/uploads/2023/01/code-editor.png"><img src="https://kantel.github.io/posts/2023010502_codeedit_mac_only_falle/images/code-editor-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Nein, auch wenn es mich in sämtlichen Fingern juckt: Ich werde mir <a href="https://www.codeedit.app/">CodeEdit</a>, den neuen, freien (MIT-Lizenz) und <a href="https://stadt-bremerhaven.de/codeedit-erste-vorabversion-des-code-editors-fuer-den-mac-ist-da/">hochgelobten</a> Code-Editor nicht <a href="https://github.com/CodeEditApp/CodeEdit/releases">herunterladen</a>. Denn er ist als XCode-Ersatz gedacht und daher naheliegenderweise Mac-only.</p>
<p>Ich habe schließlich lange genug dafür gekämpft (und den Kampf eigentlich immer noch nicht gewonnen, sondern mich zähnenirschend mit <a href="http://cognitiones.kantel-chaos-team.de/produktivitaet/visualstudiocode.html">Visual Studio Code</a> abgefunden), einen Ersatz für mein geliebtes und hervorragendes <a href="http://cognitiones.kantel-chaos-team.de/produktivitaet/textmate.html">TextMate</a> zu finden, das zwar der beste Editor der Welt, aber eben auch »nur« Mac-only ist. Aber ich habe eben nicht mehr nur Hardware mit dem angebissenen Apfel im Logo, sondern seit einiger Zeit auch ein Chromebook<sup>1</sup> zu bestücken. Und wenn mein betagtes MacBook Pro (das immerhin seit 2012 bei mir seine Dienste verrichtet) seinen Geist aufgeben sollte, wird in mein Arbeitsszimmer sicher kein neuer Laptop von Apple einziehen, sondern ein Linux-Desktop<sup>2</sup>.</p>
<p>Schließlich habe ich hart genug daran gearbeitet, nicht nur keine proprietäre, sondern auch keine plattformabhängige Software mehr einzusetzen. Und nachdem mir das endlich gelungen ist, gehe ich keinen Schritt mehr zurück.</p>
<p>Wer aber unter meinen Leserinnen und Lesern weiterhin auf Apple-Hardware setzt oder setzen muß, für die oder den ist CodeEdit sicher einen Versuch wert und eine echte Alternative zu kommerzieller Software. Auf ifun.de gibt es einen <a href="https://www.ifun.de/codeedit-fuer-mac-neuer-open-source-editor-geht-an-den-start-201567/">ersten Testbericht</a>. Für die, die es brauchen: Habt Spaß damit!</p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Fußnoten</h2>

<ol>
<li id="fn1"><p>Das Chromebook hält zwar zur Zeit so etwas wie eine Art Winterschlaf, aber sobald das Wetter wieder wärmer wird und Programmieren im Garten auf der Terrasse zuläßt – ich habe schließlich oft genug betont, daß mein WLAN bis auf die Terrasse reicht –, werde ich es wieder wecken und aktivieren.↩︎</p></li>
<li id="fn2"><p>Das ist nämlich mein Plan: Eine leistungsstarke Linux-Büchse stationär im Arbeitszimmer und für unterwegs ein Chromebook – ebenfalls mit Linux-Unterstützung. Dafür werde ich meinem nächsten Chromebook ein wenig mehr Speicher spendieren.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>News</category>
  <guid>https://kantel.github.io/posts/2023010502_codeedit_mac_only_falle/index.html</guid>
  <pubDate>Thu, 05 Jan 2023 17:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023010502_codeedit_mac_only_falle/images/code-editor.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Gravity-Simulation mit Pygame (4)</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023010501_gravity_sim_pygame_4/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://upload.wikimedia.org/wikipedia/commons/5/53/Happy_Hooligan%21_The_Night_was_Dark_and_Stormy%21_%28May_2%2C_1909%29.jpg"><img src="https://kantel.github.io/posts/2023010501_gravity_sim_pygame_4/images/darkandstormynight-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Der Google-Bot läßt mich mit dem Thema »Gravity-Simulation mit Pygame« nicht in Ruhe. Gestern abend spülte er ein weiteres Video »<a href="https://www.youtube.com/watch?v=7rZgC_I9RNA">Ridiculously easy n-body gravity simulation using Pygame</a>« in meine Zeitleiste:</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/7rZgC_I9RNA" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Ich habe dieses Video noch aufgenommen, weil es zeigt, wie man eine größere Anzahl von Körpern (der Autor spricht von maximal 200) in die Simulation integriert. Doch jetzt ist Schluß mit dem Thema. Irgendwann muß ich ja auch die Zeit dafür finden, all diese netten Vorschläge in Code umzusetzen. <em>Still digging!</em></p>
<p>Das Bild ziert diesen Beitrag, weil es auf seine Art auch etwas mit Gravitation zu tun hat. <em>(Bildquelle: <a href="https://commons.wikimedia.org/wiki/File:Happy_Hooligan!_The_Night_was_Dark_and_Stormy!_(May_2,_1909).jpg">Wikimedia Commons</a>)</em></p>



 ]]></description>
  <category>Simulation</category>
  <category>Pygame</category>
  <guid>https://kantel.github.io/posts/2023010501_gravity_sim_pygame_4/index.html</guid>
  <pubDate>Thu, 05 Jan 2023 15:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023010501_gravity_sim_pygame_4/images/darkandstormynight.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Noch eine Playlist: Creative Coding mit P5.js</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023010404_creative_coding_p5js/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.youtube.com/watch?v=fbWIolOqIqM"><img src="https://kantel.github.io/posts/2023010404_creative_coding_p5js/images/dannewoo-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Für diejenigen unter Euch, die wie ich den Hals nicht vollbekommen, habe ich noch eine Playlist ausgegraben: <em>Danne Woo</em> <a href="https://creativecoding.danne.design/">unterrichtet</a> »Creative Coding« mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/p5js.html">P5.js</a> am <a href="https://www.qc.cuny.edu/">Queens College, CUNY</a> in New York. Und er hat seine Vorlesungen auf Video aufgezeichnet und auf YouTube hochgeladen:</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/fbWIolOqIqM" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Seine <a href="https://www.youtube.com/playlist?list=PLKcBOqBHPjvmqJ7xym6wMWCTyDyFTtYV5">Playlist</a> umfaßt 12 Videos mit einer Länge zwischen 30 Minuten und etwa einer Stunde und noch ein kurzes Video mit Studentenarbeiten.</p>
<p>Nach einem ersten Reinschnuppern sieht das nach einer interessanten Vorlesungsreihe aus, da <em>Danne Woo</em> nicht nur die (Programmier-) Technik vermitteln will, sondern auch die ästhetischen und theoretischen Grundlagen behandelt. Etwas, das in den meist eher informatiklastigen Tutorials oft vergessen wird. Daher verspreche ich mir von dieser Playlist sehr viel auch neue Erkenntnisse für mich und daher habe ich sie Mitte der Woche schon einmal vorab herausgehauen.</p>



 ]]></description>
  <category>Creative Coding</category>
  <category>P5.js</category>
  <guid>https://kantel.github.io/posts/2023010404_creative_coding_p5js/index.html</guid>
  <pubDate>Wed, 04 Jan 2023 19:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023010404_creative_coding_p5js/images/dannewoo.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Android-Update am »Januar-Patchday«</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023010403_android_update/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://upload.wikimedia.org/wikipedia/commons/b/b6/Happy_Hooligan_detail%2C_from-_Friend_of_the_Comic_People_1906_%28cropped%29.jpg"><img src="https://kantel.github.io/posts/2023010403_android_update/images/happyhooligan-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Google hat mit seinem monatlichen Sicherheitsupdate für Android (und damit auch auf seinen <a href="https://source.android.com/docs/security/bulletin/pixel/2023-01-01">Pixel-Geräten</a>) wieder <a href="https://source.android.com/docs/security/bulletin/2023-01-01">Sicherheitslücken</a> geschlossen.</p>
<p>Die Updates werden so nach und nach per OTA <em>(over the air)</em> auf Pixel 7/7 pro, Pixel 6a, Pixel 6/6 pro, Pixel 5, Pixel 4a 5G, Pixel 4a verteilt.</p>
<p>Die anderen Hersteller werden wie üblich in Bälde nachziehen, sofern sie überhaupt noch entsprechenden Support leisten. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<p><em>(Bildquelle: <a href="https://commons.wikimedia.org/wiki/File:Happy_Hooligan_detail,_from-_Friend_of_the_Comic_People_1906_(cropped).jpg">Wikimedia Commons</a>)</em></p>



 ]]></description>
  <category>News</category>
  <guid>https://kantel.github.io/posts/2023010403_android_update/index.html</guid>
  <pubDate>Wed, 04 Jan 2023 18:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023010403_android_update/images/happyhooligan.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Noch ein Gravity-Simulator in Pygame</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023010402_gravity_sim_2/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://camo.githubusercontent.com/13a8e7d9d34fc04614b5ce08c02df1af94737f30276c291364944d0ee3c98393/68747470733a2f2f692e696d6775722e636f6d2f4f65466f6856762e706e67"><img src="https://kantel.github.io/posts/2023010402_gravity_sim_2/images/gravitysim2-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Natürlich hatte der allwissende Google-Bot mein <a href="https://kantel.github.io/posts/2023010301_gravity_sim_pygame/">gestriges Interesse</a> an einer Gravity-Simulation in <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a> bemerkt (sagte ich nicht, daß dieser Bot mir manchmal unheimlich ist?) und spülte mir gleich noch ein weiteres Video in meine Zeitleiste:</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/M_4bVmkl6IE" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p><a href="https://www.youtube.com/watch?v=M_4bVmkl6IE">Dieses Video</a> des Youtubers <em>Gravitar</em> kommt einmal nicht ganz so hektisch daher, wie das gestern vorgestellte, und ist zum anderen deutschspachig. Und es deckt im großen und ganzen den gleichen Bereich ab, wie der gestern ebenfalls schon vorgestellt, in C++ geschriebene <a href="https://github.com/jasonxia17/orbit-simulator">Orbit-Simulator</a> von <em>Jason Xia</em> (deshalb habe ich gnadenlos auch einen Screenshot daraus als Bannerbild verwurstelt), nur eben in Python und Pygame geschrieben.</p>
<p>Das Video ist Teil der Playlist »<a href="https://www.youtube.com/playlist?list=PLhC_4AWNg9rnM_qAPyUU4Wo1kJoOAMC6_">A beautiful Code in Python</a>«, die ich nur empfehlen kann. Ich habe heute ein wenig darin gestöbert – <em>Gravitar</em> weiß sehr viel über Python und Pygame, auch Dinge, die ich trotz meiner langjährigen Python-Erfahrung noch nicht kannte. Die Playlist wird sich vermutlich niemand komplett reinziehen können, sie ist über die letzten vier Jahre gewachsen und besteht aktuell (Stand heute) aus 89 im Schnitt halbstündigen Tutorials, besitzt also eine Laufzeit von etwa 40 Stunden. Und <em>Gravitar</em> ist fleißig, die Liste wächst noch weiter: Etwa alle zwei Wochen kommt ein neues Video hinzu.</p>
<p>Also macht es wie ich: Nutzt die Playlist als Wissenssteinbruch und stöbert einfach darin herum. Denn Ihr werdet alles davon, nur nicht dümmer.</p>



 ]]></description>
  <category>Simulation</category>
  <category>Pygame</category>
  <guid>https://kantel.github.io/posts/2023010402_gravity_sim_2/index.html</guid>
  <pubDate>Wed, 04 Jan 2023 17:20:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023010402_gravity_sim_2/images/gravitysim2.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Künstler des Monats Januar 2023: Frederick Burr Opper</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023010401_frederick_burr_opper/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://upload.wikimedia.org/wikipedia/commons/thumb/b/bd/%22All_aboard_for_the_millennium%21%22_-_Opper_and_Keppler._LCCN2012648532_%28cropped%29_2.jpg/1024px-%22All_aboard_for_the_millennium%21%22_-_Opper_and_Keppler._LCCN2012648532_%28cropped%29_2.jpg"><img src="https://kantel.github.io/posts/2023010401_frederick_burr_opper/images/allaboard-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Der Künstler, mit dem ich diesen Monat die Beiträge illustrieren werde, für die keine eigenen Bilder vorliegen, heißt <em><a href="https://en.wikipedia.org/wiki/Frederick_Burr_Opper">Frederick Burr Opper</a></em>. Er lebte von 1857 bis 1937 und war ein bekannter amerikanischer (politischer) Karikaturist (unter anderem für den <em>Puck</em>) und einer der ersten Comic-Zeichner. Ihm wird nachgesagt, daß er die Sprechblase als festes Stilmittel in den Comic-Strip eingeführt hat.</p>
<section id="literatur" class="level2">
<h2 class="anchored" data-anchor-id="literatur">Literatur</h2>
<ul>
<li><a href="https://www.lambiek.net/artists/o/opper.htm">Frederick Burr Opper in der Lambiek Comiclopedia</a></li>
<li>Barbara Denscher: <em><a href="https://www.austrianposters.at/2020/11/01/der-cartoonist-frederick-burr-opper-und-die-fake-news/">Der Cartoonist Frederick Burr Opper und die Fake News</a></em>, Austrian Posters (Beiträge zur Geschichte der visuellen Kommunikation), 1. November 2020</li>
</ul>
<p><em>(Bildquelle: <a href="https://commons.wikimedia.org/wiki/File:%22All_aboard_for_the_millennium!%22_-_Opper_and_Keppler._LCCN2012648532_(cropped)_2.jpg">Wikimedia Commons</a>)</em></p>


</section>

 ]]></description>
  <category>Bilder</category>
  <guid>https://kantel.github.io/posts/2023010401_frederick_burr_opper/index.html</guid>
  <pubDate>Wed, 04 Jan 2023 16:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023010401_frederick_burr_opper/images/allaboard.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Frauen am Kontrabaß: Linday Reith</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023010302_lindsay_reith/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.youtube.com/watch?v=Qikp08PPBf0"><img src="https://kantel.github.io/posts/2023010302_lindsay_reith/images/lindsayraith-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Die Band »<a href="http://southernraisedbluegrass.com/">Southern Raised</a>« ist eine Familienangelegenheit. Denn drei der vier Bandmitglieder sind Geschwister. Sie spielen <a href="https://de.wikipedia.org/wiki/Bluegrass">Bluegrass</a>, aber alle Musiker haben einen klassischen Hintergrund. Die Band stand schon lange auf meiner Liste – vor allem wegen des seltsamen (nun ja) Kontrabasses, den <em><a href="http://southernraisedbluegrass.com/video/lindsay/">Lindsay Reith</a></em> spielt.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/Qikp08PPBf0" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>An ihrer Version der Titelmelodie des Italowesterns »<a href="https://de.wikipedia.org/wiki/Zwei_glorreiche_Halunken">Zwei glorreiche Halunken</a>« hätte sicher auch <em>Ennio Morricone</em> seine Freude gehabt. Trotz des begrenzten Bluegrass-Instrumentariums (Banjo, Fiddle, Mandoline, Gitarre, Baß) zeigt sie doch genug Respekt vor dem orchestralen Original (was ohne Zweifel auch durch die geschickte Aufnahmetechnik erreicht wurde). Und warum soll ein in Spanien gedrehter Italo-Western nicht auch mit original-nordamerikanischern Country-Klängen unterlegt werden dürfen? Mir – als bekennenden Italo-Western-Fan – hat diese Aufnahme jedenfalls viel Spaß bereitet.</p>
<p>Die übrigen Musiker sollen nicht unerwähnt bleiben: Es sind <em>Matt Reith</em> an der Gitarre, <em>Emily Reith</em> and der Fiddel und der Mandoline und <em>Alex Clayton</em> am Banjo. Und auch <em>Joe Carell</em>, der die Aufnahme zusammenmixte, verdient großen Respekt.</p>



 ]]></description>
  <category>Musik</category>
  <guid>https://kantel.github.io/posts/2023010302_lindsay_reith/index.html</guid>
  <pubDate>Tue, 03 Jan 2023 19:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023010302_lindsay_reith/images/lindsayraith.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Gravity-Simulator in Pygame</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023010301_gravity_sim_pygame/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://camo.githubusercontent.com/b21465f9d3c943ceb143be4b29eea89280ff011883b9694dbb78e24dcfdcb563/68747470733a2f2f692e696d6775722e636f6d2f78794a4e5877532e706e67"><img src="https://kantel.github.io/posts/2023010301_gravity_sim_pygame/images/orbitsimulator-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Jetzt mit mehr Physik: <a href="https://kantel.github.io/posts/2023010202_earth_moon_orbit_sim/">Gestern</a> hatte ich doch diese simple Simulation eines Erde-Mond-Systems hier im <em>Schockwellenreiter</em>, die <em>Kevin Workman</em> im Rahmen des <em>Genuary 2023</em> in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/p5js.html">P5.js</a> programmiert hatte. Daraufhin spülte mit heute der mitlesende und daher allwissende Bot von Google <a href="https://www.youtube.com/watch?v=GwhXc78a0QY">diesen Gravity-Simulator</a> – programmiert in <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a> – in meine Zeitleiste.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/GwhXc78a0QY" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="">
</iframe>
<p>Und dieser Simulator nimmt – im Gegensatz zu <em>Kevin Workman</em> – auch mehr Rücksicht auf die dahinterstehende Physik. Also ein guter Startpunkt für eigene Experimente.</p>
<p>Der Screenshot im Banner oben ist von einem in C++ geschriebenen <a href="https://github.com/jasonxia17/orbit-simulator">Orbit-Simulator</a>, den <em><a href="https://github.com/jasonxia17">Jason Xia</a></em> im Quellcode auf GitHub hochgeladen hat. Dieser soll explizit die <a href="https://de.wikipedia.org/wiki/Keplersche_Gesetze">Keplerschen Gesetze</a> berücksichtigen. Auch wenn ich es mit C++ so nicht habe, den Quellcode werde ich wohl noch lesen können. Also ein weiterer Ausgangspunkt für eigene Erkundungen.</p>
<p>Das <a href="https://github.com/jasonxia17?tab=repositories">GitHub-Repositorium</a> von <em>Jason Xia</em> enthält übrigens noch weit mehr Physik-Spielereien, teilweise auch in Python geschrieben. Sollte ich mir daher unbedingt noch genauer anschauen.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/yBVeCXnxQYs" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="">
</iframe>
<p><strong>War sonst noch was?</strong> Ach ja, der <em>Genuary 2023</em> hat ja gerade erst begonnen. Und als zweiten Beitrag hat <em>Kevin Workman</em> im Schnellverfahren einen <a href="https://www.youtube.com/watch?v=yBVeCXnxQYs">Random Walker</a> ebenfalls in P5.js implementiert und auf YouTube hochgeladen. <em>Cool!</em></p>
<p>Dazu schlug mir natürlich der allwissende Google-Bot ebenfalls eine Ergänzung vor: <a href="https://www.youtube.com/watch?v=Q7vY__nghc4">White Noise and Random Walk</a> aus der Reihe »Time Series from Scratch«. Manchmal ist mir der Bot schon etwas unheimlich.&nbsp;🤓</p>



 ]]></description>
  <category>Simulation</category>
  <category>Pygame</category>
  <guid>https://kantel.github.io/posts/2023010301_gravity_sim_pygame/index.html</guid>
  <pubDate>Tue, 03 Jan 2023 15:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023010301_gravity_sim_pygame/images/orbitsimulator.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>PromptToImage: Stable Diffusion für (Silicon-) Macs</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023010203_prompt_to_image/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://user-images.githubusercontent.com/27217431/209742328-6286bb18-fa36-40e2-b1d1-639aadd09cf5.png"><img src="https://kantel.github.io/posts/2023010203_prompt_to_image/images/prompt2image-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p><a href="https://de.wikipedia.org/wiki/Stable_Diffusion">Stable Diffusion</a> ist ein Deep-Learning-Text-zu-Bild Generator. Es wird hauptsächlich zur Generierung detaillierter Bilder auf der Grundlage von Textbeschreibungen verwendet, kann aber auch für andere Aufgaben wie Inpainting, Outpainting und die Generierung von Bild-zu-Bild-Übersetzungen auf der Grundlage einer Textaufforderung eingesetzt werden. Im Gegensatz zu proprietären Projekten wie <a href="https://de.wikipedia.org/wiki/DALL-E">DALL-E</a> oder Midjourney steht Stable Fusion unter einer freien, erweiterten GPL-Lizenz, die lediglich bestimmte, sozial schädliche Anwendungsfälle verbietet, wie zum Beispiel Verbrechen, Verleumdung oder die »Ausbeutung von Minderjährigen«. Ansonsten bleibt der Nutzer Eigentümer der Rechte an den von ihm erzeugten Bildern und kann diese auch kommerziell nutzen.</p>
<p>Stable Diffusion muß nicht in der Cloud, sondern kann auf den meisten, relativ modernen Consumer-Rechnern laufen. Während es für Windwows und Linux mit <a href="https://stable-diffusion-ui.github.io/">Stable Diffusion UI</a> (<a href="https://github.com/cmdr2/stable-diffusion-ui">Downlaod und Quellcode</a> auf GitHub) schon seit längerem eine nette Desktop-Version gab, die <em>Jim Clyde Monge</em> <a href="https://medium.com/mlearning-ai/one-click-install-for-stable-diffusion-ui-2-0-run-locally-3c38bfbd30cd">hier besprochen</a> hatte (leider ein Medium.com-Link hinter einer Bezahlschranke), war bisher eine Mac-Version nur versprochen.</p>
<p>Das hat sich nun geändert: Mit <a href="https://github.com/TheMurusTeam/PromptToImage">PromptToImage</a> steht derzeit <a href="https://testflight.apple.com/join/oMxyZ7wO">über Testflight</a> auch eine Version für macOS zum Download bereit. PromptToImage setzt auf <a href="http://cognitiones.kantel-chaos-team.de/programmierung/swift.html">Swift</a> und AppKit, ist also eine native Stable-Diffusion-App für den Mac. Dabei wird nicht nur Text-zu-Bild, sondern auch Bild-zu-Bild unterstützt. Also kommen nun auch endlich Mac-User in den Genuß des faszinierenden Spielzeugs. Doch <a href="https://stadt-bremerhaven.de/prompttoimage-neue-stable-diffusion-app-fuer-den-mac/">Cashys Blog warnt</a>: <em>»… das Thema ist ein echtes »Rabbit Hole«, in dem man sich verlieren kann.«</em></p>
<p>Außerdem braucht das Teil einen Apple Silicon Mac mit macOS 13.1 Ventura. <strong>Intel Macs werden nicht unterstützt</strong>. Ich muß also noch etwas warten, bevor auch ich mit Stable Diffusion meine Zeit vergeuden kann.</p>



 ]]></description>
  <category>Künstliche Intelligenz</category>
  <guid>https://kantel.github.io/posts/2023010203_prompt_to_image/index.html</guid>
  <pubDate>Mon, 02 Jan 2023 19:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023010203_prompt_to_image/images/prompt2image.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Genuary 2023: Earth-Moon Orbit Sim</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023010202_earth_moon_orbit_sim/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://opengameart.org/content/space-game-art-pack-extended"><img src="https://kantel.github.io/posts/2023010202_earth_moon_orbit_sim/images/SpaceArtPublish-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Auf den »Advent of Code« im Dezember (den ich wie jedes Jahr aus Zeitgründen links liegen gelassen habe) folgt gnadenlos der »Genuary«, der Wettbewerb, der dem Programmieren Generativer Art gewidmet ist. Den konnte ich dieses Jahr nicht ignorieren, weil der »glückliche Programmierer« <em>Kevin Workman</em> sich daran beteiligt hat. Und wie so oft finde ich die Arbeit des <em>Happy Coders</em> einfach insprierend:</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/ZfFtXzzTwP8" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="">
</iframe>
<p>In diesem Jahr, das unter dem Motto »Perfect loop/Infinite loop/endless GIFs« steht, hat er sich die <a href="https://www.youtube.com/watch?v=ZfFtXzzTwP8">Simulation eines Erde-Mond-Orbits</a> in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/p5js.html">P5.js</a> vorgenommen. Da es bei diesem Wettbewerb eher auf die Krativität denn auf die physikalische Genauigkeit ankommt, nutzt er Sinus und Cosinus für die Bewegung der beiden Himmelskörper und Emojis für eine animierte Darstellung. Den <a href="https://happycoding.io/tutorials/p5js/arrays/earth-moon-emoji-orbit">Quellcode</a> findet Ihr wie immer auf <em>Kevin Workmans</em> Seiten.</p>
<p>Und als braver Lehrer hat er auch schon Remix-Ideen (nicht nur) für seine Studenten:</p>
<ul>
<li>So könnte man die Erde um die Sonne rotieren lassen,</li>
<li>Sterne hinzufügen, oder</li>
<li>das ganze mit Satelitten, Raketen und Aliens zu einem Spiel aufbohren.</li>
</ul>
<p>Das alles hat mich natürlich inspiriert, so etwas – natürlich mit Raketen und Aliens – in <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a> zu programmieren. Eine kleine <a href="https://opengameart.org/art-search?keys=planet+sprites">Suche auf OpenGameArt.org</a> brachte erst mal eine Menge Sprites hervor, die man nutzen könnte (siehe Bannerbild). Und dann ist da natürlich wie immer Kenney.nl, die mit ihrem</p>
<ul>
<li><a href="https://www.kenney.nl/assets/alien-ufo-pack">Alien Pack</a> (weitere Aliens gibt es zum Beispiel auch in diesem <a href="https://www.kenney.nl/assets/platformer-art-pixel-redux">Platformer Pack</a>),</li>
<li>dem <a href="https://www.kenney.nl/assets/space-shooter-extension">Space Shooter Pack</a> samt <a href="https://www.kenney.nl/assets/space-shooter-extensions">Extension</a>, sowie</li>
<li>dem <a href="https://www.kenney.nl/assets/planets">Planets Pack</a></li>
</ul>
<p>mehr freie Bilder (<a href="https://creativecommons.org/publicdomain/zero/1.0/">CC 1.0</a>) liefern, als Ihr und ich je verarbeiten könnt.</p>
<p>Und wer auf mehr realistische Physik Wert legt, kann ja zu Beispiel mal hier reinschauen: <a href="https://towardsdatascience.com/modelling-the-three-body-problem-in-classical-mechanics-using-python-9dc270ad7767">Modelling the Three Body Problem in Classical Mechanics using Python</a> <em>(Medium.com-Link, möglicherweise hinter einer Bezahlschranke eingesperrt</em> ☹️<em>)</em>.</p>
<p>Und wo ich gerade <em>Kevin Workman</em> in der Mangel habe: An seiner Universtät scheinen die Semesterferien vorbei zu sein, und so hat er vor zwei Tagen die Wochen 12 und 13 seiner Vorlesungsreihe »<a href="https://www.youtube.com/playlist?list=PLty5Qt07EFvC2NmPbyV0D8B0phtQpnrJa">Intro fo Creative Web Dev</a>« online gestellt. Wie immer mit sehr interessanten Inhalten, dieses Mal mit</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=qa1QWuHNGPE">JavaScript If Statements - Intro to Creative Web Dev Week 12</a></li>
<li><a href="https://www.youtube.com/watch?v=HcJ2Y17KLUg">JavaScript If Statements Project - Intro to Creative Web Dev Week 12</a></li>
<li><a href="https://www.youtube.com/watch?v=ZJMF8qtWAPk">Developer Tools - Intro to Creative Web Dev</a></li>
<li><a href="https://www.youtube.com/watch?v=I43YG2H10iQ">JavaScript Libraries - Intro to Creative Web Dev Week 13</a></li>
<li><a href="https://www.youtube.com/watch?v=iUnfLZg-NvY">Bootstrap - Intro to Creative Web Dev Week 13</a></li>
<li><a href="https://www.youtube.com/watch?v=bHabiG3_TQk">Bootstrap Project - Intro to Creative Web Dev Week 13</a></li>
</ul>
<p>Da mir seine Vorlesungen immer sehr gefallen, konnte und wollte ich sie Euch nicht vorenthalten. Habt Spaß damit …</p>



 ]]></description>
  <category>P5.js</category>
  <category>Simulation</category>
  <category>Pygame</category>
  <guid>https://kantel.github.io/posts/2023010202_earth_moon_orbit_sim/index.html</guid>
  <pubDate>Mon, 02 Jan 2023 17:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023010202_earth_moon_orbit_sim/images/SpaceArtPublish.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Ein neues Jahr, ein neuer Gehwegschaden?</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023010201_gehwegschaden/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52601847297/"><img src="https://kantel.github.io/posts/2023010201_gehwegschaden/images/gehwegschaden-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Der Berliner Wahlk(r)ampf hat begonnen. Und alle, die es das letzte Mal versemmelt hatten, stehen wieder auf der Matte.</p>
<p><em>(Photo (<a href="http://creativecommons.org/licenses/by-nc-nd/2.0/">cc</a>): Jörg Kantel)</em></p>



 ]]></description>
  <category>Neukölln</category>
  <category>Failed State Berlin</category>
  <guid>https://kantel.github.io/posts/2023010201_gehwegschaden/index.html</guid>
  <pubDate>Mon, 02 Jan 2023 15:55:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023010201_gehwegschaden/images/gehwegschaden.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Pizzaplane 4 – jetzt mit grünem Spieler</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023010102_pizzaplane4/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52598688169/"><img src="https://kantel.github.io/posts/2023010102_pizzaplane4/images/pizzaplane4-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Was gibt es schöneres, als das neue Jahr mit der Programmierung eines Spiels zu begrüßen? Und so habe ich mein kleines Spiel, in dem ein kleiner, <del>roter</del> … Halt! Hier gibt es die erste Änderung im Spiel: Ich habe nämlich den roten Doppeldecker durch einen grünen<sup>1</sup> Flieger ersetzt. Denn in Anbetracht der politischen Untertöne des Spiels erschien mir die Anspielung auf den »<a href="https://de.wikipedia.org/wiki/Manfred_von_Richthofen">Roten Baron</a>« nicht angemessen – auch wenn ich selber den Doppeldecker eher mit <em>Snoopy</em> denn mit der Deutschen Luftwaffe assoziiere.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/1lneuIhrfh4" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="">
</iframe>
<p>Den grünen Flieger gibt es auf <a href="https://opengameart.org/content/free-plane-sprite">OpenGameArt.org</a> als Public Domain (<a href="http://creativecommons.org/publicdomain/zero/1.0/">CC0</a>) und ich habe ihn in dem Video »<a href="https://www.youtube.com/watch?v=1lneuIhrfh4">Side Scroller Game in Python und Pygame</a> entdeckt<sup>2</sup>, einer wüsten Mischung aus <em>Side Scroller</em> und <em>Flappy Bird</em> (ich mag solche wilden <em>Cross Over</em>), das sehr stark meinem <em>Pizza Plane</em> ähnelt. Und der Macher hat auch ähnliche Lösungen wie ich gefunden. Daher kann ich so falsch nicht liegen. (Und nein, ich habe nicht abgeschrieben, das Spiel wurde am 10. Dezember 2022 erst hochgeladen, da hatte mein Pizza-Plane-Projekt (in seiner <a href="http://blog.schockwellenreiter.de/2022/10/2022101502.html">ursprünglichen Fassung</a>) schon etliche Monate auf dem Buckel).</p>
<p>Doch zurück zu »meinem« Spiel: Neben dem Austausch des Fliegers habe ich die Punkteanzeige um die Anzeige der »Leben«<sup>3</sup> des Spielers erweitert (Code wegen der besseren Lesbarkeit mit <code>\</code> umgebrochen):</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1">    screen.blit(hud.score_lives, (hud.score_lives_rect.x,</span>
<span id="cb1-2">                hud.score_lives_rect.y))</span>
<span id="cb1-3">    <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(plane.lives):</span>
<span id="cb1-4">        hud.heart_rect.x <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb1-5">                hud.score_lives_rect.right <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">10</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb1-6">                i<span class="op" style="color: #5E5E5E;">*</span>(hud.heart_img.get_width() <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb1-7">        screen.blit(hud.heart_img, (hud.heart_rect.x, hud.heart_y))</span></code></pre></div>
<p>Und das Spiel kann jetzt verloren werden: Jede Pizza, die nicht abgeschossen wird und den linken Rand erreicht, kostet den Spieler 2 Punkte. Und sinkt die Anzahl der Punkte unter Null, hat er das Spiel verloren:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1">        <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.rect.x <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">30</span>:</span>
<span id="cb2-2">            <span class="va" style="color: #111111;">self</span>.reset()</span>
<span id="cb2-3">            plane.score <span class="op" style="color: #5E5E5E;">-=</span> <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb2-4">            <span class="cf" style="color: #003B4F;">if</span> plane.score <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb2-5">                <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Zu viele Pizzas entkommen lassen!"</span>)</span>
<span id="cb2-6">                pygame.quit()</span>
<span id="cb2-7">                <span class="cf" style="color: #003B4F;">try</span>:</span>
<span id="cb2-8">                    sys.exit()</span>
<span id="cb2-9">                <span class="cf" style="color: #003B4F;">finally</span>:</span>
<span id="cb2-10">                    keep_going <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">False</span></span></code></pre></div>
<p>Für jede abgeschossene Pizza bekommt der Spieler allerdings immer noch 10 Punkte gutgeschrieben. Das heißt, zu Beginn des Spiels sollte der Spieler erst einmal möglichst viele Pizzas abschießen, um sich ein ausreichendes Punktepolster zuzulegen.</p>
<p>Zum anderen verliert der Spieler ein Leben (ein Herzchen), wenn er von einer Pizza touchiert wird. Sinkt die Anzahl der Herzchen unter Null, hat er das Spiel ebenfalls verloren:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1">        <span class="cf" style="color: #003B4F;">for</span> enemy <span class="kw" style="color: #003B4F;">in</span> enemies:</span>
<span id="cb3-2">            <span class="cf" style="color: #003B4F;">if</span> pygame.sprite.collide_rect(<span class="va" style="color: #111111;">self</span>, enemy):</span>
<span id="cb3-3">                enemy.reset()</span>
<span id="cb3-4">                <span class="va" style="color: #111111;">self</span>.lives <span class="op" style="color: #5E5E5E;">-=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb3-5">                <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.lives <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb3-6">                    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Verloren!"</span>)</span>
<span id="cb3-7">                    pygame.quit()</span>
<span id="cb3-8">                    <span class="cf" style="color: #003B4F;">try</span>:</span>
<span id="cb3-9">                        sys.exit()</span>
<span id="cb3-10">                    <span class="cf" style="color: #003B4F;">finally</span>:</span>
<span id="cb3-11">                        keep_going <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">False</span></span></code></pre></div>
<p>Gewinnen kann der Spieler das Spiel noch nicht. Dafür muß er als Boss-Gegner erst einmal die bösen <a href="https://de.wikipedia.org/wiki/Giorgia_Meloni">Melonis</a> besiegen, die ich noch implementieren muß. Das habe ich für Stage 5 oder Stage 6 vorgesehen.</p>
<p>Jetzt aber wie gewohnt erst einmal den kompletten Quellcode der aktuellen Fassung<sup>4</sup> zur Ansicht:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;">import</span> pygame</span>
<span id="cb4-2"><span class="im" style="color: #00769E;">from</span> pygame.<span class="bu" style="color: null;">locals</span> <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span>
<span id="cb4-3"><span class="im" style="color: #00769E;">from</span> random <span class="im" style="color: #00769E;">import</span> randint</span>
<span id="cb4-4"><span class="im" style="color: #00769E;">import</span> os</span>
<span id="cb4-5"><span class="im" style="color: #00769E;">import</span> sys</span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;"># Hier wird der Pfad zum Verzeichnis der Assets gesetzt</span></span>
<span id="cb4-8">DATAPATH <span class="op" style="color: #5E5E5E;">=</span> os.path.join(os.getcwd(), <span class="st" style="color: #20794D;">"data"</span>)</span>
<span id="cb4-9">FONTPATH <span class="op" style="color: #5E5E5E;">=</span> os.path.join(os.getcwd(), <span class="st" style="color: #20794D;">"fonts"</span>)</span>
<span id="cb4-10"></span>
<span id="cb4-11"><span class="co" style="color: #5E5E5E;"># Konstanten deklarieren</span></span>
<span id="cb4-12">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">720</span>, <span class="dv" style="color: #AD0000;">520</span></span>
<span id="cb4-13">BG_WIDTH <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1664</span></span>
<span id="cb4-14">TITLE <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"Pizza Plane Stage 4: Der grüne Flieger"</span></span>
<span id="cb4-15">FPS <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">60</span></span>
<span id="cb4-16">ANIM <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">4</span> <span class="co" style="color: #5E5E5E;"># Animation cycle</span></span>
<span id="cb4-17">UPDOWN <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb4-18">NO_ENEMIES <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb4-19"></span>
<span id="cb4-20"><span class="co" style="color: #5E5E5E;"># Farben</span></span>
<span id="cb4-21">BG_COLOR <span class="op" style="color: #5E5E5E;">=</span> (<span class="dv" style="color: #AD0000;">231</span>, <span class="dv" style="color: #AD0000;">229</span>, <span class="dv" style="color: #AD0000;">226</span>) <span class="co" style="color: #5E5E5E;"># Wüstenhimmel</span></span>
<span id="cb4-22"></span>
<span id="cb4-23"><span class="co" style="color: #5E5E5E;"># Objekte</span></span>
<span id="cb4-24"><span class="kw" style="color: #003B4F;">class</span> Background(pygame.sprite.Sprite):</span>
<span id="cb4-25">    </span>
<span id="cb4-26">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, _x, _y):</span>
<span id="cb4-27">        pygame.sprite.Sprite.<span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>)</span>
<span id="cb4-28">        <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">=</span> _x</span>
<span id="cb4-29">        <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">=</span> _y</span>
<span id="cb4-30">        <span class="va" style="color: #111111;">self</span>.start_x <span class="op" style="color: #5E5E5E;">=</span> _x</span>
<span id="cb4-31">        <span class="va" style="color: #111111;">self</span>.image <span class="op" style="color: #5E5E5E;">=</span> pygame.image.load(os.path.join(DATAPATH,</span>
<span id="cb4-32">                     <span class="st" style="color: #20794D;">"desert.png"</span>))</span>
<span id="cb4-33">        <span class="va" style="color: #111111;">self</span>.rect <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.image.get_rect()</span>
<span id="cb4-34">        </span>
<span id="cb4-35">    <span class="kw" style="color: #003B4F;">def</span> update(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb4-36">        <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">-=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb4-37">        <span class="co" style="color: #5E5E5E;"># print(self.x)</span></span>
<span id="cb4-38">        <span class="va" style="color: #111111;">self</span>.rect.x <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.x</span>
<span id="cb4-39">        <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="op" style="color: #5E5E5E;">-</span>BG_WIDTH:</span>
<span id="cb4-40">            <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">=</span> BG_WIDTH</span>
<span id="cb4-41"></span>
<span id="cb4-42"><span class="kw" style="color: #003B4F;">class</span> Missile(pygame.sprite.Sprite):</span>
<span id="cb4-43">    </span>
<span id="cb4-44">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, _x, _y):</span>
<span id="cb4-45">        pygame.sprite.Sprite.<span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>)</span>
<span id="cb4-46">        <span class="va" style="color: #111111;">self</span>.image <span class="op" style="color: #5E5E5E;">=</span> pygame.image.load(os.path.join(DATAPATH,</span>
<span id="cb4-47">                     <span class="st" style="color: #20794D;">"missile.png"</span>))</span>
<span id="cb4-48">        <span class="va" style="color: #111111;">self</span>.rect <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.image.get_rect()</span>
<span id="cb4-49">        <span class="va" style="color: #111111;">self</span>.rect.x <span class="op" style="color: #5E5E5E;">=</span> _x</span>
<span id="cb4-50">        <span class="va" style="color: #111111;">self</span>.rect.y <span class="op" style="color: #5E5E5E;">=</span> _y</span>
<span id="cb4-51">        <span class="va" style="color: #111111;">self</span>.speed <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb4-52">        </span>
<span id="cb4-53">    <span class="kw" style="color: #003B4F;">def</span> update(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb4-54">        <span class="va" style="color: #111111;">self</span>.rect.x <span class="op" style="color: #5E5E5E;">+=</span> <span class="va" style="color: #111111;">self</span>.speed</span>
<span id="cb4-55">        <span class="cf" style="color: #003B4F;">for</span> enemy <span class="kw" style="color: #003B4F;">in</span> enemies:</span>
<span id="cb4-56">            <span class="cf" style="color: #003B4F;">if</span> pygame.sprite.collide_rect(enemy, <span class="va" style="color: #111111;">self</span>):</span>
<span id="cb4-57">                <span class="va" style="color: #111111;">self</span>.kill()</span>
<span id="cb4-58">                <span class="co" style="color: #5E5E5E;"># enemy.kill()</span></span>
<span id="cb4-59">                e_x, e_y <span class="op" style="color: #5E5E5E;">=</span> enemy.rect.x, enemy.rect.y <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb4-60">                enemy.reset()</span>
<span id="cb4-61">                hit <span class="op" style="color: #5E5E5E;">=</span> Explosion(e_x, e_y)</span>
<span id="cb4-62">                all_sprites.add(hit)</span>
<span id="cb4-63">                plane.score <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb4-64">        <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.rect.x <span class="op" style="color: #5E5E5E;">&gt;=</span> WIDTH <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">20</span>:</span>
<span id="cb4-65">            <span class="va" style="color: #111111;">self</span>.kill()</span>
<span id="cb4-66"></span>
<span id="cb4-67"><span class="kw" style="color: #003B4F;">class</span> Explosion(pygame.sprite.Sprite):</span>
<span id="cb4-68">    </span>
<span id="cb4-69">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, _x, _y):</span>
<span id="cb4-70">        pygame.sprite.Sprite.<span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>)</span>
<span id="cb4-71">        <span class="va" style="color: #111111;">self</span>.image <span class="op" style="color: #5E5E5E;">=</span> pygame.image.load(os.path.join(DATAPATH,</span>
<span id="cb4-72">                     <span class="st" style="color: #20794D;">"explosion.png"</span>))</span>
<span id="cb4-73">        <span class="va" style="color: #111111;">self</span>.rect <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.image.get_rect()</span>
<span id="cb4-74">        <span class="va" style="color: #111111;">self</span>.rect.x <span class="op" style="color: #5E5E5E;">=</span> _x</span>
<span id="cb4-75">        <span class="va" style="color: #111111;">self</span>.rect.y <span class="op" style="color: #5E5E5E;">=</span> _y</span>
<span id="cb4-76">        <span class="va" style="color: #111111;">self</span>.timer <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb4-77">        </span>
<span id="cb4-78">    <span class="kw" style="color: #003B4F;">def</span> update(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb4-79">        <span class="va" style="color: #111111;">self</span>.timer <span class="op" style="color: #5E5E5E;">-=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb4-80">        <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.timer <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb4-81">            <span class="va" style="color: #111111;">self</span>.kill()        </span>
<span id="cb4-82"></span>
<span id="cb4-83"><span class="kw" style="color: #003B4F;">class</span>  Plane(pygame.sprite.Sprite):</span>
<span id="cb4-84">    </span>
<span id="cb4-85">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb4-86">        pygame.sprite.Sprite.<span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>)</span>
<span id="cb4-87">        <span class="co" style="color: #5E5E5E;"># Load Images</span></span>
<span id="cb4-88">        <span class="va" style="color: #111111;">self</span>.images <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb4-89">        <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span> (<span class="dv" style="color: #AD0000;">2</span>):</span>
<span id="cb4-90">            img <span class="op" style="color: #5E5E5E;">=</span> pygame.image.load(os.path.join(DATAPATH,</span>
<span id="cb4-91">                  <span class="ss" style="color: #20794D;">f"planegreen_</span><span class="sc" style="color: #5E5E5E;">{</span>i<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">.png"</span>))</span>
<span id="cb4-92">            <span class="va" style="color: #111111;">self</span>.images.append(img)</span>
<span id="cb4-93">        <span class="va" style="color: #111111;">self</span>.image <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.images[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb4-94">        <span class="va" style="color: #111111;">self</span>.rect <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.image.get_rect()</span>
<span id="cb4-95">        <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">75</span></span>
<span id="cb4-96">        <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">250</span></span>
<span id="cb4-97">        <span class="va" style="color: #111111;">self</span>.frame <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb4-98">        <span class="va" style="color: #111111;">self</span>.ani <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">20</span></span>
<span id="cb4-99">        <span class="va" style="color: #111111;">self</span>.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"NONE"</span></span>
<span id="cb4-100">        <span class="va" style="color: #111111;">self</span>.firecount <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb4-101">        <span class="va" style="color: #111111;">self</span>.score <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb4-102">        <span class="va" style="color: #111111;">self</span>.lives <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb4-103">    </span>
<span id="cb4-104">    <span class="kw" style="color: #003B4F;">def</span> update(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb4-105">        <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"NONE"</span>:</span>
<span id="cb4-106">            <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb4-107">        <span class="cf" style="color: #003B4F;">elif</span> <span class="va" style="color: #111111;">self</span>.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"UP"</span>:</span>
<span id="cb4-108">            <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">20</span>:</span>
<span id="cb4-109">                <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">-=</span> UPDOWN</span>
<span id="cb4-110">        <span class="cf" style="color: #003B4F;">elif</span> <span class="va" style="color: #111111;">self</span>.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"DOWN"</span>:</span>
<span id="cb4-111">            <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">&lt;</span> HEIGHT <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">20</span>:</span>
<span id="cb4-112">                <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">+=</span> UPDOWN</span>
<span id="cb4-113">        <span class="va" style="color: #111111;">self</span>.rect.center <span class="op" style="color: #5E5E5E;">=</span> (<span class="va" style="color: #111111;">self</span>.x, <span class="va" style="color: #111111;">self</span>.y)</span>
<span id="cb4-114">        <span class="cf" style="color: #003B4F;">for</span> enemy <span class="kw" style="color: #003B4F;">in</span> enemies:</span>
<span id="cb4-115">            <span class="cf" style="color: #003B4F;">if</span> pygame.sprite.collide_rect(<span class="va" style="color: #111111;">self</span>, enemy):</span>
<span id="cb4-116">                enemy.reset()</span>
<span id="cb4-117">                <span class="va" style="color: #111111;">self</span>.lives <span class="op" style="color: #5E5E5E;">-=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb4-118">                <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.lives <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb4-119">                    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Verloren!"</span>)</span>
<span id="cb4-120">                    pygame.quit()</span>
<span id="cb4-121">                    <span class="cf" style="color: #003B4F;">try</span>:</span>
<span id="cb4-122">                        sys.exit()</span>
<span id="cb4-123">                    <span class="cf" style="color: #003B4F;">finally</span>:</span>
<span id="cb4-124">                        keep_going <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">False</span></span>
<span id="cb4-125">        <span class="va" style="color: #111111;">self</span>.ani <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb4-126">        <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.ani <span class="op" style="color: #5E5E5E;">&gt;=</span> ANIM:</span>
<span id="cb4-127">            <span class="va" style="color: #111111;">self</span>.ani <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb4-128">            <span class="va" style="color: #111111;">self</span>.frame <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb4-129">            <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.frame <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">1</span>:</span>
<span id="cb4-130">                <span class="va" style="color: #111111;">self</span>.frame <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb4-131">        <span class="va" style="color: #111111;">self</span>.firecount <span class="op" style="color: #5E5E5E;">-=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb4-132">        <span class="va" style="color: #111111;">self</span>.image <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.images[<span class="va" style="color: #111111;">self</span>.frame]</span>
<span id="cb4-133">        </span>
<span id="cb4-134">    <span class="kw" style="color: #003B4F;">def</span> fire(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb4-135">        <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.firecount <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb4-136">            missile <span class="op" style="color: #5E5E5E;">=</span> Missile(<span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">15</span>, <span class="va" style="color: #111111;">self</span>.y)</span>
<span id="cb4-137">            all_sprites.add(missile)</span>
<span id="cb4-138">            <span class="va" style="color: #111111;">self</span>.firecount <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">15</span></span>
<span id="cb4-139"></span>
<span id="cb4-140"><span class="kw" style="color: #003B4F;">class</span> Enemy(pygame.sprite.Sprite):</span>
<span id="cb4-141">    </span>
<span id="cb4-142">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, _x, _y):</span>
<span id="cb4-143">        pygame.sprite.Sprite.<span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>)</span>
<span id="cb4-144">        <span class="va" style="color: #111111;">self</span>.image <span class="op" style="color: #5E5E5E;">=</span> pygame.image.load(os.path.join(DATAPATH,</span>
<span id="cb4-145">                     <span class="st" style="color: #20794D;">"pizza.png"</span>))</span>
<span id="cb4-146">        <span class="va" style="color: #111111;">self</span>.rect <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.image.get_rect()</span>
<span id="cb4-147">        <span class="va" style="color: #111111;">self</span>.rect.x <span class="op" style="color: #5E5E5E;">=</span> _x</span>
<span id="cb4-148">        <span class="va" style="color: #111111;">self</span>.rect.y <span class="op" style="color: #5E5E5E;">=</span> _y</span>
<span id="cb4-149">        <span class="va" style="color: #111111;">self</span>.speed <span class="op" style="color: #5E5E5E;">=</span> randint(<span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">6</span>)</span>
<span id="cb4-150">        </span>
<span id="cb4-151">    <span class="kw" style="color: #003B4F;">def</span> reset(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb4-152">        <span class="va" style="color: #111111;">self</span>.rect.x <span class="op" style="color: #5E5E5E;">=</span> WIDTH <span class="op" style="color: #5E5E5E;">+</span> randint(<span class="dv" style="color: #AD0000;">30</span>, <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb4-153">        <span class="va" style="color: #111111;">self</span>.rect.y <span class="op" style="color: #5E5E5E;">=</span> randint(<span class="dv" style="color: #AD0000;">30</span>, HEIGHT <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">30</span>)</span>
<span id="cb4-154">        <span class="va" style="color: #111111;">self</span>.speed <span class="op" style="color: #5E5E5E;">=</span> randint(<span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">6</span>)</span>
<span id="cb4-155">    </span>
<span id="cb4-156">    <span class="kw" style="color: #003B4F;">def</span> update(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb4-157">        <span class="va" style="color: #111111;">self</span>.rect.x <span class="op" style="color: #5E5E5E;">-=</span> <span class="va" style="color: #111111;">self</span>.speed</span>
<span id="cb4-158">        <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.rect.x <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">30</span>:</span>
<span id="cb4-159">            <span class="va" style="color: #111111;">self</span>.reset()</span>
<span id="cb4-160">            plane.score <span class="op" style="color: #5E5E5E;">-=</span> <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb4-161">            <span class="cf" style="color: #003B4F;">if</span> plane.score <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb4-162">                <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Zu viele Pizzas entkommen lassen!"</span>)</span>
<span id="cb4-163">                pygame.quit()</span>
<span id="cb4-164">                <span class="cf" style="color: #003B4F;">try</span>:</span>
<span id="cb4-165">                    sys.exit()</span>
<span id="cb4-166">                <span class="cf" style="color: #003B4F;">finally</span>:</span>
<span id="cb4-167">                    keep_going <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">False</span></span>
<span id="cb4-168"></span>
<span id="cb4-169"><span class="kw" style="color: #003B4F;">class</span> HUD():</span>
<span id="cb4-170">    </span>
<span id="cb4-171">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb4-172">        <span class="va" style="color: #111111;">self</span>.score_x <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">30</span></span>
<span id="cb4-173">        <span class="va" style="color: #111111;">self</span>.score_y <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">15</span></span>
<span id="cb4-174">        <span class="va" style="color: #111111;">self</span>.heart_x <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">250</span></span>
<span id="cb4-175">        <span class="va" style="color: #111111;">self</span>.heart_y <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">20</span></span>
<span id="cb4-176">        <span class="co" style="color: #5E5E5E;"># Load Fonts</span></span>
<span id="cb4-177">        <span class="va" style="color: #111111;">self</span>.score_font <span class="op" style="color: #5E5E5E;">=</span> pygame.font.Font(os.path.join(FONTPATH,</span>
<span id="cb4-178">                          <span class="st" style="color: #20794D;">"RubikGemstones-Regular.ttf"</span>), <span class="dv" style="color: #AD0000;">25</span>)</span>
<span id="cb4-179">        <span class="va" style="color: #111111;">self</span>.score <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">""</span></span>
<span id="cb4-180">        <span class="co" style="color: #5E5E5E;"># Load Hearts</span></span>
<span id="cb4-181">        <span class="va" style="color: #111111;">self</span>.score_live <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"Lifes :"</span> </span>
<span id="cb4-182">        <span class="va" style="color: #111111;">self</span>.heart_img <span class="op" style="color: #5E5E5E;">=</span> pygame.image.load(os.path.join(DATAPATH,</span>
<span id="cb4-183">                         <span class="st" style="color: #20794D;">"heart.png"</span>))</span>
<span id="cb4-184">        <span class="va" style="color: #111111;">self</span>.heart_rect <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.heart_img.get_rect()</span>
<span id="cb4-185">        </span>
<span id="cb4-186">    <span class="kw" style="color: #003B4F;">def</span> update(<span class="va" style="color: #111111;">self</span>, points):</span>
<span id="cb4-187">        <span class="va" style="color: #111111;">self</span>.score <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.score_font.render(<span class="ss" style="color: #20794D;">f"Score: </span><span class="sc" style="color: #5E5E5E;">{</span>points<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>,</span>
<span id="cb4-188">                     <span class="va" style="color: #111111;">True</span>, (<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>))</span>
<span id="cb4-189">        <span class="va" style="color: #111111;">self</span>.score_rect <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.score.get_rect()</span>
<span id="cb4-190">        <span class="va" style="color: #111111;">self</span>.score_rect.x <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.score_x</span>
<span id="cb4-191">        <span class="va" style="color: #111111;">self</span>.score_rect.y <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.score_y</span>
<span id="cb4-192">        <span class="va" style="color: #111111;">self</span>.score_lives <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.score_font.render(<span class="st" style="color: #20794D;">"Lives: "</span>,</span>
<span id="cb4-193">                           <span class="va" style="color: #111111;">True</span>, (<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>))</span>
<span id="cb4-194">        <span class="va" style="color: #111111;">self</span>.score_lives_rect <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.score_lives.get_rect()</span>
<span id="cb4-195">        <span class="va" style="color: #111111;">self</span>.score_lives_rect.x <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.heart_x</span>
<span id="cb4-196">        <span class="va" style="color: #111111;">self</span>.score_lives_rect.y <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.score_y</span>
<span id="cb4-197">        </span>
<span id="cb4-198">           </span>
<span id="cb4-199"><span class="co" style="color: #5E5E5E;"># Pygame initialisieren und das Fenster</span></span>
<span id="cb4-200"><span class="co" style="color: #5E5E5E;"># und die Hintergrundfarbe festlegen</span></span>
<span id="cb4-201">clock <span class="op" style="color: #5E5E5E;">=</span> pygame.time.Clock()</span>
<span id="cb4-202">pygame.init()</span>
<span id="cb4-203"><span class="co" style="color: #5E5E5E;"># Ein übler Hack, um die Position des Fensters</span></span>
<span id="cb4-204"><span class="co" style="color: #5E5E5E;"># auf meinen zweiten Bildschirm zu setzen,</span></span>
<span id="cb4-205"><span class="co" style="color: #5E5E5E;"># aber er funktioniert …</span></span>
<span id="cb4-206">os.environ[<span class="st" style="color: #20794D;">'SDL_VIDEO_WINDOW_POS'</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">%d</span><span class="st" style="color: #20794D;">,</span><span class="sc" style="color: #5E5E5E;">%d</span><span class="st" style="color: #20794D;">"</span> <span class="op" style="color: #5E5E5E;">%</span> (<span class="dv" style="color: #AD0000;">1320</span>, <span class="dv" style="color: #AD0000;">60</span>)</span>
<span id="cb4-207">screen <span class="op" style="color: #5E5E5E;">=</span> pygame.display.set_mode((WIDTH, HEIGHT))</span>
<span id="cb4-208">pygame.display.set_caption(TITLE)</span>
<span id="cb4-209"></span>
<span id="cb4-210"><span class="co" style="color: #5E5E5E;"># Sprite-Gruppe(n)</span></span>
<span id="cb4-211">backs       <span class="op" style="color: #5E5E5E;">=</span> pygame.sprite.Group()</span>
<span id="cb4-212">all_sprites <span class="op" style="color: #5E5E5E;">=</span> pygame.sprite.Group()</span>
<span id="cb4-213">enemies     <span class="op" style="color: #5E5E5E;">=</span> pygame.sprite.Group()</span>
<span id="cb4-214"></span>
<span id="cb4-215"><span class="co" style="color: #5E5E5E;"># Hintergrund</span></span>
<span id="cb4-216">back1 <span class="op" style="color: #5E5E5E;">=</span> Background(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb4-217">back2 <span class="op" style="color: #5E5E5E;">=</span> Background(BG_WIDTH, <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb4-218">backs.add(back1)</span>
<span id="cb4-219">backs.add(back2)</span>
<span id="cb4-220"></span>
<span id="cb4-221"><span class="co" style="color: #5E5E5E;"># Head Up Display</span></span>
<span id="cb4-222">hud <span class="op" style="color: #5E5E5E;">=</span> HUD()</span>
<span id="cb4-223"></span>
<span id="cb4-224"><span class="co" style="color: #5E5E5E;"># Die Gegner</span></span>
<span id="cb4-225"><span class="cf" style="color: #003B4F;">for</span> _ <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(NO_ENEMIES):</span>
<span id="cb4-226">    pizza <span class="op" style="color: #5E5E5E;">=</span> Enemy(WIDTH <span class="op" style="color: #5E5E5E;">+</span> randint(<span class="dv" style="color: #AD0000;">30</span>, <span class="dv" style="color: #AD0000;">100</span>), randint(<span class="dv" style="color: #AD0000;">30</span>, HEIGHT <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">30</span>))</span>
<span id="cb4-227">    all_sprites.add(pizza)</span>
<span id="cb4-228">    enemies.add(pizza)</span>
<span id="cb4-229"></span>
<span id="cb4-230"><span class="co" style="color: #5E5E5E;"># Der Flieger</span></span>
<span id="cb4-231">plane <span class="op" style="color: #5E5E5E;">=</span> Plane()</span>
<span id="cb4-232">all_sprites.add(plane)</span>
<span id="cb4-233"></span>
<span id="cb4-234">keep_going <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">True</span></span>
<span id="cb4-235"><span class="cf" style="color: #003B4F;">while</span> keep_going:</span>
<span id="cb4-236">    </span>
<span id="cb4-237">    clock.tick(FPS)</span>
<span id="cb4-238">    <span class="cf" style="color: #003B4F;">for</span> event <span class="kw" style="color: #003B4F;">in</span> pygame.event.get():</span>
<span id="cb4-239">        <span class="cf" style="color: #003B4F;">if</span> ((event.<span class="bu" style="color: null;">type</span> <span class="op" style="color: #5E5E5E;">==</span> pygame.QUIT)</span>
<span id="cb4-240">            <span class="kw" style="color: #003B4F;">or</span> (event.<span class="bu" style="color: null;">type</span> <span class="op" style="color: #5E5E5E;">==</span> pygame.KEYDOWN <span class="kw" style="color: #003B4F;">and</span></span>
<span id="cb4-241">                event.key <span class="op" style="color: #5E5E5E;">==</span> pygame.K_ESCAPE)):</span>
<span id="cb4-242">            <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Bye, Bye, Baby!"</span>)</span>
<span id="cb4-243">            pygame.quit()</span>
<span id="cb4-244">            <span class="cf" style="color: #003B4F;">try</span>:</span>
<span id="cb4-245">                sys.exit()</span>
<span id="cb4-246">            <span class="cf" style="color: #003B4F;">finally</span>:</span>
<span id="cb4-247">                keep_going <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">False</span></span>
<span id="cb4-248">                </span>
<span id="cb4-249">        <span class="cf" style="color: #003B4F;">if</span> event.<span class="bu" style="color: null;">type</span> <span class="op" style="color: #5E5E5E;">==</span> pygame.KEYDOWN:</span>
<span id="cb4-250">            <span class="cf" style="color: #003B4F;">if</span> event.key <span class="op" style="color: #5E5E5E;">==</span> pygame.K_UP:</span>
<span id="cb4-251">                plane.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"UP"</span></span>
<span id="cb4-252">            <span class="cf" style="color: #003B4F;">elif</span> event.key <span class="op" style="color: #5E5E5E;">==</span> pygame.K_DOWN:</span>
<span id="cb4-253">                plane.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"DOWN"</span></span>
<span id="cb4-254">            <span class="cf" style="color: #003B4F;">if</span> event.key <span class="op" style="color: #5E5E5E;">==</span> pygame.K_RIGHT:</span>
<span id="cb4-255">                plane.fire()</span>
<span id="cb4-256">                </span>
<span id="cb4-257">        <span class="cf" style="color: #003B4F;">if</span> event.<span class="bu" style="color: null;">type</span> <span class="op" style="color: #5E5E5E;">==</span> pygame.KEYUP:</span>
<span id="cb4-258">            plane.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"NONE"</span></span>
<span id="cb4-259"></span>
<span id="cb4-260">    backs.update()</span>
<span id="cb4-261">    backs.draw(screen)</span>
<span id="cb4-262">    all_sprites.update()</span>
<span id="cb4-263">    all_sprites.draw(screen)</span>
<span id="cb4-264">    hud.update(plane.score)</span>
<span id="cb4-265">    screen.blit(hud.score, hud.score_rect)</span>
<span id="cb4-266">    screen.blit(hud.score_lives,</span>
<span id="cb4-267">            (hud.score_lives_rect.x, hud.score_lives_rect.y))</span>
<span id="cb4-268">    <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(plane.lives):</span>
<span id="cb4-269">        hud.heart_rect.x <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb4-270">            hud.score_lives_rect.right <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">10</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb4-271">            i<span class="op" style="color: #5E5E5E;">*</span>(hud.heart_img.get_width() <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb4-272">        screen.blit(hud.heart_img, (hud.heart_rect.x,</span>
<span id="cb4-273">                    hud.heart_y))</span>
<span id="cb4-274">    pygame.display.update()</span>
<span id="cb4-275">    pygame.display.flip()</span></code></pre></div>
<p>Natürlich gibt es den <a href="https://github.com/kantel/pygameprojects/blob/master/pizzaplane/pizzaplane04.py">Quellcode</a> mit allen <a href="https://github.com/kantel/pygameprojects/tree/master/pizzaplane/data">Assets</a> auch wieder in meinem GitHub-Repositorium.</p>
<p>Mit knapp 300 Zeilen hat das Programm mittlerweile schon einen beachtlichen Umfang erreicht. Ich glaube, so ein langes Python-Skript hatte ich schon seit Jahren nicht mehr im <em>Schockwellenreiter</em>. Und es werden sicher noch ein paar Zeilen hinzukommen.</p>
<p>Zur Übersicht die bisher erschienenen Beiträge:</p>
<ol type="1">
<li><a href="https://kantel.github.io/posts/20221222501_pizzaplane1_pygame/">Auf ein neues: Pizzaplane in Pygame (Stage 1)</a></li>
<li><a href="https://kantel.github.io/posts/20221222601_pizzaplane2_pygame/">Jetzt mit Killer-Pizzas: Pizzaplane in Pygame</a> (Stage 2)</li>
<li><a href="https://kantel.github.io/posts/2022123101_pizzaplane3/">Pizzaplane Stage 3: Jetzt mit Punktestand!</a></li>
<li>Pizzaplane Stage 4 – jetzt mit grünem Spieler</li>
</ol>
<p>Fortsetzung folgt …</p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Fußnoten</h2>

<ol>
<li id="fn1"><p>Das »grün« ist übrigens <strong>keine</strong> politische Anspielung.↩︎</p></li>
<li id="fn2"><p>Das Video ist Teil der Playlist <a href="https://www.youtube.com/playlist?list=PLUeL14cPSfS4_WXayc6MEvnIyoct4D5qI">Pygame</a> von <em>Click Clack Code</em>. Zwölf halb- bis einstündige Videos nur mit Code und den Ergebnissen, ohne Gequatsche dazwischen. Sehr zu empfehlen!↩︎</p></li>
<li id="fn3"><p>Die Herzchen sind ebenfalls eine freie (CC0) Graphik von <a href="https://opengameart.org/content/shining-coin-shining-health-shining-power-up-sprite-sheets">OpenGameArt.org</a> und ich habe sie auch in dem oben genannten Video entdeckt. Sie können animiert werden. Diese Animation habe ich auf meine ToDo-Liste gesetzt.↩︎</p></li>
<li id="fn4"><p>Ich habe übrigens für diese Fassung erstmalig Pythons neue <a href="https://realpython.com/python-f-strings/">f-String-Syntax</a> genutzt und frage mich, wie ich vorher ohne sie auskommen konnte. Sie macht alles so viel einfacher.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Python</category>
  <category>Pygame</category>
  <category>Spieleprogrammierung</category>
  <guid>https://kantel.github.io/posts/2023010102_pizzaplane4/index.html</guid>
  <pubDate>Sun, 01 Jan 2023 15:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023010102_pizzaplane4/images/pizzaplane4.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Ein frohes, neues Jahr (und die Mediadaten)!</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023010101_mediadaten_202212/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52599798821/"><img src="https://kantel.github.io/posts/2023010101_mediadaten_202212/images/mediadaten202212-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Ein jeder neuer Monat im <em>Schockwellenreiter</em> beginnt mit ein paar Zahlen, die hochtrabend manches Mal auch <em>Mediadaten</em> genannt werden. Für den Dezember stand dies jedoch auf der Kippe, da mein <a href="http://cognitiones.kantel-chaos-team.de/webworking/tools/piwik.html">gewohntes Neugiertool</a> partout nicht mit <a href="http://cognitiones.kantel-chaos-team.de/webworking/webservices/githubpages.html">GitHub Pages</a>, dem <a href="https://kantel.github.io/posts/2022120802_hello_quarto/">neuen Zuhause</a> dieses <del>Blogs</del> Kritzelhefts zusammenarbeiten wollte.</p>
<p>Zwar hatte ich mit dem <del>Geißenpeter</del> <a href="https://www.goatcounter.com/">GoatCounter</a> auch Dank der Unterstützung durch meine Leserinnen und Leser bald einen funktionierenden Ersatz <a href="https://kantel.github.io/posts/2022120702_goatcounter/">gefunden</a>, doch fallen nun natürlich die »alten« Zahlen unter den Tisch. Zwar hatte ich kurzfristig überlegt, wenigstens für eine Übergangszeit die alten und die neuen Zahlen manuell zusammenzuführen, aber das erschien mir zu viel Arbeit – zumal die Zählweise der beiden Tools sehr unterschiedlich ist: So zählt der <em>Geißenpeter</em> zum Beispiel nur die Besuche, nicht aber die Zahl der Besucherinnen und Besucher.</p>
<p>Außerdem: Ein Neuanfang ist ein Neuanfang. So werde ich erst einmal mit der deutlich geschrumpften Zahl der Besucher leben müssen, bis sich diese durch einen langsam anfallenden Back-Katalog wieder aufgefüllt haben. Und so hatte der »neue« Schockwellenreiter in der Zeit vom 7. Dezember 2022 bis 31. Dezember 2022 exakt <strong>2.921&nbsp;Besuche</strong> – wie immer täuscht die Exaktheit der Ziffer eine Genauigkeit der Zahl nur vor. Ich finde, das ist unter diesen Umständen ein stolzes Ergebnis. Und so freue ich mich wie in den Vormonaten über jede Besucherin und jeden Besucher und bedanke mich bei allen meinen Leserinnen und Lesern.</p>
<p>😎 &nbsp; <em>Bleibt mir gewogen!</em></p>
<p>Mein altes Neugiertool werde ich in den nächsten Tagen still legen. Ich werde in diesem Jahr 70 Jahre und ich finde, in diesem Alter muß ich mich mit der eh von mir ungeliebten Wartung selbstgehosteter Server nicht mehr herumschlagen – zumal das nächste Update schon seit Wochen mit den Hufen scharrt.</p>
<p>In diesem Sinne: Ein schönes Jahr 2023 Euch allen da draußen. Auf daß wir uns noch viele Jahre lesen werden.</p>



 ]]></description>
  <category>Interna</category>
  <guid>https://kantel.github.io/posts/2023010101_mediadaten_202212/index.html</guid>
  <pubDate>Sun, 01 Jan 2023 13:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023010101_mediadaten_202212/images/mediadaten202212.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Pizzaplane Stage 3: Jetzt mit Punktestand!</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2022123101_pizzaplane3/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52596848823/"><img src="https://kantel.github.io/posts/2022123101_pizzaplane3/images/pizzaplane3-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Ich wollte das Jahr nicht ausklingen lassen, ohne Euch über den aktuellen Stand meines <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a>-Spiels zu unterrichten, in dem ein braver, roter Doppeldecker unverdrossen gegen die bösen Meloni und ihre Vasallen, die gefährlichen, fliegenden Pizzas kämpft:</p>
<p>Es hat kleine Fortschritte gegeben. Das Spiel besitzt jetzt die Andeutung eines <em>Head Up Displays</em> (HUD) in Form einer Anzeige für den aktuellen Punktestand. Die Schrift ist so löchrig wie Schweizer Käse und symbolisiert die Einschußlöcher, die der Flieger den Pizzen verpaßt. Die Schrift heißt »Rubik Gemstones«, ist frei (<em>SIL Open Font Licence</em>) und ich habe sie bei Google Fonts <a href="https://fonts.google.com/specimen/Rubik+Gemstones">heruntergeladen</a> und in einen <code>fonts</code>-Ordner unterhalb meiner Quelldatei abgelegt.</p>
<p>Mit</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1">FONTPATH <span class="op" style="color: #5E5E5E;">=</span> os.path.join(os.getcwd(), <span class="st" style="color: #20794D;">"fonts"</span>)</span></code></pre></div>
<p>habe ich diesen Ordner dann mit meinem Programm bekanntgemacht und den Font dann in der Klasse <code>HUD()</code> mit</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="va" style="color: #111111;">self</span>.score_font <span class="op" style="color: #5E5E5E;">=</span> pygame.font.Font(os.path.join(FONTPATH,</span>
<span id="cb2-2">                  <span class="st" style="color: #20794D;">"RubikGemstones-Regular.ttf"</span>), <span class="dv" style="color: #AD0000;">25</span>)</span></code></pre></div>
<p>in das Programm eingebunden. Das Herausschreiben des Punktestands erfolgt in der <code>update()</code>-Methode von <code>HUD()</code>:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1">    <span class="kw" style="color: #003B4F;">def</span> update(<span class="va" style="color: #111111;">self</span>, points):</span>
<span id="cb3-2">        <span class="va" style="color: #111111;">self</span>.score <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.score_font.render(<span class="ss" style="color: #20794D;">f"Score: </span><span class="sc" style="color: #5E5E5E;">{</span>points<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>,</span>
<span id="cb3-3">                     <span class="va" style="color: #111111;">True</span>, (<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>))</span>
<span id="cb3-4">        <span class="va" style="color: #111111;">self</span>.score_rect <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.score.get_rect()</span>
<span id="cb3-5">        <span class="va" style="color: #111111;">self</span>.score_rect.x <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.score_x</span>
<span id="cb3-6">        <span class="va" style="color: #111111;">self</span>.score_rect.y <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.score_y</span></code></pre></div>
<p>Die Koordinaten für <code>score_x = 30</code> und <code>score_y = 15</code> habe ich durch simples Ausprobieren ermittelt.</p>
<p>Damit habe ich alle technischen Hürden für das Programm genommen. Jetzt kommt das Ausschmücken und natürlich das <em>refactoring</em> 😎. Aber erst einmal den kompletten Quellcode, damit Ihr nachvollziehen könnt, was ich bisher eigentlich angestellt habe:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;">import</span> pygame</span>
<span id="cb4-2"><span class="im" style="color: #00769E;">from</span> pygame.<span class="bu" style="color: null;">locals</span> <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span>
<span id="cb4-3"><span class="im" style="color: #00769E;">from</span> random <span class="im" style="color: #00769E;">import</span> randint</span>
<span id="cb4-4"><span class="im" style="color: #00769E;">import</span> os</span>
<span id="cb4-5"><span class="im" style="color: #00769E;">import</span> sys</span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;"># Hier wird der Pfad zum Verzeichnis der Assets gesetzt</span></span>
<span id="cb4-8">DATAPATH <span class="op" style="color: #5E5E5E;">=</span> os.path.join(os.getcwd(), <span class="st" style="color: #20794D;">"data"</span>)</span>
<span id="cb4-9">FONTPATH <span class="op" style="color: #5E5E5E;">=</span> os.path.join(os.getcwd(), <span class="st" style="color: #20794D;">"fonts"</span>)</span>
<span id="cb4-10"></span>
<span id="cb4-11"><span class="co" style="color: #5E5E5E;"># Konstanten deklarieren</span></span>
<span id="cb4-12">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">720</span>, <span class="dv" style="color: #AD0000;">520</span></span>
<span id="cb4-13">BG_WIDTH <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1664</span></span>
<span id="cb4-14">TITLE <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"Pizza Plane Stage 3: Punkte, Punkte!"</span></span>
<span id="cb4-15">FPS <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">60</span></span>
<span id="cb4-16">ANIM <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">4</span> <span class="co" style="color: #5E5E5E;"># Animation cycle</span></span>
<span id="cb4-17">UPDOWN <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb4-18">NO_ENEMIES <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb4-19"></span>
<span id="cb4-20"><span class="co" style="color: #5E5E5E;"># Farben</span></span>
<span id="cb4-21">BG_COLOR <span class="op" style="color: #5E5E5E;">=</span> (<span class="dv" style="color: #AD0000;">231</span>, <span class="dv" style="color: #AD0000;">229</span>, <span class="dv" style="color: #AD0000;">226</span>) <span class="co" style="color: #5E5E5E;"># Wüstenhimmel</span></span>
<span id="cb4-22"></span>
<span id="cb4-23"><span class="co" style="color: #5E5E5E;"># Objekte</span></span>
<span id="cb4-24"><span class="kw" style="color: #003B4F;">class</span> Background(pygame.sprite.Sprite):</span>
<span id="cb4-25">    </span>
<span id="cb4-26">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, _x, _y):</span>
<span id="cb4-27">        pygame.sprite.Sprite.<span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>)</span>
<span id="cb4-28">        <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">=</span> _x</span>
<span id="cb4-29">        <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">=</span> _y</span>
<span id="cb4-30">        <span class="va" style="color: #111111;">self</span>.start_x <span class="op" style="color: #5E5E5E;">=</span> _x</span>
<span id="cb4-31">        <span class="va" style="color: #111111;">self</span>.image <span class="op" style="color: #5E5E5E;">=</span> pygame.image.load(os.path.join(DATAPATH,</span>
<span id="cb4-32">                     <span class="st" style="color: #20794D;">"desert.png"</span>))</span>
<span id="cb4-33">        <span class="va" style="color: #111111;">self</span>.rect <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.image.get_rect()</span>
<span id="cb4-34">        </span>
<span id="cb4-35">    <span class="kw" style="color: #003B4F;">def</span> update(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb4-36">        <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">-=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb4-37">        <span class="co" style="color: #5E5E5E;"># print(self.x)</span></span>
<span id="cb4-38">        <span class="va" style="color: #111111;">self</span>.rect.x <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.x</span>
<span id="cb4-39">        <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="op" style="color: #5E5E5E;">-</span>BG_WIDTH:</span>
<span id="cb4-40">            <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">=</span> BG_WIDTH</span>
<span id="cb4-41"></span>
<span id="cb4-42"><span class="kw" style="color: #003B4F;">class</span> Missile(pygame.sprite.Sprite):</span>
<span id="cb4-43">    </span>
<span id="cb4-44">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, _x, _y):</span>
<span id="cb4-45">        pygame.sprite.Sprite.<span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>)</span>
<span id="cb4-46">        <span class="va" style="color: #111111;">self</span>.image <span class="op" style="color: #5E5E5E;">=</span> pygame.image.load(os.path.join(DATAPATH,</span>
<span id="cb4-47">                     <span class="st" style="color: #20794D;">"missile.png"</span>))</span>
<span id="cb4-48">        <span class="va" style="color: #111111;">self</span>.rect <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.image.get_rect()</span>
<span id="cb4-49">        <span class="va" style="color: #111111;">self</span>.rect.x <span class="op" style="color: #5E5E5E;">=</span> _x</span>
<span id="cb4-50">        <span class="va" style="color: #111111;">self</span>.rect.y <span class="op" style="color: #5E5E5E;">=</span> _y</span>
<span id="cb4-51">        <span class="va" style="color: #111111;">self</span>.speed <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb4-52">        </span>
<span id="cb4-53">    <span class="kw" style="color: #003B4F;">def</span> update(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb4-54">        <span class="va" style="color: #111111;">self</span>.rect.x <span class="op" style="color: #5E5E5E;">+=</span> <span class="va" style="color: #111111;">self</span>.speed</span>
<span id="cb4-55">        <span class="cf" style="color: #003B4F;">for</span> enemy <span class="kw" style="color: #003B4F;">in</span> enemies:</span>
<span id="cb4-56">            <span class="cf" style="color: #003B4F;">if</span> pygame.sprite.collide_rect(enemy, <span class="va" style="color: #111111;">self</span>):</span>
<span id="cb4-57">                <span class="va" style="color: #111111;">self</span>.kill()</span>
<span id="cb4-58">                <span class="co" style="color: #5E5E5E;"># enemy.kill()</span></span>
<span id="cb4-59">                e_x, e_y <span class="op" style="color: #5E5E5E;">=</span> enemy.rect.x, enemy.rect.y <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb4-60">                enemy.reset()</span>
<span id="cb4-61">                hit <span class="op" style="color: #5E5E5E;">=</span> Explosion(e_x, e_y)</span>
<span id="cb4-62">                all_sprites.add(hit)</span>
<span id="cb4-63">                plane.score <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb4-64">        <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.rect.x <span class="op" style="color: #5E5E5E;">&gt;=</span> WIDTH <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">20</span>:</span>
<span id="cb4-65">            <span class="va" style="color: #111111;">self</span>.kill()</span>
<span id="cb4-66"></span>
<span id="cb4-67"><span class="kw" style="color: #003B4F;">class</span> Explosion(pygame.sprite.Sprite):</span>
<span id="cb4-68">    </span>
<span id="cb4-69">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, _x, _y):</span>
<span id="cb4-70">        pygame.sprite.Sprite.<span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>)</span>
<span id="cb4-71">        <span class="va" style="color: #111111;">self</span>.image <span class="op" style="color: #5E5E5E;">=</span> pygame.image.load(os.path.join(DATAPATH,</span>
<span id="cb4-72">                     <span class="st" style="color: #20794D;">"explosion.png"</span>))</span>
<span id="cb4-73">        <span class="va" style="color: #111111;">self</span>.rect <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.image.get_rect()</span>
<span id="cb4-74">        <span class="va" style="color: #111111;">self</span>.rect.x <span class="op" style="color: #5E5E5E;">=</span> _x</span>
<span id="cb4-75">        <span class="va" style="color: #111111;">self</span>.rect.y <span class="op" style="color: #5E5E5E;">=</span> _y</span>
<span id="cb4-76">        <span class="va" style="color: #111111;">self</span>.timer <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb4-77">        </span>
<span id="cb4-78">    <span class="kw" style="color: #003B4F;">def</span> update(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb4-79">        <span class="va" style="color: #111111;">self</span>.timer <span class="op" style="color: #5E5E5E;">-=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb4-80">        <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.timer <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb4-81">            <span class="va" style="color: #111111;">self</span>.kill()        </span>
<span id="cb4-82"></span>
<span id="cb4-83"><span class="kw" style="color: #003B4F;">class</span>  Plane(pygame.sprite.Sprite):</span>
<span id="cb4-84">    </span>
<span id="cb4-85">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb4-86">        pygame.sprite.Sprite.<span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>)</span>
<span id="cb4-87">        <span class="co" style="color: #5E5E5E;"># Load Images</span></span>
<span id="cb4-88">        <span class="va" style="color: #111111;">self</span>.images <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb4-89">        <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span> (<span class="dv" style="color: #AD0000;">3</span>):</span>
<span id="cb4-90">            img <span class="op" style="color: #5E5E5E;">=</span> pygame.image.load(os.path.join(DATAPATH,</span>
<span id="cb4-91">                  <span class="st" style="color: #20794D;">"planered_"</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="bu" style="color: null;">str</span>(i) <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">".png"</span>))</span>
<span id="cb4-92">            <span class="va" style="color: #111111;">self</span>.images.append(img)</span>
<span id="cb4-93">        <span class="va" style="color: #111111;">self</span>.image <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.images[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb4-94">        <span class="va" style="color: #111111;">self</span>.rect <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.image.get_rect()</span>
<span id="cb4-95">        <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">75</span></span>
<span id="cb4-96">        <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">250</span></span>
<span id="cb4-97">        <span class="va" style="color: #111111;">self</span>.frame <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb4-98">        <span class="va" style="color: #111111;">self</span>.ani <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">20</span></span>
<span id="cb4-99">        <span class="va" style="color: #111111;">self</span>.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"NONE"</span></span>
<span id="cb4-100">        <span class="va" style="color: #111111;">self</span>.firecount <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb4-101">        <span class="va" style="color: #111111;">self</span>.score <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb4-102">    </span>
<span id="cb4-103">    <span class="kw" style="color: #003B4F;">def</span> update(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb4-104">        <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"NONE"</span>:</span>
<span id="cb4-105">            <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb4-106">        <span class="cf" style="color: #003B4F;">elif</span> <span class="va" style="color: #111111;">self</span>.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"UP"</span>:</span>
<span id="cb4-107">            <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">20</span>:</span>
<span id="cb4-108">                <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">-=</span> UPDOWN</span>
<span id="cb4-109">        <span class="cf" style="color: #003B4F;">elif</span> <span class="va" style="color: #111111;">self</span>.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"DOWN"</span>:</span>
<span id="cb4-110">            <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">&lt;</span> HEIGHT <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">20</span>:</span>
<span id="cb4-111">                <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">+=</span> UPDOWN</span>
<span id="cb4-112">        <span class="va" style="color: #111111;">self</span>.rect.center <span class="op" style="color: #5E5E5E;">=</span> (<span class="va" style="color: #111111;">self</span>.x, <span class="va" style="color: #111111;">self</span>.y)</span>
<span id="cb4-113">        <span class="va" style="color: #111111;">self</span>.ani <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb4-114">        <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.ani <span class="op" style="color: #5E5E5E;">&gt;=</span> ANIM:</span>
<span id="cb4-115">            <span class="va" style="color: #111111;">self</span>.ani <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb4-116">            <span class="va" style="color: #111111;">self</span>.frame <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb4-117">            <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.frame <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">2</span>:</span>
<span id="cb4-118">                <span class="va" style="color: #111111;">self</span>.frame <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb4-119">        <span class="va" style="color: #111111;">self</span>.firecount <span class="op" style="color: #5E5E5E;">-=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb4-120">        <span class="va" style="color: #111111;">self</span>.image <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.images[<span class="va" style="color: #111111;">self</span>.frame]</span>
<span id="cb4-121">        </span>
<span id="cb4-122">    <span class="kw" style="color: #003B4F;">def</span> fire(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb4-123">        <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.firecount <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb4-124">            missile <span class="op" style="color: #5E5E5E;">=</span> Missile(<span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">15</span>, <span class="va" style="color: #111111;">self</span>.y)</span>
<span id="cb4-125">            all_sprites.add(missile)</span>
<span id="cb4-126">            <span class="va" style="color: #111111;">self</span>.firecount <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">15</span></span>
<span id="cb4-127"></span>
<span id="cb4-128"><span class="kw" style="color: #003B4F;">class</span> Enemy(pygame.sprite.Sprite):</span>
<span id="cb4-129">    </span>
<span id="cb4-130">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, _x, _y):</span>
<span id="cb4-131">        pygame.sprite.Sprite.<span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>)</span>
<span id="cb4-132">        <span class="va" style="color: #111111;">self</span>.image <span class="op" style="color: #5E5E5E;">=</span> pygame.image.load(os.path.join(DATAPATH,</span>
<span id="cb4-133">                     <span class="st" style="color: #20794D;">"pizza.png"</span>))</span>
<span id="cb4-134">        <span class="va" style="color: #111111;">self</span>.rect <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.image.get_rect()</span>
<span id="cb4-135">        <span class="va" style="color: #111111;">self</span>.rect.x <span class="op" style="color: #5E5E5E;">=</span> _x</span>
<span id="cb4-136">        <span class="va" style="color: #111111;">self</span>.rect.y <span class="op" style="color: #5E5E5E;">=</span> _y</span>
<span id="cb4-137">        <span class="va" style="color: #111111;">self</span>.speed <span class="op" style="color: #5E5E5E;">=</span> randint(<span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">6</span>)</span>
<span id="cb4-138">        </span>
<span id="cb4-139">    <span class="kw" style="color: #003B4F;">def</span> reset(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb4-140">        <span class="va" style="color: #111111;">self</span>.rect.x <span class="op" style="color: #5E5E5E;">=</span> WIDTH <span class="op" style="color: #5E5E5E;">+</span> randint(<span class="dv" style="color: #AD0000;">30</span>, <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb4-141">        <span class="va" style="color: #111111;">self</span>.rect.y <span class="op" style="color: #5E5E5E;">=</span> randint(<span class="dv" style="color: #AD0000;">30</span>, HEIGHT <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">30</span>)</span>
<span id="cb4-142">        <span class="va" style="color: #111111;">self</span>.speed <span class="op" style="color: #5E5E5E;">=</span> randint(<span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">6</span>)</span>
<span id="cb4-143">    </span>
<span id="cb4-144">    <span class="kw" style="color: #003B4F;">def</span> update(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb4-145">        <span class="va" style="color: #111111;">self</span>.rect.x <span class="op" style="color: #5E5E5E;">-=</span> <span class="va" style="color: #111111;">self</span>.speed</span>
<span id="cb4-146">        <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.rect.x <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">30</span>:</span>
<span id="cb4-147">            <span class="va" style="color: #111111;">self</span>.reset()</span>
<span id="cb4-148">            plane.score <span class="op" style="color: #5E5E5E;">-=</span> <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb4-149">        </span>
<span id="cb4-150"><span class="kw" style="color: #003B4F;">class</span> HUD():</span>
<span id="cb4-151">    </span>
<span id="cb4-152">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb4-153">        <span class="va" style="color: #111111;">self</span>.score_x <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">30</span></span>
<span id="cb4-154">        <span class="va" style="color: #111111;">self</span>.score_y <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">15</span></span>
<span id="cb4-155">        <span class="va" style="color: #111111;">self</span>.score_font <span class="op" style="color: #5E5E5E;">=</span> pygame.font.Font(os.path.join(FONTPATH,</span>
<span id="cb4-156">                          <span class="st" style="color: #20794D;">"RubikGemstones-Regular.ttf"</span>), <span class="dv" style="color: #AD0000;">25</span>)</span>
<span id="cb4-157">        <span class="va" style="color: #111111;">self</span>.score <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">""</span></span>
<span id="cb4-158">        </span>
<span id="cb4-159">    <span class="kw" style="color: #003B4F;">def</span> update(<span class="va" style="color: #111111;">self</span>, points):</span>
<span id="cb4-160">        <span class="va" style="color: #111111;">self</span>.score <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.score_font.render(<span class="ss" style="color: #20794D;">f"Score: </span><span class="sc" style="color: #5E5E5E;">{</span>points<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>,</span>
<span id="cb4-161">                     <span class="va" style="color: #111111;">True</span>, (<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>))</span>
<span id="cb4-162">        <span class="va" style="color: #111111;">self</span>.score_rect <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.score.get_rect()</span>
<span id="cb4-163">        <span class="va" style="color: #111111;">self</span>.score_rect.x <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.score_x</span>
<span id="cb4-164">        <span class="va" style="color: #111111;">self</span>.score_rect.y <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.score_y</span>
<span id="cb4-165">           </span>
<span id="cb4-166"><span class="co" style="color: #5E5E5E;"># Pygame initialisieren und das Fenster</span></span>
<span id="cb4-167"><span class="co" style="color: #5E5E5E;"># und die Hintergrundfarbe festlegen</span></span>
<span id="cb4-168">clock <span class="op" style="color: #5E5E5E;">=</span> pygame.time.Clock()</span>
<span id="cb4-169">pygame.init()</span>
<span id="cb4-170"><span class="co" style="color: #5E5E5E;"># Ein übler Hack, um die Position des Fensters</span></span>
<span id="cb4-171"><span class="co" style="color: #5E5E5E;"># auf meinen zweiten Bildschirm zu setzen,</span></span>
<span id="cb4-172"><span class="co" style="color: #5E5E5E;"># aber er funktioniert …</span></span>
<span id="cb4-173">os.environ[<span class="st" style="color: #20794D;">'SDL_VIDEO_WINDOW_POS'</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">%d</span><span class="st" style="color: #20794D;">,</span><span class="sc" style="color: #5E5E5E;">%d</span><span class="st" style="color: #20794D;">"</span> <span class="op" style="color: #5E5E5E;">%</span> (<span class="dv" style="color: #AD0000;">1320</span>, <span class="dv" style="color: #AD0000;">60</span>)</span>
<span id="cb4-174">screen <span class="op" style="color: #5E5E5E;">=</span> pygame.display.set_mode((WIDTH, HEIGHT))</span>
<span id="cb4-175">pygame.display.set_caption(TITLE)</span>
<span id="cb4-176"></span>
<span id="cb4-177"><span class="co" style="color: #5E5E5E;"># Sprite-Gruppe(n)</span></span>
<span id="cb4-178">backs       <span class="op" style="color: #5E5E5E;">=</span> pygame.sprite.Group()</span>
<span id="cb4-179">all_sprites <span class="op" style="color: #5E5E5E;">=</span> pygame.sprite.Group()</span>
<span id="cb4-180">enemies     <span class="op" style="color: #5E5E5E;">=</span> pygame.sprite.Group()</span>
<span id="cb4-181"></span>
<span id="cb4-182"><span class="co" style="color: #5E5E5E;"># Hintergrund</span></span>
<span id="cb4-183">back1 <span class="op" style="color: #5E5E5E;">=</span> Background(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb4-184">back2 <span class="op" style="color: #5E5E5E;">=</span> Background(BG_WIDTH, <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb4-185">backs.add(back1)</span>
<span id="cb4-186">backs.add(back2)</span>
<span id="cb4-187"></span>
<span id="cb4-188"><span class="co" style="color: #5E5E5E;"># Head Up Display</span></span>
<span id="cb4-189">hud <span class="op" style="color: #5E5E5E;">=</span> HUD()</span>
<span id="cb4-190"></span>
<span id="cb4-191"><span class="co" style="color: #5E5E5E;"># Die Gegner</span></span>
<span id="cb4-192"><span class="cf" style="color: #003B4F;">for</span> _ <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(NO_ENEMIES):</span>
<span id="cb4-193">    pizza <span class="op" style="color: #5E5E5E;">=</span> Enemy(WIDTH <span class="op" style="color: #5E5E5E;">+</span> randint(<span class="dv" style="color: #AD0000;">30</span>, <span class="dv" style="color: #AD0000;">100</span>), randint(<span class="dv" style="color: #AD0000;">30</span>, HEIGHT <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">30</span>))</span>
<span id="cb4-194">    all_sprites.add(pizza)</span>
<span id="cb4-195">    enemies.add(pizza)</span>
<span id="cb4-196"></span>
<span id="cb4-197"><span class="co" style="color: #5E5E5E;"># Der rote Flieger</span></span>
<span id="cb4-198">plane <span class="op" style="color: #5E5E5E;">=</span> Plane()</span>
<span id="cb4-199">all_sprites.add(plane)</span>
<span id="cb4-200"></span>
<span id="cb4-201">keep_going <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">True</span></span>
<span id="cb4-202"><span class="cf" style="color: #003B4F;">while</span> keep_going:</span>
<span id="cb4-203">    </span>
<span id="cb4-204">    clock.tick(FPS)</span>
<span id="cb4-205">    <span class="cf" style="color: #003B4F;">for</span> event <span class="kw" style="color: #003B4F;">in</span> pygame.event.get():</span>
<span id="cb4-206">        <span class="cf" style="color: #003B4F;">if</span> ((event.<span class="bu" style="color: null;">type</span> <span class="op" style="color: #5E5E5E;">==</span> pygame.QUIT)</span>
<span id="cb4-207">            <span class="kw" style="color: #003B4F;">or</span> (event.<span class="bu" style="color: null;">type</span> <span class="op" style="color: #5E5E5E;">==</span> pygame.KEYDOWN</span>
<span id="cb4-208">                <span class="kw" style="color: #003B4F;">and</span> event.key <span class="op" style="color: #5E5E5E;">==</span> pygame.K_ESCAPE)):</span>
<span id="cb4-209">            <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Bye, Bye, Baby!"</span>)</span>
<span id="cb4-210">            pygame.quit()</span>
<span id="cb4-211">            <span class="cf" style="color: #003B4F;">try</span>:</span>
<span id="cb4-212">                sys.exit()</span>
<span id="cb4-213">            <span class="cf" style="color: #003B4F;">finally</span>:</span>
<span id="cb4-214">                keep_going <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">False</span></span>
<span id="cb4-215">                </span>
<span id="cb4-216">        <span class="cf" style="color: #003B4F;">if</span> event.<span class="bu" style="color: null;">type</span> <span class="op" style="color: #5E5E5E;">==</span> pygame.KEYDOWN:</span>
<span id="cb4-217">            <span class="cf" style="color: #003B4F;">if</span> event.key <span class="op" style="color: #5E5E5E;">==</span> pygame.K_UP:</span>
<span id="cb4-218">                plane.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"UP"</span></span>
<span id="cb4-219">            <span class="cf" style="color: #003B4F;">elif</span> event.key <span class="op" style="color: #5E5E5E;">==</span> pygame.K_DOWN:</span>
<span id="cb4-220">                plane.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"DOWN"</span></span>
<span id="cb4-221">            <span class="cf" style="color: #003B4F;">if</span> event.key <span class="op" style="color: #5E5E5E;">==</span> pygame.K_RIGHT:</span>
<span id="cb4-222">                plane.fire()</span>
<span id="cb4-223">                </span>
<span id="cb4-224">        <span class="cf" style="color: #003B4F;">if</span> event.<span class="bu" style="color: null;">type</span> <span class="op" style="color: #5E5E5E;">==</span> pygame.KEYUP:</span>
<span id="cb4-225">            plane.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"NONE"</span></span>
<span id="cb4-226"></span>
<span id="cb4-227">    backs.update()</span>
<span id="cb4-228">    backs.draw(screen)</span>
<span id="cb4-229">    all_sprites.update()</span>
<span id="cb4-230">    all_sprites.draw(screen)</span>
<span id="cb4-231">    hud.update(plane.score)</span>
<span id="cb4-232">    screen.blit(hud.score, hud.score_rect)</span>
<span id="cb4-233">    pygame.display.update()</span>
<span id="cb4-234">    pygame.display.flip()</span></code></pre></div>
<p>Den <a href="https://github.com/kantel/pygameprojects/tree/master/pizzaplane">Quellcode und sämtliche Assets</a> findet Ihr natürlich auch wieder auf meinen GitHub-Seiten. Zur Abrundung hier noch die Auflistung der bisher erschienenen Beiträge:</p>
<ol type="1">
<li><a href="https://kantel.github.io/posts/20221222501_pizzaplane1_pygame/">Auf ein neues: Pizzaplane in Pygame (Stage 1)</a></li>
<li><a href="https://kantel.github.io/posts/20221222601_pizzaplane2_pygame/">Jetzt mit Killer-Pizzas: Pizzaplane in Pygame</a> (Stage 2)</li>
<li>Pizzaplane Stage 3: Jetzt mit Punktestand!</li>
</ol>
<p>Fortsetzung folgt … (Ich habe da auch schon wieder ein paar neue Ideen, die ich unbedingt ausprobieren möchte.)</p>



 ]]></description>
  <category>Python</category>
  <category>Pygame</category>
  <category>Spieleprogrammierung</category>
  <guid>https://kantel.github.io/posts/2022123101_pizzaplane3/index.html</guid>
  <pubDate>Sat, 31 Dec 2022 15:35:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2022123101_pizzaplane3/images/pizzaplane3.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Neukölln: Haben die alle einen Knall?</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2022123001_lidl_neukolln/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52596164214/"><img src="https://kantel.github.io/posts/2022123001_lidl_neukolln/images/lidlglasowerstrassenk-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Kaum geht die Sonne unter, bricht in diesen Tagen in den Straßen Neuköllns die Hölle aus, denn jedes Kleinhirn glaubt, jetzt unbedingt mit Feuerwerkskörpern Krieg spielen zu müssen. Woher sie die Feuerwerkskörper haben? Dumme Frage – von Lidl natürlich, da kann man sie sich – mit ein wenig <em>Chuzpe</em> – umsonst besorgen. <a href="https://www.berliner-zeitung.de/news/blitzeinbruch-bei-lidl-in-neukoelln-wohl-rollwagen-mit-feuerwerk-gestohlen-li.302285">Wie zum Beispiel hier</a>:</p>
<p>Mehrere Personen sollen gestern abend gegen 20.30 Uhr gewaltsam in den Lebensmitteldiscounter Lidl in der Glasower Straße eingedrungen sein und haben eine ganze Wagenladung Feuerwerk gestohlen. Der Einbruch war wohl eine Minutensache und es gab einen Verletzten. Die Täter sind unerkannt mit Auto <strong>und</strong> Einkaufswagen entkommen.</p>
<p>Pikant ist, daß nur wenige Meter weiter, in der Juliusstraße, das Hauptquartier der Neuköllner Operettenpolizisten (aka Ordnungsamt) seinen Sitz hat. Aber die trauen sich schon lange nicht mehr auf die Straße. Nicht nur, weil sie Angst vor der angeblichen oder tatsächlichen Gewaltbereitschaft des Neuköllner Straßenmobs haben, sondern weil ihre Chefin, die Neuköllner Stadträtin <em><a href="https://www.berlin.de/ba-neukoelln/politik-und-verwaltung/bezirksamt/geschaeftsbereich-ordnung/">Sarah Nagel</a></em> (Linke) ihnen einen <a href="https://www.berliner-zeitung.de/news/neukoellner-stadtraetin-verhinderte-razzia-ihr-droht-jetzt-die-abwahl-li.297382">Maulkorb verpaßt</a> hat. Sie hält nämlich das Einhalten und das Durchsetzen von Gesetzen für »<a href="https://mobile.twitter.com/dienagel_/status/1594603923310268416">strukturellen Rassismus</a>«. Dafür hatte sich dann jüngst eine bekannte Berliner Clan-Größe bei Ihr bedankt und sie als »Ehrenfrau« bezeichnet. Mit dieser Auszeichung würde ich mich auf mein Sofa zurückziehen und bitterlich weinen. Denn deutlicher kann das Scheitern einer gutgemeinten, aber wie vieles Gutgemeinte schlecht gemachten, (angeblich linken) Politik nicht gezeigt werden.</p>
<p>Für diese Peinlichkeit landete Frau Nagel in diesem Jahr folgerichtig auf <a href="https://www.berliner-woche.de/bezirk-neukoelln/c-politik/zwei-stadtraete-auf-tip-liste-platziert_a367520">Platz 27 der Liste der 33 peinlichsten Berlinerinnen und Berliner</a>, die das Stadtmagazin <em>tip</em> jährlich herausgibt.</p>
<p><strong>Und wo ich gerade so schön im Rant bin</strong>: Auf Platz 30 der obigen Liste landete mit <em>Falko Liecke</em> (CDU) ein weiterer Neuköllner Stadtrat. Dieser, weil er in seinem Buch »Brennpunkt Deutschland« ganz gewaltig von <em>Thilo Sarrazin</em> (SPD) abgeschrieben habe sich schamlos eines »Heinz-Buschkowsy-Populismus« bediene, so das Stadtmagazin.</p>
<p><em>Falko Liecke</em> will offensichtlich in die Fußstapfen seiner Vorgängerin <em>Franziska Giffey</em> treten, die vorgemacht hat, das Abschreiben und ein damit verbundenes Erschleichen eines Doktortitels einen nicht daran hindert, in Berlin Regierende zu werden. Und ich halte Herrn Liecke für ehrgeizig genug, daß er ebenfalls nach diesem Posten strebt. Dafür muß man schon mal ein wenig abschreiben.</p>
<p>Aber er ist und bleibt in dieser Rolle ein Ritter der traurigen Gestalt. Denn um <del>Sultan</del> Regierender zu werden, muß er erst einmal den Kalifen beerben. Doch unangefochtener Kalif der Berliner CDU ist nun mal <em>Kai (Kai wer?) Wegner</em>. Und so bleibt für <em>Falko Liecke</em> nur die undankbare Rolle des bitterbösen <em><a href="https://de.wikipedia.org/wiki/Isnogud_%E2%80%93_Der_bitterb%C3%B6se_Gro%C3%9Fwesir">Isnogud</a></em>, die er allerdings mir Bravour ausfüllt. Alleine dafür hat er den Platz 30 auf der Schamliste des <em>tip</em> verdient. Nur die Beurteilung über Liecke »Seine Borniertheit illustrierte, daß er sich für Menschen im Stadtteil jenseits des eigenen Lebensstils so wenig interessiert wie ein Kaninchenzüchter für Heilbutt«, die trifft zwar auf ihn, aber auch auf jeden anderen (nicht nur) Neuköllner Politiker und auf jede andere (nicht nur) Neuköllner Politikerin zu.</p>
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52595413527/"><img src="https://kantel.github.io/posts/2022123001_lidl_neukolln/images/leergeklaut.jpg" class="img-fluid"></a><br><em>Heute bei Lidl in der Glasower Straße: Leergeklaut.</em></p>
<p><strong>War sonst noch was?</strong> Ach ja, eine Beamtin der Berliner Polizei wurde am Donnerstagnachmittag am Ohr verletzt, nachdem ein 18-jähriger junger Mann <a href="https://www.berliner-zeitung.de/news/berlin-neukoelln-18-jaehriger-beschiesst-polizistin-mit-boeller-li.302337">eine Gruppe von Einsatzkräften in Neukölln mit Pyrotechnik beworfen hatte</a>. Sie mußte ambulant in einem Krankenhaus behandelt werden. Da gehen sie hin, Eure (strukturell rassistischen) Böller.</p>
<p><em>(Photos (<a href="http://creativecommons.org/licenses/by-nc-nd/2.0/">cc</a>): Jörg Kantel)</em></p>



 ]]></description>
  <category>Microblogging</category>
  <category>Neukölln</category>
  <guid>https://kantel.github.io/posts/2022123001_lidl_neukolln/index.html</guid>
  <pubDate>Fri, 30 Dec 2022 17:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2022123001_lidl_neukolln/images/lidlglasowerstrassenk.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Dann doch lieber Tigerbabies</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/20221222902_microblogging/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://images.fineartamerica.com/images/artworkimages/mediumlarge/2/the-hungry-tiger-of-oz-john-r-neill.jpg"><img src="https://kantel.github.io/posts/20221222902_microblogging/images/the-hungry-tiger-of-oz-john-r-neill-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Seit heute darf offiziell Feuerwerk verkauft werden. Man hört es! Vor Lidl bildeten sich schon in der Früh lange Schlangen. Denn all die jungen Männer mit den kleinen Hirnen und den noch kleineren Schwänzen <em>(<a href="https://www.mdr.de/brisant/promi-klatsch/greta-thunberg-tweet-100.html">Greta Thunberg</a>)</em> müssen ihre nicht vorhandene Männlichkeit mit lautstarker Böllerei in Neuköllns Straßen kompensieren.</p>
<p>Dann sollten sie doch lieber weiter mit <a href="https://www.rbb24.de/panorama/beitrag/2022/12/polizeieinsatz-neukoelln-tiger-clan.html">Tigerbabies auf Instagram posieren</a> und sich anschließend von diesen auffressen lassen.</p>



 ]]></description>
  <category>Microblogging</category>
  <category>Neukölln</category>
  <guid>https://kantel.github.io/posts/20221222902_microblogging/index.html</guid>
  <pubDate>Thu, 29 Dec 2022 16:45:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/20221222902_microblogging/images/the-hungry-tiger-of-oz-john-r-neill.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Tiled-Tutorials (nicht nur) für Dummies</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/20221222901_tiled_for_dummies/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52593093821/"><img src="https://kantel.github.io/posts/20221222901_tiled_for_dummies/images/pgzhack01-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Da ich nicht wirklich vorhersehen kann, wie anläßlich des bevorstehenden Jahreswechsels meine Zeitplanung aussehen wird, gibt es diese Woche die freitäglichen Video-Tutorials schon am Donnerstag: <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/tiled.html">Tiled</a> ist ein freier (GPL), plattformübergreifender (Linux, macOS, Windows) Map-Editor für Computerspiele, der so populär ist, daß seine Dateiformate <code>.tmx</code> und <code>.tsx</code> so etwas wie ein Standard sind. Allerdings lassen sich die erzeugten Karten auch in andere Formate (zum Beispiel als CSV-Dateien) exportieren.</p>
<p>Trotz seiner Popularität gibt es erstaunlich wenige (Video-) Tutorials zu Tiled. Zwar ist die Beutzerführung duch das Programm recht einleuchtend und es daher – zumindest in den Grundzügen – recht schnell zu erlernen, aber es gibt doch an einigen Stellen Haken und Ösen, die man kennen sollte. Daher habe ich einige Tutorials zusammengesucht, die ich Euch vorstellen möchte und die Euch über diese Klippen hinweghelfen sollen.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/OCCzcWrnU88" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="">
</iframe>
<p>Denn Anfang macht der recht kurzlebige Kanal <em>Arts and Entertainment Technologies</em> mit seinem halbstündigen Video »<a href="https://www.youtube.com/watch?v=OCCzcWrnU88">How to Use Tiled</a>«, in dem er zeigt, wie man aus mit Photoshop erzeugten Bildern in Tiled ansprechende Karten schafft. Dazu gibt es noch ein zehnminütiges <em>follow up</em> »<a href="https://www.youtube.com/watch?v=WEtml6DuwqQ">Using the Terrain Brush in Tiled</a>«, das ein weniger bekanntes Tiled-Feature vorstellt.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/_FPA1FvMjTI" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="">
</iframe>
<p>Doch natürlich geht es auch ohne Photoshop. <em>Havi Averilla Xavier</em> zum Beispiel nutzt in seinem recht jungen, ebenfalls halbstündigen Tutorial »<a href="https://www.youtube.com/watch?v=_FPA1FvMjTI">Tiled for Dummies</a>« das freie (GPL) <a href="http://cognitiones.kantel-chaos-team.de/multimedia/computergraphik/gimp.html">Gimp</a> zusammen mit Tiled. Aber natürlich findet man zum Beispiel auf <a href="https://www.kenney.nl/assets">Kenney.nl</a> oder <a href="https://opengameart.org/">OpenGameArt.org</a> hinreichend viele, vorgefertigte und freie Tilesets, die man alle zusammen mit Tiled nutzen kann.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/9ngQmaW-EUI" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="">
</iframe>
<p>Diesen Umstand macht sich <em>Doolin Digital</em> zunutze. Er verwendet in seinen drei »Tiled Map Editor Tutorials« (<a href="https://www.youtube.com/watch?v=9ngQmaW-EUI">Terrains</a>, (16 Minuten), <a href="https://www.youtube.com/watch?v=f212jaHpXNo">Automapping</a> (25 Minuten) und <a href="https://www.youtube.com/watch?v=MpmHPkwWmBc">Random Mode</a> (9 Minuten)) Tilesets von <em>Jason Perry</em> (aka <a href="http://finalbossblues.com/">finalbossblues</a>), der auf seinen <a href="https://finalbossblues.itch.io/">Itch.io-Seiten</a> neben kommerziellen Assets auch Unmengen von freien Tilesets und Sprites anbietet. Es lohnt sich, dort ein wenig zu stöbern.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/aQd3pDHhm3c" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="">
</iframe>
<p>Zum Schluß noch das 25-minütige Tutorial »<a href="https://www.youtube.com/watch?v=aQd3pDHhm3c">Using the »AutoMap« feature in Tiled to generate dungeon walls</a>« und die sieben Minuten »<a href="https://www.youtube.com/watch?v=IHmF_bRpOAE">Easily create levels/maps for Love2D games</a>«. Das letzte Video ist vor allem für diejenigen unter Euch von Interesse, die die kleine, aber feine <a href="https://en.wikipedia.org/wiki/Lua_(programming_language)">Lua</a>-Engine <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/loeve.html">Löwe2D</a> für die Spiele-Entwicklung nutzen.</p>
<p>Generell gilt mein freitägliches <em>Caveat</em>: Ich habe in die meisten der heute vorgestellten Tutorials bestenfalls nur kurz hereingeschaut. Daher muß ich Euch die Beurteilung der Qualität der Filmchen schon selber überlassen.</p>



 ]]></description>
  <category>Tiled</category>
  <category>Spieleprogrammierung</category>
  <guid>https://kantel.github.io/posts/20221222901_tiled_for_dummies/index.html</guid>
  <pubDate>Thu, 29 Dec 2022 09:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/20221222901_tiled_for_dummies/images/pgzhack01.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
