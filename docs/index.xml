<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Der Schockwellenreiter</title>
<link>https://kantel.github.io/index.html</link>
<atom:link href="https://kantel.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description>Schockwellenreiter</description>
<generator>quarto-1.3.433</generator>
<lastBuildDate>Fri, 08 Sep 2023 15:35:00 GMT</lastBuildDate>
<item>
  <title>Processing (Java) und Visual Studio Code – das geht!</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023090801_processing_vscode/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53173241220/"><img src="https://kantel.github.io/posts/2023090801_processing_vscode/images/processingvscode-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p><a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processing.html">Processing</a> schien mir so untrennbar mit der mit ausgelieferten PDE verbunden, daß ich gar nicht auf die Idee gekommen wäre, daß man – zumindest schmerzfrei – einen Processing-Sketch auch außerhalb der PDE bearbeiten und starten könne. Bis mir gestern das Video »<a href="https://www.youtube.com/watch?v=FlVFRzX6jtE">Processing and Visual Studio Code setup for Mac</a>« untergekommen war, das diese Sicht völlig veränderte.</p>
<p>Fazit: Wenn man ein paar einfache Vorarbeiten leistet, kann man einen Processing-Sketch problemlos und komfortabel in <a href="http://cognitiones.kantel-chaos-team.de/produktivitaet/visualstudiocode.html">Visual Studio Code</a> erstellen und auch aus diesem Editor heraus starten. Und da ich zumindest einen ständigen Leser in Bremen habe (Hallo, Kalle!), der sich zum einen für Processing interessiert und zum anderen gerne eine ausführliche Schritt-für-Schritt-Anleitung vorgesetzt bekommt, hier also die Beschreibung, welche Vorarbeiten notwendig waren, damit Processing mit Visual Studio Code zusammenspielte.</p>
<p><strong>Erstens</strong>: Diese Anleitung habe ich nur für den Mac auf meinem MacBook Pro mit der letzten Catalina-Version getestet. Ich habe keine Ahnung, ob und wie das ganze unter Windows und/oder Linux funktioniert. Aber ich sehe auch keine prinzipiellen Hindernisse, daß es nicht funktionieren könnte.</p>
<p><strong>Zweitens</strong>: Ich gehe davon aus, daß ein aktuelles Processing (Processing 4.3 oder jünger) und ein akutelles Visual Studio Code (Version 1.82.0 oder jünger) auf Euren Rechnern schon installiert ist. Wenn nicht holt das bitte nach.</p>
<p><strong>Schritt 1</strong>: Processing starten. Aus der PDE heraus unter dem Menü <code>Tools -&gt; "Processing-java" installieren …</code> die Kommandozeilen-Version von Processing global für alle Nutzer des Rechners installieren. Wenn dies erfolgreich war, sollte ein Aufruf von <code>processing-java</code> mit dem Terminal-Programm Eures Vertrauens so etwas wie folgenden Output generieren:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53172298342/"><img src="https://kantel.github.io/posts/2023090801_processing_vscode/images/processing-java.jpg" class="img-fluid figure-img"></a></p>
<figcaption class="figure-caption"><code>processing-java</code> in iTerm</figcaption>
</figure>
</div>
<p><strong>Schritt 2</strong>: In Visual Studio Code die Extension <a href="https://marketplace.visualstudio.com/items?itemName=Luke-zhang-04.processing-vscode">Processing for Visual Studio Code</a> von <em>Luke Zhang</em> installeren. Das ist eine Fork des in obigem Video vorgestellten Plug-ins von <em>Tobiah Zarlez</em>, die das Handling noch einmal vereinfacht.</p>
<p><strong>Schritt 3</strong> (nur zur Sicherheit): Visual Studio Code neu starten.</p>
<p>Das ist alles. Nun könnt Ihr Euer erstes Processing-Projekt in Visual Studio Code anlegen. Zu beachten ist dabei nur, daß das Verzeichnis, das die <code>.pde</code>-Sketch-Datei enthält, namensgleich mit der PDE-Datei sein muß, also wie in meinem Beispiel (<a href="https://www.flickr.com/photos/schockwellenreiter/53173241220/">Screenshot</a>) muß die Datei <code>test1.pde</code> im Verzeichnis <code>test1</code> liegen, sonst findet Visual Studio Code (und/oder <code>processing-java</code> den Sketch nicht).</p>
<p>Dann könnt Ihr Euren Super-Duper-Sketch eintippen, Und wenn alles korrekt gelaufen ist, zeigt VS-Code nicht nur ein nettes Syntax-Highlighting und macht Vorschläge zur Code-Vervollständigung, sondern links oben findet Ihr auch einen kleinen, grünen Pfeil, der auf Mausklick Euren Sketch startet (oder falls etwas schiefgelaufen ist, im Terminal des Editors eine Fehlermeldung ausgibt).</p>
<p>Ich habe das mit folgendem, kleinen Sketch getestet:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource java number-lines code-with-copy"><code class="sourceCode java"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Ball <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-2"></span>
<span id="cb1-3">    PVector location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-4">    PVector velocity<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-5">    color c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-6"></span>
<span id="cb1-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Ball</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-8">        location <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">PVector</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb1-9">        velocity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">PVector</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb1-10">        c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">color</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb1-11">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-12"></span>
<span id="cb1-13">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">update</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-14">        location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>velocity<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-15">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-16"></span>
<span id="cb1-17">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">checkEdges</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-19">            location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-20">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-21">            location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-22">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-23">        </span>
<span id="cb1-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-25">            location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-26">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-27">            location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-28">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-29">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-30"></span>
<span id="cb1-31">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">display</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-32">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stroke</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-33">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fill</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-34">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">circle</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-35">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-36"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-37"></span>
<span id="cb1-38">Ball<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> balls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-39"></span>
<span id="cb1-40"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setup</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-41">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">size</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">320</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">240</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-42">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">windowTitle</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Processing in VS Code"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-43">    balls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> Ball<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb1-44">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> balls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-45">        balls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">new</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Ball</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb1-46">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-47"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-48"></span>
<span id="cb1-49"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">draw</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-50">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">background</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-51">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> balls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-52">        balls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">update</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb1-53">        balls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">checkEdges</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb1-54">        balls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">display</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb1-55">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>   </span>
<span id="cb1-56"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Okay, ob das alles einen Nähr- oder gar einen Mehrwert hat (außer für Leute wie mich, die gerne ihren Editor bis an die Grenzen ausreizen, bis er so kaputtkonfiguriert ist, daß ihn nur eine komplette Neuinstallation wieder verschlanken kann&nbsp;🤓), weiß ich nicht. Aber zum einen finde ich schön, daß es geht und ich Processing aus den Fängen der PDE befreien kann (es gibt durchaus Szenarien, wo das sinnvoll sein kann – wenn man zum Beispiel mit vielen großen, externen Datensätzen hantieren muß).</p>
<p>Wichtiger aber ist noch: Auf den GitHub-Seiten des Projekts habe ich eine <a href="https://github.com/Luke-zhang-04/processing-vscode#processing-python">Anleitung entdeckt</a>, wie man das Plug-in und Visual Studio Code auch mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processingpy.html">Processing.py</a> verheiraten kann. Ich habe das bisher noch nicht getestet, aber wenn es funktioniert, kann es eigentlich nur besser funktionieren als in der Processing-4-PDE (dort gibt es nämlich für Processing.py keinerlei Fehler- oder Rückmeldungen mehr – ein Processing.py-Sketch stirbt stumm und in voller Schönheit). Ich weiß daher, was dringend noch auf meiner Testliste steht. <em>Still digging!</em></p>



 ]]></description>
  <category>Processing</category>
  <category>Visual Studio Code</category>
  <category>Processing.py</category>
  <guid>https://kantel.github.io/posts/2023090801_processing_vscode/index.html</guid>
  <pubDate>Fri, 08 Sep 2023 15:35:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023090801_processing_vscode/images/processingvscode.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Update auf Twine 2.7.1 (mit Tweego und Harlowe 3.3.7)</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023090701_twine_2_7_1/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53170656641/"><img src="https://kantel.github.io/posts/2023090701_twine_2_7_1/images/twine271-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Nachdem ich <a href="https://kantel.github.io/posts/2023090602_renpy_8_1_2/">gestern</a> erfolgreich meinem Werkzeugkasten für interaktive Geschichten ein <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/renpy.html">Ren’Py</a>-Update auf die Version 8.1.2 spendiert hatte, war ich neugierig geworden. Aus <a href="https://kantel.github.io/posts/2023081701_tweego_first_steps/">Erfahrung wußte ich ja</a>, daß ich mich auf <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/twine2.html">Twines</a> automatische Update-Überprüfung nicht wirklich verlassen kann. Also habe ich selber nachgeschaut.</p>
<p>Und wirklich, schon vor knapp zwei Wochen gab es ein <a href="https://github.com/klembot/twinejs/releases">Update auf Twine 2.7.1</a>. Es war zwar nur ein winziges Update mit einem einzigen kleineren Bugfix, aber bei den Storyformaten werkelte nun im Hintergrund <a href="https://twine2.neocities.org/">Harlowe 3.3.7</a>. Zwar gab es auch hier <a href="https://twine2.neocities.org/#changes_3.3.7-changes-(27-aug,-2023)">keine Neuerungen und Bugfixes</a>, die für nichtenglischsprachige Autoren von Bedeutung wären, aber ich wollte wissen, ob und wie sich das Harlowe-Update mit <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/tweego.html">Tweego</a> schlägt.</p>
<p>Also habe ich – wie in diesem »<a href="https://kantel.github.io/posts/2023082101_tweego_chapbook/">Abschlußbericht</a>« schon einmal ausgeführt hatte – die aktuellen Harlowe-Dateien <code>format.js</code> und <code>icon.svg</code> aus dem <a href="https://github.com/klembot/twinejs/tree/develop/public/story-formats">Twine-GitHub-Repositorium</a> heruntergeladen und sie in das <code>storyformats</code>-Verzeichnis (unter <code>harlowe-3</code>) meiner Tweego-Installation abgelegt. Dann habe ich eine schon etwas ältere Twine-Harlowe-Geschichte nach Twee exportiert und sie dann von Tweego übersetzen lassen.</p>
<p>Wie der <a href="https://www.flickr.com/photos/schockwellenreiter/53170656641/">Screenshot</a> im Banner oben zeigt, scheint das alles wunderbar geklappt zu haben.</p>
<p>Sinn der ganzen Übung ist, daß ich während meiner bisherigen Beschäftigung mit <a href="https://klembot.github.io/chapbook/guide/">Chapbook</a> Lust bekommen habe, auch meine Harlowe-Kenntnisse systematisch in einer Tutorial-Reihe aufzubereiten. Und wer weiß, vielleicht hänge ich danach auch noch eine <a href="https://www.motoslave.net/sugarcube/2/docs/">SugarCube</a>-Tutorialreihe hinten an. Denn <a href="http://twinery.org/cookbook/terms/terms_twee.html">Twee</a>, Tweego und Twine machen wirklich Lust auf mehr. <em>Still digging!</em></p>



 ]]></description>
  <category>Twine</category>
  <category>Interactive Fiction</category>
  <category>Spieleprogrammierung</category>
  <category>Tweego</category>
  <category>Harlowe</category>
  <guid>https://kantel.github.io/posts/2023090701_twine_2_7_1/index.html</guid>
  <pubDate>Thu, 07 Sep 2023 15:35:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023090701_twine_2_7_1/images/twine271.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Ren’Py 8.1.2 – wo noch niemand vorher war</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023090602_renpy_8_1_2/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53168615011/"><img src="https://kantel.github.io/posts/2023090602_renpy_8_1_2/images/alieninvasion-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Gestern wurde <a href="https://www.renpy.org/release/8.1.2">Ren’Py 8.1.2 freigegeben</a>, das den schönen Codenamen »Where No One Has Gone Before« trägt. Es ist ein Bugfix-Release mit nur wenigen neuen Features. Eine Liste aller Änderungen und Fehlerbehebungen findet Ihr wie immer im <a href="https://www.renpy.org/doc/html/changelog.html">Changelog</a>.</p>
<p>Dieses Update erinnert mich natürlich daran, daß ich mich nicht ohne Grund in das <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/twine2.html">Twine</a>-/<a href="https://klembot.github.io/chapbook/guide/">Chapbook</a>-Abenteuer gestürzt habe: Denn Twine mit Chapbook (und mit <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/tweego.html">Tweego</a>!) erlauben eine relative einfache Integration von Twine nach <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/renpy.html">Ren’Py</a>. Zwar ist mit Sicherheit immer noch mehr zusätzliche Handarbeit notwendig, wie bei der von mir als Vorbild und Referenz herangezogenen Integration von <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/inkle.html">Ink/Inky</a> nach <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/unity.html">Unity</a>, aber erste Experimente und Tests verliefen sehr vielversprechend, vor allem wenn man auf <a href="http://cognitiones.kantel-chaos-team.de/produktivitaet/visualstudiocode.html">Visual Studio Code</a> mit dem <a href="https://marketplace.visualstudio.com/items?itemName=cyrusfirheir.twee3-language-tools">Twee 3 Language Tool</a> und dem <a href="https://marketplace.visualstudio.com/items?itemName=LuqueDaniel.languague-renpy">Ren’Py Language Tool</a> setzt.</p>
<p>Ich werde daher in den nächsten Tage Alice noch ein wenig mit Twine und Chapbook durch das Wunderland scheuchen und danach ein paar Chapbook-Sprachelemente vorstellen, die das Tool für die Konversion von Twine nach Ren’Py zu meinem bevorzugten Werkzeug machen. <em>Still digging!</em></p>



 ]]></description>
  <category>RenPy</category>
  <category>Interactive Fiction</category>
  <category>Spieleprogrammierung</category>
  <category>Twine</category>
  <category>Chapbook</category>
  <guid>https://kantel.github.io/posts/2023090602_renpy_8_1_2/index.html</guid>
  <pubDate>Wed, 06 Sep 2023 17:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023090602_renpy_8_1_2/images/alieninvasion.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Google korrigiert erneut in Version 116 seines Browsers Chrome kritische Sicherheitslücken</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023090601_chrome_update/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://upload.wikimedia.org/wikipedia/commons/thumb/6/6c/Gustave_Courbet_-_Le_Sommeil_%281866%29%2C_Paris%2C_Petit_Palais.jpg/1280px-Gustave_Courbet_-_Le_Sommeil_%281866%29%2C_Paris%2C_Petit_Palais.jpg"><img src="https://kantel.github.io/posts/2023090601_chrome_update/images/lesommeil-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Google veröffentlicht ein weiteres Update der Version 116 (116.0.5845.179/180) seines Browsers Chrome und schließt erneut <a href="https://chromereleases.googleblog.com/2023/09/stable-channel-update-for-desktop.html">kritische Sicherheitslücken</a>.</p>
<p>Chrome aktualisiert sich (außer bei Linux) über die integrierte Update-Funktion, kann aber – wenn es pressiert – auch <a href="https://www.google.com/intl/de/chrome/browser/">hier geladen</a> werden. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<p><em>(Bild: <a href="https://de.wikipedia.org/wiki/Gustave_Courbet">Gustave Courbet</a> (1819-1877): Le Sommeil, 1866. Bildquelle: <a href="https://commons.wikimedia.org/wiki/File:Gustave_Courbet_-_Le_Sommeil_(1866),_Paris,_Petit_Palais.jpg">Wikimedia Commons</a>)</em></p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2023090601_chrome_update/index.html</guid>
  <pubDate>Wed, 06 Sep 2023 15:45:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023090601_chrome_update/images/lesommeil.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Alice und der weiße Ritter – ein neues Wunderland-Update</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023090401_alice_weisse_ritter/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53161139272/"><img src="https://kantel.github.io/posts/2023090401_alice_weisse_ritter/images/wunderlandupdate3-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Auch wenn es nach außen hin den Anschein hatte: Ich habe am Wochenende <strong>nicht</strong> auf der faulen Haut gelegen, sondern die kleine Alice mit <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/twine2.html">Twine</a> neue Abenteuer im Wunderland erleben lassen. Dabei habe ich ein paar Sprachelemente des von mir dabei genutzten Storyformats <a href="https://klembot.github.io/chapbook/guide/">Chapbook</a> verwendet, die ich bisher noch nicht vorgestellt hatte.</p>
<p>Dafür bekam die Geschichte einen komplett neuen Strang, der von der Passage <code>Raupe</code> abzweigt. Aber zuerst mußte ich in der Startpassage in paar weitere Variablen definieren:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource twee number-lines code-with-copy"><code class="sourceCode"><span id="cb1-1">:: Start</span>
<span id="cb1-2">config.style.page.link.font: "18 bold none"</span>
<span id="cb1-3">config.style.page.link.color: "teal-8"</span>
<span id="cb1-4">config.style.page.link.active.color: "teal-8"</span>
<span id="cb1-5">config.footer.left: "Alice im Reich der Ringe"</span>
<span id="cb1-6">silberring: false</span>
<span id="cb1-7">goldring: false</span>
<span id="cb1-8">blumenring: false</span>
<span id="cb1-9">gravurring: false</span>
<span id="cb1-10">eisenring: false</span>
<span id="cb1-11">brille: false</span>
<span id="cb1-12">feder: false</span>
<span id="cb1-13">zauberhut: false</span>
<span id="cb1-14">key: false</span>
<span id="cb1-15">--</span>
<span id="cb1-16"></span>
<span id="cb1-17">{embed image: "images/grinsekatze.jpg", alt: "Grinsekatze"}</span>
<span id="cb1-18"></span>
<span id="cb1-19">Es war ein sonniger Tag. Alice schlenderte gedankenverloren durch das Wunderland.</span>
<span id="cb1-20">Sie hatte sich ein wenig verirrt. Plötzlich materialisierte sich im Gestrüpp über</span>
<span id="cb1-21">ihrem Weg die Grinsekatze. Alice fragte sie: »Würdest Du mir bitte sagen, wie ich</span>
<span id="cb1-22">von hier aus weitergehen soll!«</span>
<span id="cb1-23"></span>
<span id="cb1-24">Die Grinsekatze grinste: »Das hängt zum großen Teil davon ab, wohin Du möchtest.</span>
<span id="cb1-25">Aber ich will Dir helfen: Geradeaus geht es zum [[Haus der Herzogin]], links zur</span>
<span id="cb1-26">[[Teeparty des verrückten Hutmachers-&gt;Teeparty]] und rechts triffst Du die</span>
<span id="cb1-27">[[kiffende Raupe auf ihrem Pilz-&gt;Raupe]].«</span></code></pre></div>
<p>Während ansonsten alle anderen bisherigen Passagen unverändert beibehalten wurden, bekam die Passage <code>Raupe</code> einen komplett neuen Inhalt:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource twee number-lines code-with-copy"><code class="sourceCode"><span id="cb2-1">:: Raupe</span>
<span id="cb2-2">{embed image: "images/raupe_large.jpg", alt: "Raupe"}</span>
<span id="cb2-3"></span>
<span id="cb2-4"></span>
<span id="cb2-5">Die Raupe erzählte Alice von einem geheimnisvollen Tal im Wunderland, das</span>
<span id="cb2-6">»Reich der Ringe« genannt wurde. Nur fünf Zugänge gäbe es zu diesem Tal, jeder</span>
<span id="cb2-7">sei durch einen besonderen Ring gesichert. Leider wüßte sie nicht, welcher Ring</span>
<span id="cb2-8">zu welchem Zugang führe und welche Gefahren hinter den jeweiligen Zugängen</span>
<span id="cb2-9">lauerten. Alice könne aber nur einen Ring mitnehmen. Die Raupe öffnete ein</span>
<span id="cb2-10">kleines Schmuckkästchen und zeigte Ihr einen [[eisernen-&gt;Eisenring]], einen</span>
<span id="cb2-11">[[silbernen-&gt;Silberring]], einen [[goldenen Ring-&gt;Goldring]], einen</span>
<span id="cb2-12">[[Ring mit einer durchbrochenen Blume-&gt;Blumenring]] und schließlich einen</span>
<span id="cb2-13">[[Ring mit einer seltsamen Gravur-&gt;Gravurring]].</span></code></pre></div>
<p>Und hier beginnt ein neuer Strang der Geschichte, der erst einmal die diversen Ring-Passagen abhandelt:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource twee number-lines code-with-copy"><code class="sourceCode"><span id="cb3-1">:: Eisenring</span>
<span id="cb3-2">eisenring: true</span>
<span id="cb3-3">ring: "Eisenring"</span>
<span id="cb3-4">--</span>
<span id="cb3-5"></span>
<span id="cb3-6">Alice steckte den eisernen Ring an ihren Ringfinger.</span>
<span id="cb3-7">{embed passage: "Magical Items"}</span></code></pre></div>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource twee number-lines code-with-copy"><code class="sourceCode"><span id="cb4-1">:: Silberring</span>
<span id="cb4-2">silberring: true</span>
<span id="cb4-3">ring: "Silberring"</span>
<span id="cb4-4">--</span>
<span id="cb4-5"></span>
<span id="cb4-6">Alice steckte den silbernen Ring an ihren Ringfinger.</span>
<span id="cb4-7">{embed passage: "Magical Items"}</span></code></pre></div>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource twee number-lines code-with-copy"><code class="sourceCode"><span id="cb5-1">:: Goldring</span>
<span id="cb5-2">goldring: true</span>
<span id="cb5-3">ring: "Goldring"</span>
<span id="cb5-4">--</span>
<span id="cb5-5"></span>
<span id="cb5-6">Alice steckte den {ring} an ihren Ringfinger.</span>
<span id="cb5-7">{embed passage: "Magical Items"}</span></code></pre></div>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource twee number-lines code-with-copy"><code class="sourceCode"><span id="cb6-1">:: Blumenring</span>
<span id="cb6-2">blumenringring: true</span>
<span id="cb6-3">ring: "Blumenring"</span>
<span id="cb6-4">--</span>
<span id="cb6-5"></span>
<span id="cb6-6">Alice steckte den {ring} an ihren Ringfinger.</span>
<span id="cb6-7">{embed passage: "Magical Items"}</span></code></pre></div>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource twee number-lines code-with-copy"><code class="sourceCode"><span id="cb7-1">:: Gravurring</span>
<span id="cb7-2">gravurring: true</span>
<span id="cb7-3">ring: "Gravurring"</span>
<span id="cb7-4">--</span>
<span id="cb7-5"></span>
<span id="cb7-6">Alice steckte den Ring mit der seltsamen Gravur an ihren Ringfinger.</span>
<span id="cb7-7">{embed passage: "Magical Items"}</span></code></pre></div>
<p>Neu ist hier das Konstrukt <em><a href="https://klembot.github.io/chapbook/guide/modifiers-and-inserts/embedding-passages.html">embed passage</a></em>, ein weiteres <em><a href="https://klembot.github.io/chapbook/guide/modifiers-and-inserts/link-inserts.html">Insert</a></em> aus dem Werkzeugkasten von Chapbook. Hiermit können wiederkehrende Texte/Textpassagen in bestehende Passagen eingebettet werden. In unserem Fall ist das die Passage <code>Magical Items</code>:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource twee number-lines code-with-copy"><code class="sourceCode"><span id="cb8-1">:: Magical Items</span>
<span id="cb8-2">{embed image: "images/raupe3_g_kay.jpg", alt: "Alice und die Raupe"}</span>
<span id="cb8-3"></span>
<span id="cb8-4">Sie wollte schon den Pilz verlassen, aber die Raupe ergriff ihren Arm und sagte:</span>
<span id="cb8-5">»Du kannst noch einen, aber nur einen weiteren Gegenstand aus meinem magischen</span>
<span id="cb8-6">Kästchen für Deine gedahrvolle Reise mitnehmen. Jeder von ihnen kann Dir auf</span>
<span id="cb8-7">seine Weise helfen, aber Du weißt nicht wie und ich weiß nicht wann.«</span>
<span id="cb8-8"></span>
<span id="cb8-9">Sie öffnete einen zweiten Kasten. Dort lagen eine [[Feder]], eine [[Brille]]</span>
<span id="cb8-10">und ein [[Zauberhut]].</span></code></pre></div>
<p>Die eingebetteten Passagen werden in Twine/Chapbook durch gestrichelte Pfeile dargestellt, damit man als Autor wenigstens ein wenig die Übersicht behält. Denn alle Ring-Passagen laufen in den <em>Magical Items</em> zusammen, um von dort wieder auf die Passagen <code>Feder</code>, <code>Brille</code> und <code>Zauberhut</code> zu verweisen:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource twee number-lines code-with-copy"><code class="sourceCode"><span id="cb9-1">:: Feder</span>
<span id="cb9-2">feder: true</span>
<span id="cb9-3">magical_item: "Feder"</span>
<span id="cb9-4">--</span>
<span id="cb9-5"></span>
<span id="cb9-6">Alice ergriff die {magical_item} und verstaute sie vorsichtig in ihrer Tasche.</span>
<span id="cb9-7">{embed passage: "Aufbruch"}</span></code></pre></div>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource twee number-lines code-with-copy"><code class="sourceCode"><span id="cb10-1">:: Brille</span>
<span id="cb10-2">brille: true</span>
<span id="cb10-3">magical_item: "Brille"</span>
<span id="cb10-4">--</span>
<span id="cb10-5"></span>
<span id="cb10-6">Alice ergriff die {magical_item} und verstaute sie vorsichtig in ihrer Tasche.</span>
<span id="cb10-7">{embed passage: "Aufbruch"}</span></code></pre></div>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource twee number-lines code-with-copy"><code class="sourceCode"><span id="cb11-1">:: Zauberhut</span>
<span id="cb11-2">zauberhut: true</span>
<span id="cb11-3">magical_item: "Zauberhut"</span>
<span id="cb11-4">--</span>
<span id="cb11-5"></span>
<span id="cb11-6">Alice ergriff den {magical_item} und setzte ihn sich vorsichtig auf den Kopf.</span>
<span id="cb11-7">Der Hut sagte zu ihr »Guten Tag, Alice. Das war eine gute Wahl. Alice war etwas</span>
<span id="cb11-8">überrascht, sie hatte noch nie einen Hut getroffen, der reden konnte. Aber im</span>
<span id="cb11-9">Wunderland überraschte sie schon lange nichts mehr. </span>
<span id="cb11-10"></span>
<span id="cb11-11">{embed passage: "Aufbruch"}</span></code></pre></div>
<p>Alle drei Passagen haben die Passage <code>Aufbruch</code> eingebettet (was man in Twine wieder durch die gestrichelten Verbindungslinien erkennen kann). Mit dem <code>Aufbruch</code> geht es dann aber für alle drei Passagen gleich weiter:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource twee number-lines code-with-copy"><code class="sourceCode"><span id="cb12-1">:: Aufbruch</span>
<span id="cb12-2">{embed image: "images/redqueen.jpg", alt: "Alice rennt mit der roten Königin"}</span>
<span id="cb12-3"></span>
<span id="cb12-4">»Es ist Zeit zu gehen« sagte die Raupe, »der {ring} und die rote Königin werden</span>
<span id="cb12-5">Dich führen.«</span>
<span id="cb12-6"></span>
<span id="cb12-7">Alice strich mit dem Zeigefinger über den {ring} und eine rote Königin tauchte</span>
<span id="cb12-8">aus dem Nichts auf, ergriff sie am Arm und rannte mit ihr zu einem</span>
<span id="cb12-9">[[neuen Ort voller Wunder-&gt;Wunderland]].</span></code></pre></div>
<p>Wie Ihr sicher schon gesehen habt, kann man in Chapbook Variablen mit geschweiften Klammern (<code>{variabele}</code>) in den Text einfügen. Im Gegensatz zu den meisten anderen Storyformaten (zum Beispiel <a href="http://twine2.neocities.org/">Harlowe</a> oder <a href="https://www.motoslave.net/sugarcube/2/docs/">SugarCube</a>) unterscheidet Chapbook nicht zwischen lokalen und globalen Variablen, alle Variablen sind global. Die manchmal verwendete Schreibweise mit einem führenden Unterstrich (<code>_variablenname</code>) ist lediglich eine Konvention, die den Autoren daran erinnern soll, daß diese Variable lokal gemeint ist und er den gleichen Namen nicht in einer weiteren Passage verwenden sollte.</p>
<p>Aber weiter geht es mit dem <code>Wunderland</code>:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource twee number-lines code-with-copy"><code class="sourceCode"><span id="cb13-1">:: Wunderland</span>
<span id="cb13-2">{embed image: "images/chessboard.png", alt: "Blick auf das Wunderland"}</span>
<span id="cb13-3"></span>
<span id="cb13-4">Die rote Königin war wieder verschwunden. Alice staunte. Ist das der geheime Ort?</span>
<span id="cb13-5">Sie stand auf einem Hügel, vor ihr ein weites Tal und dahinter das Meer. Auf</span>
<span id="cb13-6">einem weiteren Hügel überragte eine Burg ein kleines Dorf, das sich im Halbkreis</span>
<span id="cb13-7">um den Burghügel schmiegte.</span>
<span id="cb13-8"></span>
<span id="cb13-9">Sie drehte sich um und sah einen riesigen Baum hinter sich. An den Ästen hingen</span>
<span id="cb13-10">dutzende bronzener Schlüssel.</span>
<span id="cb13-11"></span>
<span id="cb13-12">[if feder]</span>
<span id="cb13-13">Die Feder schien sich in ihrer Tasche zu bewegen, so als ob sie Alice daran</span>
<span id="cb13-14">erinnern wollte, daß sie [[fliegen könne-&gt;Flug]]. Oder sollte sie erst einmal</span>
<span id="cb13-15">das [[Dorf aufsuchen-&gt;Dorf]] und weitere Erkundundungen einziehen?</span>
<span id="cb13-16">[else]</span>
<span id="cb13-17">Leider waren die Schlüssel unerreichbar für Alice. Sie beschloß daher,</span>
<span id="cb13-18">[[den Hügel herunter ins Dorf-&gt;Dorf]] zu gehen.</span></code></pre></div>
<p>Hier heben wir wieder ein neues Chapbook-Konstrukt, einen <code>[if] … [else]</code>-Block. Auch dieser wird durch <em><a href="https://klembot.github.io/chapbook/guide/modifiers-and-inserts/modifiers-and-text-alignment.html">Modifiers</a></em> geklammert und er steuert, das ein Textblock abhängig vom Wert einer Variablen angezeigt wird. Ein diesem Falle also: Wenn Alice die Feder besitzt, kann sie fliegen, wenn nicht (<code>[else]</code>) hat sie keine andere Wahl und muß ins Dorf laufen.</p>
<p>Der <code>[else]</code>-Block ist optional und kann entfallen. Ebenso kann die Bedingug durch ein <code>[continue]</code> aufgehoben werden und die Passage geht ab hier normal weiter. Aber ich lasse Alice erst einmal fliegen und einen Schlüssel einsammeln:</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode numberSource twee number-lines code-with-copy"><code class="sourceCode"><span id="cb14-1">:: Flug</span>
<span id="cb14-2">key: true</span>
<span id="cb14-3">--</span>
<span id="cb14-4"></span>
<span id="cb14-5">Alice nahm die Feder in ihre Hand und schwebte langsam nach oben. Die Feder</span>
<span id="cb14-6">brachte auch ihren {ring} zum Schimmern und der lenkte ihre Hand zu einem der</span>
<span id="cb14-7">Schlüssel. Alice pflückte ihn vom Ast und verstaute ihn in ihrer Tasche.</span>
<span id="cb14-8">Vorsichtig schwebte sie wieder nach unten.</span>
<span id="cb14-9"></span>
<span id="cb14-10">Nun war sie bereit, das [[Dorf-&gt;Dorf]] zu erkunden.</span></code></pre></div>
<p>Dann geht es – relativ – unabhängig von der Vorgeschichte am weißen Ritter vorbei und weiter ins <code>Dorf</code>:</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource twee number-lines code-with-copy"><code class="sourceCode"><span id="cb15-1">:: Dorf</span>
<span id="cb15-2">{embed image: "images/weisseritter.jpg", alt: "Der weiße Ritter"}</span>
<span id="cb15-3"></span>
<span id="cb15-4">Der Weg zum Dorf war von einem großen, steineren Wall versperrt. Nur ein</span>
<span id="cb15-5">Durchgang war offen, der von einem traurig aussehenden, weißen Ritter auf einem</span>
<span id="cb15-6">dürren Pferd blockiert wurde, der träumend vor sich hindöste.</span>
<span id="cb15-7"></span>
<span id="cb15-8">[if zauberhut]</span>
<span id="cb15-9">Der {magical_item} vibrierte.</span>
<span id="cb15-10">[else]</span>
<span id="cb15-11">Die {magical_item} vibrierte.</span>
<span id="cb15-12">[continue]</span>
<span id="cb15-13"></span>
<span id="cb15-14">[if feder]</span>
<span id="cb15-15">Alice nahm die bewährte Feder und schwebte über den dösenden Ritter, der sie</span>
<span id="cb15-16">nicht bemerkte.</span>
<span id="cb15-17">[if brille]</span>
<span id="cb15-18">Alice setzte sich die Brille auf und bemerkte, daß sie unsichtbar wurde.</span>
<span id="cb15-19">Leise schlich sie an den Ritter vorbei auf die andere Seite.</span>
<span id="cb15-20">[if zauberhut]</span>
<span id="cb15-21">Der Zauberhut zog Alice förmlich direkt auf den Wall zu. Sie fühlte sich</span>
<span id="cb15-22">elastisch wie eine Gummipuppe. Unbemerkt schob sie sich durch die Ritzen der</span>
<span id="cb15-23">Mauer. Ihr Körper wurde dabei dünn wie ein Faden. Als sie die andere Seite</span>
<span id="cb15-24">erreicht hatte, nahm sie wieder ihre normale Form an.</span>
<span id="cb15-25">[continue]</span>
<span id="cb15-26"></span>
<span id="cb15-27">Alice erreichte so das Dorf und betrat einen [[Biergarten]] am Ortseingang.</span></code></pre></div>
<p>Hier stößt man erst einmal auf eine Hilfskonstrkuktion, die man oft benötigt, wenn man eine Geschichte in deutscher Sprache schreibt. Die Auswahl des korrekten Artikels benötigt oft ebenfalls eine <code>[if] … [else]</code>-Konstrkuktion (der Engländer und/oder Amerikaner schreibt einfach <em>the</em> und ist damit glücklich).</p>
<p>Und man sieht, wie man die <code>[continue]</code>-Zeile verwenden kann: Egal, mit welchen Hilfsmitteln sich Alice an dem weißen Ritter vorbeimogelt, am Ende führen alle Geschichtsstränge zusammen und Alice in den <code>Biergarten</code>,</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode numberSource twee number-lines code-with-copy"><code class="sourceCode"><span id="cb16-1">:: Biergarten</span>
<span id="cb16-2">{embed image: "images/aliceteaparty.jpg", alt: "Teeparty"}</span>
<span id="cb16-3"></span>
<span id="cb16-4">Hier saßen seltsamerweise wieder ihre alten Freunde, der Märzhase, der verrückte</span>
<span id="cb16-5">Hutmacher und die Haselmaus an einem Tisch und begrüßten sie lautstark. Alice</span>
<span id="cb16-6">war verwirrt – aber [[blieb noch eine Weile-&gt;Haselmaus]].</span></code></pre></div>
<p>den sie dann aber bald wieder fluchtartig zu verläßt:</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode numberSource twee number-lines code-with-copy"><code class="sourceCode"><span id="cb17-1">:: Haselmaus</span>
<span id="cb17-2">{embed image: "images/haselmaus.jpg", alt: "Schabernack mit der Haselmaus"}</span>
<span id="cb17-3"></span>
<span id="cb17-4">Als der Hutmacher und der Märzhase jedoch anfingen, die Haselmaus kopfüber in</span>
<span id="cb17-5">den Teetopf zu stülpen, hatte sie genug. Sie beschloß, die Party zu</span>
<span id="cb17-6">[[verlassen-&gt;Ende]]</span></code></pre></div>
<p>Hier ist dann auch dieser Strang der Geschichte erst einmal zu <code>Ende</code>:</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode numberSource twee number-lines code-with-copy"><code class="sourceCode"><span id="cb18-1">:: Ende</span>
<span id="cb18-2">{embed image: "images/grinsekatze5.jpg", alt: "Grinsekatze"}</span>
<span id="cb18-3"></span>
<span id="cb18-4">Am Ausgang des Biergartens traf sie auf die Grinsekatze. Sie grinste nur und</span>
<span id="cb18-5">meinte: »Hat die Raupe wieder zu viel gekifft?« Und verschwand …</span>
<span id="cb18-6"></span>
<span id="cb18-7">Hier ist die Geschichte vorläufig zu Ende.</span>
<span id="cb18-8"></span>
<span id="cb18-9">[if key]</span>
<span id="cb18-10">Glückwunschsch! Das war der längste Durchlauf, der bisher spielbar ist.</span>
<span id="cb18-11">[else]</span>
<span id="cb18-12">Du bist schon weit gekommen, aber da geht noch mehr…</span>
<span id="cb18-13">[continue]</span>
<span id="cb18-14"></span>
<span id="cb18-15">{restart link, label: "Noch einmal spielen"}?</span></code></pre></div>
<p>Hier gibt es dann um ersten Mal so etwas wie eine Bewertung; Hat Alice den Schlüssel, dann hat sie die größtmögliche Anzahl von Passagen durchgespielt, aber noch lange nicht alle. Daher auch hier zum Schluß wieder die Möglichkeit, das Spiel noch einmal zu spielen.</p>
<p>Das Projekt hat mittlerweile schon eine gewisse Komplexität erreicht und besteht aus 26 Passagen (wie der <a href="https://www.flickr.com/photos/schockwellenreiter/53161139272/">Screenhot</a> im Banner oben zeigt).</p>
<p>Wer es nachbauen will: Den aus Twine generierten <a href="https://github.com/kantel/twine-entdecken/blob/master/tweego/alicechapbook/alice01bchapbook.twee">Twee-Code</a> und die <a href="https://github.com/kantel/twine-entdecken/tree/master/tweego/alicechapbook/images">Bilder</a> findet Ihr in meinem GitHub-Repositorium.</p>
<p>Und auch auf Itch.io habe ich alles wieder <a href="https://kantel.itch.io/alice-und-chapbook-stage-1">hochgeladen</a>, damit Ihr es online spielen könnt.</p>



 ]]></description>
  <category>Twine</category>
  <category>Chapbook</category>
  <category>Interactive Fiction</category>
  <guid>https://kantel.github.io/posts/2023090401_alice_weisse_ritter/index.html</guid>
  <pubDate>Mon, 04 Sep 2023 16:05:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023090401_alice_weisse_ritter/images/wunderlandupdate3.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Neue Tiles und Sprites bei Kenney.nl</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023090202_neue_sprites_kenney/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.kenney.nl/media/pages/assets/pico-8-city/f6b0b9006a-1693576584/preview.png"><img src="https://kantel.github.io/posts/2023090202_neue_sprites_kenney/images/pico8city-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Von <a href="https://www.kenney.nl/assets">Kenney.nl</a> gibt es ein neues Spriteset: Dieses heißt <a href="https://www.kenney.nl/assets/pico-8-city">Pico-8 City</a> und besteht aus 8x8 Pixeln großen Tiles und Sprites, die – wie es der Name nahelegt – für die Verwendung mit der Fantasiekonsole <a href="https://en.wikipedia.org/wiki/PICO-8">Pico-8</a> gedacht sind. Diese steht jedoch unter einer proprietären Lizenz, aber da Kenneys Assets wie immer unter der freien <a href="https://creativecommons.org/share-your-work/public-domain/cc0/">CC0</a> veröffentlicht worden sind, ist niemand daran gehindert, diese Assets auch für freie Fantasiekonsolen (wie die jüngst mit einem <a href="https://kantel.github.io/posts/2023082702_tic80v11_released/">frischen Update</a> versehene freie (MIT-Lizenz) <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/tic80.html">TIC-80</a>) oder anderen Engines zu nutzen.</p>
<p>Kenney hatte bisher nur sehr wenige Tiles- und Spritesets, die in das 8x8-Pixel-Raster passen, neben dem neuen Pico-8 City eigentlich nur das <a href="https://www.kenney.nl/assets/micro-roguelike">Micro Roguelike Set</a> (das es auch in einer monochromen Version gibt, die zum Beispiel für die Verwendung mit <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/bitsy.html">Bitsy</a> geeignet ist).</p>
<p>Aber auch, wenn es mich wie immer in den Fingern juckt, ich habe letztens gelernt, daß man im Alter (um das alles zu schaffen, was man noch vorhat), erstens Prioritäten setzen, zweitens diese dann optimieren und drittens alles andere delegieren muß. Und weder TIC-80 noch Bitsy stehen auf meiner Prioritätenliste ganz oben. Aber da ist ja noch <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a>, das ich <a href="https://kantel.github.io/posts/2023072303_freie_tiles_und_sprites/">bisher eigentlich</a> mit 16x16 großen Tiles und Sprites <a href="https://kantel.github.io/posts/2023072401_v3x3d_tiles_und_sprites/">füttern wollte</a>. Doch 8x8 Pixel winzige Figürchen erhöhen sicher den Wuselfaktor noch einmal gewaltig. <em>Still digging!</em></p>



 ]]></description>
  <category>Tiles und Sprites</category>
  <category>Spieleprogrammierung</category>
  <category>TIC-80</category>
  <category>Pygame</category>
  <guid>https://kantel.github.io/posts/2023090202_neue_sprites_kenney/index.html</guid>
  <pubDate>Sat, 02 Sep 2023 15:45:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023090202_neue_sprites_kenney/images/pico8city.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Macht Wunderland wieder groß – jetzt mit noch mehr Stil</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023090201_wunderland_wieder_gross/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53157785833/"><img src="https://kantel.github.io/posts/2023090201_wunderland_wieder_gross/images/wunderlandgross-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Wie versprochen habe ich mich gestern vor meinem Rechner gesetzt und meinen Wunderland-Kosmos ein wenig erweitert. Dabei ging es mir darum, zu zeigen, welche Einflußmöglichkeiten man mit <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/twine2.html">Twine</a> und <a href="https://klembot.github.io/chapbook/guide/">Chapbook</a> auf die Gestaltung des Textes besitzt.</p>
<p>Um das Ergebnis vorwegzunehmen: Die Möglichkeiten sind relativ gering bis gar nicht vorhanden. Das ist nicht unbedingt ein Beinbruch, da man in der Regel ja auf das darunterliegenden HTML und CSS zurückgreifen kann, aber ich hätte mir doch schon ein paar der komfortablen Möglichkeiten, wie sie das Storyformat <a href="https://twine2.neocities.org/">Harlowe</a> anbietet, gewünscht.</p>
<p>Doch jetzt zurück ins Wunderland. Ich habe beschlossen, alle neuen Experimente in die vorhandene Geschichte einzubauen. Also wurde von mir erst einmal die Passage <code>Teeparty</code> mit einem neuen Text versehen:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource twee number-lines code-with-copy"><code class="sourceCode"><span id="cb1-1">:: Teeparty</span>
<span id="cb1-2">{embed image: "images/teaparty_large.jpg", alt: "Teeparty"}</span>
<span id="cb1-3"></span>
<span id="cb1-4">Alice erreichte die Teeparty mit dem Märzhasen und dem weißen Kaninchen vor dem</span>
<span id="cb1-5">Haus des verrückten Hutmachers. Dieser deklamierte gerade ein langes, dafür um</span>
<span id="cb1-6">so langweiligeres Gedicht. stand dann auf, hob seine Teetasse und begann</span>
<span id="cb1-7">[[lautstark zu schwadronieren-&gt;Hutmacher]].</span></code></pre></div>
<p>Dies führte – beginnend mit der Passage <code>Hutmacher</code> zu einem neuen Zweig der Geschichte, die über die Passagen <code>Märzhase</code>, <code>Kaninchen</code> und <code>Flamingo</code> entweder zurück zur Passage <code>Raupe</code> führte oder über die Passage <code>Grinsekatze</code> die Geschichte zu einem neuen, alternativen Ende brachte:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource twee number-lines code-with-copy"><code class="sourceCode"><span id="cb2-1">:: Hutmacher</span>
<span id="cb2-2">[align center]</span>
<span id="cb2-3">{embed image: "images/madhattercol-s.jpg", alt: "Mad Hatter"}</span>
<span id="cb2-4"></span>
<span id="cb2-5">»Macht Wunderland wieder &lt;span style="color:red; font-size: 60px;"&gt;groß!&lt;/span&gt;</span>
<span id="cb2-6">[continue]</span>
<span id="cb2-7"></span>
<span id="cb2-8">Der Märzhase entgegnete [[schüchtern-&gt;Märzhase]] …</span></code></pre></div>
<p>In dieser Passage gibt es ein neues Sprachelement von Chapbook, einen <em><a href="https://klembot.github.io/chapbook/guide/modifiers-and-inserts/modifiers-and-text-alignment.html">Modifier</a></em>. Sie beginnen immer mit einer Zeile, die mit einfachen, eckigen Klammern (<code>[]</code>) begrenzt ist. Die Testmodifikationen gelten immer so lange, bis sie durch den Modifier <code>[continue]</code> (alternative Schreibweise auch <code>[cont'd]</code> oder <code>[cont.]</code>) aufgehoben werden. Modifier können nicht nur für das Text-Alignment verwendet werden, sondern auch <a href="https://klembot.github.io/chapbook/guide/modifiers-and-inserts/delayed-text.html">Delayed Text</a> und <a href="https://klembot.github.io/chapbook/guide/modifiers-and-inserts/notes.html">Notizen und Todos</a> sind damit möglich.</p>
<p>Doch jetzt weiter im Text:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource twee number-lines code-with-copy"><code class="sourceCode"><span id="cb3-1">:: Märzhase</span>
<span id="cb3-2">{embed image: "images/marchhare.jpg", alt: "Märzhase"}</span>
<span id="cb3-3"></span>
<span id="cb3-4">»Ich fand es aber &lt;span style="color:green; font-size:14px;"&gt;klein&lt;/span&gt; viel schöner.«</span>
<span id="cb3-5"></span>
<span id="cb3-6">Das weiße Kaninchen schaute auf seine Uhr und jammerte: »Ich komme wieder **viel**</span>
<span id="cb3-7">zu [[spät-&gt;Kaninchen]] …«</span></code></pre></div>
<p>In diesen beiden Passagen habe ich die Änderungen im Textstil (einen großen, roten und einen kleinen grünen Text) mit dem Durchgriff auf das darunterliegende HTML (<code>&lt;span style="irgendeine CSS-Funktion"&gt;</code>) realisiert. Chapbook kann Textmodifikationen mit Markdown, also *kursiver* und **fetter** Text sind mit einer einfachen Auszeichung möglich.</p>
<p>Die nächsten beiden neuen Passage besitzen nur bekannte Sprachelemente. Zuerst das <code>Kaninchen</code>:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource twee number-lines code-with-copy"><code class="sourceCode"><span id="cb4-1">:: Kaninchen</span>
<span id="cb4-2">{embed image: "images/whiterabbitclock00tr.png", alt: "Weißes Kaninchen mit Uhr"}</span>
<span id="cb4-3"></span>
<span id="cb4-4">Sprach's und hoppelte aufgeregt davon.</span>
<span id="cb4-5"></span>
<span id="cb4-6">[[Zurück-&gt;Flamingo]] …</span></code></pre></div>
<p>Und dann den <code>Flamingo</code>:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource twee number-lines code-with-copy"><code class="sourceCode"><span id="cb5-1">:: Flamingo {"position":"700,250","size":"100,100"}</span>
<span id="cb5-2">{embed image: "images/flamingo2_s.jpg", alt: "Alice mit rosa Flamingo"}</span>
<span id="cb5-3"></span>
<span id="cb5-4">Alice dachte, daß ihr dies zu dumm sei. Außerdem wußte sie nicht, wieso sie auf</span>
<span id="cb5-5">einmal einen rosa Flamingo im Arm hatte. Sie überlegte, ob sie ihren Freund,</span>
<span id="cb5-6">die [[bekiffte Raupe-&gt;Raupe]] besuchen oder mit der [[Grinsekatze]] plaudern solle.</span></code></pre></div>
<p>Damit ist die Geschichte schon beinahe in die gewohnten Bahnen zurückgekehrt. Lediglich die <code>Grinsekatze</code> spendiert uns noch ein weiteres, alternatives Ende:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource twee number-lines code-with-copy"><code class="sourceCode"><span id="cb6-1">:: Grinsekatze</span>
<span id="cb6-2">{embed image: "images/grinsekatze1.png", alt: "Grinsekatze"}</span>
<span id="cb6-3"></span>
<span id="cb6-4">Die Grinsekatze sagte »Schön, daß Du mich mal wieder besuchen kommst« und verschwand …</span>
<span id="cb6-5"></span>
<span id="cb6-6">Das ist das Ende.</span>
<span id="cb6-7"></span>
<span id="cb6-8">Alles auf {restart link, label: "Anfang"}?</span></code></pre></div>
<p>Die Geschichte nimmt so langsam an Umfang zu und besteht jetzt schon aus elf Passagen. Und das Ende der Fahnenstange ist noch lange nicht erreicht. Es wird weitere Abenteuer mit Alice und Twine und Chapbook im Wunderland-Universum geben. Ein paar Ideen habe ich schon in der Mache. <em>Still digging!</em></p>
<p>Wie immer gibt es den <a href="https://github.com/kantel/twine-entdecken/blob/master/tweego/alicechapbook/alice01achapbook.twee">Twee-Quellcode</a> und <a href="https://github.com/kantel/twine-entdecken/tree/master/tweego/alicechapbook/images">sämtliche Assets</a> in meinem GitHub-Repositorium und die Geschichte habe ich auch wieder auf Itch.io <a href="https://kantel.itch.io/alice-und-chapbook-stage-1">hochgeladen</a>, damit Ihr sie dort im Browser spielen könnt.</p>



 ]]></description>
  <category>Twine</category>
  <category>Chapbook</category>
  <category>Interactive Fiction</category>
  <guid>https://kantel.github.io/posts/2023090201_wunderland_wieder_gross/index.html</guid>
  <pubDate>Sat, 02 Sep 2023 14:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023090201_wunderland_wieder_gross/images/wunderlandgross.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Die letzten Zahlen des diesjährigen Sommers</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023090101_mediadaten_2023_08/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53157189693/"><img src="https://kantel.github.io/posts/2023090101_mediadaten_2023_08/images/mediadaten202308-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Heute ist der meteorologische Beginn des Herbstes. Also eine prima Gelegenheit, die letzten Zahlen dieses Sommers – die manches Mal euphemistisch auch <em>Mediadaten</em> genannt werden – zu veröffentlichen. Im August 2023 hatte der <em>Schockwellenreiter</em>, wenn man seinem (hoffentlich!) <a href="https://de.wikipedia.org/wiki/Datenschutz-Grundverordnung">DSGVO</a>-konformen <del>Geißenpeter</del> <a href="https://kantel.github.io/posts/2022120702_goatcounter/">GoatCounter</a> Glauben schenkt, exakt <strong>5.251 Seitenaufrufe</strong>. Das ist gegenüber den schon rekordverdächtigen <a href="https://kantel.github.io/posts/2023080101_mediadaten_2023_07/">Zahlen des letzten Monats</a> eine weitere, gewaltige Zunahme an Besucherinnen und Beuchern, die mich fröhlich stimmt. Daher bedanke ich mich bei allen meinen Leserinnen und Lesern.</p>
<p>🤓 &nbsp; <em>Bleibt mir gewogen!</em></p>
<p>Auch der August hatte wieder eine interessante <em>Top Five</em>. Dieses Mal waren es:</p>
<ol type="1">
<li>Für umme lesen: <a href="https://kantel.github.io/posts/2023080302_umme_lesen/">Philosophie, Wahrscheinlichkeitstheorie und Statistik, Datenvisualisierung</a></li>
<li>Dumm gelaufen! <a href="https://kantel.github.io/posts/2023081403_profitmaximierung/">Die Folgen von Verdrängung und Profitmaximierung</a></li>
<li><a href="https://kantel.github.io/posts/2023081101_logseq_quarto_vscode/">Logseq, Quarto und Visual Studio Code</a>: Ein Werkzeugkasten für meinen Publikations-Workflow</li>
<li><a href="https://kantel.github.io/posts/2023081501_weg_nach_hogwarts/">Der Weg nach Hogwarts führt über die Neuköllner Bürgerstraße</a></li>
<li>Atlas Curiosa: <a href="https://kantel.github.io/posts/2023081001_bierpinsel/">Pop-Art trifft auf Brutalismus – der »Bierpinsel« in Berlin-Steglitz</a></li>
</ol>
<p>Besonders freut es mich, daß nicht nur die »großen«, sondern auch die kleinen, lokalen Beiträge auf Euer Interesse gestoßen sind. Denn ich habe durchaus vor, davon in Zukunft noch mehr zu bringen. <em>Still digging!</em></p>



 ]]></description>
  <category>Interna</category>
  <guid>https://kantel.github.io/posts/2023090101_mediadaten_2023_08/index.html</guid>
  <pubDate>Fri, 01 Sep 2023 13:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023090101_mediadaten_2023_08/images/mediadaten202308.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Twine und Chapbook im Wunderland – jetzt mit Stil</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023083101_chapbook_mit_stil/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53154395787/"><img src="https://kantel.github.io/posts/2023083101_chapbook_mit_stil/images/chapbooktwinestil-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Bevor ich Alice weitere Abenteuer mit <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/twine2.html">Twine</a> und <a href="https://klembot.github.io/chapbook/guide/">Chapbook</a> im Wunderland erleben lasse, möchte ich das <a href="https://kantel.github.io/posts/2023082801_chapbook_wunderland_1/">bisher erreichte</a> noch etwas aufhübschen und der Geschichte ein wenig Stil spendieren.</p>
<p>Chapbook besitzt einen von der restlichen Passage separierten Variablen-Abschnitt. Dieser steht immer als erstes zu Beginn einer Passage und wird von der restlichen Passage durch eine Zeile mit zwei Strichen (<code>--</code>) getrennt. Dieser Abschnitt kann nicht nur selbstdefinierte Variablen wie <code>has_key</code> oder <code>health_points</code> aufnehmen (dazu in einem späteren Beitrag mehr), sondern auch Variable, die das Layout der Geschichte beeinflussen. Diese sind in der Regel in den Objekten <code>config.style</code>, <code>config.header</code> und <code>config.footer</code> zusammengefaßt.</p>
<p>Wenn man also das Aussehen eines Links beeinflussen will, kann man zum Beispiel mit der Zeile</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource twee number-lines code-with-copy"><code class="sourceCode"><span id="cb1-1">config.style.page.link.font: "18 bold none"</span></code></pre></div>
<p>erreichen, daß der Link mit der Fontgröße 18 in fett und ohne Unterstreichung dargestellt wird. Für die Farbe des Links sind die Zeilen</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource twee number-lines code-with-copy"><code class="sourceCode"><span id="cb2-1">config.style.page.link.color: "teal-8"</span>
<span id="cb2-2">config.style.page.link.active.color: "teal-8"</span></code></pre></div>
<p>zuständig, die – in diesem Fall – dafür sorgen, daß ein Link in einem leichten grün dargestellt und dieses Aussehen auch nicht verändert, wenn mit der Maus über den Link gefahren wird (<code>active</code> gleich <code>hover</code>).</p>
<p>Ein Wort zu den Farben: Chapbook unterstützt per Default eine Palette, die <a href="https://yeun.github.io/open-color/">Open Color</a> genannt wird. Diese besteht aus dreizehn Farben, die in je zehn Schattierungen angegeben werden können (zum Beispiel <code>teal-0</code> bis <code>teal-9</code>). Eine Übersicht bietet das <a href="https://klembot.github.io/chapbook/guide/customization/fonts-and-colors.html">Chapbook-Handbuch</a>. Wem dies nicht ausreicht, der kann natürlich auch jede andere Farbbezeichnung verwenden, die CSS versteht (von der gewohnten Hex-Notation wie zum Beispiel <code>#0b7285</code> bis hin zu sehr speziellen Notationen wie beispielsweise <code>hsla(0%, 65%, 48%, 0.75)</code>).</p>
<p>Die <code>config</code>-Objekte besitzen – wie alle Variablen in Chapbook – einen globalen Gültigkeitsbereich. Es ist daher in der Regel keine gute Idee, diese innerhalb einer Geschichte mehrmals zu definieren (man sollte dann wirklich genau wissen, was man tut).</p>
<p>Ich habe für mein Alice-Beispiel folgende <code>config</code>-Objekte in der Start-Passage definiert:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource twee number-lines code-with-copy"><code class="sourceCode"><span id="cb3-1">:: Start</span>
<span id="cb3-2">config.style.page.link.font: "18 bold none"</span>
<span id="cb3-3">config.style.page.link.color: "teal-8"</span>
<span id="cb3-4">config.style.page.link.active.color: "teal-8"</span>
<span id="cb3-5">config.footer.left: "Alice im Reich der Ringe"</span>
<span id="cb3-6">--</span></code></pre></div>
<p>Eine Besonderheit ist die letzte Zeile, in der festgelegt wird, daß die Zeichenfolge <code>Alice im Reich der Ringe</code> links im Footer jeder Seite erscheint.</p>
<p>Welche <code>config</code>-Objekte existieren und mit welchen Default-Werten sie vorbelegt sind, könnt Ihr nachschauen, wenn Ihr in der <em>Backstage View</em> der Testumgebung unter dem Reiter <code>Stage</code> den Button <code>Show Defaults</code> ankreuzt. Alle diese Werte können von Euch bei Bedarf überschrieben werden.</p>
<p>Das Update habe ich auch wieder auf Itch.io <a href="https://kantel.itch.io/alice-und-chapbook-stage-1">hochgeladen</a>. Ihr könnt es dort im Browser spielen.</p>



 ]]></description>
  <category>Twine</category>
  <category>Chapbook</category>
  <category>Interactive Fiction</category>
  <guid>https://kantel.github.io/posts/2023083101_chapbook_mit_stil/index.html</guid>
  <pubDate>Thu, 31 Aug 2023 17:55:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023083101_chapbook_mit_stil/images/chapbooktwinestil.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Interaktive Publikationen mit MyST Markdown und Jupyter Book</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023083003_myst_jupyterbook/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://executablebooks.org/en/latest/blog/2023-06-27-jupyterlab-myst/"><img src="https://kantel.github.io/posts/2023083003_myst_jupyterbook/images/mystjupyterlab-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Mir ist mal wieder danach, ich muß über meine Publikationsstrategie nachdenken. Denn der Vorteil meines Rentnerdaseins ist unter anderem der, daß ich nicht mehr publizieren muß. Stattdessen kann ich darüber nachdenken, wie ich ohne den Druck der Verlagshäuser, Redaktionen und auch meines Brötchengebers publizieren könnte, wenn ich denn doch mal wieder publizieren müßte.</p>
<p>Das war jetzt <em>meta</em> genug. Den Anlaß für diese philosophischen Ergüsse gab ein Videovortrag, den <em>Steve Purves</em> und <em>Rowan Cocket</em> auf der EuroSciPy 2023, die in diesem Monat in Basel stattfand, gehalten hatten: »<a href="https://pretalx.com/euroscipy-2023/talk/EXVUBJ/">MyST and Thebe: Community-driven tools for awesome open science communication with Jupyter[lite] backed computation</a>«.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/sTvx3u1hXME?si=-qfete3mdwIHq_H-" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Hinter diesem etwas sperrigen Titel steckt – wie <a href="https://www.youtube.com/watch?v=sTvx3u1hXME">das Video zeigt</a> – ein faszinierendes Tool (oder besser: Ein Bündel von Tools): <a href="https://mystmd.org/">MyST</a> (um es nicht mit dem bekannten Computerspiel zu verwechseln wird es oft auch »MyST Markdown« genannt) steht für <em>Markedly Structured Text</em>, einer reichhaltigen und erweiterbaren <a href="http://cognitiones.kantel-chaos-team.de/webworking/auszeichnungssprachen/markdown.html">Markdown</a>-Variante zum Verfassen technischer und wissenschaftlicher Dokumentation. Mit <em>Thebe</em> (in MyST enthalten) kann eine Verbindung zu einem (lokalen) <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/jupyter.html">Jupyter</a>-Server hergestellt oder <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/jupyter.html">JupyterLite</a> im Browser aufgerufen werden, so daß auch interaktive Dokumente möglich sind. MyST Mardown ist eine Weiterentwicklung von <a href="http://cognitiones.kantel-chaos-team.de/webworking/staticsites/sphinx.html">Sphinx</a> und will die Vorteile von <a href="http://cognitiones.kantel-chaos-team.de/webworking/auszeichnungssprachen/restructuredtext.html">reStructuredText</a> (ReST) mit der Einfachheit von Markdown vermählen.</p>
<p>Das Schwesterprojekt ist <a href="https://jupyterbook.org/en/stable/intro.html">Jupyter Book</a>, das (interaktive) wissenschaftliche Publikationen mit <em>Markedly Structured Text</em> aus Jupyter, <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/jupyterlab.html">JuypterLab</a> und <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/jupyterlabdesktop.html">JupyterLab Desktop</a> herausschreibt.</p>
<p>Auch zu Jupyter Book sind mir schon ein paar Tutorials untergekommen:</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=jUdXs4OPR84">Creating an open-source book with Jupyter Book and Jupytext</a> (Video, 45 Minuten)</li>
<li><a href="https://www.youtube.com/watch?v=seKOq-VMJgY">Jupyter Book overview</a> mit <em>Dr.&nbsp;Chris Holdgraf</em>, der in 25 Minuten eine überblickartige Zusammenfassung zu Jupyter Book gibt.</li>
<li>Und ein Blick in das Hausblog der Macher lohnt immer: <a href="https://executablebooks.org/en/latest/blog/2023-06-27-jupyterlab-myst/">Using MyST Markdown in JupyterLab</a></li>
</ul>
<p>Das Schöne an MyST Markdown und Jupyter Book ist, daß es auch in <a href="http://cognitiones.kantel-chaos-team.de/produktivitaet/visualstudiocode.html">Visual Studio Code</a> funtioniert. Es gibt eine »offizielle« <a href="https://marketplace.visualstudio.com/items?itemName=ExecutableBookProject.myst-highlight">MyST-Markdown VS Code Extension</a>. Für meine aktuellen <a href="https://kantel.github.io/posts/2023081101_logseq_quarto_vscode/">Überlegungen zu einem Publikations-Workflow</a> ein wichtiges Detail.</p>
<p>Hinter beiden Projekten <em>MyST Markdown</em> und <em>Jupyter Book</em> steht das <a href="https://executablebooks.org/en/latest/#">Executable Books Project</a>.</p>
<p>Was fange ich nun mit diesem <em>Information Overflow</em> an? Ehrlich gesagt, ich weiß es noch nicht, aber es klingt alles sehr faszinierend. An ein paar Tests werde ich wohl nicht vorbeikommen. Dann sehe ich weiter. <em>Still digging!</em></p>



 ]]></description>
  <category>MyST Markdown</category>
  <category>Jupyter Book</category>
  <category>JupyterLab Desktop</category>
  <category>JupyterLite</category>
  <category>Visual Studio Code</category>
  <category>Statische Seiten</category>
  <guid>https://kantel.github.io/posts/2023083003_myst_jupyterbook/index.html</guid>
  <pubDate>Wed, 30 Aug 2023 17:45:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023083003_myst_jupyterbook/images/mystjupyterlab.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Mozilla Thunderbird Version 115.2.0 freigegeben</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023083002_thunderbird_update/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://cafans.b-cdn.net/images/Category_76878/subcat_195910/uT8t2yA8_060219142701lola.jpg"><img src="https://kantel.github.io/posts/2023083002_thunderbird_update/images/irishhomerulebill-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Nachdem <a href="https://kantel.github.io/posts/2023082902_firefox_update/">gestern</a> der Tag des kleinen roten Pandas (aka Firefox) war, folgt heute nach Mozillas nahezu unerschütterlichen Serien-Update-Gesetzen der Donnervogel. Und richtig: Die Entwickler des <a href="http://www.mozillamessaging.com/">Mozilla Thunderbird</a> haben das Update auf die Version 115.2.0 freigegeben und damit auch wieder <a href="https://www.thunderbird.net/en-US/thunderbird/115.2.0/releasenotes/">Sicherheitslücken</a> behoben.</p>
<p>Thunderbird weist selbst auf dieses Update hin. Diese Prozedur kann aber auch wie immer über das Menü <code>Hilfe &gt; Über Thunderbird</code> angestoßen werden. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<p><em>(Bild: Thomas E. Powers (1870-1939), <a href="https://www.comicartfans.com/GalleryPiece.asp?Piece=1258005">Irish Home Rule Bill</a>, 1912)</em></p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2023083002_thunderbird_update/index.html</guid>
  <pubDate>Wed, 30 Aug 2023 14:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023083002_thunderbird_update/images/irishhomerulebill.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Google korrigiert erneut Version 116 seines Browsers Chrome kritische Sicherheitslücken</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023083001_chrome_update/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://cafans.b-cdn.net/images/Category_2305/subcat_207318/QCD9tLjR_1606230912271gpadd.jpg"><img src="https://kantel.github.io/posts/2023083001_chrome_update/images/koreanischerhonig-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Zum Monatsende veröffentlicht Google ein weiteres Update der Version 116 (116.0.5845.140/141) seines Browsers Chrome und schließt erneut <a href="https://chromereleases.googleblog.com/2023/08/stable-channel-update-for-desktop_29.html">kritische Sicherheitslücken</a>.</p>
<p>Chrome aktualisiert sich (außer bei Linux) über die integrierte Update-Funktion, kann aber – wenn es pressiert – auch <a href="https://www.google.com/intl/de/chrome/browser/">hier geladen</a> werden. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<p><em>(Bild: Thomas E. Powers (1870-1939), <a href="https://www.comicartfans.com/GalleryPiece.asp?Piece=1930819">How Doth the Little Busy Jap Improve Each Shining Hour</a>, New York Evening Journal, 23. Februar 1904)</em></p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2023083001_chrome_update/index.html</guid>
  <pubDate>Wed, 30 Aug 2023 13:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023083001_chrome_update/images/koreanischerhonig.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>50 Jahre »Die Grenzen des Wachstums«</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023082903_grenzen_wachstum_50/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53150893390/"><img src="https://kantel.github.io/posts/2023082903_grenzen_wachstum_50/images/grenzendeswachstums50-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Gelegentlich kann auch das Gesichtsbuch einen Blogpost anstoßen. So zum Beispiel heute, als ich daran erinnert wurde, daß im August 1973, also exakt vor fünfzig Jahren »Die Grenzen des Wachstums – Bericht des Club of Rome zur Lage der Menschheit« auf deutsch erschienen ist (die englische Originalausgabe erschien schon 1972).</p>
<p>So lange ist das also schon her? Und geändert hat sich seitdem auch nur wenig. Ich bin 70 und daher ungeeignet zum »Klimakleber« (wenn ich mich auf die Straße hocke, komme ich auch ohne Klebstoff nicht mehr hoch), daher möchte ich anläßlich dieses »Jubiläums«, das so gar keine Feierlaune aufkommen läßt, aus meiner Bibliothek ein paar populärwissenschaftliche Bücher der letzten Jahrzehnte vorstellen, damit keiner behaupten kann, er wäre nicht gewarnt worden:</p>
<ol type="1">
<li>Dennis Meadows, Donella Meadows, Erich Zahn, Peter Milling: <em>Die Grenzen des Wachstums – Bericht des Club of Rome zur Lage der Menschheit</em>, Reinbek (rororo) 1973</li>
<li>Joël de Rosnay: <em>Das Makroskop. Systemdenken als Werkzeug der Ökogesellschaft</em> Reinbek (rororo) 1979 (französische Originalausgabe: Paris 1975)</li>
<li>Frederic Vester: <em>Unsere Welt – ein vernetztes System</em>, München (dtv) 1983</li>
<li>ders.: <em>Neuland des Denkens. Vom technokratischen zum kybernetischen Zeitalter</em>, München (dtv) 1984</li>
<li>Danella H. Meadows, Dennis L. Meadows, Jørgen Randers: <em>Die neuen Grenzen des Wachstums. Die Lage der Menschheit: Bedrohung und Zukunftschancen</em>, Stuttgart (DVA) 1992</li>
<li>Frederic Vester: <em>Die Kunst vernetzt zu denken. Ideen und Werkzeuge für einen neuen Umgang mit Komplexität. Der neue Bericht an den Club of Rome</em>, München (dtv) 2002</li>
<li>Donella H. Meadows: <em>Die Grenzen des Denkens. Wie wir sie mit System erkennen und überwinden können</em>, München (oekom) 2010</li>
</ol>
<p>Die Bücher zählen zur populärwissenschaftlichen Literatur. Auch wenn alle Autoren gestandene Wissenschaftler sind, wurden sie so geschrieben, daß jede und jeder ihren Inhalt lesen und begreifen kann (selbst Politikerinnen und Politiker). Also stellt sich zu recht die Frage, warum trotz aller Warnungen in den letzten fünfzig Jahren so wenig passiert und die Situation der Umwelt immer dramatischer geworden ist. Vermutlich, weil eine Systemänderung immer auch das (kapitalistische) System in Frage stellt? <em>(Photo (<a href="http://creativecommons.org/licenses/by-nc-nd/2.0/">cc</a> 2023): <a href="http://cognitiones.kantel-chaos-team.de/cv.html">Jörg Kantel</a>)</em></p>



 ]]></description>
  <category>Kybernetik</category>
  <category>Politik</category>
  <category>Umwelt</category>
  <guid>https://kantel.github.io/posts/2023082903_grenzen_wachstum_50/index.html</guid>
  <pubDate>Tue, 29 Aug 2023 16:55:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023082903_grenzen_wachstum_50/images/grenzendeswachstums50.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Mozilla veröffentlicht neue Firefox-Version 117.0</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023082902_firefox_update/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.askart.com/photos2/2016/HER20161117_97766/94378_1.jpg"><img src="https://kantel.github.io/posts/2023082902_firefox_update/images/tepowers1900-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Die Entwickler des Mozilla Firefox haben die neue <a href="https://www.mozilla.org/en-US/firefox/117.0/releasenotes/">Version 117.0</a> und die <a href="https://www.mozilla.org/en-US/firefox/115.2.0/releasenotes/">Version ESR 115.2.0</a> veröffentlicht und darin auch wieder Sicherheitslücken behoben.</p>
<p>Firefox weist selbst auf dieses Update hin. Diese Prozedur kann aber auch wie immer über das Menü <code>Hilfe &gt; Über Firefox</code> angestoßen werden. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<p><em>(Bild: <a href="https://www.lambiek.net/artists/p/powers_te.htm">Thomas E. Powers</a> (1870-1939), um 1900)</em></p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2023082902_firefox_update/index.html</guid>
  <pubDate>Tue, 29 Aug 2023 14:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023082902_firefox_update/images/tepowers1900.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Update: Alice und Chapbook auf Itch.io – jetzt auch mit Bildern. Wirklich!</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023082901_chapbook_itchio_bilder/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53149564182/"><img src="https://kantel.github.io/posts/2023082901_chapbook_itchio_bilder/images/alice01itchio-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Manchmal sollte man <a href="http://blog.schockwellenreiter.de/2020/07/2020072201.html">Notizen, die man an sich selber gerichtet hat</a>, auch beherzigen. Denn dann wäre mir der dumme Fehler, der mir gestern abend unterlaufen ist, sicher nicht passiert: Ich hatte nämlich die <a href="https://kantel.github.io/posts/2023082801_chapbook_wunderland_1/">Twine-Geschichte von gestern</a> auf Itch.io <a href="https://kantel.itch.io/alice-und-chapbook-stage-1">hochgeladen</a>, <strong>bevor</strong> ich die URLs der Bilder von <code>localhost</code> auf relative Adressen umgestellt hatte.</p>
<p>Natürlich fiel mir der Fehler nicht auf, da bei meinen Tests <strong>mein</strong> Rechner die Bilder auch auf <code>localhost</code> fand. Ich sollte in Zukunft daher entweder von einem zweiten Rechner oder meinem Smartphone testen, oder meinen <a href="http://cognitiones.kantel-chaos-team.de/webworking/mamp.html">MAMP</a> abschalten (wie auf dem <a href="https://www.flickr.com/photos/schockwellenreiter/53149564182/">Screenshot</a> im Bannerbild oben).</p>
<p>Und es war gestern wirklich spät. Ich habe nämlich in meinem Beitrag gestern eine zweite Kompromißlösung vergessen, die eigentlich bei mir Standard ist und die ich Euch unbedingt noch erzählen möchte: Ich lege nämlich eigentlich grundsätzlich in meinen Twine-Storys nur relative URLs zu den Assets an. Das Layout prüfe ich dann, indem ich die Geschichte nach HTML exportiere und sie mir dann im Browser anschaue.</p>
<p>Die <em>Backstage View</em> im Test-Mode von Chapbook innerhalb von Twine nutze ich dann nur zum Debuggen (dafür ist der <em>Backstage</em> extrem nützlich, doch darüber wird es noch einen eigenen Beitrag geben). Und dabei kann ich auf die Darstellung von Bildern verzichten. Das ist ein ähnliches Verhalten, wie es auch <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/inkle.html">Ink/Inky</a> an den Tag legt: Auch dort werden in der Vorschau der Inky-IDE keine Bilder angezeigt, man muß auch hier das Ergebnis erst nach HTML exportieren.</p>
<p>Der Export nach HTML ist schon innerhalb von Twine sehr schnell. Wenn man dann noch die Geschichte in Twee schreibt und mit <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/tweego.html">Tweego</a> übersetzt (noch einmal: Vergleiche <a href="https://www.flickr.com/photos/schockwellenreiter/53149564182/">Screenshhot</a> im Banner oben), geht er ab wie eine Rakete. Doch auch darüber wird es noch einen separaten Beitrag in dieser Tutorialreihe geben. <em>Still digging!</em></p>



 ]]></description>
  <category>Twine</category>
  <category>Chapbook</category>
  <category>Interactive Fiction</category>
  <category>Itch.io</category>
  <guid>https://kantel.github.io/posts/2023082901_chapbook_itchio_bilder/index.html</guid>
  <pubDate>Tue, 29 Aug 2023 13:40:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023082901_chapbook_itchio_bilder/images/alice01itchio.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Mit Twine und Chapbook in das Wunderland, Version 0.1: Wir wollen Bilder!</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023082801_chapbook_wunderland_1/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53147889364/"><img src="https://kantel.github.io/posts/2023082801_chapbook_wunderland_1/images/chapbooktwinev01-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<blockquote class="blockquote">
<p>Alice fing an sich zu langweilen; sie saß schon lange bei ihrer Schwester am Ufer und hatte nichts zu tun. Das Buch, das ihre Schwester las, gefiel ihr nicht; denn es waren weder Bilder noch Gespräche darin. „»Und was nützen Bücher,« dachte Alice, »ohne Bilder und Gespräche?«</p>
</blockquote>
<p>In dieser zweiten Folge meiner kleinen Tutorialreihe zu <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/twine2.html">Twine</a> und dem Storyformat <a href="https://klembot.github.io/chapbook/guide/">Chapbook</a> möchte ich das größte Manko der <a href="https://kantel.github.io/posts/2023082703_chapbook_wunderland_0/">ersten Folge</a> beheben: Denn was sind Geschichten ohne Bilder?</p>
<p>Doch das Verhältnis von Twine zu Bildern (und anderen Mulitmediadateien wie Musik, Sound oder Filmen) war von Anfang an ein schwieriges. Denn Twine war ursprünglich entworfen, um textbasierte, interaktive Abenteuer zu erzählen. Bilder waren da nicht vorgesehen. Doch das Publikum wollte – wie Alice – Bilder und so haben sich zwei mehr oder weniger inkomaptible Lösungen gefunden:</p>
<section id="lösung-1-bilder-online-einbinden" class="level3">
<h3 class="anchored" data-anchor-id="lösung-1-bilder-online-einbinden">Lösung 1: Bilder online einbinden</h3>
<p>Der erste Ansatz ist, die Multimediadateien online auf einem Server abzulegen, und sie dann per HTTP(S) einzubinden. Der Vorteil dieser Lösung ist, daß die Bilder – eine Online-Anbindung vorausgesetzt – immer von Twine gefunden werden, egal ob die Twine Story <strong>in</strong> Twine (im Test-Modus) aufgerufen wird, oder ob sie <em>standalone</em> läuft. Jedoch hat diese Methode auch zwei gewichtige Nachteile. Der erste Nachteil: Es ist <strong>Euer</strong> Server, auf dem die Daten liegen, Ihr zahlt für die Bandbreite. Und zweitens: Ihr müßt zwingend online sein, auch wenn Ihr Euer Spiel entwickelt. Ein Schreiben oder Spielen am Strand ist damit in der Regel nicht möglich.</p>
<p>Außerdem hat sich hier noch eine böse Unsitte entwickelt, die man leider häufig auch Twine-Tutorials findet. Dort wird dann einfach mit einer Bildersuchmaschine ein passendes Bild gesucht. Ist dieses Bild gefunden, wird die URL kopiert und die Datei ohne Rücksicht auf Verluste vom <strong>fremden</strong> Server in die eigene Geschichte eingebunden.</p>
<p>Dieses <em>Hotlinking</em> genannte Verfahren ist aus mehreren Gründen eine Sünde: Erstens, wenn man sich nicht um die Bildrechte kümmert, gerät man dabei leicht in die Fallstricke einer Urheberrechtsverletzung und das kann teuer werden. Zweitens zahlt der Serverbetreiber und nicht Ihr die Kosten für den Datentransfer. Das macht ihn sicher nicht glücklich. Und drittens habt Ihr keine Kontrolle über die Daten. Auch ich habe schon einmal eines meiner (eigentlich harmlosen und unter einer freien Lizenz stehenenden) Photos einer Berliner Touristen-Attraktion gegen das Bild einer leicht bekleideten Dame ausgetauscht, nachdem ich bemerkt hatte, daß irgendein Dödel dieses Bild ungefragt per Hotlinking in seine dusselige Kommerzseite eingebunden hatte.</p>
</section>
<section id="lösung-2-daten-lokal-einbinden" class="level3">
<h3 class="anchored" data-anchor-id="lösung-2-daten-lokal-einbinden">Lösung 2: Daten lokal einbinden</h3>
<p>Die zweite Lösung ist, die Daten lokal einzubinden. Dafür legt man sich am sinnvollsten unterhalb der eigentlichen Story-Datei (Beispiel: <code>story.html</code>) ein Verzeichnis (oder mehrere Vereichnisse) an, die die Asset-Dateien beinhalten. Das kann dann beispielsweise so aussehen:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> story.html</span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> images</span>
<span id="cb1-3">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> image01.jpg</span>
<span id="cb1-4">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> image02.jpg</span>
<span id="cb1-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> audio</span>
<span id="cb1-6">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> song01.mp3</span></code></pre></div>
<p>Wenn dann ein Bild in eine Twine-Story per relativer URL eingebunden ist, in Chapbook zum Beispiel mit:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource twee number-lines code-with-copy"><code class="sourceCode"><span id="cb2-1">{embed image: 'images/image01.jpg', alt: 'Mein super-duper Bild'}</span></code></pre></div>
<p>Dann findet Eure Twine-Story nach dem Publizieren das Bild auch, unabhängig davon, ob sie lokal oder über eine Webverbindung aufgerufen wurde.</p>
<p>Der Zusatz »nach dem Publizieren« weist auch gleich auf den größten Nachteil dieser Methode hin: Wird die Geschichte <strong>innerhalb</strong> von Twine gestartet (sei es über den Test- oder über den Play-Button), dann findet Twine Eure Assets nicht. Das liegt daran, daß Twine die Story temporär auf eine völlig obskure und nicht nachvolltiehbare URL hinausschreibt, beispielsweise auf (gekürzt)</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">file:///private/var/folders/x3/…/T/52f32371-9e39-4952-a4d8-6ee9f02e7df4.html</span></span></code></pre></div>
<p>und wo soll das arme Twine da Eure Assets finden?</p>
<p>Der größte Vorteil dieser Methode ist allerdings der: Ist Eure Story mal publiziert, dann läßt sich die Datei mitsamt den Asset-Verzeichnissen entweder als <code>.zip</code>-Datei oder auch unkomprimiert auf jeden Server oder Dienst Eurer Wahl hochladen (zum Beispiel auf Itch.io) oder als Email an Eure Freunde verschicken. Und sie können sie dann auch spielen, ohne auf eine Internetverbindung angewiesen zu sein.</p>
</section>
<section id="der-kompromiß-lokaler-webserver" class="level3">
<h3 class="anchored" data-anchor-id="der-kompromiß-lokaler-webserver">Der Kompromiß: Lokaler Webserver</h3>
<p>Nun möchte man aber gerne auch während der Entwicklung in Twine seine Bilder sehen, und sei es nur, um das Layout kontrollieren zu können. Bei mir hat sich folgende Vorgehensweise als sinnvoll herausgestellt: Auf meinem Rechnern läuft sowieso permanent ein lokaler Webserver (<a href="http://cognitiones.kantel-chaos-team.de/webworking/mamp.html">MAMP</a>, aber auch <a href="http://cognitiones.kantel-chaos-team.de/webworking/xampp.html">XAMPP</a> wäre eine Alternative). Dort lege ich für jede Twine-Story ein Verzeichnis mit den benötigten Bildern und anderen Assets an. Diese kann ich dann nach der <strong>Lösung 1</strong> via <code>localhost</code> so einbinden, als lägen sie auf einem externen Server. In Chapbook sieht das dann so aus:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource twee number-lines code-with-copy"><code class="sourceCode"><span id="cb4-1">{embed image: "http://localhost:8888/twine/alice01/images/bild01.jpg", alt: "Grinsekatze"}</span></code></pre></div>
<p>(Mein MAMP lauscht auf Port <code>8888</code>, den Port müßt Ihr gegebenenfalls an Eure Umgebung anpassen.)</p>
<p>Ist die Entwicklung dann abgeschlossen und die Story kann publiziert werden, dann tausche ich per globales <em>Suchen und Ersetzen</em> alle absoluten, aber dennoch lokalen URLs <code>http://localhost:8888/twine/alice01/images</code> durch ein schlichtes <code>images</code> aus. Das obige Beispiel wird dann zu</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource twee number-lines code-with-copy"><code class="sourceCode"><span id="cb5-1">{embed image: "images/bild01.jpg", alt: "Grinsekatze"}</span></code></pre></div>
<p>und damit zu einer relativen URL und zur <strong>Lösung 2</strong>. Ganz besonders schlaue Entwickler exportieren ihre Twine Story erst nach <code>Twee</code> bevor sie die globale Ersetzung vornehmen und schreiben die Story danach dann zum Beispiel mit <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/tweego.html">Tweego</a> als HTML-Datei heraus. So bleibt die Story im Twine-Editor unverändert, sollte man doch noch einmal Änderungen vornehmen wollen oder müssen.</p>
<p>Die Verwendung des <code>alt</code>-Textes sollte in Chapbook (aber nicht nur dort, sondern eigentlich überall) obligatorisch sein, damit sich sehbehinderte Menschen von ihrem Screenreader die Bildbeschreibung vorlesen lassen können. Sollte das Bild rein dekorativen Zwecken dienen, zum Beispiel eine schöne Seitenumrandung, dann kann der <code>alt</code>-Text auch einfach nur aus einem leeren String bestehen:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource twee number-lines code-with-copy"><code class="sourceCode"><span id="cb6-1">{embed image: "asterisk.png", alt: ""}</span></code></pre></div>
<p>Moderne Screenreader werden dieses Bild dann freudig ignorieren.</p>
<p>So, und jetzt nach der langen Vorrede die neuesten Abenteuer von Alice mit Twine und Chapbook. Sie sind nahezu identisch mit der ersten Version, nur daß sie nun mit Bildern illustriert sind. Hier der Twee-Code der ersten Passage:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource twee number-lines code-with-copy"><code class="sourceCode"><span id="cb7-1">:: Start</span>
<span id="cb7-2">{embed image: "http://localhost:8888/twine/images/grinsekatze.jpg", alt: "Grinsekatze"}</span>
<span id="cb7-3"></span>
<span id="cb7-4">Es war ein sonniger Tag. Alice schlenderte gedankenverloren durch das Wunderland.</span>
<span id="cb7-5">Sie hatte sich ein wenig verirrt. Plötzlich materialisierte sich im Gestrüpp über</span>
<span id="cb7-6">ihrem Weg die Grinsekatze. Alice fragte sie: »Würdest Du mir bitte sagen, wie ich</span>
<span id="cb7-7">von hier aus weitergehen soll!«</span>
<span id="cb7-8"></span>
<span id="cb7-9">Die Grinsekatze grinste: »Das hängt zum großen Teil davon ab, wohin Du möchtest.</span>
<span id="cb7-10">Aber ich will Dir helfen: Geradeaus geht es zum [[Haus der Herzogin]], links zur</span>
<span id="cb7-11">[[Teeparty des verrückten Hutmachers-&gt;Teeparty]] und rechts triffst Du die </span>
<span id="cb7-12">[[kiffende Raupe auf ihrem Pilz-&gt;Raupe]].«</span></code></pre></div>
<p>Auf den Abdruck der übrigen Passagen habe ich verzichtet, denn den <a href="https://github.com/kantel/twine-entdecken/blob/master/tweego/alicechapbook/alice00chapbook.twee">vollständigen Twee-Code</a> wie auch die <a href="https://github.com/kantel/twine-entdecken/tree/master/tweego/alicechapbook">HTML-Datei</a> (<code>alice01chapbook.html</code>) und die <a href="https://github.com/kantel/twine-entdecken/tree/master/tweego/alicechapbook/images">Bilder</a> könnt Ihr wieder in meinem GitHub-Repositorium finden.</p>
<p>Und auch diese Version habe ich wieder auf Itch.io <a href="https://kantel.itch.io/alice-und-chapbook-stage-1">hochgeladen</a>. Ihr könnt sie dort spielen.</p>
<p>Die Bilder sind übrigens von <em><a href="https://de.wikipedia.org/wiki/John_Tenniel">John Tenniel</a></em> (1820-1914) (Startpassage) und <em><a href="https://collectingalice.com/arthur-rackham-dark-alice/">Arthur Rackham</a></em> (1867-1939) (alle übrigen Bilder). Beide Künstler sind vor hinreichend langer Zeit gestorben, so daß es – auch wenn Ihr sie weiterverwenden wollt – zumindest nach europäischem Recht keine Urheberrechtsprobleme gibt. Denn es gilt: <em>Ihr ehrt die toten Künstler, in dem Ihr sie remixed!</em></p>


</section>

 ]]></description>
  <category>Twine</category>
  <category>Chapbook</category>
  <category>Interactive Fiction</category>
  <guid>https://kantel.github.io/posts/2023082801_chapbook_wunderland_1/index.html</guid>
  <pubDate>Mon, 28 Aug 2023 17:50:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023082801_chapbook_wunderland_1/images/chapbooktwinev01.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Tutorial: Mit Twine und Chapbook in das Wunderland, Version 0.0</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023082703_chapbook_wunderland_0/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53143377865/"><img src="https://kantel.github.io/posts/2023082703_chapbook_wunderland_0/images/chapbooktwinev00-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p><em>Alea iacta est</em>: Ich habe mich entschieden, meinen Ausflügen mit <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/twine2.html">Twine</a> ins Wunderland ein Reboot zu spendieren und die Reise nun mit <a href="https://klembot.github.io/chapbook/guide/">Chapbook</a> anstelle von <a href="http://twine2.neocities.org/">Harlowe</a> oder <a href="https://www.motoslave.net/sugarcube/2/docs/">SugarCube</a> als StoryFormat anzutreten. Das bedeutet, daß ich meine bisherigen Tutorials komplett neu überarbeiten werde. Heute gibt es die erste Lieferung:</p>
<p>Das Tutorial geht davon aus, daß Ihr Twine auf dem Desktop installiert habt oder Ihr wißt, wie die Online-Version von Twine zu bedienen ist. Außerdem setzt es voraus, daß Ihr entweder Chapbook zu Eurem Default-Storyformat erklärt oder Ihr die Tutorials auf Chapbook umgestellt habt (Menü: <code>Geschichte -&gt; Details -&gt; Geschichtsformat: Chapbook 1.2.3</code>).</p>
<p>Als erstes habe ich die unbenannte Passage in <code>Start</code> umbenannt und dann diesen Text dort hineingeschrieben:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource twee number-lines code-with-copy"><code class="sourceCode"><span id="cb1-1">:: Start</span>
<span id="cb1-2">Es war ein sonniger Tag. Alice schlenderte gedankenverloren durch das Wunderland. Sie</span>
<span id="cb1-3">hatte sich ein wenig verirrt. Plötzlich materialisierte sich im Gestrüpp über</span>
<span id="cb1-4">ihrem Weg die Grinsekatze. Alice fragte sie: »Würdest Du mir bitte sagen, wie ich</span>
<span id="cb1-5">von hier aus weitergehen soll!«</span>
<span id="cb1-6"></span>
<span id="cb1-7">Die Grinsekatze grinste: »Das hängt zum großen Teil davon ab, wohin Du möchtest.</span>
<span id="cb1-8">Aber ich will Dir helfen: Geradeaus geht es zum [[Haus der Herzogin]], links zur</span>
<span id="cb1-9">[[Teeparty des verrückten Hutmachers-&gt;Teeparty]] und rechts triffst Du die</span>
<span id="cb1-10">[[kiffende Raupe auf ihrem Pilz-&gt;Raupe]].«</span></code></pre></div>
<p>Um den Quellcode der einzelnen Passagen wiederzugeben, nutze ich <a href="http://twinery.org/cookbook/terms/terms_twee.html">Twee</a>. Das heißt, die erste Zeile mit den beiden Doppelpunkten kann von Euch ignoriert werden, sie enthält nur zu Eurer Orientierung den Namen der Passage (das heißt, Ihr übernehmt diese Zeile auch nicht in Euer Twine).</p>
<p>Zum zweiten habe ich, um horizontale Scrollbalken zu vermeiden, den Quelltext manuell umgebrochen. Absätze sind durch zwei Umbrüche (doppelte Leerzeilen) gekennzeichnet, den Rest solltet Ihr ohne Umbrüche in Euer Passagenfenster übernehmen.</p>
<p>Dieser Absatz zeigt schon die wichtigste Funktionsweise von Twine: Wie werden Links (zu anderen Passagen) erstellt? Der einfachste Weg ist, das Linkziel zwischen zwei eckigen Klammerpaaren (<code>[[]]</code>) zu schreiben, so wie in <code>[[Haus der Herzogin]]</code>. Hier sind Linktext und Linkziel identisch, das heißt, der Link <code>Haus der Herzogin</code> führt auch zur Passage <code>Haus der Herzogin</code>.</p>
<p>Doch nicht immer – sogar in den meisten Fällen – sind Linktext und Linkziel identisch. Hierfür gibt es in Twine die Pfeilnotation: <code>Linktext-&gt;Linkziel</code>, wie zum Beispiel in <code>[[Teeparty des verrückten Hutmachers-&gt;Teeparty]]</code>. Hier verlinkt der komplette Text <code>Teeparty des verrückten Hutmachers</code> auf eine Passage mit dem Namen <code>Teeparty</code>. Dabei ist zu beachten, daß Leerzeichen zählen. Daher sollte zumindest nach der Pfeilspitze kein Leerzeichen stehen, denn Twine sucht sonst das Linkziel <code>Teeparty</code> mit vorangestelltem Leerzeichen und das bringt nicht nur Twine, sondern – wie man in vielen Online-Tutorien sehen kann – auch Euch durcheinander. Wenn Ihr aber rechts und links von den Pfeilen keine Leerzeichen zulaßt, seid Ihr immer auf der sicheren Seite.</p>
<p>Es gibt noch eine zweite Schreibweise mit rückwärtsgerichtetem Pfeil, die Linkkziel und Linktext umkehrt: <code>[[Linkziel&lt;-Linktext]]</code>, also – um bei unserem Beispiel zu bleiben – <code>[[Teeparty&lt;-Teeparty des verrückten Hutmachers]]</code>. Mir hat sich der Sinn dieser vermutlich aus historischen Quellen gespeisten Schreibweise nie erschlossen und ich habe sie auch noch nie nutzen müssen.</p>
<p>Um die Verwirrung komplett zu machen, gibt es auch noch eine dritte Schreibweise mit einem vertikalen Trennstrich (<code>|</code>) in der Mitte: <code>[[Linktext|Linkziel]]</code>, also <code>[[Teeparty des verrückten Hutmachers|Teeparty]]</code>. Hier weiß ich zumindest den Grund, die Schreibweise stammt aus Twine 1.x und ich habe sie aus reiner Gewohnheit auch lange noch verwendet. Hier gilt übrigens das gleiche wie bei den Pfeilen: Keine Leerzeichen rechts und/oder links vom vertikalen Strich. Und selbst ich als Gewohnheitstier habe mich von dieser Schreibweise verabschiedet. Wer daher neu in Twine ist, sollte keinen Grund haben, auf dieser veralteten Konvention zu beharren.</p>
<p>Wenn Ihr – nachdem Ihr die Startpassage mit dem Text gefüttert habt – auf das Twine-Fenster schaut, werdet Ihr feststellen, daß Twine die Passagen <code>Haus der Herzogin</code>, <code>Teeparty</code> und <code>Raupe</code> für Euch schon angelegt und mit Pfeilen versehen hat. Die Pfeile zeigen von der Startpassage jeweils auf die verlinkte Passage und – sollte es von da einen Rücklink geben – als Doppelpfeil auch wieder zurück.</p>
<p>Ihr könnt die Passagen in dem Fenster beliebig mit der Maus hin- und herschieben und so ein wenig Struktur in Eure Geschichten bekommen.</p>
<p>Natürlich wollen auch diese Passagen mit Text gefüttert werden. Ich fange mit dem <code>Haus der Herzogin</code>an:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource twee number-lines code-with-copy"><code class="sourceCode"><span id="cb2-1">:: Haus der Herzogin</span>
<span id="cb2-2">Im Haus der Herzogin herrschte Chaos. Die Herzogin warf erst mit einem Topf nach</span>
<span id="cb2-3">Alice, doch dann drückte sie ihr ein plärrendes [[Baby in den Arm-&gt;Schweinchen]].</span></code></pre></div>
<p>Auch die <code>Teeparty</code> und die <code>Raupe</code> bekommen je einen Text:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource twee number-lines code-with-copy"><code class="sourceCode"><span id="cb3-1">:: Teeparty</span>
<span id="cb3-2">Alice erreichte die Teaparty vor dem Haus des verrückten Hutmachers. Dieser</span>
<span id="cb3-3">deklamierte gerade ein langes, dafür um so langweiligeres Gedicht.</span>
<span id="cb3-4"></span>
<span id="cb3-5">Alice hatte sehr schnell genug davon, also beschloß sie, doch die [[Raupe]]</span>
<span id="cb3-6">aufzusuchen.</span></code></pre></div>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource twee number-lines code-with-copy"><code class="sourceCode"><span id="cb4-1">:: Raupe</span>
<span id="cb4-2">Die Raupe war zu bekifft, um ein vernünftiges Gespräch zu führen. Sie murmelte</span>
<span id="cb4-3">nur immerzu etwas vom »Reich der Ringe« und daß Alice dieses dringend besuchen</span>
<span id="cb4-4">müßte. Sie sagte noch: »Komm morgen wieder, dann erzähle ich Dir mehr«.</span>
<span id="cb4-5"></span>
<span id="cb4-6">Alice beschloß, daß sie für heute genug habe und ging nach [[Hause-&gt;Home]].</span></code></pre></div>
<p>Wenn Ihr jetzt wieder auf Euer Twine-Fenster schaut, werdet Ihr zwei weitere, neue, aber noch leere Passagen finden, die Twine für Euch angelegt und mit Pfeilen versehen hat: <code>Schweinchen</code> und <code>Home</code>. Ihr könnt sie zur besseren Übersicht erst einmal anordnen, wie im <a href="https://www.flickr.com/photos/schockwellenreiter/53143377865/">Screenshot</a> im Banner oben und dann ebenfalls mit Text füllen:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource twee number-lines code-with-copy"><code class="sourceCode"><span id="cb5-1">:: Schweinchen</span>
<span id="cb5-2">Alice verließ das Haus. Das Plärren des Babys veränderte sich langsam zu einem</span>
<span id="cb5-3">Grunzen und Quieken. Als Alice nachsah, merkte sie, daß sie ein kleines Ferkelchen</span>
<span id="cb5-4">im Arm hielt.</span>
<span id="cb5-5"></span>
<span id="cb5-6">Erschreckt setzte Alice das Ferkelchen ab. Es lief davon. Und Alice ging verwirrt</span>
<span id="cb5-7">zurück an den {restart link, label: "Start"}.</span></code></pre></div>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource twee number-lines code-with-copy"><code class="sourceCode"><span id="cb6-1">:: Home</span>
<span id="cb6-2">Auf dem Weg nach Hause begegnete Alice noch einmal der Grinsekatze. Sie grinste</span>
<span id="cb6-3">Alice breit an – wie es Grinsekatzen eben so tun – und fragte: »Na, war die</span>
<span id="cb6-4">Raupe wieder bekifft?«</span>
<span id="cb6-5"></span>
<span id="cb6-6">Damit ist die Geschichte zu Ende. {restart link, label: "Noch einmal spielen"}?</span></code></pre></div>
<p>Diese Passagen enthalten nichts Neues bis auf den <code>{restart link, label: "Irgendein Text"}</code>. Das ist ein Chapbook-eigenes Feature, zwischen den geschweiften Klammern steht ein sogenanntes <code>insert</code>, eine Art Makro. Inserts sind ein wichtiges Sprachfeature von Chapbook, ich werde in späteren Tutorials noch ausführlich darauf zurückkommen. Für den Moment müßt Ihr nur wissen, daß dies ein Link auf die Startpassage ist (wobei <code>label</code> denn Linktext bezeichnet), der das Spiel auf seine Startwerte zurücksetzt. Sollte Euere Alice im Spiel also Erfahrungspunkte gesammelt haben, werden diese wieder auf den Startwert zurückgesetzt. Da es momentan aber noch keine Variablen wie zum Beispiel Erfahrungspunkte im Spiel gibt, wird einfach nur die Liste der besuchten Passagen geleert. Daher wäre es momentan auch kein Beinbruch, zum Beispiel in der <code>Home</code>-Passage den <code>restart link</code> durch den einfachen Link <code>[[Noch einmal spielen-&gt;Start]]</code> zu ersetzen. Twine würde dies dann auch mit einem Pfeil von <code>Home</code> auf <code>Start</code> honorieren.</p>
<p>Dies ist eigentlich alles, was Ihr über Twine und Chapbook wissen müßt. Mit diesem einfachen Linkmechanismus (der übrigens in dieser Form in fast allen Storyformaten existiert) könnt Ihr Eure eigene interaktive und verzweigte Geschichte im Stil der »Choose Your Own Adventure Books« <em>(CYOA)</em> schreiben. Denn das ist der Kern von Twine, alles andere ist im Grunde genommen nur Kosmetik. Aber da Kosmetik vieles doch erst schön macht, werde ich Euch in weiteren Tutorials zeigen, wie Ihr diese auftragt und nutzt, um Twine und Chapbook bis an die Grenzen auszureizen.</p>
<p>Das »Spiel« habe ich auf meinem Itch.io-Account <a href="https://kantel.itch.io/alice-und-chapbook-stage-0">hochgeladen</a>, damit Ihr das Ergebnis in Aktion erleben könnt. Und den <a href="https://github.com/kantel/twine-entdecken/blob/master/tweego/alice/alice00chapbook.twee">Twee-Code</a> wie auch die <a href="https://github.com/kantel/twine-entdecken/tree/master/tweego/alice">HTML-Datei</a> (<code>alice00chapbook.html</code>) findet Ihr in meinem GitHub-Repositorium, so daß Ihr das Beispiel in Eurem eigenen Twine importieren könnt.</p>



 ]]></description>
  <category>Twine</category>
  <category>Chapbook</category>
  <category>Interactive Fiction</category>
  <guid>https://kantel.github.io/posts/2023082703_chapbook_wunderland_0/index.html</guid>
  <pubDate>Sun, 27 Aug 2023 18:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023082703_chapbook_wunderland_0/images/chapbooktwinev00.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Fantasiekonsole TIC-80 v1.1 freigegeben</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023082702_tic80v11_released/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://img.itch.zone/aW1hZ2UvODQxMTUvNDI5NDk1MS5wbmc=/original/2cKXNV.png"><img src="https://kantel.github.io/posts/2023082702_tic80v11_released/images/tic80screenshot-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Von der freien (MIT-Lizenz) »Fantasiekonsole« <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/tic80.html">TIC-80</a> haben die Entwickler die <a href="https://github.com/nesbox/TIC-80/releases">Version 1.1</a> freigegeben. Verbessert wurde unter anderem die Web-Assembler-Einbindung und die Unterstützung von Android. Alle Neuerungen findet Ihr im <a href="https://github.com/nesbox/TIC-80/compare/v1.1.2729...v1.1.2736">Changelog</a>.</p>
<p>TIC-80 ist eine simulierte Retrokonsole, die unter anderem mit Android, HTML5 (in WebAssembly), Linux, FreeBSD, macOS und Windows funktioniert und in den Skriptsprachen <a href="http://cognitiones.kantel-chaos-team.de/programmierung/lua.html">Lua</a>, <a href="http://cognitiones.kantel-chaos-team.de/webworking/javascript.html">JavaScript</a>, MoonScript, Fennel, Wren und Squirrel programmiert werden kann. Sie besitzt eingebaute Werkzeuge zum Programmieren, zum Erstellen von Sprites und Karten und von Tönen und Melodien. Die Konsole kann entweder lokal auf dem Rechner oder online im Browser betrieben werden.</p>
<p>Auch wenn es mich natürlich und schon seit längerer Zeit gewaltig in den Fingern juckt: Ich bin momentan mit so vielen anderen Dingen beschäftigt, daß TIC-80 auf meiner Festplatte wohl noch eine Weile schlummern muß. Aber aufgeschoben ist ja nicht aufgehoben, irgendwann knöpfe ich mir auch (wieder) die kleine Konsole vor. <em>So viel zu spielen, so wenig Zeit!</em></p>



 ]]></description>
  <category>TIC-80</category>
  <category>Fantasiekonsole</category>
  <category>Retrogaming</category>
  <category>Spieleprogrammierung</category>
  <guid>https://kantel.github.io/posts/2023082702_tic80v11_released/index.html</guid>
  <pubDate>Sun, 27 Aug 2023 15:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023082702_tic80v11_released/images/tic80screenshot.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Neukölln ist (nicht nur) knallig bunt: Neuköllner Bilderbogen im August</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023082701_neukoellner_bilderbogen/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53143023338/"><img src="https://kantel.github.io/posts/2023082701_neukoellner_bilderbogen/images/bilderbogen2023082701-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Der Sommer und mit ihm die Sommerferien gehen zu Ende und morgen beginnt ein neues Schuljahr. Ich möchte diese Gelegenheit nutzen, noch einmal alle Photos rauszuhauen, die mir in den letzten Tagen vor meine Smartphonelinse geraten waren.</p>
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53134605609/"><img src="https://kantel.github.io/posts/2023082701_neukoellner_bilderbogen/images/bilderbogen2023082702.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/53143023653/"><img src="https://kantel.github.io/posts/2023082701_neukoellner_bilderbogen/images/bilderbogen2023082703.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/53144208092/"><img src="https://kantel.github.io/posts/2023082701_neukoellner_bilderbogen/images/bilderbogen2023082704.jpg" class="img-fluid"></a><br><br> <a href="https://www.flickr.com/photos/schockwellenreiter/53145284268/"><img src="https://kantel.github.io/posts/2023082701_neukoellner_bilderbogen/images/bilderbogen2023082705.jpg" class="img-fluid"></a></p>
<p><em>Mit einem Klick auf die Vorschaubilder kommt Ihr je auf eine Seite mit einer Vergrößerung.</em></p>
<p>Ob <a href="https://www.flickr.com/photos/schockwellenreiter/53134605609/">freigelassene Sitzmöbel</a>, die lange erwartete <a href="https://www.flickr.com/photos/schockwellenreiter/53143023653/">Neueröffnung einer beliebten Currywurstbude</a> (die vom Betreiber auch gleich zum <em>Flagship Store</em> geadelt wurde), <a href="https://www.flickr.com/photos/schockwellenreiter/53144208092/">besonders dreiste Gehwegzuparker</a>, deren Stern wohl in Neukölln die StVO »auto«matisch außer Kraft setzt, oder ein <a href="https://www.flickr.com/photos/schockwellenreiter/53145284268/">reisender Zigarettenautomat</a> auf der Flucht vor einem Raucher, dessen Karte anscheinend nicht akzepziert wurde … Neukölln ist eben nicht nur bunt, aber wenn, dann knall. <em>(Photos (<a href="http://creativecommons.org/licenses/by-nc-nd/2.0/">cc</a>) 2023: <a href="http://cognitiones.kantel-chaos-team.de/cv.html">Jörg Kantel</a>)</em></p>



 ]]></description>
  <category>Neuköllner Bilderbogen</category>
  <category>Wohnsitz Neukölln</category>
  <category>Neukölln</category>
  <category>Photographie</category>
  <guid>https://kantel.github.io/posts/2023082701_neukoellner_bilderbogen/index.html</guid>
  <pubDate>Sun, 27 Aug 2023 14:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023082701_neukoellner_bilderbogen/images/bilderbogen2023082701.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Hypermedia, Twine und Chapbook: Ein Werkstattbericht</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023082601_twine_und_hypermedia/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53123060679/"><img src="https://kantel.github.io/posts/2023082601_twine_und_hypermedia/images/chapbooktwine-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Ich spiele einfach ein wenig weiter mit <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/twine2.html">Twine</a>, <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/tweego.html">Tweego</a> und dem <a href="https://klembot.github.io/chapbook/guide/">Chapbook</a>-Storyformat herum. Denn die <a href="https://kantel.github.io/posts/2023082501_twine_und_vscode/">gestern vorgestellte</a> Playlist »<a href="https://www.youtube.com/playlist?list=PLILyoTXjpxSCyVX2H1tNOjT021Wqq2Ebb">Twine – Simple Storytelling</a>« hat mich daran erinnert, woher unter anderem auch meine Faszination für Twine stammt: Twine erinnert (nicht nur) mich an Apples geniales, aber leider verblichenes <a href="http://cognitiones.kantel-chaos-team.de/medien/hypertext.html">Hypertext</a>-/<a href="http://cognitiones.kantel-chaos-team.de/medien/hypermedia.html">Hypermedia</a>-System »<a href="http://cognitiones.kantel-chaos-team.de/programmierung/hypercard.html">HyperCard</a> und es kann daher viel mehr, als nur (interaktive) Geschichten erzählen.</p>
<p>Wie fast immer in solchen Fällen möchte ich meine Beschäftigung auch ein wenig theoretisch untermauern. Da seltsamerweise mit dem Aufkommen des Internets die Beschäftigung mit Hypertext und Hpyermedia weitestgehend eingeschlafen ist – so als habe man Angst vor der eigenen Courage bekommen – sind die Texte dazu meistens älter. Einige davon habe ich im <a href="https://klembot.github.io/chapbook/guide/text-and-links/ways-to-link.html">Handbuch zu Chapbook</a> gefunden:</p>
<div style="float: right; margin-left: 12px; margin-top: 6px;">
<a href="https://link.springer.com/book/10.1007/978-1-4612-4144-7"><img src="https://kantel.github.io/posts/2023082601_twine_und_hypermedia/images/elementsofhypermediadesign.jpg" class="img-fluid"></a>
</div>
<ul>
<li><a href="https://heterogenoustasks.wordpress.com/2015/01/26/standard-patterns-in-choice-based-games/">Standard Patterns in Choice-Based Games</a> von <em>Sam Kabo Ashwell</em> ist aus dem Jahre 2015 und daher schon fast so etwas wie ein (jüngerer) Klassiker.</li>
<li><a href="http://www.eastgate.com/patterns/Print.html">Patterns Of Hypertext</a> von <em>Mark Bernstein</em> ist ein Text, der 1998 in den <em>Proceedings of Hypertext ’98</em>, herausgegeben von <em>Frank Shipman</em>, <em>Elli Mylonas</em> und <em>Kaj Groenback</em>, veröffentlicht wurde.</li>
<li><a href="http://www.deenalarsen.net/fundamentals/links.html">A Plea for Connections: Links convey meaning</a> ist Teil der Website »<a href="http://www.deenalarsen.net/fundamentals/index.html">Fun da mentals : Rhetorical Devices for Electronic Literature</a>« von <em>Deen Larsen</em> (letztes Update 2012), die sich extrem ausführlich mit allen Formen der »elektronischen Literatur« und ihren Werkzeugen auseinandersetzt.</li>
</ul>
<p>Dann darf ich natürlich meinen Allzeit-Favoriten »<a href="https://link.springer.com/book/10.1007/978-1-4612-4144-7">Elements of Hypermedia Design: Techniques for Navigation &amp; Visualization in Cyberspace</a>« von <em>Peter Gloor</em> nicht vergessen. Das Buch hat über all die Jahre mein Interesse an HyperCard, Hypertext und Hpyermedia wachgehalten und auch dazu geführt, daß ich von 2006 bis 2009 eine eigene Lehrveranstaltung zu diesem Thema an der Fachhochschule für Technik und Wirtschaft (FHTW) in Berlin durchführen durfte.</p>
<p>Und <em>last but not least</em> möchte ich auf meine siebenteilige Tutorialreihe »<a href="http://www.kantel.de/hc/index.html">Programmieren in HyperTalk</a>« hinweisen, die ich schon 1996 geschrieben und 2001 online gestellt hatte. <em>Mensch, war ich damals noch jung!</em></p>



 ]]></description>
  <category>Twine</category>
  <category>Chapbook</category>
  <category>Interactive Fiction</category>
  <category>Hypermedia</category>
  <guid>https://kantel.github.io/posts/2023082601_twine_und_hypermedia/index.html</guid>
  <pubDate>Sat, 26 Aug 2023 15:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023082601_twine_und_hypermedia/images/chapbooktwine.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
