<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Der Schockwellenreiter</title>
<link>https://kantel.github.io/index.html</link>
<atom:link href="https://kantel.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description>Schockwellenreiter</description>
<generator>quarto-1.2.269</generator>
<lastBuildDate>Fri, 31 Mar 2023 16:15:00 GMT</lastBuildDate>
<item>
  <title>Coding with Russ – Video-Tutorials zum Wochenende</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023033101_coding_with_russ/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="http://www.codingwithruss.com/wp-content/uploads/2023/02/platformer.png"><img src="https://kantel.github.io/posts/2023033101_coding_with_russ/images/platformer-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>An diesem Freitag gibt es wieder die Video-Tutorials zum Wochenende, damit Euch während der nächsten, verregneten Tage nicht die Langeweile übermannt und Ihr um Gottes willen nicht in die Kirchen rennt. Dieses Wochenende ist es eine <em>Special Edition</em>, die Euch den Videokanal »<a href="https://www.youtube.com/@CodingWithRuss">Coding wth Russ</a>« vorstellt. Denn dieser Kanal ist immer eine gute Adresse, wenn es um Tutorials zur Spieleprogrammierung mit <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a> geht. Seine <a href="https://www.youtube.com/@CodingWithRuss/playlists">vielen Playlists</a> waren vor einigen Monaten schon einmal eine <a href="http://blog.schockwellenreiter.de/2022/11/2022111101.html">Empfehlung im <em>Schockwellenreiter</em></a> und sein ziemlich geniales <a href="https://www.youtube.com/playlist?list=PLjcN1EyupaQnjjBvXn4Ew1a9Ms-9QzVub">Castle Defender</a> hatte ich zum Zeitpunkt seiner Entstehung sogar <a href="http://blog.schockwellenreiter.de/2021/07/2021070902.html">mehrmals</a> im <a href="http://blog.schockwellenreiter.de/2021/07/2021071101.html">Visier</a>. Trotz der Gefahr der Wiederholung möchte ich dennoch auf einige Highlights aus diesem Kanal hinweisen (im Fernsehen wird schließlich auch alles wiederholt):</p>
<p>Den Anfang macht das »<a href="https://www.youtube.com/playlist?list=PLjcN1EyupaQnHM1I9SmiXfbT6aG4ezUvu">PyGame Tile Based Platformer Game Beginner Tutorial</a>«, eine dreizehnteilige Playlist, die gründlich in die Programmierung von Pygame einführt. Für das Tutorial gibt es auch eine <a href="http://www.codingwithruss.com/gamepage/Platformer/">Webseite</a>, alle Assets sind Open Source und den <a href="https://github.com/russs123/Platformer">Quellcode und die Assets</a> gibt es bei GitHub.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/DHgj5jhMJKg" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Auf das Plattformer-Tutorial baut das »<a href="https://www.youtube.com/playlist?list=PLjcN1EyupaQm20hlUE11y9y8EY2aXLpnv">PyGame Scrolling Shooter Game Beginner Tutorial</a> auf, das ebenfalls aus dreizehn Videos besteht. Auch für dieses Tutorial existieren eine <a href="http://www.codingwithruss.com/gamepage/Shooter/">Webseite</a> und ein <a href="https://github.com/russs123/Shooter">GitHub-Repositorium</a> mit dem Quellcode und allen Assets. Bei den in der <em>Video Description</em> verlinkten Credits finde ich die Seite mit dem freien <a href="https://erayzesen.itch.io/pixel-platformer">Pixel Platformer Game Tileset Pack</a> hochinteressant. Für mein nächstes Spieleprojekt kommt dies auf die Merkliste.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/s5bd9KMSSW4" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Ein ganz eigenes Genre sind die <a href="https://de.wikipedia.org/wiki/Street_Fighter_(Spieleserie)">Street Fighter</a> ähnlichen Videospiele, die erstmals 1987 erschienen und auch als Vorlage für einige Kinofilme dienten. Auch daran hat sich <em>Russ</em> gewagt und mit seinem <a href="https://www.youtube.com/watch?v=s5bd9KMSSW4">Brawler</a> eine eigene Pygame-Version programmiert. Das ist <em>Retrogaming as its best</em>! Auch dieses Spiel hat eine <a href="http://www.codingwithruss.com/gamepage/Brawler/">Webseite</a> und ein GitHub-Repositorium mit dem <a href="https://github.com/russs123/brawler_tut">Quellcode und allen Assets</a>.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/z_tLkRMw-2Y" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p><strong>War sonst noch was?</strong> Ach ja, <em>Russ</em> erklärt mir und Euch endlich verständlich den Unterschied zwischen <code>convert()</code> und <code>convert_alpha()</code> in Pygame. Allein dies ist Begründung genug dafür, daß ich die Seiten von <a href="http://www.codingwithruss.com/">Coding with Russ</a> auch in meinem Feedreader aufgenommen habe.</p>
<p><strong>Und warum das alles?</strong> Wenn ich mit <a href="https://kantel.github.io/#category=Trinket">Trinket</a> durch bin, möchte ich meine (objektorientierten) Experimente mit Pygame wieder aufnehmen. Auch wenn ich einiges anders implementieren werde, haben mir speziell die Videos von <em>Russ</em> zu seinem »Scrolling Shooter Game« einige Anregungen gegeben die ich ausprobieren, realisieren und eventuell weiterentwickeln möchte. <em>Still digging!</em></p>



 ]]></description>
  <category>Spieleprogrammierung</category>
  <category>Pygame</category>
  <guid>https://kantel.github.io/posts/2023033101_coding_with_russ/index.html</guid>
  <pubDate>Fri, 31 Mar 2023 16:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023033101_coding_with_russ/images/platformer.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Abenteuer Handy kaufen</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023033002_abenteuer_handy_kaufen/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52772457449/"><img src="https://kantel.github.io/posts/2023033002_abenteuer_handy_kaufen/images/gartengoblin-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p><a href="http://www.gabi-kantel.de/">Gabis</a> Mobilphone hatte nach fünfjähriger Betriebsdauer seinen Geist aufgegeben. Der Akku ließ sich nicht mehr aufladen und – wie bei heutigen Geräten leider üblich – auch nicht austauschen. Also mußte ein neues her. Und da traf es sich eigentlich gut, daß ein großer Discounter ein Galaxy A13 gerade ab heute für knapp 180 Euronen im Angebot hatte.</p>
<p>Ich also hin. In der ersten, eine Neuköllner Filiale dieses Discounters erklärte man mir, daß man nur zwei Geräte bekommen hätte und die schon am frühen Morgen ausverkauft gewesen seien. Also habe ich mich in die S-Bahn geschwungen und eine Filiale in Tempelhof aufgesucht. Dort bekam ich die gleiche Erklärung serviert: Ausverkauft, weil nur ganz wenige Exemplare geliefert.</p>
<p>Okay, da die beiden mir bekannten Handy-Shops in der Neuköllner Karl-Marx-Straße das Handy nur zu deutlich teureren Mondpreisen verkaufen oder mir gleich einen Vertrag andrehen wollten, habe ich mich noch einmal in die U-Bahn geschwungen, weil ich wußte, daß der Discounter in Britz-Süd eine weitere eine Filiale besaß. Doch nicht nur, daß dort das gleiche Bild vorherrschte (ausverkauft), ich bin dann auch noch in ein heftiges Gewitter mit Blitz, Donner und Platzregen geraten, das meinen Aufenthalt an einer zugigen Bushaltestelle noch einmal um 20 Minuten verängerte.</p>
<p>Als ich nach dieser Odyssee dann endlich völlig durchnässt und entnervt zuhause mein warmes und trocknes Arbeitszimmer erreichte, habe ich mir erst einmal einen Kaffee gekocht und dann das Mobilphone in der gleichen Ausstattung bei Amazon bestellt und es auch noch für zehn Euro billiger bekommen. Spätestens Mittwoch liegt es in der Abholstation meines Vertrauens bereit.</p>
<p><strong>Fazit</strong>: Erfolglos vier Stunden Lebenszeit verplempert und dabei auch noch völlig durchnässt worden. Hätte ich gleich online bestellt, hätte ich die warme und trockene Wohnung nicht verlassen müssen und die Angelegenheit wäre nach spätestens zehn Minuten erledigt gewesen. Wundert Ihr Euch jetzt noch, warum ich lieber bei Amazon einkaufe? <em>(Photo (<a href="http://creativecommons.org/licenses/by-nc-nd/2.0/">cc</a>): <a href="http://cognitiones.kantel-chaos-team.de/cv.html">Jörg Kantel</a>)</em></p>



 ]]></description>
  <category>Digitales Leben</category>
  <guid>https://kantel.github.io/posts/2023033002_abenteuer_handy_kaufen/index.html</guid>
  <pubDate>Thu, 30 Mar 2023 17:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023033002_abenteuer_handy_kaufen/images/gartengoblin.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Update für iTunes for Windows behebt Sicherheitslücken</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023033001_itunes_update/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://cruikshankart.com/shop/enlarge-cruikshank-glasses-enlarge.jpg"><img src="https://kantel.github.io/posts/2023033001_itunes_update/images/opspectakles-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Vor <a href="https://kantel.github.io/posts/2023032802_apple_update_im_maerz/">zwei Tagen</a> gab es den großen Apfel-Flickentag und heute gibt es einen Nachschlag: Apple hat seinem iTunes for Windows ein Update für Windows ab Version&nbsp;10 und größer spendiert, daß unter anderem auch mehrere, teils <a href="https://support.apple.com/de-de/HT210384">kritische Schwachstellen</a> korrigiert.</p>
<p>Das Update erhält man auch im Microsoft Store. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<p><em>(Bild: »The OP Spectacles«, Karikatur von <a href="https://cruikshankart.com/">George Cruikshank</a>. Bildquelle: CruishankArt.com.)</em></p>



 ]]></description>
  <category>News</category>
  <guid>https://kantel.github.io/posts/2023033001_itunes_update/index.html</guid>
  <pubDate>Thu, 30 Mar 2023 16:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023033001_itunes_update/images/opspectakles.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>PyScript.net: (Anaconda-) Python in der Cloud</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023032902_pyscript_saas/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://cdn.thenewstack.io/media/2023/03/92b35e06-image1.png"><img src="https://kantel.github.io/posts/2023032902_pyscript_saas/images/pyscriptpyxeldemo-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Im Nachtrag meinem <a href="https://kantel.github.io/posts/2023032701_jupyter_and_jupyterlab/">Beitrag vom Montag</a> spülte heute eine Meldung bei mir rein, daß nicht nur Google (via <a href="https://colab.research.google.com/">Colab</a>) mit Python in die Cloud drängt, sondern daß auch <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/anaconda.html">Anaconda</a> mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/pyscript.html">PyScript</a> Ähnliches vorhat. Wie nämlich <a href="https://thenewstack.io/python-in-the-browser-free-pyscript-saas-launches/">The New Stack berichtete</a>, hat Anaconda mit <a href="https://pyscript.net/">PyScript.net</a> diese Woche einen Servive an den Start gebracht, in dem man eine PyScript-IDE online im Browser nutzen kann.</p>
<p>Der Dienst ist noch beta, doch neugierig, wie ich bin, habe ich mir einen (kostenlosen) Account zugelegt, um ein wenig damit herumzuspielen. Denn zum einen wäre dies ein großartiges Betätgungsfeld für <a href="http://blog.schockwellenreiter.de/2021/12/2021120701.html">mein Chromebook</a> und zum anderen versprach der <a href="https://cdn.thenewstack.io/media/2023/03/92b35e06-image1.png">Screenshot</a>, daß ich damit auch die von <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/tic80.html">TIC-80</a> inspirierte Python-Retrogame-Engine <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/tic80.html">Pyxel</a> – die aus irgendwelchen geheimnisvollen Gründen auf meinem betagten MacBook Pro nicht läuft – wenigstens auf meinem Chromebook zur Mitarbeit bewegen könnte.</p>
<p>Allerdings mangelt es momentan noch an Dokumentation: Was kommt wann und warum in die <code>TOML</code>-Datei und wie binde ich Pakete wie <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/numpy.html">NumPy</a> oder die <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/matplotlib.html">Matplotlib</a> ein? Fragen über Fragen. Leider wird ein unerfahrener PyScript-Nutzer damit noch völlig alleine gelassen. Und gemächlich scheint der Dienst auch (noch) zu sein.</p>
<p>Aber PyScript.net ist noch jung und beta. Ich warte erst einmal ab, wie sich der Dienst weiter entwickeln wird. Bis dahin habe ich mit Googles Colab und mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/trinket.html">Trinket</a> ja schon zwei Spielzeuge, mit denen ich Python im Browser (und damit auch auf meinem Chromebook) nutzen kann.</p>
<p>Und ich sollte nicht vergessen, daß ich ja auch <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/thonny.html">Thonny</a> auf meinem Chromebook <a href="http://blog.schockwellenreiter.de/2022/07/2022071501.html">zum Laufen bekommen</a> habe. Ich bin also nicht notwendigerweise von einer Python-im-Browser-Implementierung abhängig. Und das ist auch gut so!</p>



 ]]></description>
  <category>Python</category>
  <category>PyScript</category>
  <guid>https://kantel.github.io/posts/2023032902_pyscript_saas/index.html</guid>
  <pubDate>Wed, 29 Mar 2023 18:45:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023032902_pyscript_saas/images/pyscriptpyxeldemo.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Thunderbird-Update</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023032901_thunderbird_update/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://proxy.europeana.eu/2048202/europeana_fashion_DE_MUS_018313_875572?view=http%3A%2F%2Fwww.smb-digital.de%2FeMuseumPlus%3Fservice%3DImageAsset%26module%3Dcollection%26objectId%3D875572%26resolution%3DsuperImageResolution&amp;disposition=inline&amp;api_url=https%3A%2F%2Fapi.europeana.eu%2Fapi"><img src="https://kantel.github.io/posts/2023032901_thunderbird_update/images/mushroommonstrositis-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Es gibt mal wieder ein Update des Donnervogels ohne daß – wie normalerweise üblich – ein Update des kleinen, roten Pandas (aka Feuerfuchs) vorausgegangen war. Die Entwickler des <a href="http://www.mozillamessaging.com/">Mozilla Thunderbird</a> haben außer der Reihe das Update auf die Version 102.9.1 freigegeben und damit auch <a href="https://www.thunderbird.net/en-US/thunderbird/102.9.1/releasenotes/">Sicherheitslücken</a> behoben.</p>
<p>Thunderbird weist selbst auf dieses Update hin. Diese Prozedur kann aber auch wie immer über das Menü <code>Hilfe &gt; Über Thunderbird</code> angestoßen werden. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<p><em>(Bild: »Mushroom Monstrosities«, Karikatur von George Cruikshank, 1826. Bildquelle: <a href="https://recherche.smb.museum/detail/875572">Kunstbibliothek der Staatlichen Museen zu Berlin</a>.)</em></p>



 ]]></description>
  <category>News</category>
  <guid>https://kantel.github.io/posts/2023032901_thunderbird_update/index.html</guid>
  <pubDate>Wed, 29 Mar 2023 17:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023032901_thunderbird_update/images/mushroommonstrositis.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Apfel-Flickentag im März</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023032802_apple_update_im_maerz/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.loc.gov/pictures/resource/cph.3b49754/"><img src="https://kantel.github.io/posts/2023032802_apple_update_im_maerz/images/ indigestion-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Apple hat auf seinem gestrigen <em>Patch Day</em> sowohl für alle noch unterstützten Desktop-Betriebssysteme wie auch für die noch gewarteten mobilen Geräte eine Reihe von sicherheitsrelevanten Updates herausgehauen, die ich – wie gewohnt – <em>en bloc</em> abhandeln möchte:</p>
<section id="apple-veröffentlicht-macos-ventura-13.3" class="level3">
<h3 class="anchored" data-anchor-id="apple-veröffentlicht-macos-ventura-13.3">Apple veröffentlicht macOS Ventura 13.3</h3>
<p>Apple hat das Update auf die neue Betriebssystemversion macOS Ventura 13.3 freigegeben und bietet unter anderem <a href="https://support.apple.com/de-de/HT213606">Sicherheitsupdates</a>.</p>
<p>Das Update steht über die Systemeinstellungen zur Verfügung.</p>
</section>
<section id="apple-veröffentlicht-sicherheitsupdate-für-macos-big-sur-und-monterey" class="level3">
<h3 class="anchored" data-anchor-id="apple-veröffentlicht-sicherheitsupdate-für-macos-big-sur-und-monterey">Apple veröffentlicht Sicherheitsupdate für macOS Big Sur und Monterey</h3>
<p>Apple hat auch das Sicherheitsupdate auf <a href="https://support.apple.com/de-de/HT213675">macOS Big Sur 11.7.5</a> und macOS <a href="https://support.apple.com/de-de/HT213677">Monterey 12.6.4</a> freigegeben.</p>
<p>Die Updates stehen wie üblich über die Softwareaktualisierung bereit.</p>
</section>
<section id="apple-veröffentlicht-ios-16.4-ipados-16.4-und-watchos-9.4" class="level3">
<h3 class="anchored" data-anchor-id="apple-veröffentlicht-ios-16.4-ipados-16.4-und-watchos-9.4">Apple veröffentlicht iOS 16.4, iPadOS 16.4 und watchOS 9.4</h3>
<p>Wie angekündigt hat Apple das Update auf iOS 16.4, iPadOS 16.4 und watchOS 9.4 bereitgestellt. Die Neuerungen können im wesentlichen hier verfolgt werden (sobald verfügbar):</p>
<ul>
<li>Für <a href="https://support.apple.com/en-us/HT213407">iOS 16.4</a> und</li>
<li>für <a href="https://support.apple.com/en-us/HT213408">iPadOS 16.4</a>.</li>
</ul>
<p>Wie immer wurden auch hier wieder <a href="https://support.apple.com/en-us/HT201222">Sicherheitslücken</a> behoben (sobald verfügbar).</p>
<p>Das Update auf auf iOS 16.4/ iPadOS 16.4 kann über OTA (<em>Over the Air</em> - in <code>Einstellungen &gt; Allgemein &gt; Softwareaktualisierung</code>, an ausreichender Akku-Kapazität und freien Speicherplatz sollte gedacht werden) oder über iTunes erfolgen.</p>
<p>Eine vorherige Sicherung des Geräts ist wie immer sehr zu empfehlen.</p>
<p>Darüber hinaus hat Apple für die Apple Watch auch watchOS 9.4 bereitgestellt. Die <a href="https://support.apple.com/en-us/HT213436">Neuerungen</a> finden sich hier und für die behobenen <a href="https://support.apple.com/en-us/HT201222">Sicherheitsprobleme</a> (sobald verfügbar).</p>
<p>Die Aktualisierung wird über die Apple-Watch-App auf dem iPhone gestartet unter <code>Allgemein &gt; Softwareupdate</code>. Dabei sollte sich die Uhr in Reichweite des iPhones befinden, mit dem Ladekabel verbunden und mindestens zu 50 Prozent geladen sein.</p>
</section>
<section id="apple-veröffentlicht-ein-sicherheitsupdate-auf-ios-15.7.4-ür-ältere-systeme" class="level3">
<h3 class="anchored" data-anchor-id="apple-veröffentlicht-ein-sicherheitsupdate-auf-ios-15.7.4-ür-ältere-systeme">Apple veröffentlicht ein Sicherheitsupdate auf iOS 15.7.4 ür ältere Systeme</h3>
<p><em>Last but not least</em> hat Apple das Update auf iOS/iPadOS 15.7.4 für ältere Systeme bereitgestellt und behebt damit ebenfalls kritische <a href="https://support.apple.com/de-de/HT213673">Sicherheitsprobleme</a>.</p>
<p>Auch das Update auf auf iOS/iPadOS 15.7.4 kann über OTA (<em>Over the Air</em> - in <code>Einstellungen &gt; Allgemein &gt; Softwareaktualisierung</code>, an ausreichender Akku-Kapazität und freien Speicherplatz sollte gedacht werden) oder über iTunes erfolgen.</p>
<p>Eine vorherige Sicherung des Geräts ist auch hier wie immer sehr zu empfehlen.</p>
<p><em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<p><em>(Bild: »Indiguestion«, Karikatur von <a href="https://donkeyhotey.com/master-caricature-artists/tag/George+Cruikshank">George Cruikshank</a>, 1825. Bildquelle: <a href="https://www.loc.gov/pictures/item/2002721265/">Library of Congress</a>.)</em></p>


</section>

 ]]></description>
  <category>News</category>
  <guid>https://kantel.github.io/posts/2023032802_apple_update_im_maerz/index.html</guid>
  <pubDate>Tue, 28 Mar 2023 14:35:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023032802_apple_update_im_maerz/images/ indigestion.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>April im März</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023032801_april_im_maerz/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52775835812/"><img src="https://kantel.github.io/posts/2023032801_april_im_maerz/images/aprilimmaerz-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Gestern Hagel, Regen und Sonne, heute Sonnenschein mit Schnee – ja, ist denn schon April oder was? <em>(Photo (<a href="http://creativecommons.org/licenses/by-nc-nd/2.0/">cc</a>): <a href="http://cognitiones.kantel-chaos-team.de/cv.html">Jörg Kantel</a>)</em></p>



 ]]></description>
  <category>Photographie</category>
  <category>Parks und Gärten</category>
  <guid>https://kantel.github.io/posts/2023032801_april_im_maerz/index.html</guid>
  <pubDate>Tue, 28 Mar 2023 14:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023032801_april_im_maerz/images/aprilimmaerz.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Katzenvideos für den Frieden</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023032702_katzenvideos_frieden/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://upload.wikimedia.org/wikipedia/commons/thumb/0/07/George_Cruikshank%2C_Seizing_the_Italian_Relics%2C_1815.jpg/1280px-George_Cruikshank%2C_Seizing_the_Italian_Relics%2C_1815.jpg"><img src="https://kantel.github.io/posts/2023032702_katzenvideos_frieden/images/italianrelicts-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Die gute Nachricht des Tages kommt aus Norwegen: <a href="https://www.golem.de/news/nammo-tiktok-strombedarf-bremst-expansion-von-munitionshersteller-2303-172990.html">TikTok-Strombedarf bremst Expansion von Rüstungskonzern</a>. Der norwegische Rüstungskonzern Nammo ist bei den Plänen, seine größte Fabrik zu erweitern, auf ein Hindernis gestoßen: Ein neues Datenzentrum für TikTok hat einen so hohen Strombedarf, daß die Expansion von Nammo scheitern könnte. Der Konzern wurde von seinem Stromversorger informiert, daß es keine überschüssige Energie für das Werk in Raufoss in Mittelnorwegen gäbe, da das Datenzentrum, das TikTok als seinen Hauptkunden zählt, den gesamten Strom in der Region benötige.</p>
<p>Der Geschäftsführer von Nammo, <em>Morten Brandtzæg</em>, ist laut Financial Times besorgt, da das künftige Wachstum des Unternehmens durch das Speichern von Katzenvideos im Datenzentrum gefährdet sei. Die Nachfrage nach Munition sei aufgrund des andauernden Kriegs in der Ukraine sprunghaft angestiegen. Die Ukraine verbraucht rund 6.000 Artilleriegeschosse pro Tag – das entspräche den Jahresbestellungen eines kleinen europäischen Landes.</p>
<p>Dazu kann ich nur sagen: Leute, postet mehr Katzenvideos. Das hilft dem Frieden!</p>
<p><em>(Bild: »Seizing the Italian Relics«, Karikatur von George Cruikshank, 1825. Bildquelle: <a href="https://commons.wikimedia.org/wiki/Image:George_Cruikshank,_Seizing_the_Italian_Relics,_1815.jpg?uselang=de">Wikimedia Commons</a>)</em></p>



 ]]></description>
  <category>Politik</category>
  <category>Ukraine</category>
  <guid>https://kantel.github.io/posts/2023032702_katzenvideos_frieden/index.html</guid>
  <pubDate>Mon, 27 Mar 2023 19:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023032702_katzenvideos_frieden/images/italianrelicts.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Von Jupyter zu JupyterLab (Desktop) und darüber hinaus</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023032701_jupyter_and_jupyterlab/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*8xMIZPHtmjJFVoJ8Vh6Lig.png"><img src="https://kantel.github.io/posts/2023032701_jupyter_and_jupyterlab/images/jlabdesktop-b.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Letzte Woche ist <a href="https://github.com/jupyterlab/jupyterlab-desktop">JupyterLab Desktop</a>, die Applikation, die <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/jupyterlab.html">JupyterLab</a> aus den Klauen der Webbrowser befreien will, in der Version 3.6.2 erschienen. Das erinnerte mich daran, daß ich mir anläßlich des Erscheinens der Version 3.6.1 vorgenommen hatte, JupyterLab eine neue Chance zu geben. Neben den <a href="https://kantel.github.io/posts/2023021301_jypterlab_desktop_3_6_1/">damals schon verlinkten Tutorials</a> ist mir dieses <a href="https://www.youtube.com/watch?v=5pf0_bpNbkw">relativ frische Video</a> von <em>Rob Mulla</em> untergekommen, das mich bei meinem Wiedereinstieg unterstützen könnte:</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/5pf0_bpNbkw" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Es ist vor allem für mich auch deshalb interessant, weil es auch die cloudbasierten Jupyter-Implementierungen <a href="https://colab.research.google.com/">Google Colab</a> und <a href="https://www.kaggle.com/">Kaggle</a> (gehört ebenfalls zu Google) behandelt. Denn zwei Seelen wohnen ach in meiner Brust. Während die eine Seele Jupyter aus den Klauen der Browser befreit sehen will, denkt die andere daran, daß das Wetter ja immer frühlingshafter wird und ich bald mit <a href="http://blog.schockwellenreiter.de/2021/12/2021120701.html">meinem Chromebook</a> wieder auf der Terrasse spielen kann (denn mein WLAN reicht bis in unser Gärtchen). Und womit spielt ein Chromebook am Besten? Bingo! Mit Googles Cloud.</p>
<p>Daher habe ich auch noch das Tutorial »<a href="https://towardsdatascience.com/getting-started-with-google-colab-f2fff97f594c">Getting Started With Google Colab</a>« von <em>Anne Bonner</em> ausgegraben, das für die frustierten und verwirrten Seelen, also für mich, gedacht ist. Es ist auf Medium.com erschienen, daher müßt ihr – falls Ihr Eure drei kostenlosen Zugriffe pro Monat schon ausgeschöpft habt – entweder bis zum 1. April warten oder es mir nachtun, in den sauren Apfel beißen und ein Abo abschließen, um hinter Mediums Bezahlschranke zu gelangen.</p>
<p>Egal wie: Falls ich in einigen der nächsten Beiträge das in der letzten Zeit dominante Thema »<a href="https://kantel.github.io/#category=Spieleprogrammierung">Spieleprogrammierung</a>« verlasse und wieder etwas über Numerik, Chaos und Fraktale, Simulationen oder agentenbasierte Programmierung erscheint, dann wißt Ihr, daß das neue JupyterLab (Desktop) der Grund dafür ist. <em>Still digging!</em></p>



 ]]></description>
  <category>Python</category>
  <category>Jupyter</category>
  <guid>https://kantel.github.io/posts/2023032701_jupyter_and_jupyterlab/index.html</guid>
  <pubDate>Mon, 27 Mar 2023 17:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023032701_jupyter_and_jupyterlab/images/jlabdesktop.png" medium="image" type="image/png" height="111" width="144"/>
</item>
<item>
  <title>Weiter mit dem kleinen, grünen Flieger auf Trinket: Jetzt mit Pizzas</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023032602_pizza_plane_with_pizzas/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52770799214/"><img src="https://kantel.github.io/posts/2023032602_pizza_plane_with_pizzas/images/pizzaplanestage3-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Mit der Portierung meines <a href="https://kantel.github.io/posts/2023032301_pizza_plane_oop_trinket_stage_1/">kleinen, grünen Fliegers</a> von <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a> nach <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/trinket.html">Trinket</a> (in der <a href="https://kantel.github.io/posts/2023021601_my_first_trinket/">Processing.py-Variante</a>) bin ich ein gutes Stück vorangekommen. Ich habe dem Flieger Pizzas als Gegner spendiert (denn was ist ein Pizzaflieger ohne Pizzas? Nur ein simples Flugzeug) und Waffen, um diese Pizzen abzuschießen. Doch der Reihe nach:</p>
<iframe src="https://trinket.io/embed/python/3ae6ef087c?outputOnly=true&amp;runOption=run&amp;start=result" width="95%" height="700" frameborder="0" marginwidth="0" marginheight="0" allowfullscreen="">
</iframe>
<p>Getreu dem Motto »Don’t repeat Yourself« habe ich eine Oberklasse <code>Sprite()</code> implementiert, denn jede (Unter-) Klasse hatte ihre eigene, identische <code>display()</code>-Methode:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;">## Oberklasse für alles, was sich bewegt</span></span>
<span id="cb1-2"><span class="kw" style="color: #003B4F;">class</span> Sprite():</span>
<span id="cb1-3"></span>
<span id="cb1-4">  <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-5">    <span class="cf" style="color: #003B4F;">pass</span></span>
<span id="cb1-6"></span>
<span id="cb1-7">  <span class="kw" style="color: #003B4F;">def</span> display(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-8">    image(<span class="va" style="color: #111111;">self</span>.img, <span class="va" style="color: #111111;">self</span>.x, <span class="va" style="color: #111111;">self</span>.y)</span></code></pre></div>
<p>Und weil ich gerade dabei war, bekam diese Klasse auch noch eine Methode (<code>collide_rect()</code>) zur Kollisionskerkennung verpaßt. Zwar wird diese momentan nur von der Klasse <code>Missile()</code> (siehe weiter unten) aufgerufen, aber in einer späteren Version soll auch der Flieger erkennen, ob er mit einer Pizza (oder anderen Gegnern) kollidiert, und dann benötigt er diese Methode ebenfalls:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1">  <span class="kw" style="color: #003B4F;">def</span> collide_rect(<span class="va" style="color: #111111;">self</span>, other):</span>
<span id="cb2-2">    distance_x <span class="op" style="color: #5E5E5E;">=</span> (<span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">+</span> <span class="va" style="color: #111111;">self</span>.w<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span>) <span class="op" style="color: #5E5E5E;">-</span> (other.x <span class="op" style="color: #5E5E5E;">+</span> other.w<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb2-3">    distance_y <span class="op" style="color: #5E5E5E;">=</span> (<span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">+</span> <span class="va" style="color: #111111;">self</span>.h<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span>) <span class="op" style="color: #5E5E5E;">-</span> (other.y <span class="op" style="color: #5E5E5E;">+</span> other.h<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb2-4">    half_w <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.w<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">+</span> other.w<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb2-5">    half_h <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.h<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">+</span> other.h<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb2-6">    <span class="cf" style="color: #003B4F;">if</span> (<span class="bu" style="color: null;">abs</span>(distance_x) <span class="op" style="color: #5E5E5E;">&lt;</span> half_w):</span>
<span id="cb2-7">      <span class="cf" style="color: #003B4F;">if</span> (<span class="bu" style="color: null;">abs</span>(distance_y) <span class="op" style="color: #5E5E5E;">&lt;</span> half_h):</span>
<span id="cb2-8">        <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">True</span></span>
<span id="cb2-9">    <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">False</span></span></code></pre></div>
<p>Diese Methode und ihre Implementierung hatte ich schon im November 2019 für <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processingpy.html">Processing.py</a> und <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/p5js.html">P5.js</a> ausführlich <a href="http://blog.schockwellenreiter.de/2019/11/2019112002.html">vorgestellt</a> (im Anschluß an einen Beitrag zur <a href="http://blog.schockwellenreiter.de/2019/11/2019111103.html">Kollisionserkennung zweier Kreise</a>).</p>
<p>Ein Flieger, der Pizzas abschießen will, braucht natürlich Geschosse. Diese werden durch die Klasse <code>Missile()</code> repräsentiert:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;">class</span> Missile(Sprite):</span>
<span id="cb3-2">  </span>
<span id="cb3-3">  <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, _x, _y):</span>
<span id="cb3-4">    Sprite.<span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>)</span>
<span id="cb3-5">    <span class="va" style="color: #111111;">self</span>.img <span class="op" style="color: #5E5E5E;">=</span> loadImage(<span class="st" style="color: #20794D;">"missile.png"</span>)</span>
<span id="cb3-6">    <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">=</span> _x</span>
<span id="cb3-7">    <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">=</span> _y</span>
<span id="cb3-8">    <span class="va" style="color: #111111;">self</span>.w <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">19</span></span>
<span id="cb3-9">    <span class="va" style="color: #111111;">self</span>.h <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">7</span></span>
<span id="cb3-10">    <span class="va" style="color: #111111;">self</span>.speed <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb3-11">  </span>
<span id="cb3-12">  <span class="kw" style="color: #003B4F;">def</span> update(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb3-13">    <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">+=</span> <span class="va" style="color: #111111;">self</span>.speed</span>
<span id="cb3-14">    <span class="cf" style="color: #003B4F;">for</span> enemy <span class="kw" style="color: #003B4F;">in</span> enemies:</span>
<span id="cb3-15">      <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.collide_rect(enemy):</span>
<span id="cb3-16">        missiles.remove(<span class="va" style="color: #111111;">self</span>)</span>
<span id="cb3-17">        <span class="co" style="color: #5E5E5E;"># Enemy Explosion</span></span>
<span id="cb3-18">        e_x, e_y <span class="op" style="color: #5E5E5E;">=</span> enemy.x, enemy.y <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb3-19">        enemy.reset()</span>
<span id="cb3-20">        hit <span class="op" style="color: #5E5E5E;">=</span> Explosion(e_x, e_y)</span>
<span id="cb3-21">        hits.append(hit)</span>
<span id="cb3-22">    <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">&gt;=</span> width <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">20</span>:</span>
<span id="cb3-23">      missiles.remove(<span class="va" style="color: #111111;">self</span>)</span></code></pre></div>
<p>Diese Geschosse leben entweder so lange, bis sie rechts den Bildschirm verlassen oder auf eine Pizza treffen. Wenn solch ein Geschoß auf eine Pizza trifft, löst es eine Explosion aus. Diese besitzt natürlich eine eigene Klasse:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;">class</span> Explosion(Sprite):</span>
<span id="cb4-2">  </span>
<span id="cb4-3">  <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, _x, _y):</span>
<span id="cb4-4">    Sprite.<span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>)</span>
<span id="cb4-5">    <span class="va" style="color: #111111;">self</span>.img <span class="op" style="color: #5E5E5E;">=</span> loadImage(<span class="st" style="color: #20794D;">"explosion.png"</span>)</span>
<span id="cb4-6">    <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">=</span> _x</span>
<span id="cb4-7">    <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">=</span> _y</span>
<span id="cb4-8">    <span class="va" style="color: #111111;">self</span>.w <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">38</span></span>
<span id="cb4-9">    <span class="va" style="color: #111111;">self</span>.h <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">38</span></span>
<span id="cb4-10">    <span class="va" style="color: #111111;">self</span>.timer <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb4-11">    </span>
<span id="cb4-12">  <span class="kw" style="color: #003B4F;">def</span> update(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb4-13">    <span class="va" style="color: #111111;">self</span>.timer <span class="op" style="color: #5E5E5E;">-=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb4-14">    <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.timer <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb4-15">      hits.remove(<span class="va" style="color: #111111;">self</span>)</span></code></pre></div>
<p>Auch eine Explosion hat natürlich nur eine begrenzte Lebensdauer. Diese wird durch die Variable <code>timer</code> gesteuert, die von einem Startwert aus zurückgezählt wird. Wird der <code>timer</code> kleiner oder gleich Null, ist das Leben der Explosion beendet.</p>
<p>Die Instanzen der Klassen <code>Missile()</code> und <code>Explosion()</code> besitzen noch eine weitere Besonderheit. Sie werden nicht in der Hauptschleife des Programms initialisiert, sondern ein Geschoß wird von der Instanz der Klasse <code>Plane()</code> instanziert, wenn der Spieler die mittlere Maustaste drückt:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1">  <span class="kw" style="color: #003B4F;">def</span> fire(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb5-2">    <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.firecount <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb5-3">      missile <span class="op" style="color: #5E5E5E;">=</span> Missile(<span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">20</span>, <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">20</span>)</span>
<span id="cb5-4">      missiles.append(missile)</span>
<span id="cb5-5">      <span class="va" style="color: #111111;">self</span>.firecount <span class="op" style="color: #5E5E5E;">=</span> MAX_FIRECOUNT</span></code></pre></div>
<p>Um den Spieler am Dauerfeuer zu hindern, kann ein neues Geschoß erst dann wieder abgefeuert werden, wenn die Variable <code>firecount</code>, die nach jedem Schuß auf <code>MAX_FIRECOUNT</code>gesetzt und in jeder Programmschleife um Eins zurückgezählt wird, wieder kleiner oder gleich Null ist.</p>
<p>Und eine Explosion wird in dieser Version von der Klasse <code>Missile()</code> ausgelöst, wenn diese einen Gegner trifft<sup>1</sup>.</p>
<p><em>Last but not least</em> braucht ein Spiel natürlich Gegner. Diese werden durch die Klasse <code>Enemy()</code> repräsentiert, die beim derzeitigen Stand des Spiels nur pöse Pizzen erzeugt:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;">class</span> Enemy(Sprite):</span>
<span id="cb6-2">  </span>
<span id="cb6-3">  <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, _x, _y):</span>
<span id="cb6-4">    Sprite.<span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>)</span>
<span id="cb6-5">    <span class="va" style="color: #111111;">self</span>.img <span class="op" style="color: #5E5E5E;">=</span> loadImage(<span class="st" style="color: #20794D;">"pizza.png"</span>)</span>
<span id="cb6-6">    <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">=</span> _x</span>
<span id="cb6-7">    <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">=</span> _y</span>
<span id="cb6-8">    <span class="va" style="color: #111111;">self</span>.w <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">36</span></span>
<span id="cb6-9">    <span class="va" style="color: #111111;">self</span>.h <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">36</span></span>
<span id="cb6-10">    <span class="va" style="color: #111111;">self</span>.speed <span class="op" style="color: #5E5E5E;">=</span> randint(<span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">6</span>)</span>
<span id="cb6-11">    </span>
<span id="cb6-12">  <span class="kw" style="color: #003B4F;">def</span> reset(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb6-13">    <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">=</span> width <span class="op" style="color: #5E5E5E;">+</span> randint(<span class="dv" style="color: #AD0000;">30</span>, <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb6-14">    <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">=</span> randint(<span class="dv" style="color: #AD0000;">30</span>, height <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">30</span>)</span>
<span id="cb6-15">    <span class="va" style="color: #111111;">self</span>.speed <span class="op" style="color: #5E5E5E;">=</span> randint(<span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">6</span>)</span>
<span id="cb6-16">    </span>
<span id="cb6-17">  <span class="kw" style="color: #003B4F;">def</span> update(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb6-18">    <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">-=</span> <span class="va" style="color: #111111;">self</span>.speed</span>
<span id="cb6-19">    <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">30</span>:</span>
<span id="cb6-20">      <span class="va" style="color: #111111;">self</span>.reset()</span></code></pre></div>
<p>Die Klasse ist relativ einfach gehalten. Neu ist eigentlich nur die Methode <code>reset()</code>, die die Pizzas nach einem Abschuß oder nachdem sie den linken Bildschirmrand erreicht haben, wieder rechts außen auf eine zufällige Anfangsposition setzt.</p>
<p>Jetzt wie bei jeder neuen Lieferung der vollständige Programmcode, falls Ihr das Programm nachprogrammieren oder remixen wollt:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;">from</span> processing <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span>
<span id="cb7-2"><span class="im" style="color: #00769E;">from</span> random <span class="im" style="color: #00769E;">import</span> randint</span>
<span id="cb7-3"></span>
<span id="cb7-4">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">720</span>, <span class="dv" style="color: #AD0000;">520</span></span>
<span id="cb7-5">BG_WIDTH <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1664</span></span>
<span id="cb7-6">FPS <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">60</span></span>
<span id="cb7-7">ANIM <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">4</span>   <span class="co" style="color: #5E5E5E;"># Animation Cycle</span></span>
<span id="cb7-8">UPDOWN <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb7-9">MAX_FIRECOUNT <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">15</span></span>
<span id="cb7-10">NO_ENEMIES <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb7-11"></span>
<span id="cb7-12"><span class="co" style="color: #5E5E5E;">## Oberklasse für alles, was sich bewegt</span></span>
<span id="cb7-13"><span class="kw" style="color: #003B4F;">class</span> Sprite():</span>
<span id="cb7-14"></span>
<span id="cb7-15">  <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb7-16">    <span class="cf" style="color: #003B4F;">pass</span></span>
<span id="cb7-17"></span>
<span id="cb7-18">  <span class="kw" style="color: #003B4F;">def</span> display(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb7-19">    image(<span class="va" style="color: #111111;">self</span>.img, <span class="va" style="color: #111111;">self</span>.x, <span class="va" style="color: #111111;">self</span>.y)</span>
<span id="cb7-20">  </span>
<span id="cb7-21">  <span class="kw" style="color: #003B4F;">def</span> collide_rect(<span class="va" style="color: #111111;">self</span>, other):</span>
<span id="cb7-22">    distance_x <span class="op" style="color: #5E5E5E;">=</span> (<span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">+</span> <span class="va" style="color: #111111;">self</span>.w<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span>) <span class="op" style="color: #5E5E5E;">-</span> (other.x <span class="op" style="color: #5E5E5E;">+</span> other.w<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb7-23">    distance_y <span class="op" style="color: #5E5E5E;">=</span> (<span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">+</span> <span class="va" style="color: #111111;">self</span>.h<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span>) <span class="op" style="color: #5E5E5E;">-</span> (other.y <span class="op" style="color: #5E5E5E;">+</span> other.h<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb7-24">    half_w <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.w<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">+</span> other.w<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb7-25">    half_h <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.h<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">+</span> other.h<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb7-26">    <span class="cf" style="color: #003B4F;">if</span> (<span class="bu" style="color: null;">abs</span>(distance_x) <span class="op" style="color: #5E5E5E;">&lt;</span> half_w):</span>
<span id="cb7-27">      <span class="cf" style="color: #003B4F;">if</span> (<span class="bu" style="color: null;">abs</span>(distance_y) <span class="op" style="color: #5E5E5E;">&lt;</span> half_h):</span>
<span id="cb7-28">        <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">True</span></span>
<span id="cb7-29">    <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">False</span></span>
<span id="cb7-30"></span>
<span id="cb7-31"><span class="kw" style="color: #003B4F;">class</span> Background(Sprite):</span>
<span id="cb7-32">  </span>
<span id="cb7-33">  <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, _x, _y):</span>
<span id="cb7-34">    Sprite.<span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>)</span>
<span id="cb7-35">    <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">=</span> _x</span>
<span id="cb7-36">    <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">=</span> _y</span>
<span id="cb7-37">    <span class="va" style="color: #111111;">self</span>.start_x <span class="op" style="color: #5E5E5E;">=</span> _x</span>
<span id="cb7-38">    <span class="va" style="color: #111111;">self</span>.img <span class="op" style="color: #5E5E5E;">=</span> loadImage(<span class="st" style="color: #20794D;">"desert.png"</span>)</span>
<span id="cb7-39">    </span>
<span id="cb7-40">  <span class="kw" style="color: #003B4F;">def</span> update(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb7-41">    <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">-=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb7-42">    <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="op" style="color: #5E5E5E;">-</span>BG_WIDTH:</span>
<span id="cb7-43">      <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">=</span> BG_WIDTH</span>
<span id="cb7-44">  </span>
<span id="cb7-45"></span>
<span id="cb7-46"><span class="kw" style="color: #003B4F;">class</span> Missile(Sprite):</span>
<span id="cb7-47">  </span>
<span id="cb7-48">  <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, _x, _y):</span>
<span id="cb7-49">    Sprite.<span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>)</span>
<span id="cb7-50">    <span class="va" style="color: #111111;">self</span>.img <span class="op" style="color: #5E5E5E;">=</span> loadImage(<span class="st" style="color: #20794D;">"missile.png"</span>)</span>
<span id="cb7-51">    <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">=</span> _x</span>
<span id="cb7-52">    <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">=</span> _y</span>
<span id="cb7-53">    <span class="va" style="color: #111111;">self</span>.w <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">19</span></span>
<span id="cb7-54">    <span class="va" style="color: #111111;">self</span>.h <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">7</span></span>
<span id="cb7-55">    <span class="va" style="color: #111111;">self</span>.speed <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb7-56">  </span>
<span id="cb7-57">  <span class="kw" style="color: #003B4F;">def</span> update(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb7-58">    <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">+=</span> <span class="va" style="color: #111111;">self</span>.speed</span>
<span id="cb7-59">    <span class="cf" style="color: #003B4F;">for</span> enemy <span class="kw" style="color: #003B4F;">in</span> enemies:</span>
<span id="cb7-60">      <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.collide_rect(enemy):</span>
<span id="cb7-61">        missiles.remove(<span class="va" style="color: #111111;">self</span>)</span>
<span id="cb7-62">        <span class="co" style="color: #5E5E5E;"># Enemy Explosion</span></span>
<span id="cb7-63">        e_x, e_y <span class="op" style="color: #5E5E5E;">=</span> enemy.x, enemy.y <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb7-64">        enemy.reset()</span>
<span id="cb7-65">        hit <span class="op" style="color: #5E5E5E;">=</span> Explosion(e_x, e_y)</span>
<span id="cb7-66">        hits.append(hit)</span>
<span id="cb7-67">    <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">&gt;=</span> width <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">20</span>:</span>
<span id="cb7-68">      missiles.remove(<span class="va" style="color: #111111;">self</span>)</span>
<span id="cb7-69"></span>
<span id="cb7-70"><span class="kw" style="color: #003B4F;">class</span> Explosion(Sprite):</span>
<span id="cb7-71">  </span>
<span id="cb7-72">  <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, _x, _y):</span>
<span id="cb7-73">    Sprite.<span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>)</span>
<span id="cb7-74">    <span class="va" style="color: #111111;">self</span>.img <span class="op" style="color: #5E5E5E;">=</span> loadImage(<span class="st" style="color: #20794D;">"explosion.png"</span>)</span>
<span id="cb7-75">    <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">=</span> _x</span>
<span id="cb7-76">    <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">=</span> _y</span>
<span id="cb7-77">    <span class="va" style="color: #111111;">self</span>.w <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">38</span></span>
<span id="cb7-78">    <span class="va" style="color: #111111;">self</span>.h <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">38</span></span>
<span id="cb7-79">    <span class="va" style="color: #111111;">self</span>.timer <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb7-80">    </span>
<span id="cb7-81">  <span class="kw" style="color: #003B4F;">def</span> update(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb7-82">    <span class="va" style="color: #111111;">self</span>.timer <span class="op" style="color: #5E5E5E;">-=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb7-83">    <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.timer <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb7-84">      hits.remove(<span class="va" style="color: #111111;">self</span>)</span>
<span id="cb7-85">  </span>
<span id="cb7-86"><span class="kw" style="color: #003B4F;">class</span> Plane(Sprite):</span>
<span id="cb7-87">  </span>
<span id="cb7-88">  <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb7-89">    Sprite.<span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>)</span>
<span id="cb7-90">    <span class="va" style="color: #111111;">self</span>.images <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb7-91">    <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">2</span>):</span>
<span id="cb7-92">      img <span class="op" style="color: #5E5E5E;">=</span> loadImage(<span class="st" style="color: #20794D;">"planegreen_"</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="bu" style="color: null;">str</span>(i) <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">".png"</span>)</span>
<span id="cb7-93">      <span class="va" style="color: #111111;">self</span>.images.append(img)</span>
<span id="cb7-94">    <span class="va" style="color: #111111;">self</span>.img <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.images[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb7-95">    <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">75</span></span>
<span id="cb7-96">    <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">240</span></span>
<span id="cb7-97">    <span class="va" style="color: #111111;">self</span>.w <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">44</span></span>
<span id="cb7-98">    <span class="va" style="color: #111111;">self</span>.h <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">30</span></span>
<span id="cb7-99">    <span class="va" style="color: #111111;">self</span>.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"NONE"</span></span>
<span id="cb7-100">    <span class="va" style="color: #111111;">self</span>.frame <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb7-101">    <span class="va" style="color: #111111;">self</span>.ani <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">20</span></span>
<span id="cb7-102">    <span class="va" style="color: #111111;">self</span>.firecount <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb7-103">  </span>
<span id="cb7-104">  <span class="kw" style="color: #003B4F;">def</span> update(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb7-105">    <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"NONE"</span>:</span>
<span id="cb7-106">      <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb7-107">    <span class="cf" style="color: #003B4F;">elif</span> <span class="va" style="color: #111111;">self</span>.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"UP"</span>:</span>
<span id="cb7-108">      <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">20</span>:</span>
<span id="cb7-109">        <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">-=</span> UPDOWN</span>
<span id="cb7-110">    <span class="cf" style="color: #003B4F;">elif</span> <span class="va" style="color: #111111;">self</span>.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"DOWN"</span>:</span>
<span id="cb7-111">      <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">&lt;</span> height <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">20</span>:</span>
<span id="cb7-112">        <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">+=</span> UPDOWN</span>
<span id="cb7-113">    <span class="va" style="color: #111111;">self</span>.ani <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb7-114">    <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.ani <span class="op" style="color: #5E5E5E;">&gt;=</span> ANIM:</span>
<span id="cb7-115">      <span class="va" style="color: #111111;">self</span>.ani <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb7-116">      <span class="va" style="color: #111111;">self</span>.frame <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb7-117">      <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.frame <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">1</span>:</span>
<span id="cb7-118">        <span class="va" style="color: #111111;">self</span>.frame <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb7-119">    <span class="va" style="color: #111111;">self</span>.firecount <span class="op" style="color: #5E5E5E;">-=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb7-120">    <span class="va" style="color: #111111;">self</span>.img <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.images[<span class="va" style="color: #111111;">self</span>.frame]</span>
<span id="cb7-121">      </span>
<span id="cb7-122">  <span class="kw" style="color: #003B4F;">def</span> fire(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb7-123">    <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.firecount <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb7-124">      missile <span class="op" style="color: #5E5E5E;">=</span> Missile(<span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">20</span>, <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">20</span>)</span>
<span id="cb7-125">      missiles.append(missile)</span>
<span id="cb7-126">      <span class="va" style="color: #111111;">self</span>.firecount <span class="op" style="color: #5E5E5E;">=</span> MAX_FIRECOUNT</span>
<span id="cb7-127"></span>
<span id="cb7-128"><span class="kw" style="color: #003B4F;">class</span> Enemy(Sprite):</span>
<span id="cb7-129">  </span>
<span id="cb7-130">  <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, _x, _y):</span>
<span id="cb7-131">    Sprite.<span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>)</span>
<span id="cb7-132">    <span class="va" style="color: #111111;">self</span>.img <span class="op" style="color: #5E5E5E;">=</span> loadImage(<span class="st" style="color: #20794D;">"pizza.png"</span>)</span>
<span id="cb7-133">    <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">=</span> _x</span>
<span id="cb7-134">    <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">=</span> _y</span>
<span id="cb7-135">    <span class="va" style="color: #111111;">self</span>.w <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">36</span></span>
<span id="cb7-136">    <span class="va" style="color: #111111;">self</span>.h <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">36</span></span>
<span id="cb7-137">    <span class="va" style="color: #111111;">self</span>.speed <span class="op" style="color: #5E5E5E;">=</span> randint(<span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">6</span>)</span>
<span id="cb7-138">    </span>
<span id="cb7-139">  <span class="kw" style="color: #003B4F;">def</span> reset(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb7-140">    <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">=</span> width <span class="op" style="color: #5E5E5E;">+</span> randint(<span class="dv" style="color: #AD0000;">30</span>, <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb7-141">    <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">=</span> randint(<span class="dv" style="color: #AD0000;">30</span>, height <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">30</span>)</span>
<span id="cb7-142">    <span class="va" style="color: #111111;">self</span>.speed <span class="op" style="color: #5E5E5E;">=</span> randint(<span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">6</span>)</span>
<span id="cb7-143">    </span>
<span id="cb7-144">  <span class="kw" style="color: #003B4F;">def</span> update(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb7-145">    <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">-=</span> <span class="va" style="color: #111111;">self</span>.speed</span>
<span id="cb7-146">    <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">30</span>:</span>
<span id="cb7-147">      <span class="va" style="color: #111111;">self</span>.reset()</span>
<span id="cb7-148">    </span>
<span id="cb7-149"><span class="co" style="color: #5E5E5E;"># Listen</span></span>
<span id="cb7-150">backs <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb7-151">missiles <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb7-152">hits <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb7-153">enemies <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb7-154">    </span>
<span id="cb7-155"><span class="kw" style="color: #003B4F;">def</span> setup():</span>
<span id="cb7-156">  <span class="kw" style="color: #003B4F;">global</span> plane</span>
<span id="cb7-157">  size(WIDTH, HEIGHT)</span>
<span id="cb7-158">  frameRate(FPS)</span>
<span id="cb7-159">  <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"🍕 Pizza Plane Stage 3 🍕"</span>)</span>
<span id="cb7-160">  <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Linke Maustaste: Flieger fliegt nach oben."</span>)</span>
<span id="cb7-161">  <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Rechte Maustaste: Flieger fliegt nach unten."</span>)</span>
<span id="cb7-162">  <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Mittlere Maustaste: Feuern!"</span>)</span>
<span id="cb7-163">  <span class="co" style="color: #5E5E5E;"># Hintergrund</span></span>
<span id="cb7-164">  back1 <span class="op" style="color: #5E5E5E;">=</span> Background(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb7-165">  back2 <span class="op" style="color: #5E5E5E;">=</span> Background(BG_WIDTH, <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb7-166">  backs.append(back1)</span>
<span id="cb7-167">  backs.append(back2)</span>
<span id="cb7-168">  <span class="co" style="color: #5E5E5E;"># Den Flieger initialisieren</span></span>
<span id="cb7-169">  plane <span class="op" style="color: #5E5E5E;">=</span> Plane()</span>
<span id="cb7-170">  <span class="co" style="color: #5E5E5E;"># Die Gegner (Pizzas)</span></span>
<span id="cb7-171">  <span class="cf" style="color: #003B4F;">for</span> _ <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(NO_ENEMIES):</span>
<span id="cb7-172">    pizza <span class="op" style="color: #5E5E5E;">=</span> Enemy(width <span class="op" style="color: #5E5E5E;">+</span> randint(<span class="dv" style="color: #AD0000;">30</span>, <span class="dv" style="color: #AD0000;">100</span>), randint(<span class="dv" style="color: #AD0000;">30</span>, height <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">30</span>))</span>
<span id="cb7-173">    enemies.append(pizza)</span>
<span id="cb7-174">  </span>
<span id="cb7-175"><span class="kw" style="color: #003B4F;">def</span> draw():</span>
<span id="cb7-176">  background(<span class="dv" style="color: #AD0000;">231</span>, <span class="dv" style="color: #AD0000;">229</span>, <span class="dv" style="color: #AD0000;">226</span>)   <span class="co" style="color: #5E5E5E;"># Wüstenhimmel</span></span>
<span id="cb7-177">  <span class="cf" style="color: #003B4F;">for</span> back <span class="kw" style="color: #003B4F;">in</span> backs:</span>
<span id="cb7-178">    back.update()</span>
<span id="cb7-179">    back.display()</span>
<span id="cb7-180">  plane.update()</span>
<span id="cb7-181">  plane.display()</span>
<span id="cb7-182">  <span class="cf" style="color: #003B4F;">for</span> missile <span class="kw" style="color: #003B4F;">in</span> missiles:</span>
<span id="cb7-183">    missile.update()</span>
<span id="cb7-184">    missile.display()</span>
<span id="cb7-185">  <span class="cf" style="color: #003B4F;">for</span> enemy <span class="kw" style="color: #003B4F;">in</span> enemies:</span>
<span id="cb7-186">    enemy.update()</span>
<span id="cb7-187">    enemy.display()</span>
<span id="cb7-188">  <span class="cf" style="color: #003B4F;">for</span> hit <span class="kw" style="color: #003B4F;">in</span> hits:</span>
<span id="cb7-189">    hit.update()</span>
<span id="cb7-190">    hit.display()</span>
<span id="cb7-191">  </span>
<span id="cb7-192"><span class="kw" style="color: #003B4F;">def</span> mousePressed():</span>
<span id="cb7-193">  <span class="cf" style="color: #003B4F;">if</span> mouseButton <span class="op" style="color: #5E5E5E;">==</span> LEFT:</span>
<span id="cb7-194">    plane.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"UP"</span></span>
<span id="cb7-195">  <span class="cf" style="color: #003B4F;">elif</span> mouseButton <span class="op" style="color: #5E5E5E;">==</span> RIGHT:</span>
<span id="cb7-196">    plane.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"DOWN"</span></span>
<span id="cb7-197">  <span class="cf" style="color: #003B4F;">elif</span> mouseButton <span class="op" style="color: #5E5E5E;">==</span> CENTER:</span>
<span id="cb7-198">    plane.fire()</span>
<span id="cb7-199"></span>
<span id="cb7-200"><span class="kw" style="color: #003B4F;">def</span> mouseReleased():</span>
<span id="cb7-201">  plane.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"NONE"</span></span>
<span id="cb7-202"></span>
<span id="cb7-203">run()</span></code></pre></div>
<p>Mit etwa zweihundert Zeilen ist das Programm, das nun in einer spielbaren Version vorliegt, immer noch recht kompakt. Den <a href="https://github.com/kantel/trinket/tree/main/pizzaplane/stage3">Quellcode und die Assets</a> gibt es einmal auch in meinem GitHub-Repositorium und dann natürlich auch <a href="https://trinket.io/python/3ae6ef087c">als Trinket</a> – das macht einen Remix noch einfacher.</p>
<p>Und natürlich darf und will ich die <em>Credits</em> nicht vergessen: Das <a href="https://opengameart.org/content/seamless-desert-background-in-parts">Hintergrundbild</a> stammt vom User »<a href="https://opengameart.org/users/pwl">PWL</a>«, der es auf OpenGameArt.org zur freien Vewendung (<a href="http://creativecommons.org/publicdomain/zero/1.0/">CC0</a>) hochgeladen hat. Den <a href="https://opengameart.org/content/free-plane-sprite">grünen Flieger</a> von »<a href="https://opengameart.org/users/pzuh">pzUH</a>« gibt es als <a href="http://creativecommons.org/publicdomain/zero/1.0/">Public Domain</a> ebenfalls auf OpenGameArt.org. Und das Bild der Pizzas, der Geschosse und der Explosion habe ich den freien (<a href="https://creativecommons.org/licenses/by/4.0/">CC-BY 4.0</a>) <a href="https://twemoji.twitter.com/">Twemojis von Twitter</a> entnommen und mit der <a href="https://de.wikipedia.org/wiki/GraphicConverter">Bildverarbeitung meines Vertrauens</a> ein wenig auf Vordermann gebracht.</p>
<p>Das Programm ist noch nicht komplett. Auf jeden Fall will ich noch eine Kollision der Pizzas mit dem Spieler implementieren, bei der der Spieler Lebenspunkte verliert. Dann möchte ich noch eine Anzeige des Punktestands implementieren. Hierfür muß ich aber erst noch herausbekommen, wie man in Trinket Fonts als Assets installiert. <em>Still digging!</em></p>
<section id="die-bisherigen-beiträge-zu-dem-kleinen-grünen-flieger-im-schockwellenreiter" class="level3">
<h3 class="anchored" data-anchor-id="die-bisherigen-beiträge-zu-dem-kleinen-grünen-flieger-im-schockwellenreiter">Die bisherigen Beiträge zu dem kleinen, grünen Flieger im <em>Schockwellenreiter</em>:</h3>
<section id="als-pygame-projekt" class="level4">
<h4 class="anchored" data-anchor-id="als-pygame-projekt">1. Als Pygame-Projekt:</h4>
<ol type="1">
<li>Auf ein neues: <a href="https://kantel.github.io/posts/20221222501_pizzaplane1_pygame/">Pizzaplane in Pygame</a> (Stage 1)</li>
<li><a href="https://kantel.github.io/posts/20221222601_pizzaplane2_pygame/">Jetzt mit Killer-Pizzas</a>: Pizzaplane in Pygame (Stage 2)</li>
<li>Pizzaplane Stage 3: <a href="https://kantel.github.io/posts/2022123101_pizzaplane3/">Jetzt mit Punktestand</a>!</li>
<li>Pizzaplane Stage 4 – <a href="https://kantel.github.io/posts/2023010102_pizzaplane4/">jetzt mit grünem Spieler</a></li>
</ol>
</section>
<section id="exkurse-immer-noch-pygame" class="level4">
<h4 class="anchored" data-anchor-id="exkurse-immer-noch-pygame">2. Exkurse (immer noch Pygame)</h4>
<ol start="5" type="1">
<li>Exkurs 1: <a href="https://kantel.github.io/posts/2023010701_pygame_oop/">Pygame objektorientiert</a></li>
<li>Exkurs 2: <a href="https://kantel.github.io/posts/2023011001_pizzaplane_trailer/">Pizza Plane Trailer</a> – ebenfalls objektorientiert</li>
</ol>
</section>
<section id="und-nun-als-trinket-mit-einer-processing-python-variante" class="level4">
<h4 class="anchored" data-anchor-id="und-nun-als-trinket-mit-einer-processing-python-variante">3. Und nun als Trinket (mit einer Processing (Python) Variante)</h4>
<ol start="7" type="1">
<li><a href="https://kantel.github.io/posts/2023032301_pizza_plane_oop_trinket_stage_1/">Pizza Plane OOP</a> (Jetzt in Trinket)</li>
<li>Weiter mit dem kleinen, grünen Flieger auf Trinket: Jetzt mit Pizzas</li>
</ol>
<p>Wird fortgesetzt …</p>


</section>
</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Fußnoten</h2>

<ol>
<li id="fn1"><p>In einer späteren Variante können Explosionen zum Beispiel auch von den Gegnern (Pizzas) ausgelöst werden, wenn diese mit dem Spieler kollidieren.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Python</category>
  <category>Processing</category>
  <category>Spieleprogrammierung</category>
  <category>Trinket</category>
  <guid>https://kantel.github.io/posts/2023032602_pizza_plane_with_pizzas/index.html</guid>
  <pubDate>Sun, 26 Mar 2023 17:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023032602_pizza_plane_with_pizzas/images/pizzaplanestage3.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Zeitumstellung: Summertime</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023032601_zeitumstellung/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52770341521/"><img src="https://kantel.github.io/posts/2023032601_zeitumstellung/images/juliusstrasseregen-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Guten Morgen! Habt Ihr auch alle brav Eure Uhren <del>vor</del> <del>zurück</del> umgestellt? Zweimal im Jahr das gleiche, gesundheitsschädliche Ritual: Die Umstellung auf die euphemistisch so genannte »Sommerzeit« im Frühjahr (in dem uns eine Stunde Schlaf geklaut wird – der Jetlag des kleinen Mannes) und dann im Herbst wieder zurück auf die »Normalzeit« (in weiten Teilen Europas ist das die Mitteleuropäische Zeit – MEZ).</p>
<p>Der Sinn dieser Maßnahme ist gelinde gesagt mehr als zweifelhaft. Denn die erhoffte Energieeinsparung tritt nicht ein – was abends an Licht gespart wird, wird morgens an Heizung wieder verpulvert. Daher hat die Europäische Union nach einer 2018 mit viel Tam-Tam durchgeführten Bürgerbefragung (die großen Volksparteien wollten bei der Europawahl 2019 wiedergewählt werden) versprochen, diese ungeliebte Umstellung spätestens 2021 abzuschaffen.</p>
<p>Jetzt haben wir 2023 und passiert ist nichts. Und es wird auch in den nächsten Jahren nichts passieren. Denn die EU-Politikerinnen und -Politier üben sich in dem, was sie am Besten können: In Bedenkenträgerei und Uneinigkeit. So bricht angeblich die gesamte europäische Wirtschaft und Infrastruktur zusammen, wenn in Europa wieder unterschiedliche Zeitzonen existieren. Klar doch, die Bevölkerung der USA nagt am Hungertuch, weil das Land in vier Zeitzonen aufgeteilt ist (sechs, wenn man Alaska und Hawaii hinzunimmt). Und in diesen Zeitzonen gibt es Staaten mit Sommerzeit und Staaten ohne. Da muß ein Land ja im Chaos versinken.</p>
<p>Im Ernst: Wenn die EU nicht einmal in der Lage ist, solch ein kleines Problem wie die Abschaffung der Zeitumstellung in den Griff zu bekommen, wie soll sie dann mit wirklichen Problemen wie zum Beispiel die Klimakrise fertig werden? Sie kann ja nicht einmal die Probleme lösen, die ohne die EU gar nicht erst existieren würden.</p>
<p>Und noch etwas zum Abschluß: Die beste Eselsbrücke für die Frage, wann die Uhr vor- oder zurückgestellt wird, fand ich auf Fratzenbuch: Zweimal im Jahr stellt der Hipster seine Uhr um: Im Frühjahr vor die Stube in den Flur und im Herbst wieder zurück. <em>(Photo (<a href="http://creativecommons.org/licenses/by-nc-nd/2.0/">cc</a>): <a href="http://cognitiones.kantel-chaos-team.de/cv.html">Jörg Kantel</a>)</em></p>



 ]]></description>
  <category>Politik</category>
  <guid>https://kantel.github.io/posts/2023032601_zeitumstellung/index.html</guid>
  <pubDate>Sun, 26 Mar 2023 15:20:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023032601_zeitumstellung/images/juliusstrasseregen.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Frogger: Ein Spiel – vier Implementierungen</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023032301_vier_mal_frogger/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52768661945/"><img src="https://kantel.github.io/posts/2023032301_vier_mal_frogger/images/froggerpygame-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p><a href="https://de.wikipedia.org/wiki/Frogger">Frogger</a> ist ein Videospiel-Klassiker, der erstmals 1981 für Spielhallen veröffentlicht wurde. Später wurde er auch auf Heimcomputer wie den Commodore C64, den Sinclair ZX Spectrum, den IBM PC, den Apple II und auf viele Spielekonsolen portiert und es besitzt bis heute große Popularität. In dem Spiel geht es darum, einen Frosch sicher über eine stark befahrene Straße und anschließend über einen Fluß zu führen. Auf der fünfspurigen Straße muß er verschiedenen Kraftfahrzeugen ausweichen. Da der Frosch nicht schwimmen kann, überquert er den Fluß, indem er Schildkröten und treibende Baumstämme als Plattformen nutzt. Ziel ist es, eine der sicheren Buchten am oberen Rand des Bildschirms zu erreichen.</p>
<p>In den Video-Tutorials, die ich am heutigen Freitag vorstelle, damit Ihr – wenn Euch an dem zu erwartenden, verregneten Wochenende die Langeweile bedrohen sollte und Ihr in die Kirchen rennen wollt – etwas Besseres vorhabt, wird Frogger für vier verschiedene Plattformen implementiert: Einmal in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processing.html">Processing (Java)</a>, dann in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/turtlepython.html">Pythons Turtle</a>, schließlich in <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/godot.html">Godot</a> und <em>last but not least</em> stelle ich auch noch eine Version für <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a> vor.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/giXV6xErw0Y" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Den Anfang macht jedoch <em>Daniel Shiffman</em>, der – vergnügt wie immer – in seiner 72.&nbsp;Coding Challenge in vier Teilen eine graphisch minimalistische Frogger-Variante in Processing (Java) implementiert (<a href="https://www.youtube.com/watch?v=giXV6xErw0Y">Teil 1</a>, <a href="https://www.youtube.com/watch?v=06-ZvYmSeus">Teil 2</a>, <a href="https://www.youtube.com/watch?v=hk326ZHlENQ">Teil 3</a> und <a href="https://www.youtube.com/watch?v=c6WdJltqEtM">Teil 4 (Refactoring)</a>). Der Vorteil dieses Minimalismus liegt darin, daß die Programmiererin oder der Programmierer sich auf die Spielemechanik konzentrieren kann, ohne von dem graphischen Brimborium drumherum abelenkt zu werden.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/CDM4U5A7BX8" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Wenn in diesem <del>Blog</del> Kritzelheft ein Tutorial von <em>Daniel Shiffman</em> auftaucht, dann ist meist auch <em>Christian Thompson</em> (aka <em>TokyoEdtech</em>) nicht weit. Der Mann, der Unglaubliches mit Pythons Turtle anstellt, hat natürlich auch (s)eine Frogger-Version im Portfolio: In <a href="https://www.youtube.com/playlist?list=PLlEgNdBJEO-lR6IChlbqU1E00vpN3GBM6">fünf je knapp einstündigen Live-Coding-Videos</a> zeigt er mir und Euch, wie er Pythons Schildkröte überredet hat, Frogger zu spielen (mit allem graphischen Drum und Dran).</p>
<p>Den <a href="https://github.com/wynand1004/Projects/tree/master/Frogger">Quellcode mit allen Assets</a> findet Ihr in seinem GitHub-Repositorium.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/P5_hnig7n5w" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Sollte es mich überkommen und ich doch einmal etwas mit Godot und GDScript anstellen zu wollen (was ich immer noch nicht ausschließe, denn Godot scheint eine vielversprechende Spiele-Engine zu sein), dann ist sicher <a href="https://www.youtube.com/watch?v=P5_hnig7n5w">dieses Tutorial</a>, das in dreieinhalb Stunden mit Hilfe einer Frogger-Variante, die starke Anleihen an Sci-Fi-Klassikern genommen hat, in die 2D-Programmierung mit Godot einführt, ein vielversprechender Einstieg.</p>
<p>Ich habe mir jedenfalls die erste halbe Stunde mal reingezogen und hatte nicht nur viel Spaß daran, sondern auch das Gefühl, etwas gelernt zu haben.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/KQz6lXI_5fI" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p><strong>War sonst noch was?</strong> Ach ja, für Pygame gibt es auch noch ein 45-minütiges Tutorial: »<a href="https://www.youtube.com/watch?v=KQz6lXI_5fI">Creating a Basic Frogger in Pygame</a>«, dieses Mal wieder mit der »klassischen« Graphik. Und auch wie Ihr an die Assets kommt, wird in dem Video gezeigt.</p>



 ]]></description>
  <category>Spieleprogrammierung</category>
  <category>Processing</category>
  <category>Python</category>
  <category>Pygame</category>
  <category>Godot</category>
  <guid>https://kantel.github.io/posts/2023032301_vier_mal_frogger/index.html</guid>
  <pubDate>Fri, 24 Mar 2023 16:45:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023032301_vier_mal_frogger/images/froggerturtle.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Pizza Plane OOP (Jetzt in Trinket)</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023032301_pizza_plane_oop_trinket_stage_1/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52764154962/"><img src="https://kantel.github.io/posts/2023032301_pizza_plane_oop_trinket_stage_1/images/pizzaplanetrinketstage2-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Nein, ich habe <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/trinket.html">Trinket</a> nicht aufgegeben. Denn meine Freude daran, Python (Spiele-) Skripte im Browser ausführen zu können, ist einfach zu groß, um das Teil wegen eines <a href="https://kantel.github.io/posts/2023031101_trinket_turtle_ontimer/">kleinen Bugs</a> in einem nicht dokumentierten Feature einfach abzuschreiben. Daher habe ich gestern – wie <a href="https://kantel.github.io/posts/2023031703_gamedev_web_videotutorials/">angekündigt</a> – damit begonnen, meinen kleinen Flieger im Kampf gegen die pösen Pizzas der pöseren Meloni von <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a> nach Trinket (<a href="https://kantel.github.io/posts/2023021601_my_first_trinket/">in der Processing.py-Variante</a>) zu portieren. Und der Port soll eine <a href="https://kantel.github.io/posts/2023010701_pygame_oop/">komplett objektorientert</a> impementiert werden.</p>
<p>In einer ersten Fassung habe ich den kleinen grünen Flieger vor einem endlos scrollenden Hintergrund schweben lassen. Während ich es in der Pygame Version schon genial fand, wie majestätisch der Flieger vor dem Hintergrund daherschwebt, könnt auch Ihr es als Trinket jetzt im Browser sehen:</p>
<iframe src="https://trinket.io/embed/python/59b16b155f?outputOnly=true&amp;runOption=run&amp;start=result" width="95%" height="700" frameborder="0" marginwidth="0" marginheight="0" allowfullscreen="">
</iframe>
<p>Da die Pfeiltasten im Browser problematisch sind (sie werden in der Regel zum Scrollen des Fensters mißbraucht), erfolgt die Interaktion des Spielers mir dem Flieger mit den Maustasten. Wenn die Maus über dem Spielefenster ist, bewegt sich der Flieger beim Klicken mit der linken Maustaste nach oben und mit der rechten nach unten<sup>1</sup>.</p>
<p>Momentan besteht das Skript aus zwei Klassen: Einmal die Klasse <code>Background()</code>. Die ist für den gemächlich vorbeiziehenden, endlos scrollenden Hintergrund verantwortlich:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;">class</span> Background():</span>
<span id="cb1-2">  </span>
<span id="cb1-3">  <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, _x, _y):</span>
<span id="cb1-4">    <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">=</span> _x</span>
<span id="cb1-5">    <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">=</span> _y</span>
<span id="cb1-6">    <span class="va" style="color: #111111;">self</span>.start_x <span class="op" style="color: #5E5E5E;">=</span> _x</span>
<span id="cb1-7">    <span class="va" style="color: #111111;">self</span>.img <span class="op" style="color: #5E5E5E;">=</span> loadImage(<span class="st" style="color: #20794D;">"desert.png"</span>)</span>
<span id="cb1-8">    </span>
<span id="cb1-9">  <span class="kw" style="color: #003B4F;">def</span> update(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-10">    <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">-=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb1-11">    <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="op" style="color: #5E5E5E;">-</span>BG_WIDTH:</span>
<span id="cb1-12">      <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">=</span> BG_WIDTH</span>
<span id="cb1-13">  </span>
<span id="cb1-14">  <span class="kw" style="color: #003B4F;">def</span> display(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-15">    image(<span class="va" style="color: #111111;">self</span>.img, <span class="va" style="color: #111111;">self</span>.x, <span class="va" style="color: #111111;">self</span>.y)</span></code></pre></div>
<p>Die Klasse benötigt zwei Instanzen, die hintereinander am Spieler vorbeiziehen. Damit sie nicht überlappen, werden sie wie folgt initialisiert:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1">  back1 <span class="op" style="color: #5E5E5E;">=</span> Background(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb2-2">  back2 <span class="op" style="color: #5E5E5E;">=</span> Background(BG_WIDTH, <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb2-3">  backs.append(back1)</span>
<span id="cb2-4">  backs.append(back2)</span></code></pre></div>
<p>Wenn eine Instanz rechts den Bildschirm verläßt, wird sie links an der anderen Instanz wieder »angeklebt«. Da das <a href="https://opengameart.org/content/seamless-desert-background-in-parts">Hintergrundbild</a> von »PWL« (<a href="http://creativecommons.org/publicdomain/zero/1.0/">CC0</a>) an beiden Enden nahtlos ineinander übergeht, entsteht so der Eindruck eines endlos vorbeigleitenden Hintergrunds.</p>
<p>Die zweite Klasse ist die des Fliegers (<code>Plane()</code>), dessen Animation aus zwei Einzelbildern erzeugt wird:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;">class</span> Plane():</span>
<span id="cb3-2">  </span>
<span id="cb3-3">  <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb3-4">    <span class="va" style="color: #111111;">self</span>.images <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb3-5">    <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">2</span>):</span>
<span id="cb3-6">      img <span class="op" style="color: #5E5E5E;">=</span> loadImage(<span class="st" style="color: #20794D;">"planegreen_"</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="bu" style="color: null;">str</span>(i) <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">".png"</span>)</span>
<span id="cb3-7">      <span class="va" style="color: #111111;">self</span>.images.append(img)</span>
<span id="cb3-8">    <span class="va" style="color: #111111;">self</span>.img <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.images[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb3-9">    <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">75</span></span>
<span id="cb3-10">    <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">240</span></span>
<span id="cb3-11">    <span class="va" style="color: #111111;">self</span>.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"NONE"</span></span>
<span id="cb3-12">    <span class="va" style="color: #111111;">self</span>.frame <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb3-13">    <span class="va" style="color: #111111;">self</span>.ani <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">20</span></span>
<span id="cb3-14">  </span>
<span id="cb3-15">  <span class="kw" style="color: #003B4F;">def</span> update(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb3-16">    <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"NONE"</span>:</span>
<span id="cb3-17">      <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb3-18">    <span class="cf" style="color: #003B4F;">elif</span> <span class="va" style="color: #111111;">self</span>.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"UP"</span>:</span>
<span id="cb3-19">      <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">20</span>:</span>
<span id="cb3-20">        <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">-=</span> UPDOWN</span>
<span id="cb3-21">    <span class="cf" style="color: #003B4F;">elif</span> <span class="va" style="color: #111111;">self</span>.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"DOWN"</span>:</span>
<span id="cb3-22">      <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">&lt;</span> height <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">40</span>:</span>
<span id="cb3-23">        <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">+=</span> UPDOWN</span>
<span id="cb3-24">    <span class="va" style="color: #111111;">self</span>.ani <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb3-25">    <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.ani <span class="op" style="color: #5E5E5E;">&gt;=</span> ANIM:</span>
<span id="cb3-26">      <span class="va" style="color: #111111;">self</span>.ani <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb3-27">      <span class="va" style="color: #111111;">self</span>.frame <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb3-28">      <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.frame <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">1</span>:</span>
<span id="cb3-29">        <span class="va" style="color: #111111;">self</span>.frame <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb3-30">    <span class="va" style="color: #111111;">self</span>.img <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.images[<span class="va" style="color: #111111;">self</span>.frame]</span>
<span id="cb3-31">      </span>
<span id="cb3-32">  <span class="kw" style="color: #003B4F;">def</span> display(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb3-33">    image(<span class="va" style="color: #111111;">self</span>.img, <span class="va" style="color: #111111;">self</span>.x, <span class="va" style="color: #111111;">self</span>.y)</span></code></pre></div>
<p>Das Bild des Fliegers, das ich <a href="https://kantel.github.io/posts/2023010102_pizzaplane4/">hier in das Projekt eingeführt hatte</a>, ist ebenfalls frei verwendbar (auch <a href="http://creativecommons.org/publicdomain/zero/1.0/">CC0</a>) und ist aus der Sammlung »<a href="https://opengameart.org/content/free-plane-sprite">Free Plane Sprite</a>« (ebenfalls von OpenGameArt.org). Der Pixelartist dieser Bildchen, <em>Zuhria Alfitra</em>, betreibt die Seite <a href="https://www.gameart2d.com/">Game Art 2D</a>, auf der er noch weitere Sprites und Tiles anbietet (allerdings sind einige der Angebote nicht frei, sondern nur kommerziell gegen einen Obolus zu nutzen – beachtet daher bitte das Kleingedruckte).</p>
<p>Zum Abschluß wie immer der vollständige Quellcode, damit Ihr das Programm nachvollziehen und remixen könnt (es steht unter der freien MIT-Lizenz, macht also damit, was Ihr wollt):</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;">from</span> processing <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span>
<span id="cb4-2"></span>
<span id="cb4-3">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">720</span>, <span class="dv" style="color: #AD0000;">520</span></span>
<span id="cb4-4">BG_WIDTH <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1664</span></span>
<span id="cb4-5">FPS <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">60</span></span>
<span id="cb4-6">ANIM <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">4</span>   <span class="co" style="color: #5E5E5E;"># Animation Cycle</span></span>
<span id="cb4-7">UPDOWN <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb4-8"></span>
<span id="cb4-9"><span class="kw" style="color: #003B4F;">class</span> Background():</span>
<span id="cb4-10">  </span>
<span id="cb4-11">  <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, _x, _y):</span>
<span id="cb4-12">    <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">=</span> _x</span>
<span id="cb4-13">    <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">=</span> _y</span>
<span id="cb4-14">    <span class="va" style="color: #111111;">self</span>.start_x <span class="op" style="color: #5E5E5E;">=</span> _x</span>
<span id="cb4-15">    <span class="va" style="color: #111111;">self</span>.img <span class="op" style="color: #5E5E5E;">=</span> loadImage(<span class="st" style="color: #20794D;">"desert.png"</span>)</span>
<span id="cb4-16">    </span>
<span id="cb4-17">  <span class="kw" style="color: #003B4F;">def</span> update(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb4-18">    <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">-=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb4-19">    <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="op" style="color: #5E5E5E;">-</span>BG_WIDTH:</span>
<span id="cb4-20">      <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">=</span> BG_WIDTH</span>
<span id="cb4-21">  </span>
<span id="cb4-22">  <span class="kw" style="color: #003B4F;">def</span> display(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb4-23">    image(<span class="va" style="color: #111111;">self</span>.img, <span class="va" style="color: #111111;">self</span>.x, <span class="va" style="color: #111111;">self</span>.y)</span>
<span id="cb4-24"></span>
<span id="cb4-25"><span class="kw" style="color: #003B4F;">class</span> Plane():</span>
<span id="cb4-26">  </span>
<span id="cb4-27">  <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb4-28">    <span class="va" style="color: #111111;">self</span>.images <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb4-29">    <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">2</span>):</span>
<span id="cb4-30">      img <span class="op" style="color: #5E5E5E;">=</span> loadImage(<span class="st" style="color: #20794D;">"planegreen_"</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="bu" style="color: null;">str</span>(i) <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">".png"</span>)</span>
<span id="cb4-31">      <span class="va" style="color: #111111;">self</span>.images.append(img)</span>
<span id="cb4-32">    <span class="va" style="color: #111111;">self</span>.img <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.images[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb4-33">    <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">75</span></span>
<span id="cb4-34">    <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">240</span></span>
<span id="cb4-35">    <span class="va" style="color: #111111;">self</span>.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"NONE"</span></span>
<span id="cb4-36">    <span class="va" style="color: #111111;">self</span>.frame <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb4-37">    <span class="va" style="color: #111111;">self</span>.ani <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">20</span></span>
<span id="cb4-38">  </span>
<span id="cb4-39">  <span class="kw" style="color: #003B4F;">def</span> update(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb4-40">    <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"NONE"</span>:</span>
<span id="cb4-41">      <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb4-42">    <span class="cf" style="color: #003B4F;">elif</span> <span class="va" style="color: #111111;">self</span>.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"UP"</span>:</span>
<span id="cb4-43">      <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">20</span>:</span>
<span id="cb4-44">        <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">-=</span> UPDOWN</span>
<span id="cb4-45">    <span class="cf" style="color: #003B4F;">elif</span> <span class="va" style="color: #111111;">self</span>.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"DOWN"</span>:</span>
<span id="cb4-46">      <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">&lt;</span> height <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">40</span>:</span>
<span id="cb4-47">        <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">+=</span> UPDOWN</span>
<span id="cb4-48">    <span class="va" style="color: #111111;">self</span>.ani <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb4-49">    <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.ani <span class="op" style="color: #5E5E5E;">&gt;=</span> ANIM:</span>
<span id="cb4-50">      <span class="va" style="color: #111111;">self</span>.ani <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb4-51">      <span class="va" style="color: #111111;">self</span>.frame <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb4-52">      <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.frame <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">1</span>:</span>
<span id="cb4-53">        <span class="va" style="color: #111111;">self</span>.frame <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb4-54">    <span class="va" style="color: #111111;">self</span>.img <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.images[<span class="va" style="color: #111111;">self</span>.frame]</span>
<span id="cb4-55">      </span>
<span id="cb4-56">  <span class="kw" style="color: #003B4F;">def</span> display(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb4-57">    image(<span class="va" style="color: #111111;">self</span>.img, <span class="va" style="color: #111111;">self</span>.x, <span class="va" style="color: #111111;">self</span>.y)</span>
<span id="cb4-58">    </span>
<span id="cb4-59"><span class="co" style="color: #5E5E5E;"># Arrays</span></span>
<span id="cb4-60">backs <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb4-61">    </span>
<span id="cb4-62"><span class="kw" style="color: #003B4F;">def</span> setup():</span>
<span id="cb4-63">  <span class="kw" style="color: #003B4F;">global</span> plane</span>
<span id="cb4-64">  size(WIDTH, HEIGHT)</span>
<span id="cb4-65">  frameRate(FPS)</span>
<span id="cb4-66">  <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"🍕 Pizza Plane Stage 2 🍕"</span>)</span>
<span id="cb4-67">  <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Linke Maustaste: Flieger fliegt nach oben."</span>)</span>
<span id="cb4-68">  <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Rechte Maustaste: Flieger fliegt nach unten."</span>)</span>
<span id="cb4-69">  plane <span class="op" style="color: #5E5E5E;">=</span> Plane()</span>
<span id="cb4-70">  back1 <span class="op" style="color: #5E5E5E;">=</span> Background(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb4-71">  back2 <span class="op" style="color: #5E5E5E;">=</span> Background(BG_WIDTH, <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb4-72">  backs.append(back1)</span>
<span id="cb4-73">  backs.append(back2)</span>
<span id="cb4-74">  </span>
<span id="cb4-75"><span class="kw" style="color: #003B4F;">def</span> draw():</span>
<span id="cb4-76">  background(<span class="dv" style="color: #AD0000;">231</span>, <span class="dv" style="color: #AD0000;">229</span>, <span class="dv" style="color: #AD0000;">226</span>)   <span class="co" style="color: #5E5E5E;"># Wüstenhimmel</span></span>
<span id="cb4-77">  <span class="cf" style="color: #003B4F;">for</span> back <span class="kw" style="color: #003B4F;">in</span> backs:</span>
<span id="cb4-78">    back.update()</span>
<span id="cb4-79">    back.display()</span>
<span id="cb4-80">  plane.update()</span>
<span id="cb4-81">  plane.display()</span>
<span id="cb4-82">  </span>
<span id="cb4-83"><span class="kw" style="color: #003B4F;">def</span> mousePressed():</span>
<span id="cb4-84">  <span class="cf" style="color: #003B4F;">if</span> mouseButton <span class="op" style="color: #5E5E5E;">==</span> LEFT:</span>
<span id="cb4-85">    plane.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"UP"</span></span>
<span id="cb4-86">  <span class="cf" style="color: #003B4F;">elif</span> mouseButton <span class="op" style="color: #5E5E5E;">==</span> RIGHT:</span>
<span id="cb4-87">    plane.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"DOWN"</span></span>
<span id="cb4-88"></span>
<span id="cb4-89"><span class="kw" style="color: #003B4F;">def</span> mouseReleased():</span>
<span id="cb4-90">  plane.<span class="bu" style="color: null;">dir</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"NONE"</span></span>
<span id="cb4-91"></span>
<span id="cb4-92">run()</span></code></pre></div>
<p>Den Quellcode und sämtliche Assets findet Ihr sowohl in <a href="https://github.com/kantel/trinket/tree/main/pizzaplane/stage2">meinem GitHub-Repositorium</a> wie auch als <a href="https://trinket.io/python/59b16b155f">Trinket</a> (das macht einen Remix noch einfacher). Und natürlich plane ich, dieses Projekt noch weiterzuführen und zu erweitern. Bisher gibt es dazu diese Beiträge im <em>Schockwellenreiter</em>:</p>
<section id="als-pygame-projekt" class="level4">
<h4 class="anchored" data-anchor-id="als-pygame-projekt">1. Als Pygame-Projekt:</h4>
<ol type="1">
<li>Auf ein neues: <a href="https://kantel.github.io/posts/20221222501_pizzaplane1_pygame/">Pizzaplane in Pygame</a> (Stage 1)</li>
<li><a href="https://kantel.github.io/posts/20221222601_pizzaplane2_pygame/">Jetzt mit Killer-Pizzas</a>: Pizzaplane in Pygame (Stage 2)</li>
<li>Pizzaplane Stage 3: <a href="https://kantel.github.io/posts/2022123101_pizzaplane3/">Jetzt mit Punktestand</a>!</li>
<li>Pizzaplane Stage 4 – <a href="https://kantel.github.io/posts/2023010102_pizzaplane4/">jetzt mit grünem Spieler</a></li>
</ol>
</section>
<section id="exkurse-immer-noch-pygame" class="level4">
<h4 class="anchored" data-anchor-id="exkurse-immer-noch-pygame">2. Exkurse (immer noch Pygame)</h4>
<ol start="5" type="1">
<li>Exkurs 1: <a href="https://kantel.github.io/posts/2023010701_pygame_oop/">Pygame objektorientiert</a></li>
<li>Exkurs 2: <a href="https://kantel.github.io/posts/2023011001_pizzaplane_trailer/">Pizza Plane Trailer</a> – ebenfalls objektorientiert</li>
</ol>
</section>
<section id="und-nun-als-trinket-mit-einer-processing-python-variante" class="level4">
<h4 class="anchored" data-anchor-id="und-nun-als-trinket-mit-einer-processing-python-variante">3. Und nun als Trinket (mit einer Processing (Python) Variante)</h4>
<ol start="7" type="1">
<li>Pizza Plane OOP (Jetzt in Trinket)</li>
</ol>
<p>Wird fortgesetzt …</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Fußnoten</h2>

<ol>
<li id="fn1"><p>Später soll der Flieger noch beim Drücken der mittleren Maustaste auf die bösen Pizzen (und andere Gegner) Geschosse abfeuern können, doch dies – wie auch die Gegner – muß ich erst noch implementieren.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Python</category>
  <category>Processing</category>
  <category>Trinket</category>
  <category>Spieleprogrammierung</category>
  <guid>https://kantel.github.io/posts/2023032301_pizza_plane_oop_trinket_stage_1/index.html</guid>
  <pubDate>Thu, 23 Mar 2023 18:45:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023032301_pizza_plane_oop_trinket_stage_1/images/pizzaplanetrinketstage2.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Von Schloß Britz nach Britz-Süd – auf der Suche nach dem Frühling</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023032202_auf_der_suche_nach_fruehling/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52764457784/"><img src="https://kantel.github.io/posts/2023032202_auf_der_suche_nach_fruehling/images/milchmaedchen-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Nachdem heute mittag unerwartet der Himmel aufriß und mich mit strahlendem Sonnenschein überraschte, beschloß ich ganz spontan, statt mich im dunklen Arbeitszimmer mit Python und Problemen der Spieleprogrammierung herumzuschlagen, einen kleinen Spaziergang von <a href="https://de.wikipedia.org/wiki/Schloss_Britz">Schloß Britz</a> nach <a href="https://www.komoot.de/highlight/979329">Britz-Süd</a> zu wagen – immer auf der Suche nach dem Frühling.</p>
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52764613915/"><img src="https://kantel.github.io/posts/2023032202_auf_der_suche_nach_fruehling/images/britzvorfruehling1.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/52764460799/"><img src="https://kantel.github.io/posts/2023032202_auf_der_suche_nach_fruehling/images/britzvorfruehling2.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/52763669947/"><img src="https://kantel.github.io/posts/2023032202_auf_der_suche_nach_fruehling/images/britzvorfruehling3.jpg" class="img-fluid"></a></p>
<p>Den Frühling hatte ich zwar noch nicht gefunden, aber er war überall schon zu erahnen. Und da ja bekanntlich das Fratzenbuch und ich in diesem Leben keine Freunde mehr werden, gibt es die Bilder wieder nur in diesem <del>Blog</del> Kritzelheft. <em>(Photo (<a href="http://creativecommons.org/licenses/by-nc-nd/2.0/">cc</a>): <a href="http://cognitiones.kantel-chaos-team.de/cv.html">Jörg Kantel</a>)</em></p>



 ]]></description>
  <category>Neukölln</category>
  <category>Photographie</category>
  <guid>https://kantel.github.io/posts/2023032202_auf_der_suche_nach_fruehling/index.html</guid>
  <pubDate>Wed, 22 Mar 2023 16:45:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023032202_auf_der_suche_nach_fruehling/images/milchmadchen.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Google korrigiert in Chrome auch wieder Sicherheitslücken</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023032201_sicherheitsloecher_chrome/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://artlogic-res.cloudinary.com/w_1000,c_limit,f_auto,fl_lossy,q_auto/artlogicstorage/lopf/images/view/9c53f6e07d1b8b38aa5ddc227bea4905/londonoriginalprintfair-george-cruikshank-jealousy-1825.jpg"><img src="https://kantel.github.io/posts/2023032201_sicherheitsloecher_chrome/images/jealousy1825-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Google veröffentlicht ein neues Update der Version 111 (111.0.5563.110/111) seines Browsers Chrome und schließt erneut <a href="https://chromereleases.googleblog.com/2023/03/stable-channel-update-for-desktop_21.html">kritische Sicherheitslücken</a>.</p>
<p>Chrome aktualisiert sich (außer bei Linux) über die integrierte Update-Funktion, kann aber – wenn es pressiert – auch <a href="https://www.google.com/intl/de/chrome/browser/">hier geladen</a> werden. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<p><em>(Bild: »Jealousy«, Karikatur von George Cruikshank, 1825.)</em></p>



 ]]></description>
  <category>News</category>
  <guid>https://kantel.github.io/posts/2023032201_sicherheitsloecher_chrome/index.html</guid>
  <pubDate>Wed, 22 Mar 2023 16:10:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023032201_sicherheitsloecher_chrome/images/jealousy1825.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Neu in meinem Wiki: Zangband – ein Retrogaming-Highlight</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023032101_zangband/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="http://cognitiones.kantel-chaos-team.de/medien/retrogames/zangband.html"><img src="https://kantel.github.io/posts/2023032101_zangband/images/zangband-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Nach all den Ausflügen und Photostrecken wird es Zeit, daß ich wieder zu meinen (Spiele-) Programmierprojekten zurückkehre. Und da möchte ich zum einen versuchen, mit einer neuen Version meines <a href="https://kantel.github.io/posts/2023030601_maze_game_2/">Maze Games</a> die Turtle wieder mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/trinket.html">Trinket</a> zu <a href="https://kantel.github.io/posts/2023031101_trinket_turtle_ontimer/">versöhnen</a>, indem ich statt <code>ontimer()</code> das <code>timer</code>-Modul aus der Standardbibliothek einsetzte und zum anderen möchte ich ja auch meinen kleinen <a href="https://kantel.github.io/posts/2023010701_pygame_oop/">Pizzaflieger</a> in Trinket implementieren. Einfach, weil es mir Spaß macht, Spiele im Browser zu spielen, obwohl sie in Python realisiert sind.</p>
<p>Und weil ich so ein Spielkalb bin, habe ich – zumindest für mein Maze Game – nach weiteren 16x16 großen, frei verwendbaren Sprites und Tiles gesucht.</p>
<ul>
<li>Und da wäre zum einen das schon mehrmals im <em><a href="http://blog.schockwellenreiter.de/2016/01/2016011503.html">Schockwellenreiter</a></em> erwähnte <a href="https://opengameart.org/content/dawnlike-16x16-universal-rogue-like-tileset-v181">DawnLike-Tileset</a>, das neben den statischen Sprites auch fünf mit je vier Bildern pro Himmelsrichtung »vollständig« animierte Sprites besitzt.</li>
<li>Vom gleichen Pixelartisten <em>Dragon De Platino</em> gibt es auch noch das freie (<a href="https://creativecommons.org/licenses/by/4.0/">CC-BY 4.0</a>) <a href="https://opengameart.org/content/zoria-tileset">Zoria Tileset</a>, mit dem man eine Art <a href="https://de.wikipedia.org/wiki/The_Legend_of_Zelda_(Computerspiel)">Zelda</a>-Klon basteln kann.</li>
<li><em>Last but not least</em> bin ich dann noch über <a href="https://github.com/jjnoo/Zangband">Zangband</a> gestolpert. Im GitHub-Repositorium dieser <a href="http://cognitiones.kantel-chaos-team.de/medien/retrogames/angband.html">Angband</a>-Variante findet man im Verzeichnis <code>lib/xtra/graf</code> Tilesets in den Größen 8x8, 8x13 und 16x16 Pixel.</li>
</ul>
<p>Die Zangband-Sprites fand ich auch deshalb hochinteressant, weil die 8x8 Pixel großen Tiles und Sprites nicht nur eine Fundgrube für meine <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/tic80.html">TIC-80</a>-<a href="https://kantel.github.io/posts/2023013001_8bit_panda_tic80/">Experimente</a> sind, die ich ebenfalls unbedingt wieder aufnehmen sollte, sondern nach einer ersten Durchsicht sind zumindest einige davon auch als Basis für Sprites in <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/bitsy.html">Bitsy</a> geeignet. Und auch hier harren meine <a href="http://blog.schockwellenreiter.de/2022/06/2022060901.html">nächtlichen Streifzüge durch den Bürgerpark</a> (<a href="https://kantel.itch.io/nachts-im-park">Prototyp auf Itch.io</a>) der Fortsetzung.</p>
<p>Das 1994 erstmals veröffentlichte Zangband ist auch sonst bemerkenswert, denn im Gegensatz zu den Roguelike-Klassikern Angband oder Moria spielt es nicht Tolkiens »Mittelerde«, sondern in der von <em>Roger Zelazny</em> geschaffenen Welt von »Amber«. Daher habe ich dem Spiel, das neben <a href="http://cognitiones.kantel-chaos-team.de/medien/retrogames/nethack.html">NetHack</a> eine weitere Perle des Retrogamings ist, <strong><a href="http://cognitiones.kantel-chaos-team.de/medien/retrogames/zangband.html">eine Seite</a></strong> in <a href="http://cognitiones.kantel-chaos-team.de/index.html">meinem Wiki</a> spendiert.</p>



 ]]></description>
  <category>Spieleprogrammierung</category>
  <category>Retrogaming</category>
  <guid>https://kantel.github.io/posts/2023032101_zangband/index.html</guid>
  <pubDate>Tue, 21 Mar 2023 19:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023032101_zangband/images/zangband.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Nachschlag Natur-Park Südgelände – ein paar Videos</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023032001_nachschlag_suedgelaende/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52757415401/"><img src="https://kantel.github.io/posts/2023032001_nachschlag_suedgelaende/images/drehscheibe-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p><a href="http://www.gabi-kantel.de/">Gabi</a> hat damit angefangen und im Nachtrag zu meiner <a href="https://kantel.github.io/posts/2023031901_naturpark_suedgelaende/">gestrigen Photostrecke</a> über den <a href="https://de.wikipedia.org/wiki/Natur-Park_S%C3%BCdgel%C3%A4nde">Natur-Park Schöneberger Südgelände</a> auf YouTube ein paar informative und lehrreiche Videos ausgegraben, die ich Euch nicht vorenthalten möchte (denn da werdet Ihr nicht dümmer von):</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/Osrid7SZGFI" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Den Anfang macht der selbsternannte, private »Hauptstadtsender« <a href="https://de.wikipedia.org/wiki/TV_Berlin">TV Berlin</a>, der schon vor sechs Jahren eine kleine Reihe (<a href="https://www.youtube.com/watch?v=Osrid7SZGFI">Teil 1</a>, <a href="https://www.youtube.com/watch?v=N4THmu5toUw">Teil 2</a> und <a href="https://www.youtube.com/watch?v=-waNweyz7QY">Teil 3</a>) über das Südgelände sendete. Obwohl ich bei privaten Sendern grundsätzlich skeptisch bin und gerade TV Berlin nicht gerade ein skandalfreier Sender ist, sind diese drei Beiträge doch recht nett gemacht und durchaus anschauenswert.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/i0L5AJdQE8w" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Und dann habe ich noch die Reihe »Wildes Berlin: Unterwegs mit Derk Ehlert« der <a href="https://www.stiftung-naturschutz.de/">Stiftung Naturschutz Berlin</a> entdeckt. Das <a href="https://www.youtube.com/watch?v=i0L5AJdQE8w">Video der Folge 4</a> ist ein ebenfalls sehr informativer und ansehenswerter Beitrag über das Schöneberger Südgelände. Und als landeseigene Stiftung ist sie politisch weniger belastet als der obige Privatsender.</p>
<p>Ich habe den Kanal jedenfalls abonniert, denn alleine die Playlist »<a href="https://www.youtube.com/playlist?list=PLsYD0yqE80czWiCWxY1pDrT0-PlDazTw1">Wildes Berlin</a>« zeigt in bisher 22 Videos etliche auch für mich erreichbare Ausflugsziele (darunter auch den <a href="https://www.youtube.com/watch?v=9eaJSEYJBJE">Britzer Garten</a>), die der Entdeckung und meines Besuches harren.</p>
<p>Die oben erwähnten Filme zu Schöneberger Südgelände haben mich übrigens darin bestätigt, diesen Park mindestens noch einmal im späten Frühling oder Sommer zu besuchen. Denn die Aufnahmen daraus zeigen eine sehr grüne und wilde Vegetation. Und auch im Herbst mit seinen Farben muß das Südgelände sehr photogen wirken. Schaun wir also mal, was das Jahr noch bringen wird. <em>(Photo (<a href="http://creativecommons.org/licenses/by-nc-nd/2.0/">cc</a>): <a href="http://cognitiones.kantel-chaos-team.de/cv.html">Jörg Kantel</a>)</em></p>



 ]]></description>
  <category>Parks und Gärten</category>
  <guid>https://kantel.github.io/posts/2023032001_nachschlag_suedgelaende/index.html</guid>
  <pubDate>Mon, 20 Mar 2023 16:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023032001_nachschlag_suedgelaende/images/drehscheibe.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Photostrecke: Natur-Park Südgelände – ein Paradies für Pufferküsser</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023031901_naturpark_suedgelaende/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52757817350/"><img src="https://kantel.github.io/posts/2023031901_naturpark_suedgelaende/images/naturparksuedgelaende_01-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Heute habe ich mich ganz spontan in einen Bus gesetzt und einen kleinen Ausflug in den <a href="https://de.wikipedia.org/wiki/Natur-Park_S%C3%BCdgel%C3%A4nde">Natur-Park Schöneberger Südgelände</a> unternommen. Und das eigentlich nur, weil wegen irgendwelcher Baustellenumleitungen ein großer gelber Doppeldeckerbus der BVG von der Haltestelle bei mir vor der Haustür direkt zum Bahnhof Südkreuz fuhr. Also sozusagen ein Tür-zu-Tür-Verkehr ohne Umsteigen. Natürlich habe ich auch diesen Ausflug mit ein paar Photos dokumentiert. Und da das Gesichtsbuch und ich in diesem Leben wohl keine Freunde mehr werden, gibt es die Bilder als Photostrecke wieder nur in meinem <del>Blog</del> Kritzelheft:</p>
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52757817895/"><img src="https://kantel.github.io/posts/2023031901_naturpark_suedgelaende/images/naturparksuedgelaende_02.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/52757894933/"><img src="https://kantel.github.io/posts/2023031901_naturpark_suedgelaende/images/naturparksuedgelaende_03.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/52756875342/"><img src="https://kantel.github.io/posts/2023031901_naturpark_suedgelaende/images/naturparksuedgelaende_04.jpg" class="img-fluid"></a><br><br> <a href="https://www.flickr.com/photos/schockwellenreiter/52757415551/"><img src="https://kantel.github.io/posts/2023031901_naturpark_suedgelaende/images/naturparksuedgelaende_05.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/52756877687/"><img src="https://kantel.github.io/posts/2023031901_naturpark_suedgelaende/images/naturparksuedgelaende_06.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/52757662959/"><img src="https://kantel.github.io/posts/2023031901_naturpark_suedgelaende/images/naturparksuedgelaende_07.jpg" class="img-fluid"></a><br><br> <a href="https://www.flickr.com/photos/schockwellenreiter/52756882697/"><img src="https://kantel.github.io/posts/2023031901_naturpark_suedgelaende/images/naturparksuedgelaende_08.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/52757419126/"><img src="https://kantel.github.io/posts/2023031901_naturpark_suedgelaende/images/naturparksuedgelaende_09.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/52757664089/"><img src="https://kantel.github.io/posts/2023031901_naturpark_suedgelaende/images/naturparksuedgelaende_10.jpg" class="img-fluid"></a></p>
<p><em>Mit einem Klick auf die Vorschaubilder kommt Ihr auf eine Seite mit einer Vergrößerung.</em></p>
<p>Was ist nun dieser Natur-Park Südgelände und was macht ihn so besonders? Der <a href="https://www.natur-park-suedgelaende.de/">Natur Park Südgelände</a> <em>(Eigenschreibweise)</em> ist ein ehemaliger Güter- und Rangierbahnhof, der aufgrund der politischen Lage Westberlins 1952 stillgelegt wurde. Wegen eben dieser politischen Lage (die Grundstücke gehörten der Reichsbahn und damit zur DDR) konnten sich auch keine Heuschrecken über das Gelände hermachen und so hatte die Natur Zeit und Gelegenheit sich bis zur Wende das Gebiet so <em>peu a peu</em> zurückzuerobern. Und nach der Wende war die Rückeroberung durch die Natur schon so weit fortgeschritten, daß der Senat auch wegen des Widerstands aus der Bevölkerung eine kommerzielle Nutzung aufgeben mußte und daher das Gebiet der landeseigenen <em>Grün Berlin</em> überschrieb, die es zu einem Naturschutzgebiet und -park umwandelte, wobei das »Grün auf den Gleisen« und die Rückeroberung der Natur ein Schwerpunkt des Parks blieben. Der Park ist seit 1999 – dem Jahr, in dem er symbolisch eröffnet wurde – ein Natur- und Landschaftsschutzgebiet und war im Jahr 2000 ein offizielles EXPO-Projekt.</p>
<p>Ich werden den Park Ende April/Anfang Mai noch einmal besuchen. Denn heute war er noch sehr kahl und man konnte die grüne Explosion, die mit Sicherheit zwischen den Gleisen stattfinden wird, bestenfalls an den zarten Knospen erahnen. Doch das Grün zwischen den Technik-Relikten muß ein wunderbares Photomotiv sein. Daher schaun wir einfach mal, was das Frühjahr mir noch bringen wird … <em>(Photos (<a href="http://creativecommons.org/licenses/by-nc-nd/2.0/">cc</a>): <a href="http://cognitiones.kantel-chaos-team.de/cv.html">Jörg Kantel</a>)</em></p>



 ]]></description>
  <category>Parks und Gärten</category>
  <category>Photographie</category>
  <guid>https://kantel.github.io/posts/2023031901_naturpark_suedgelaende/index.html</guid>
  <pubDate>Sun, 19 Mar 2023 18:45:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023031901_naturpark_suedgelaende/images/naturparksuedgelaende_01.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Photostrecke: (Vor-) Frühling im Britzer Garten</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023031801_vorfruehling_im_britzer_garten/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52755806238/"><img src="https://kantel.github.io/posts/2023031801_vorfruehling_im_britzer_garten/images/britzergarten20230318_01_gegenlicht-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Heute war der erste Tag, an dem ich <a href="https://kantel.github.io/posts/2023031502_fruehlingsplaene/">meine Ankündigung</a> umgesetzt und meine Jahreskarte für den <a href="https://www.britzergarten.de/">Britzer Garten</a> eingeweiht hatte. Wie schon <a href="http://blog.schockwellenreiter.de/2022/11/2022111503.html">im letzten Herbst</a> hatte ich dabei einige Photos geschossen und diese Ausbeute möchte ich wie versprochen hier dokumentieren:</p>
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52754777552/"><img src="https://kantel.github.io/posts/2023031801_vorfruehling_im_britzer_garten/images/britzergarten_02.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/52755805708/"><img src="https://kantel.github.io/posts/2023031801_vorfruehling_im_britzer_garten/images/britzergarten_04.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/52754778967/"><img src="https://kantel.github.io/posts/2023031801_vorfruehling_im_britzer_garten/images/britzergarten_03.jpg" class="img-fluid"></a><br><br> <a href="https://www.flickr.com/photos/schockwellenreiter/52755563739/"><img src="https://kantel.github.io/posts/2023031801_vorfruehling_im_britzer_garten/images/britzergarten_05.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/52755566774/"><img src="https://kantel.github.io/posts/2023031801_vorfruehling_im_britzer_garten/images/britzergarten_06.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/52755564819/"><img src="https://kantel.github.io/posts/2023031801_vorfruehling_im_britzer_garten/images/britzergarten_07.jpg" class="img-fluid"></a><br><br> <a href="https://www.flickr.com/photos/schockwellenreiter/52755810978/"><img src="https://kantel.github.io/posts/2023031801_vorfruehling_im_britzer_garten/images/britzergarten_08.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/52754781747/"><img src="https://kantel.github.io/posts/2023031801_vorfruehling_im_britzer_garten/images/britzergarten_09.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/52755324661/"><img src="https://kantel.github.io/posts/2023031801_vorfruehling_im_britzer_garten/images/britzergarten_10.jpg" class="img-fluid"></a></p>
<p><em>Mit einem Klick auf die Vorschaubilder kommt Ihr auf eine Seite mit einer Vergrößerung.</em></p>
<p>Im Gegensatz zu meinem Besuch im letzten Herbst waren überraschend viele Menschen unterwegs. Das Wetter war aber auch genial für einen Spaziergang. Da machte es gar nichts, daß auch die Profis von <em>Grün Berlin</em> die Natur nicht überlisten konnten und nur einige Frühblüher wie Krokii und erste Osterglocken ihre Blüten in die Sonne streckten. Die waren aber an den strategisch wichtigen Stellen (nämlich dort, wo die Besucher zuerst hinkommen), so massiv gesetzt, daß sie in dichten, bunten Teppichen die Ausflügler begrüßten.</p>
<p>Und ich habe mich zusätzlich gefreut, daß ich drei Stunden durchgehalten hatte. Zwar mußte ich mehrmals pausieren, aber die Folgen meines Schlaganfalls gehen spürbar zurück, ich kann mir schon immer mehr zutrauen. Schon alleine dafür hat sich die Jahreskarte gelohnt.</p>
<p>Aber das Jahr ist ja noch jung und so habe ich noch ein paar Monate vor mir, in denen ich den Britzer Garten besuchen und sein Aussehen im jahreszeitlichen Wechsel dokumentieren kann. Ich freue mich schon darauf. <em>(Photos (<a href="http://creativecommons.org/licenses/by-nc-nd/2.0/">cc</a>): <a href="http://cognitiones.kantel-chaos-team.de/cv.html">Jörg Kantel</a>)</em></p>



 ]]></description>
  <category>Parks und Gärten</category>
  <category>Neukölln</category>
  <category>Photographie</category>
  <guid>https://kantel.github.io/posts/2023031801_vorfruehling_im_britzer_garten/index.html</guid>
  <pubDate>Sat, 18 Mar 2023 18:45:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023031801_vorfruehling_im_britzer_garten/images/britzergarten20230318_01_gegenlicht.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Spieleprogrammierung und das Web: Trinket und der P5.js-Webeditor</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023031703_gamedev_web_videotutorials/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52754091110/"><img src="https://kantel.github.io/posts/2023031703_gamedev_web_videotutorials/images/pizzaplanetrinket-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Auch wenn die Entdeckung des <a href="https://kantel.github.io/posts/2023031101_trinket_turtle_ontimer/">Bugs in Trinkets Turtle</a> meiner (Entdecker-) Freude an <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/trinket.html">Trinket</a> erst einmal einen Dämpfer verpaßt hat – so schnell gebe ich Trinket nicht auf. Zum einen will ich noch testen, wie sich Trinkets Schildkröte mit dem <code>time</code>-Modul aus <a href="https://kantel.github.io/posts/2023031202_juggling_ball_turtle/">Pythons Standardbibliothek schlägt</a> und zum anderen ist da ja auch noch die <a href="https://kantel.github.io/posts/2023021601_my_first_trinket/">Processing (Python) Bibliothek in Trinket</a>, die weiteren Entdeckungen harrt.</p>
<p>Denn ich bin ehrlich: Die Möglichkeit, mit Python direkt für das Web zu schreiben, fasziniert mich. Daher habe ich zum einen gestern angefangen, meinen <a href="https://kantel.github.io/posts/2023010701_pygame_oop/">kleinen Pizza-Flieger</a> von <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a> nach Trinket zu portieren – natürlich objektorientiert. Und zum anderen läßt mich die Idee eines Maze Games mit der Turtle keine Ruhe. Und auch dieses Experiment würde ich natürlch gerne im Browser sehen.</p>
<p>Daher habe ich nicht nur Trinket noch nicht aufgegeben, sondern auch – weil heute Freitag ist und ich Euch endlich wieder mit Video-Tutorials versorgen will, damit Ihr mir (was Gott behüten möge) am Wochenende nicht in die Kirchen rennt – ein paar Videotutorials zusammengestellt, die mich und Euch (hoffentlich!) weiterbringen:</p>
<section id="labyrinthe-und-irrgärten" class="level3">
<h3 class="anchored" data-anchor-id="labyrinthe-und-irrgärten">Labyrinthe und Irrgärten</h3>
<iframe width="560" height="315" src="https://www.youtube.com/embed/eZnFV2vWVJE" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Den Anfang macht die Playlist »<a href="https://www.youtube.com/playlist?list=PL9gnJgSxuivFDrB4xGnjbsw8PtaYCsDia">Build a Maze based Game in Python</a>« (vier Videos, Gesamtlaufzeit etwa anderthalb Stunden), die eigentlich kein »Spiel« im eigentlichen Sinne implementiert, sondern Euch zeigt, wie Ihr einen Irrgarten in Python bastelt.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/HyK_Q5rrcr4" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Darauf aufbauend empfehle ich <em>Daniel Shiffman</em> und seine Videos »<a href="https://www.youtube.com/watch?v=HyK_Q5rrcr4">Maze Generator with P5.js</a>«. Leider keine separate Playlist, daher mußt ich die Folgen <a href="https://www.youtube.com/watch?v=D8UgRyRnvXU">Teil 2</a>, <a href="https://www.youtube.com/watch?v=8Ju_uxJ9v44">Teil 3</a> und <a href="https://www.youtube.com/watch?v=_p5IH0L63wo">Teil 4</a> hier einzeln verlinken.</p>
<p>Auch diese Videos entwickeln kein Spiel, sondern zeigen einen etwas mehr <a href="https://en.wikipedia.org/wiki/Maze_generation_algorithm#Randomized_depth-first_search">elaborierten Algorithmus</a>, um einen Irrgarten zu implementieren.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/nHjqkLV_Tp0" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Den gleichen Algorithmus in reinem JavaScript implementiert hat <em>Conor Bailey</em>. In seinem <a href="https://www.youtube.com/watch?v=nHjqkLV_Tp0">einstündigen Video</a> zeigt er, wie, und den <a href="https://github.com/conorbailey90/Javascript-DFS-Maze">Quellcode</a> findet Ihr in diesem GitHub-Repositorium.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/8Hs5gptvBxU" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Natürlich geht das auch alles mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/turtlepython.html">Pythons Turtle</a>. Ein sehr schönes Beispiel ist das obige Video »<a href="https://www.youtube.com/watch?v=8Hs5gptvBxU">Python maze solving program using the Left Hand Rule algorithm</a>«. Dieses Video hat noch zwei Nachfolger, die ebenfalls den Weg durch einen Irrgarten mit Hilfe von Pythons Schildkröte finden:</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=ZuHW4fS60pc">Python Breadth First Search Maze solving program</a> (25 Minuten) und</li>
<li><a href="https://www.youtube.com/watch?v=1NW9wWswaMk">Depth First Search maze solving program written in Python</a> (30 Minuten).</li>
</ul>
<p>Das wäre doch ein ideales Experimentierfeld für meine eigenen Turtle-Maze-Game-Versuche.</p>
<p><strong>War sonst noch was?</strong> Ich will Euch nicht verheimlichen, daß der gleiche Kanal auch noch das Video »<a href="https://www.youtube.com/watch?v=Xthh4SEMA2o">Python maze generator with path solution</a>« hochgeladen hat, in dem der Autor nicht mit der Schildkröte, sondern mit Pygame experimentiert.</p>
</section>
<section id="python-pygame-und-rpgs" class="level3">
<h3 class="anchored" data-anchor-id="python-pygame-und-rpgs">Python, Pygame und RPGs</h3>
<iframe width="560" height="315" src="https://www.youtube.com/embed/Vg83OtRkevE" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p><strong>Und last but not least</strong> ist da ja auch noch meine heimliche Liebe zu RPGs. Und dafür ist die zwöfteilige Playlist »<a href="https://www.youtube.com/playlist?list=PLywhTYI3VhfJCkp_aQXFj_8-Ac496LmUm">Pygame RPG Tutorial</a>« des Users <em>EdZoft</em> mit je im Schnitt etwa viertelstündigen Videos eine echte Entdeckung – jedenfalls wenn ich meinem Eindruck beim Anschauen des obigen Startvideos trauen darf.</p>
</section>
<section id="mehr-nächstes-wochenende" class="level3">
<h3 class="anchored" data-anchor-id="mehr-nächstes-wochenende">Mehr nächstes Wochenende</h3>
<p>Mir sind in den letzten Tagen noch ein paar weitere Videos und Playlists zu den Themen Retrogaming (mit Python und <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processing.html">Processing</a>) und Creative Coding (mit P5.js) untergekommen. Damit ich nicht wieder an einem Wochenende ohne Video-Tutorials dastehe und Ihr mir dann doch aus lauter Langeweile in eine Kirche rennt, habe ich diese für den nächsten Freitag vorgesehen. <em>Still digging!</em></p>


</section>

 ]]></description>
  <category>Spieleprogrammierung</category>
  <category>Python</category>
  <category>Trinket</category>
  <category>P5.js</category>
  <guid>https://kantel.github.io/posts/2023031703_gamedev_web_videotutorials/index.html</guid>
  <pubDate>Fri, 17 Mar 2023 20:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023031703_gamedev_web_videotutorials/images/pizzaplanetrinket.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
