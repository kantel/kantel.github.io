<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Der Schockwellenreiter</title>
<link>https://kantel.github.io/</link>
<atom:link href="https://kantel.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description>Schockwellenreiter</description>
<generator>quarto-1.4.549</generator>
<lastBuildDate>Mon, 29 Apr 2024 18:10:00 GMT</lastBuildDate>
<item>
  <title>OpenMoji – Open Source Emojis für alle</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024042902_openmoji/</link>
  <description><![CDATA[ 




<p><a href="https://openmoji.org/samples-pasture.svg"><img src="https://kantel.github.io/posts/2024042902_openmoji/images/openmoji-b.jpg" class="img-fluid"></a></p>
<p>Wie regelmäßige Leser dieser Seiten wissen, gehöre ich nicht zu den Menschen, die mit einem Zeichenstift in der Hand geboren wurden. Wenn ich also für Spiele oder sonstige kreative Programmierprojekte (freie) Emojis oder Emoji-ähnliche Bildchen brauchte, hatte ich bisher immer zu Twitters <a href="https://twemoji.twitter.com/">Twemoji</a> (CC-BY 4.0) gegriffen. Doch ist deren Website seit einiger Zeit down. Zwar gibt es die <a href="https://github.com/twitter/twemoji">Twemojis noch auf GitHub</a>, doch scheint ein Ende absehbar. Daher bin ich froh, daß ich mehr oder weniger per Zufall über das Projekt <a href="https://openmoji.org/">OpenMoji</a> gestolpert bin.</p>
<p><a href="https://www.hfg-gmuend.de/aktuelles/openmoji-emojis-von-designern-f%C3%BCr-alle">Das Projekt Open­Moji</a> wurde von den Profes­soren <em>Daniel Utz</em> und <em>Bene­dikt Groß</em> zusammen mit mittlerweile über 80 Studentinnen und Studenten an der <a href="https://www.hfg-gmuend.de/">Hochschule für Gestaltung Schwäbisch Gmünd</a> entwickelt und ist ein Versuch, ein umfas­sendes open-source Emoji- und Iconset ​»von Desi­gner für Desi­gner, Maker, Entwickler … und jeder­mann« zu gestalten. Gleichzeitig ist das Projekt auch als Reaktion auf die Frage »warum über­lässt die Design-Commu­nity es den großen Tech-Compa­nies à la GAFA, wie Emojis für Milli­arden von Menschen aussehen?« zu werten.</p>
<iframe class="if16_9" src="https://www.youtube.com/embed/ZyOk21gUJdc?si=fyxfPea6mxs76vqQ" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p>Die Bildchen folgen einem einheitlichen Stil, sind wie die Twemojis unter die freie CC-BY-4.0-Lizenz gestellt, sehen farbig wie auch monochrom verdammt gut aus, es gibt sie unter anderem sowohl als auflösungsunabhängige SVG, wie auch als hochaufgelöste PNG (gut für Collagen – siehe Bannerbild oben) und sie sind auch auf <a href="https://github.com/hfg-gmuend/openmoji">GitHub zu finden</a>. Aktuell ist die <a href="https://github.com/hfg-gmuend/openmoji/releases/tag/15.0.0">Version 15.0</a> vom 21. Dezember 2023.</p>
<p><em>Daniel Shiffman</em> für das Reboot der <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/p5js.html">P5.js</a>-Neuauflage seiner Processing-Bibel »<a href="https://natureofcode.com/">Tne Nature of Code</a>« viel die OpenMojis genutzt (darüber habe ich sie gefunden) und auch ich werde die Bildchen in Zukunft mindestens überall dort einsetzen, wo ich bisher auf die Twemojis zurückgegriffen hatte. Ich freue mich schon darauf. <em>Still digging!</em></p>



 ]]></description>
  <category>Tiles und Sprites</category>
  <category>Game Design</category>
  <category>Spieleprogrammierung</category>
  <category>Creative Coding</category>
  <guid>https://kantel.github.io/posts/2024042902_openmoji/</guid>
  <pubDate>Mon, 29 Apr 2024 18:10:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024042902_openmoji/images/openmoji.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Sicherheitsupdate des Foxit Reader auf 2024.2</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024042901_foxit_update/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53568598147/"><img src="https://kantel.github.io/posts/2024042901_foxit_update/images/foxit2-b.jpg" class="img-fluid"></a></p>
<p>Mit der Version 2024.2 des nicht nur unter Windows beliebten PDF Betrachters Foxit Reader haben die Entwickler auch wieder <a href="https://www.foxit.com/support/security-bulletins.html">Schwachstellen</a> behoben.</p>
<p>Die neue Version kann <a href="https://www.foxitsoftware.com/downloads/#Foxit-Reader/">hier geladen</a> werden. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/53568598147/">Aktenfuchs</a></em>, erstellt mit <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/scenario.html">Scenario</a>. Prompt: »<em>A fox wearing a vest and glasses sits at a desk in a tree hollow and writes in a thick file. In front of him there are still open files on the desk. There are shelves on the walls with lots of file folders. The spring sun shines into the cave through a tree window. colored french comic style</em>«. Negative Prompt: »<em>other animals</em>«. Modell: Stable Diffusion XL, Style: Creepy Nordic Fairytale.</p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2024042901_foxit_update/</guid>
  <pubDate>Mon, 29 Apr 2024 13:20:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024042901_foxit_update/images/foxit2.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>MicroStudio und Python: Ein Partikelsystem (Part 2)</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024042801_microstudio_particle2/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53684873703/"><img src="https://kantel.github.io/posts/2024042801_microstudio_particle2/images/pythontutorial12-b.jpg" class="img-fluid"></a></p>
<p>Meinen <a href="https://kantel.github.io/posts/2024042702_microstudio_partikel/">Beitrag von gestern</a> über ein Partikelsystem mit <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/microstudio.html">microStudio</a> und Python/<a href="https://brython.info/">Brython</a> wollte ich noch ein wenig aufmotzen. Die Partikel sollten nicht nur einfach durch den Raum schweben, sondern dabei auch noch rotieren. Da man Kreisen aber eine Rotation schwer ansehen kann, habe ich dem System auch noch rechteckige (genauer quadratische) Partikel spendiert, die fröhlich drehend durch das Weltall schweben, bis sie – wie die Kreise – verblassen.</p>
<iframe src="pythontutorial12/index.html" class="if16_9" name="Ein Partikelsystem (2)">
</iframe>
<p>Dafür waren eigentlich nur wenige Änderungen im Code notwendig. Die größte Schwierigkeit war, die richtige Funktion in der <a href="https://microstudio.dev/documentation/API/">microStudio-API</a> für die Rotation einzelner Shapes (und Sprites) zu finden. Nachdem ich endlich den Unterschied zwischen <code>screen.setRotation()</code> (dreht den kompletten Bildschirm) und <code>screen.drawRotation()</code> (dreht einzelne Shapes und Sprites) begriffen hatte, war die Klasse <code>RectParticle</code>, die eine Unterklasse von <code>Particle</code> ist, schnell implementiert:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> RectParticle(Particle):</span>
<span id="cb1-2">  </span>
<span id="cb1-3">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, _x, _y):</span>
<span id="cb1-4">    Particle.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, _x, _y)</span>
<span id="cb1-5">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">360</span>)</span>
<span id="cb1-6">    </span>
<span id="cb1-7">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-8">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.acc</span>
<span id="cb1-9">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel</span>
<span id="cb1-10">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb1-11">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">360</span></span>
<span id="cb1-12">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> uniform(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb1-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>:</span>
<span id="cb1-14">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.done <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb1-15">      </span>
<span id="cb1-16">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> display(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-17">    screen.setAlpha(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>)</span>
<span id="cb1-18">    screen.setDrawRotation(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.angle)</span>
<span id="cb1-19">    screen.fillRect(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col)</span>
<span id="cb1-20">    screen.drawRect(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(33, 41, 70)"</span>)</span>
<span id="cb1-21">    screen.setDrawRotation(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-22">    screen.setAlpha(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>)</span></code></pre></div>
<p>Die <code>update()</code>-Methode erhielt zusätzliche Befehle, die für die Rotation zuständig waren und in <code>display()</code> wurde mit <code>screen.setDrawRotation(self.angle)</code> das rotierende Quadrat gezeichnet. Wie bei <code>screen.setAlpha()</code> darf nicht vergessen werden, den Wert anschließend wieder auf seinen Default zurückzusetzen.</p>
<p>In der Hauptroutine <code>main</code> war lediglich in <code>update()</code> eine zusätzliche Abfrage nötig, um den Zufallszahlengenerator zu befragen, ob man ein Quadrat oder einen Kreis erzeugt:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update():</span>
<span id="cb2-2">  choice <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb2-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> choice <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>:</span>
<span id="cb2-4">    particle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Particle(START_X, START_Y)</span>
<span id="cb2-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb2-6">    particle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RectParticle(START_X, START_Y)</span>
<span id="cb2-7">  particles.append(particle)</span></code></pre></div>
<p>Alles andere blieb wie in der letzten Version des Skriptes, das ich auch dieses Mal wieder auf meinem microStudio-Account <a href="https://microstudio.dev/i/kantel/pythontutorial12/">hochgeladen</a>habe. Und das Hintergrundbild habe ich wieder von der <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/scenario.html">gekünstelten Intelligenzia meines Vertrauens</a> erstellen lassen (siehe unten). Um ein wenig Abwechslung in die Sache zu bringen, bestaunen dieses Mal zwei Jungen das Partikelsystem.</p>
<p>Das ist das zwöfte Tutorial meiner »microStudio mit Python«-Reihe. Alle bisher im Schockwellenreiter erschienenen Beiträge habe ich wieder hier aufgeführt, um Euch eine Suche zu ersparen:</p>
<ul>
<li>MicroStudio und Python (Teil 1): <a href="https://kantel.github.io/posts/2024032201_microstudio_python_1/">Hallo Brython</a>!</li>
<li>MicroStudio und Python (Teil 2): <a href="https://kantel.github.io/posts/2024032401_microstudio_python_2/">Zombie Apokalypse</a></li>
<li>MicroStudio und Python (Teil 3): <a href="https://kantel.github.io/posts/2024032502_microstudio_python_3/">Dancing Crab</a></li>
<li>MicroStudio und Python (Teil 4): <a href="https://kantel.github.io/posts/2024032703_flying_badger_python/">Flying Badger</a></li>
<li>MicroStudio und Python (Teil 5): <a href="https://kantel.github.io/posts/2024032801_microstudio_noc_1/">PVector2 und »The Nature of Code«</a></li>
<li>MicroStudio und Python (Teil 6): <a href="https://kantel.github.io/posts/2024033102_bouncing_balls_microstudio/">Bouncing Balls</a></li>
<li>MicroStudio und Python (Teil 7): <a href="https://kantel.github.io/posts/2024040201_collision_detection_1/">Kollisionserkennung mit Kreisen</a></li>
<li>MicroStudio und Python (Teil 8): <a href="https://kantel.github.io/posts/2024040401_bouncing_birds/">Bouncing Birds</a></li>
<li>MicroStudio und Python (Teil 9): <a href="https://kantel.github.io/posts/2024040701_rect_collision/">Kollisionserkennung mit Rechtecken</a></li>
<li>MicroStudio und Python (Teil 10): <a href="https://kantel.github.io/posts/2024042301_bubbling_emojis/">Bubbly Emojis</a></li>
<li>MicroStudio und Python (Teil 11): <a href="https://kantel.github.io/posts/2024042702_microstudio_partikel/">Ein Partikelsystem</a></li>
<li>MicroStudio und Python (Teil 12): Ein Partikelsystem (2)</li>
</ul>
<p>Damit ist das Dutzend erst einmal voll. Ich werde die Reihe mindestens für ein paar Tage pausieren lassen, denn der hier auf diesen Seiten schon mehrfach erwähnte Freund aus Bremen hat mich auf die Idee gebracht, ein <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/p5js.html">P5.js</a>-Tutorial für absolute Beginner zu schreiben. Er wünschte sich das. Schaun wir mal, ob ich das hinbekomme. Ich habe jedenfalls Lust darauf. <em>Still digging!</em></p>
<hr>
<p><strong>(Hintergrund-) Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/53619207904/">Space Opera (Belgian Comic Style)</a></em>, erstellt mit <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/scenario.html">Scenario</a>. Prompt: »<em>Full moon with a human face smiles at a nightly sky with stars and a few clouds. colored french comic style</em>«. Modell: Stable Diffusion XL, Style: Scifi Magic + Belgian School.</p>



 ]]></description>
  <category>microStudio</category>
  <category>Python</category>
  <category>Brython</category>
  <category>Nature of Code</category>
  <category>Creative Coding</category>
  <guid>https://kantel.github.io/posts/2024042801_microstudio_particle2/</guid>
  <pubDate>Sun, 28 Apr 2024 17:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024042801_microstudio_particle2/images/pythontutorial12.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Spiele mit Agenten und NetLogo programmieren</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024042703_netlogo_games/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53579014801/"><img src="https://kantel.github.io/posts/2024042703_netlogo_games/images/chesslionunicorn-b.jpg" class="img-fluid"></a></p>
<p>Ich habe das dringende Bedürfnis, etwas Verrücktes anzustellen, damit ich auf andere Gedanken komme. Und da scheint mir die Idee, die <a href="http://cognitiones.kantel-chaos-team.de/programmierung/softcomputing/multiagenten.html">Multi-Agenten</a>-Programmiersprache <a href="http://cognitiones.kantel-chaos-team.de/programmierung/netlogo.html">NetLogo</a> dahingehend aufzubohren, daß man damit Computerspiele programmiert, verrückt genug, um mich ablenken zu können.</p>
<iframe class="if16_9" src="https://www.youtube.com/embed/Of_PNwd1bRs?si=ZJZhgKTiKlF7vV3F" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p>Jedenfalls habe ich die Playlist »<a href="https://www.youtube.com/playlist?list=PLJTCLffaZ2Ztxx1Pzp1qTkBX9hphS1YsZ">NetLogo Tutorial - Agent Based Model to Make a Video Game</a>« mit 18 Videos (meist) zwischen fünf und fünfundzwanzig Minuten Spieldauer auf die Liste dessen gesetzt, was ich mir in den nächsten Tagen reinziehen werde.</p>
<p>Schaun wir mal, vielleicht entsteht daraus etwas völlig Neues. <em>Still digging!</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/53579014801/">Einhorn und Löwe beim Schachspiel</a></em>, erstellt mit <a href="https://beta.dreamstudio.ai/generate">DreamStudio</a>. Prompt: »<em>A unicorn in a red dressing gown and a lion in a blue suit sit at a beer garden table with a beer and playing chess. It’s spring and the sun is shining over the beer garden. colored french comic style</em>«. Modell: Stable Diffusion XL, Style: Comic Book.</p>



 ]]></description>
  <category>NetLogo</category>
  <category>Spieleprogrammierung</category>
  <category>Turtle</category>
  <guid>https://kantel.github.io/posts/2024042703_netlogo_games/</guid>
  <pubDate>Sat, 27 Apr 2024 17:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024042703_netlogo_games/images/chesslionunicorn.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>MicroStudio und Python: Ein Partikelsystem</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024042702_microstudio_partikel/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53681074464/"><img src="https://kantel.github.io/posts/2024042702_microstudio_partikel/images/pythontut11-b.jpg" class="img-fluid"></a></p>
<p>Da spülte doch dieses wunderschöne Video »<a href="https://www.youtube.com/watch?v=QlpadcXok8U">Basics of Particle Systems</a>« in meinen Feedreader, in dem <em>Patt Vira</em> in Anlehnung an <em>Daniel Shiffmans</em> wunderbarem Buch »<a href="https://natureofcode.com/">The Nature of Code</a>« ein <a href="https://natureofcode.com/particles/">Partikelsystem</a> in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/p5js.html">P5.js</a> programmiert. Und da fiel mir doch wieder ein, daß ich erst <a href="https://kantel.github.io/posts/2024032801_microstudio_noc_1/">jüngst die Idee hatte</a>, wenigstens Teile aus dem Buch auch mal in <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/microstudio.html">microStudio</a> (in der Python/<a href="https://brython.info/">Brython</a>-Variante) zu implementieren.</p>
<iframe src="pythontutorial11/index.html" class="if16_9" name="Ein Partikelsystem">
</iframe>
<p>Dafür brauchte ich natürlich wieder meine Klasse <code>PVector2</code>. Da sie sehr lang ist, verzichte ich <a href="https://kantel.github.io/posts/2024033102_bouncing_balls_microstudio/">auch dieses Mal</a> auf einen erneuten Abdruck, Ihr könnt sie von <a href="https://kantel.github.io/posts/2024032801_microstudio_noc_1/">dieser Seite kopieren</a> und in Eure Projekte einfügen.</p>
<p>Ansonsten gibt es die Klasse <code>Particle</code>, die die Grundlage für das Skript legt:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Particle():</span>
<span id="cb1-2">  </span>
<span id="cb1-3">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, _x, _y):</span>
<span id="cb1-4">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PVector2(_x, _y)</span>
<span id="cb1-5">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PVector2(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.005</span>)</span>
<span id="cb1-6">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PVector2(uniform(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>), uniform(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>))</span>
<span id="cb1-7">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> choice(colors)</span>
<span id="cb1-8">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">255.0</span></span>
<span id="cb1-9">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> uniform(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb1-10">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.done <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb1-11">    </span>
<span id="cb1-12">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-13">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.acc</span>
<span id="cb1-14">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel</span>
<span id="cb1-15">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> uniform(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb1-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>:</span>
<span id="cb1-17">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.done <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb1-18">      </span>
<span id="cb1-19">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> display(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-20">    screen.setAlpha(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>)</span>
<span id="cb1-21">    screen.fillRound(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col)</span>
<span id="cb1-22">    screen.drawRound(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(33, 41, 70)"</span>)</span>
<span id="cb1-23">    screen.setAlpha(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>)</span></code></pre></div>
<p>Den meisten von Euch wird auffallen, daß diese Klasse kaum Besonderheiten der microStudio-API nutzt. Lediglich die Methode <code>display()</code> macht naturgemäß davon Gebrauch.</p>
<p>Das gilt auch für das Hauptprogramm <code>main</code>, in dem lediglich die <code>draw()</code>-Funktion Befehle aus der microStudio-API benötigt. Alles andere ist Python pur:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random, choice, uniform</span>
<span id="cb2-2"></span>
<span id="cb2-3">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(8, 247, 254)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(254, 83, 187)"</span>,</span>
<span id="cb2-4">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(245, 211, 0)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(0, 255, 65)"</span>,</span>
<span id="cb2-5">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(250, 25, 25)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(148, 103, 89)"</span>]</span>
<span id="cb2-6">          </span>
<span id="cb2-7">START_X, START_Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span></span>
<span id="cb2-8"></span>
<span id="cb2-9">particles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-10"></span>
<span id="cb2-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> init():</span>
<span id="cb2-12">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb2-13"></span>
<span id="cb2-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update():</span>
<span id="cb2-15">  particle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Particle(START_X, START_Y)</span>
<span id="cb2-16">  particles.append(particle)</span>
<span id="cb2-17">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> particle <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reversed</span>(particles):</span>
<span id="cb2-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> particle.done:</span>
<span id="cb2-19">      particles.remove(particle)</span>
<span id="cb2-20">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> particle <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> particles:</span>
<span id="cb2-21">    particle.update()</span>
<span id="cb2-22"></span>
<span id="cb2-23"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> draw():</span>
<span id="cb2-24">  screen.clear()</span>
<span id="cb2-25">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># screen.fillRect(0, 0, screen.width, screen.height, "rgb(33, 41, 70)")</span></span>
<span id="cb2-26">  screen.drawSprite(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"background"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, screen.width, screen.height)</span>
<span id="cb2-27">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> particle <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> particles:</span>
<span id="cb2-28">    particle.display()</span></code></pre></div>
<p>Um ein wenig Abwechslung in die Farben zu bringen, habe ich die <a href="https://kantel.github.io/posts/2024041201_neonbunt/">kürzlich vorgestellte</a>, neonbunte Palette <a href="http://cognitiones.kantel-chaos-team.de/multimedia/farbpaletten/mplcyberpunk.html">MPL Cyberpunk</a> benutzt. Und um die Angelegenheit ein wenig spielerischer zu gestalten, habe ich das Hintergrundbild, in dem ein Junge auf einem fernen Planeten das Partikelsystem bestaunt, von der <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/scenario.html">gekünstelten Intelligenzia meines Vertrauens</a> erstellen lassen (siehe unten).</p>
<p>Das ist das elfte Tutorial meiner »microStudio mit Python«-Reihe. Alle bisher im <em>Schockwellenreiter</em> erschienenen Beiträge habe ich hier aufgeführt, um Euch eine Suche zu ersparen:</p>
<ul>
<li>MicroStudio und Python (Teil 1): <a href="https://kantel.github.io/posts/2024032201_microstudio_python_1/">Hallo Brython</a>!</li>
<li>MicroStudio und Python (Teil 2): <a href="https://kantel.github.io/posts/2024032401_microstudio_python_2/">Zombie Apokalypse</a></li>
<li>MicroStudio und Python (Teil 3): <a href="https://kantel.github.io/posts/2024032502_microstudio_python_3/">Dancing Crab</a></li>
<li>MicroStudio und Python (Teil 4): <a href="https://kantel.github.io/posts/2024032703_flying_badger_python/">Flying Badger</a></li>
<li>MicroStudio und Python (Teil 5): <a href="https://kantel.github.io/posts/2024032801_microstudio_noc_1/">PVector2 und »The Nature of Code«</a></li>
<li>MicroStudio und Python (Teil 6): <a href="https://kantel.github.io/posts/2024033102_bouncing_balls_microstudio/">Bouncing Balls</a></li>
<li>MicroStudio und Python (Teil 7): <a href="https://kantel.github.io/posts/2024040201_collision_detection_1/">Kollisionserkennung mit Kreisen</a></li>
<li>MicroStudio und Python (Teil 8): <a href="https://kantel.github.io/posts/2024040401_bouncing_birds/">Bouncing Birds</a></li>
<li>MicroStudio und Python (Teil 9): <a href="https://kantel.github.io/posts/2024040701_rect_collision/">Kollisionserkennung mit Rechtecken</a></li>
<li>MicroStudio und Python (Teil 10): <a href="https://kantel.github.io/posts/2024042301_bubbling_emojis/">Bubbly Emojis</a></li>
<li>MicroStudio und Python (Teil 11): Ein Partikelsystem</li>
</ul>
<p>Und natürlich habe ich dieses Programm auch wieder auf meinen <a href="https://microstudio.dev/i/kantel/pythontutorial11/">microStudio-Account hochgeladen</a>, damit Ihr es anschauen und damit weiter experimentieren könnt. Je länger ich damit Spiele, desto mehr Spaß habe ich mit der Python-Variante von microStudio (auch wenn ich hin und wieder über Beschränkungen der API stolpere). Habt also auch Spaß mit Eurer Version der bunten Kreise!</p>
<hr>
<p><strong>(Hintergrund-) Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/53619313480/">Space Opera (Belgian Comic Style)</a></em>, erstellt mit <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/scenario.html">Scenario</a>. Prompt: »<em>Full moon with a human face smiles at a nightly sky with stars and a few clouds. colored french comic style</em>«. Modell: Stable Diffusion XL, Style: Scifi Magic + Belgian School.</p>



 ]]></description>
  <category>microStudio</category>
  <category>Python</category>
  <category>Brython</category>
  <category>Nature of Code</category>
  <category>Creative Coding</category>
  <guid>https://kantel.github.io/posts/2024042702_microstudio_partikel/</guid>
  <pubDate>Sat, 27 Apr 2024 15:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024042702_microstudio_partikel/images/pythontut11.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Mit der Maus ins Fadenkreuz: Neue (und alte) Packs von Kenney</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024042701_cursorpack/</link>
  <description><![CDATA[ 




<p><a href="https://kenney.nl/media/pages/assets/cursor-pack/2ecc16e7d2-1713916592/preview.png"><img src="https://kantel.github.io/posts/2024042701_cursorpack/images/cursorpack-b.jpg" class="img-fluid"></a></p>
<p>Darauf haben sicher viele von Euch gewartet: Kenney hat ein neues <a href="https://kenney.nl/assets/cursor-pack">Cursor Pack</a> freigegeben, mit über 110 verschiedenen Mauszeigern, alle im PNG-, wie auch im SVG-Format.</p>
<p><a href="https://kenney.nl/media/pages/assets/crosshair-pack/d8d8288a5e-1677697135/preview.png"><img src="https://kantel.github.io/posts/2024042701_cursorpack/images/crosshairpack.jpg" class="img-fluid"></a></p>
<p>Wer dazu noch ein paar Fadenkreuze für sein Spiel benötigt, den verweist Kenney auf sein schon vor ein paar Jahren veröffentlichtes <a href="https://kenney.nl/assets/crosshair-pack">Crosshair Pack</a>, das aus über 200 verschiedenen Sprites besteht.</p>
<p>Wie alles bei Kenney sind auch diese Packs komplett frei und Open Source (<a href="https://creativecommons.org/publicdomain/zero/1.0/">CC0</a>). Wer Kenneys Mühen jedoch mit einem kleinen Obolus anerkennen und unterstützen will, der kann via Itch.io für US-$ 19,95 (oder mehr) das Komplettpaket <strong><a href="https://kenney.itch.io/kenney-game-assets">Kenney Game Assets All-in-1</a></strong> herunterladen, das aus allen von Kenney bisher und in Zukunft veröffentlichten Assets besteht. Aktuell besteht es aus über 40.000 Tiles und Sprites, Audio- und Font-Dateien und noch viel mehr.</p>
<p>Kenney leistet so viel für die Gaming-Community, er hat jede Unterstützung verdient!</p>



 ]]></description>
  <category>Tiles und Sprites</category>
  <category>Spieleprogrammierung</category>
  <guid>https://kantel.github.io/posts/2024042701_cursorpack/</guid>
  <pubDate>Sat, 27 Apr 2024 13:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024042701_cursorpack/images/cursorpack.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Bitsy Update auf Version 8.11</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024042502_bitsy_8_11/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53575356544/"><img src="https://kantel.github.io/posts/2024042502_bitsy_8_11/images/waldnymphen-b.jpg" class="img-fluid"></a></p>
<p>Gestern hat <em>Adam le Doux</em> die Version 8.11 von <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/bitsy.html">Bitsy</a>, der bewußt minimalistisch gehaltenen Engine für narrative 2D-Spiele, <a href="https://ledoux.itch.io/bitsy/devlog/719979/v811-game-tool-combined-tool-for-download-settings-game-data">freigegeben</a>.</p>
<p>Es ist ein größeres Update, das unter der Haube vor allem ein neues »Game Tool« mitbringt. Das soll die bisherigen Tools <em>Download</em>, <em>Settings</em> und <em>Game Data</em> ersetzen und dadurch, daß es diese an einem Ort vereint, für mehr Übersichtlichkeit sorgen.</p>
<p><a href="https://img.itch.zone/aW1nLzE1ODg4MzE5LnBuZw==/original/CJow6p.png"><img src="https://kantel.github.io/posts/2024042502_bitsy_8_11/images/gametool.png" class="img-fluid"></a>&nbsp;<a href="https://img.itch.zone/aW1nLzE1ODg4MzI0LnBuZw==/original/QPk9T%2F.png"><img src="https://kantel.github.io/posts/2024042502_bitsy_8_11/images/oldtools.png" class="img-fluid"></a></p>
<p><em>Das neue »Game Tool« (links) ersetzt diese drei bisherigen Tools (rechts).</em></p>
<p>Eine genaue <a href="https://make.bitsy.org/docs/tools/game/">Beschreibung des Tools</a> findet Ihr in der <a href="https://make.bitsy.org/docs/">Dokumentation</a>, die ebenfalls ein Update erfahren hat.</p>
<p>Ich sollte auch mal wieder etwas mit Bitsy anstellen, denn in der Beschränkung liegt ja bekanntlich die Kraft!</p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/53575356544/">Zwei Waldnymphen</a></em>, erstellt mit <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/scenario.html">Scenario</a>. Prompt: <em>«three naked nymphs, reddish-brown hair, green eyes, big boobs, nice butt, red lips, dance in a sunny clearing, in an enchanted garden with many colorful flowers, A Pan+, with beard, with goat legs, sits on a pedestal, and accompanies her on his flute+, Fox and hare watch the scenario in amazement</em>«. Negative Prompt: <em>»ugly, deformed, noisy, blurry, distorted, out of focus, bad anatomy, extra limbs, poorly drawn face, poorly drawn hands, missing fingers</em>«. Modell: Stable Diffusion XL, Style: Stylized Fantasy + Storybook + 3D.</p>



 ]]></description>
  <category>Bitsy</category>
  <category>Interactive Fiction</category>
  <category>Spieleprogrammierung</category>
  <guid>https://kantel.github.io/posts/2024042502_bitsy_8_11/</guid>
  <pubDate>Thu, 25 Apr 2024 13:45:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024042502_bitsy_8_11/images/waldnymphen.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Aus der Nachbarschaft: Frühlingsfest auf dem Kulturbunker</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024042501_kulturbunker_fruehling/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/47040431434/"><img src="https://kantel.github.io/posts/2024042501_kulturbunker_fruehling/images/kulturbunker2019-b.jpg" class="img-fluid"></a></p>
<p>Wer <a href="https://kantel.github.io/posts/2024041901_rip_gabi/">Gabi</a> kannte, der wußte, daß das Wachküssen des <a href="https://kantel.github.io/posts/2023100601_kulturbunker/">Kulturbunkers in der Rungiusstraße</a> aus seinem Dornröschenschlaf eine Herzensangelegenheit von ihr war. Daher hatte sie sich auch sehr gefreut, als das Kulturlabor »<a href="https://www.trial-error.org/">Trial &amp; Error</a>« vom <a href="https://qm-glasower-strasse.de/">Quartiersmanagements Glasower Straße</a> den Zuschlag für ein dreijähriges Projekt bekommen hatte, das <a href="https://www.trial-error.org/projekte-1/kulturbunker/">Dach des Kulturbunkers wieder zu beleben</a>. Und das ich als vom Quartiersmanagement eingesetzter (ehrenamtlicher) »Projektpate« dieses Projekt begleiten darf (etwas anderes hätte sie mir auch nie verziehen).</p>
<p>Jetzt ist es wieder so weit: Nach drei Auftaktveranstaltungen im kalten Dezember (<a href="https://kantel.github.io/posts/2023120602_wunderstunde_1/">ich</a> <a href="https://kantel.github.io/posts/2023121302_wunderstunde_2/">berichtete</a> <a href="https://kantel.github.io/posts/2023122003_wunderstunde_3/">darüber</a>) kehrt nun an diesem Sonnabend, den 27. April 2024 von 11:00 Uhr bis 15:00 Uhr der Frühling in die Rungiusstraße 19 ein. Zu einem <a href="https://www.trial-error.org/projekte-1/kulturbunker/">Frühlingsfest</a> mit Waffeln, Pflanzentausch und kreativem Workshop ist die Nachbarschaft zur Saisoneröffnung eingeladen.</p>
<p>Bei starkem Regen fällt die Veranstaltung aus und wird nachgeholt, doch die Wetterfrösche versprechen, daß es nicht regnen wird.</p>
<p>Gleichzeitig startet ein Ideenwettbewerb, denn Trial &amp; Error will Eure Ideen auf dem Dach des Kulturbunkers umsetzen. Bis zum 14. Mai könnt Ihr Eure Ideen an <a href="mailto:kulturbunker@trial-error.org">die Veranstalter</a> senden. Vorausschauend ist der 8. Juni für die Realisierung reserviert und am 13. Juli gibt es ein KidsKultur auf dem Dach, falls ihr etwas für die jüngere Zielgruppe habt.</p>
<p>Ansonsten gibt es ab dem 2. Mai 2024 an jedem Donnerstag (außer an Feiertagen) von 15:00 Uhr bis 19:00 Uhr einen Nachbarschaftskaffee auf dem Dach. Und am 4. Mai folgt das Event »Endlich wieder draußen« zusammen mit dem Freilandlabor Britz und dem Projekt Kulturbrücke Jugenddemokratie von der Werkstadt. Aber daran werde ich Euch rechtzeitig auch auf diesen Seiten noch einmal erinnern. Denn das bin ich Gabi schuldig.</p>
<p>Merkt Euch einfach die Adresse: Kulturbunker, Rungiusstraße 19, 12347 Berlin, kommt vorbei und trefft dort Euren Lieblingsblogger.&nbsp;🤓</p>
<hr>
<p><strong>Photo</strong> (<a href="http://creativecommons.org/licenses/by-nc-nd/2.0/">cc</a>) 2019: <em><a href="http://www.gabi-kantel.de/">Gabriele Kantel</a></em></p>



 ]]></description>
  <category>Neukölln</category>
  <category>Kiezfest</category>
  <category>Kulturbunker</category>
  <guid>https://kantel.github.io/posts/2024042501_kulturbunker_fruehling/</guid>
  <pubDate>Thu, 25 Apr 2024 12:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024042501_kulturbunker_fruehling/images/kulturbunker2019.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Google korrigiert kritische Sicherheitslücken in Chrome</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024042402_chrome_update/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53559447758/"><img src="https://kantel.github.io/posts/2024042402_chrome_update/images/octopussyleo1-b.jpg" class="img-fluid"></a></p>
<p>Es ist wieder Mittwoch und damit der Tag, an dem unser aller Datenkrake seinem Flaggschiff das wöchentliche Sicherheitsupdate verpaßt: Google veröffentlicht eine aktualisierte Version 124 (124.0.6367.78/79) seines Browsers Chrome und schließt damit <a href="https://chromereleases.googleblog.com/2024/04/stable-channel-update-for-desktop_24.html">kritische Sicherheitslücken</a>.</p>
<p>Chrome aktualisiert sich (außer bei Linux) über die integrierte Update-Funktion, kann aber – wenn es pressiert – auch <a href="https://www.google.com/intl/de/chrome/browser/">hier geladen</a> werden. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/53559447758/">Octopussy</a></em>, erstellt mit <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/leonardoai.html">Leonardo AI</a>. Prompt: »<em>A sexy female robot flees from a gigantic data octopus, colored french comic style</em>«. Negative Prompt: <em>»ugly, deformed, noisy, blurry, distorted, out of focus, bad anatomy, extra limbs, poorly drawn face, poorly drawn hands, missing fingers</em>«. Modell: Stable Diffusion XL, Style: None.</p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2024042402_chrome_update/</guid>
  <pubDate>Wed, 24 Apr 2024 15:20:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024042402_chrome_update/images/octopussyleo1.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Fast ein Vierteljahrhundert: 24 Jahre Schockwellen reiten</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024042401_24_jahre_schockwellenreiter/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53671652446/"><img src="https://kantel.github.io/posts/2024042401_24_jahre_schockwellenreiter/images/swr24-b.jpg" class="img-fluid"></a></p>
<p>Auch ich hätte mir wirklich eine schönere Zeit gewünscht, um den Jahrestag dieses <del>Weblogs</del> Kritzelhefts zu feiern. Aber ich kann ja nicht – bei aller <a href="https://kantel.github.io/posts/2024041901_rip_gabi/">Trauer über den Verlust</a> – ewig Trübsal blasen, und so habe ich die <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/scenario.html">bildgenerierende gekünstelte Intelligenzia meines Vertrauens</a> gebeten, mir wenigstens einen fröhlichen Surfer zu zeichnen, mit dem ich den 24. Geburtstag des <em>Schockwellenreiters</em> feiern kann.</p>
<p>Denn <a href="http://www.schockwellenreiter.de/2000/04/24.html">heute vor 24 Jahren</a> war es in Berlin unerträglich heiß (28°C), doch statt auf unserer <a href="http://www.kantel.de/privat/dg.html">Dachterrasse</a> (auf die verlinke ich auch nur einmal im Jahr 🤓 – seit unserem Umzug nach Britz vor vierzehnzehn Jahren ist es ja auch nicht mehr »unsere« Dachterrasse) zu hocken und mir die Sonne auf den Bauch scheinen zu lassen, saß ich im schattigen Arbeitszimmer vor dem Rechner, wühlte mich durch die <a href="http://cognitiones.kantel-chaos-team.de/webworking/frameworks/frontier.html">Frontier</a>- und <a href="http://cognitiones.kantel-chaos-team.de/webworking/cms/manila.html">Manila</a>-Dokumentation und hob diese Seiten aus der Taufe.</p>
<p>Das war der Beginn einer fast unendlichen Geschichte. Denn seit beinahe einem Vierteljahrhundert schreibe ich mit dem <em>Schockwellenreiter</em> nahezu täglich das Internet voll. Und auch der jüngste Schicksalsschlag hat mich nicht untergekriegt. Als nächstes Nahziel fasse ich die 25 Jahre ins Auge.</p>
<p>Und warum das alles? Die Antwort liegt im <a href="http://www.schockwellenreiter.de/2000/04/23.html">Motto des Schockwellenreiters</a> – ein Zitat aus dem <a href="https://de.wikipedia.org/wiki/Der_Schockwellenreiter">namensgebenden Roman</a> von <em><a href="https://de.wikipedia.org/wiki/John_Brunner">John Brunner</a></em>:</p>
<blockquote class="blockquote">
<p>Wir sind eine zivilisierte Spezies. Deshalb soll künftig niemand einen unrechtmäßigen Vorteil aufgrund der Tatsache erlangen, daß wir gemeinsam mehr wissen als einer von uns wissen kann.</p>
</blockquote>
<p>In diesem Sinne: Happy Birthday, liebes digitales Kritzelheft. Und mein Dank geht an alle Leserinnen und Leser, die mir bis heute die Treue gehalten haben, oder die neu zu diesen Seiten hinzugekommen sind. <em>Bleibt mir gewogen!</em>&nbsp;😎</p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/53671652446/">Rabbit rides the Shockwave</a></em>, erstellt mit <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/scenario.html">Scenario</a>. Prompt: »<em>The Mad Hatter surfs on a board in the air between houses and trees in a futuristic city. A planet with a ring can be seen in the sky. Little white rabbits with vests and watches scurry about on the streets. colored french comic style</em>«. Negative Prompt: <em>»ugly, beard, deformed, noisy, blurry, distorted, out of focus, bad anatomy, extra limbs, poorly drawn face, poorly drawn hands, missing fingers</em>«. Modell: Stable Diffusion XL, Style: Illustrated Anime + Ethereal Realism.</p>



 ]]></description>
  <category>Interna</category>
  <guid>https://kantel.github.io/posts/2024042401_24_jahre_schockwellenreiter/</guid>
  <pubDate>Wed, 24 Apr 2024 14:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024042401_24_jahre_schockwellenreiter/images/swr24.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>MicroStudio und Python: Bubbly Emojis</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024042301_bubbling_emojis/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53673195352/"><img src="https://kantel.github.io/posts/2024042301_bubbling_emojis/images/pythontutorial10-b.jpg" class="img-fluid"></a></p>
<p>Eigentlich wollte ich meine Experimente mit <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/microstudio.html">microStudio</a> und Python/<a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/brython.html">Brython</a> ja mal für eine Weile <a href="https://kantel.github.io/posts/2024042102_tuesdayjs_47/">unterbrechen</a> und mich anderen Aspekten der kreativen Programmierung zuwenden, doch dann spülte das Video »<a href="https://www.youtube.com/watch?v=Rd1eeHEx_fM">Bubbly Emoji Effect</a>« von <em>Patt Vira</em> in meinen Feedreader. Und diese kreative <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/p5js.html">P5.js</a>-Spielerei faszinierte mich so, daß ich eine eigene Version davon unbedingt in microStudio mit Python implementieren mußte.</p>
<iframe src="pythontutorial10/index.html" class="if16_9" name="Bubbly Emojis">
</iframe>
<p>Für diese Spielerei habe ich wieder meine <a href="https://kantel.github.io/posts/2024032801_microstudio_noc_1/">PVector2-Klasse</a> genutzt, die Ihr – falls Ihr das nachprogrammieren wollt – ebenfalls in Euren Quellcode kopieren müßt. Und damit alles schön objektorientert vonstatten geht, habe ich den Luftblasen-Emojis eine eigene Klasse spendiert:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> uniform, choice</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Emoji:</span>
<span id="cb1-4">  </span>
<span id="cb1-5">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, _x, _y):</span>
<span id="cb1-6">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PVector2(_x, _y)</span>
<span id="cb1-7">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PVector2(uniform(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>), uniform(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb1-8">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.done <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb1-9">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span></span>
<span id="cb1-10">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> choice(emojis_pics)</span>
<span id="cb1-11">  </span>
<span id="cb1-12">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-13">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.add(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel)</span>
<span id="cb1-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb1-15">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.done <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb1-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb1-17">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> </span>
<span id="cb1-18">  </span>
<span id="cb1-19">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> display(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-20">    screen.drawText(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.t, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.size)</span></code></pre></div>
<p>Da es nahezu kein kreatives Programmieren ohne (Pseudo-) Zufallszahlen gibt, habe ich die Funktionen <code>uniform()</code> und <code>choice()</code> aus Pythons <code>random</code>-Bibliothek importiert. Jedes Emoji besitzt einen Vektor für den Ort (<code>loc</code>) und einen zufällig erzeugten Vektor für die Bewegung nach oben (<code>vel</code>). Und aus einer Liste von Emojis wird mit <code>random.choice()</code> zufällig eines ausgewählt.</p>
<p>In der <code>update()</code>-Methode wird das Emoji bewegt, indem die <em>Velocity</em> zur <em>Position</em> (<code>loc</code>) hinzuaddiert wird. Dann wird noch überprüft, ob die Größe des Emojis <img src="https://latex.codecogs.com/png.latex?1"> erreicht oder unterschritten hat. Hat sie das, wird die Eigenschaft <code>done</code> auf <code>True</code> gesetzt, wenn nicht, wird die Größe um <img src="https://latex.codecogs.com/png.latex?0.5"> verringert.</p>
<p>Die <code>display()</code>-Methode nutzt <code>screen.drawText()</code> um das Emoji auf den Bildschirm zu bringen.</p>
<p>Die eigentliche Programmlogik übernimmt dieses Mal die Hauptroutine <code>main</code>:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1">emojis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-2">emojis_pics <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"🤓"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"😎"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"🤡"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"💀"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"🤖"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"🎃"</span>,</span>
<span id="cb2-3">               <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"👽"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"😈"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"👹"</span>]</span>
<span id="cb2-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> init():</span>
<span id="cb2-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update():</span>
<span id="cb2-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> mouse.pressed <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> mouse.left:</span>
<span id="cb2-9">    emoji <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Emoji(mouse.x, mouse.y)</span>
<span id="cb2-10">    emojis.append(emoji)</span>
<span id="cb2-11">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> emoji <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reversed</span>(emojis):</span>
<span id="cb2-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> emoji.done:</span>
<span id="cb2-13">      emojis.remove(emoji)</span>
<span id="cb2-14">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> emoji <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> emojis:</span>
<span id="cb2-15">    emoji.update()</span>
<span id="cb2-16">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if len(emojis) &gt;= 40:</span></span>
<span id="cb2-17">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   system.pause()</span></span>
<span id="cb2-18">  </span>
<span id="cb2-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> draw():</span>
<span id="cb2-20">  screen.clear()</span>
<span id="cb2-21">  screen.fillRect(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, screen.width, screen.height, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(234, 218, 184)"</span>)</span>
<span id="cb2-22">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> emoji <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> emojis:</span>
<span id="cb2-23">    emoji.display()</span></code></pre></div>
<p>Zuerst wird global eine leere Liste für die einzelnen Emojis erzeugt und die (konstante) Liste mit den Bildern der Emojis angelegt. Die <code>init()</code>-Funktion bleibt dieses Mal ungenutzt. Da microScript sie aber dennoch stur aufrufen will, muß sie als leere Funktion (mit dem Befehl <code>pass</code>) implementiert werden.</p>
<p>Dafür erledigt die <code>update()</code>-Funktion von <code>main</code> die ganze Arbeit: Zuerst wird – solange die linke Maustaste gedrückt ist (<code>if mouse.pressed and mouse.left</code>) – ein neues Emoji angelegt und der Liste <code>emojis</code> hinzugefügt. Damit diese Liste aber nicht ins Unermeßliche wächst, wurde ja schon in der <code>update()</code>-Methode der Klasse <code>Emoji</code> überprüft, ob die Größe <img src="https://latex.codecogs.com/png.latex?1"> erreicht oder unterschritten hat in diesem Falle <code>done</code> auf <code>True</code> gesetzt. Daher sollen nun alle Emojis, die kleiner oder gleich <img src="https://latex.codecogs.com/png.latex?1"> sind, gelöscht werden. Geht man aber hierfür die Liste von vorne nach hinten durch, läuft man in Gefahr, daß einzelne Elemente übersprugen werden, da sie mit ihrem Index auf die Position eines schon gelöschten Elements verschoben werden. Daher ist es eine gängige Methode, Löschoperationen vorzunehmen, in dem man die Liste rückwärts durchläuft, denn dann stehen alle gelöschten Elemente oberhalb des aktuellen Indizes. Python besitzt dafür einen genialen Shortcut,</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> emoji <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reversed</span>(emojis):</span>
<span id="cb3-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> emoji.done:</span>
<span id="cb3-3">      emojis.remove(emoji)</span></code></pre></div>
<p>der mit <code>reversed(liste)</code> die Elemente der Liste rückwärts durchläuft und mit <code>remove(element)</code> die gewünschten Listenelemente aus der Liste entfernt.</p>
<p>Zu guter Letzt wird dann nur noch für jedes Emoji aus der (schon gekürzten) Emojis-Liste die <code>update()</code>-Methode aufgerufen. (Die auskommentierten Zeilen dienten nur der Anfertigung des Screenshots.)</p>
<p>Die <code>draw()</code>-Funktion ist wieder simpel: Bei jedem Durchlauf wird der Bildschirm gelöscht, dann über die ganze Größe des Bildschirms ein gefülltes Rechteck mit der Hintergrundfarbe gezogen und letztendlich jedes noch verbliebene Emoji in der aktuellen Größe an der aktuellen Position gezeichnet.</p>
<p>Das war es dann auch schon. Dieses ist das zehnte Tutorial meiner kleinen Reihe zu microStudio mit Python. Alle bisher erschienenen Tutorien sind hier aufgelistet:</p>
<ul>
<li>MicroStudio und Python (Teil 1): <a href="https://kantel.github.io/posts/2024032201_microstudio_python_1/">Hallo Brython</a>!</li>
<li>MicroStudio und Python (Teil 2): <a href="https://kantel.github.io/posts/2024032401_microstudio_python_2/">Zombie Apokalypse</a></li>
<li>MicroStudio und Python (Teil 3): <a href="https://kantel.github.io/posts/2024032502_microstudio_python_3/">Dancing Crab</a></li>
<li>MicroStudio und Python (Teil 4): <a href="https://kantel.github.io/posts/2024032703_flying_badger_python/">Flying Badger</a></li>
<li>MicroStudio und Python (Teil 5): <a href="https://kantel.github.io/posts/2024032801_microstudio_noc_1/">PVector2 und »The Nature of Code«</a></li>
<li>MicroStudio und Python (Teil 6): <a href="https://kantel.github.io/posts/2024033102_bouncing_balls_microstudio/">Bouncing Balls</a></li>
<li>MicroStudio und Python (Teil 7): <a href="https://kantel.github.io/posts/2024040201_collision_detection_1/">Kollisionserkennung mit Kreisen</a></li>
<li>MicroStudio und Python (Teil 8): <a href="https://kantel.github.io/posts/2024040401_bouncing_birds/">Bouncing Birds</a></li>
<li>MicroStudio und Python (Teil 9): <a href="https://kantel.github.io/posts/2024040701_rect_collision/">Kollisionserkennung mit Rechtecken</a></li>
<li>MicroStudio und Python (Teil 10): Bubbly Emojis</li>
</ul>
<p>Und natürlich habe ich auch dieses Tutorial wieder auf meinem <a href="https://microstudio.dev/i/kantel/pythontutorial10/">microStudio-Account hochgeladen</a>.</p>
<p><em>Patt Vira</em>, die die Inspration zu diesem Tutorial gab, hat noch weitere, interessante Videos auf ihrem <a href="https://www.youtube.com/@pattvira">YouTube-Account</a> veröffentlicht, die geradezu nach einem Port nach microStudio schreien. Spontan fallen mir diese ein:</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=YgDY7l2W9eE">💖 Exploding Hearts 💖</a> – <a href="https://editor.p5js.org/pattvira/sketches/B7jG_ZOl0">Quellcode</a></li>
<li><a href="https://www.youtube.com/watch?v=-6v_AYyn49k">Interactive Floating Typography</a> – <a href="https://editor.p5js.org/pattvira/sketches/Rs498E8W3">Quellcode</a></li>
<li><a href="https://www.youtube.com/watch?v=vVXizarOnrU">Interactive Falling Text Rain</a> – <a href="https://editor.p5js.org/pattvira/sketches/I6nhJ_Ffq">Quellcode</a></li>
</ul>
<p>Sie alle sind Teil der Playlist <a href="https://www.youtube.com/playlist?list=PL0beHPVMklwgEn3BSVCMssJOD165ZQiw7">Interactivity</a>, die zur Zeit aus dreizehn Videos mit witzigen Projekten besteht. Da das jüngste Update erst wenige Stunden alt ist, rechne ich noch mit weiteren Tutorials. Schaun wir doch mal, was ich damit alles anstellen kann. <em>Still digging!</em></p>



 ]]></description>
  <category>microStudio</category>
  <category>Python</category>
  <category>Creative Coding</category>
  <guid>https://kantel.github.io/posts/2024042301_bubbling_emojis/</guid>
  <pubDate>Tue, 23 Apr 2024 20:45:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024042301_bubbling_emojis/images/pythontutorial10.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Legend of Lua: Recreating Zelda</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024042103_legend_of_lua/</link>
  <description><![CDATA[ 




<p><a href="https://opengameart.org/sites/default/files/big%20ol%20ssss_0.png"><img src="https://kantel.github.io/posts/2024042103_legend_of_lua/images/legendoflua-b.jpg" class="img-fluid"></a></p>
<p>Einen habe ich aber noch (weil mir gerade so retro zumute ist): <a href="https://www.youtube.com/playlist?list=PLqPLyUreLV8D3Ckd_9UFNvEpg4xCvbL1a">The Legend of Lua: Recreating Zelda</a> ist eine Playlist mit 21 im Schnitt fünfminütigen Tutorials, in denen der YouTuber <em>Challacade</em> zu den Klassikern zurückkehrt und ein Spiel entwickelt, das an das 1986 erschienene Spiel »<a href="https://de.wikipedia.org/wiki/The_Legend_of_Zelda_(Computerspiel)">The Legend of Zelda</a>« erinnern soll.</p>
<iframe class="if16_9" src="https://www.youtube.com/embed/1rzyENB_Zws?si=415G2CEcm4z838yW" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p>Das Besondere daran ist, daß er die freie (zlib/libpng-Lizenz), auf <a href="http://cognitiones.kantel-chaos-team.de/programmierung/lua.html">Lua</a> basierende Spieleengine <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/loeve.html">LÖVE</a> (Love2D) verwendet, die bisher in der Welt der Spieleprogrammierung eher ein Schattendasein fristete, aber in der letzten Zeit einen Popularitätsschub erfahren hatte. Die Engine gibt es für Windows, macOS und Linux, aber auch für Android und iOS und ist auf <a href="https://github.com/love2d/love">GitHub zu finden</a>.</p>
<p>Vielleicht sollte ich dem Teil auch einmal einen Test gönnen (soviel zu meinen Vorsätzen aus dem <a href="https://kantel.github.io/posts/2024042102_tuesdayjs_47/">letzten Beitrag</a>). Der Ersteller der Tutorial-Reihe hat immerhin seit vier Jahren an dem Projekt gearbeitet und sein <a href="https://github.com/kyleschaub/legend-of-lua">Quellcode und die Assets</a> sind ebenfalls auf GitHub zu finden (bis zu den 2022 erschienenen Fassungen, danach hat er sich entschieden, das Projekt zu kommerzialisieren).</p>
<p>Die freie Version nutzt (unter anderem?) die in das 16x16&nbsp;Pixel-Raster passenden »<a href="https://opengameart.org/content/zelda-like-tilesets-and-sprites">Zelda-like Tilesets und Sprites</a>«, die der User <em>ArMM1998</em> unter der <a href="http://creativecommons.org/publicdomain/zero/1.0/">CC0</a> auf OpenGameArt veröffentlicht hat (siehe Screenshot im Bannerbild oben).</p>



 ]]></description>
  <category>Löve</category>
  <category>Lua</category>
  <category>Spieleprogrammierung</category>
  <category>Retrogaming</category>
  <category>Tiles und Sprites</category>
  <guid>https://kantel.github.io/posts/2024042103_legend_of_lua/</guid>
  <pubDate>Sun, 21 Apr 2024 19:50:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024042103_legend_of_lua/images/legendoflua.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Interaktive Geschichten für das Web: Tuesday JS Version 47 ist draußen</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024042102_tuesdayjs_47/</link>
  <description><![CDATA[ 




<p><a href="https://img.itch.zone/aW1nLzE1ODQxNTgzLnBuZw==/original/Ru%2FqnS.png"><img src="https://kantel.github.io/posts/2024042102_tuesdayjs_47/images/tuesdayjs47-b.jpg" class="img-fluid"></a></p>
<p>Nein, dieses Mal habe ich es nicht <a href="https://kantel.github.io/posts/2024033103_tuesdayjs_46/">übersehen</a>: Gestern wurde von <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/tuesdayjs.html">Tuesday JS</a>, der kleinen, plattformübergreifenden (webbasiert, Android, macOS und Windows) und freien (Apache 2.0-Lizenz), aber dennoch leistungsstarken Engine, die interaktive Geschichten (und mehr) für das Web erzeugen kann, die Version&nbsp;47 zum Download freigegeben.</p>
<p>Es ist ein größeres Update. Neu sind unter anderem eine verbesserte Nutzererfahrung für die Android-Version, ein verbesserter Code-Editor mit noch mehr Syntax-Highlighting und ein neuer Default-Style.</p>
<p>Da es momentan sowieso einen Bruch ein meinem Leben gibt, sollte ich vielleicht meine Beschäftigung mit <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/microstudio.html">microStudio</a>/Python ein wenig ruhen lassen und mich wieder dem Erzählen interaktiver Geschichten zuwenden. Denn das habe ich in den letzten Wochen sträflich vernachlässigt. Da kann die neue Tuesday-JS-Version ein willkommener Anlaß für einen Neustart sein.</p>



 ]]></description>
  <category>Tuesday JS</category>
  <category>Interactive Fiction</category>
  <category>Spieleprogrammierung</category>
  <guid>https://kantel.github.io/posts/2024042102_tuesdayjs_47/</guid>
  <pubDate>Sun, 21 Apr 2024 18:05:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024042102_tuesdayjs_47/images/tuesdayjs47.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Pygame/Pygbag ohne Umwege in die eigene Webseite einbinden</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024042101_pygbag_standalone/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53669079239/"><img src="https://kantel.github.io/posts/2024042101_pygbag_standalone/images/pygbagatlocalhost-b.jpg" class="img-fluid"></a></p>
<p>Das Leben muß ja weitergehen und so habe ich mich zur Ablenkung eines schon lange offenstehenden Problems angenommen: Wie bringe ich <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a>-Spielen, die ich mit Hilfe von <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygbag.html">Pygbag</a> webtauglich gemacht habe, bei, daß sie sich direkt in Webseiten einbinden lassen, ohne den Umweg über spezielle Dienste wie zum Beispiel <a href="https://kantel.itch.io/">Itch.io</a> nehmen zu müssen?</p>
<p>Ich glaube, ich habe einen Weg gefunden (als Beispiel habe ich mein altes <a href="https://kantel.github.io/posts/2023060804_pygbag_oop/">Pygbag-OOP-Template</a> wieder ausgegraben):</p>
<iframe src="pygbag_template/index.html" class="if16_9" name="Pygbag-Template">
</iframe>
<p>Den ersten Schritt habe ich der <a href="https://github.com/pygame-web/pygbag">Dokumentation</a> entnommen. Man muß nach der Installation von Pygbag zusätzlich</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pygbag</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>your.app.folder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
<p>aufrufen (<code>&lt;your.app.folder&gt;</code> ist natürlich das Verzeichnis Eures Pygame/Pygbag-Spiels). Wie oft man dies machen muß, weiß ich leider nicht, aber wenn nach einer Änderung das Spiel nicht mehr im Browser startet, schadet es zumindest nach meiner Erfahrung nicht, das Kommando noch einmal zu wiederholen<sup>1</sup>.</p>
<p>Das zweite Problem war, daß die Webversion nicht meine Assets (in diesem Fall das Bildchen) laden konnte. Hier war die Ursache schnell ausgemacht: WebAssembly kommt mit den (Python-) Befehlen</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1">DATAPATH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(os.getcwd(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>)</span>
<span id="cb2-2">img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.image.load(os.path.join(DATAPATH, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"platformchar_idle.png"</span>)).convert_alpha()</span></code></pre></div>
<p>nicht zurecht. Diese beiden Zeilen einfach durch die Zeile</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1">img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.image.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data/platformchar_idle.png"</span>).convert_alpha()</span></code></pre></div>
<p>zu ersetzen, löste auch dieses Problem.</p>
<p>Jetzt waren nur noch die von Pygbag erzeugten und im Ordner <code>web</code> abgelegten Dateien auf meinen Server hochzuladen und die dort abgelegte Datei <code>index.html</code> (wie <a href="https://kantel.github.io/posts/2024021801_iframe_respnonsive/">hier beschrieben</a>) in einem <code>Iframe</code> aufzurufen<sup>2</sup>.</p>
<p>Noch nicht gelöst ist das Problem, daß die Browser einige Tasten gierig an sich reißen (in diesem Fall die Pfeiltasten <code>UP</code>, <code>DOWN</code>, <code>RIGHT</code> und <code>LEFT</code>). Ob man dieses lösen kann oder ob man nach alter Väter Sitte besser auf die Tasten <code>a</code>, <code>s</code>, <code>w</code> und <code>d</code> ausweicht, steht als nächstes auf meiner Agenda. <em>Still digging!</em></p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Fußnoten</h2>

<ol>
<li id="fn1"><p>Der Sinn dieses Aufrufs hat sich mir leider nicht erschlossen. Ob er tatsächlich notwendig ist, weiß ich auch nicht wirklich (ich hatte den Aufruf getätigt, <strong>bevor</strong> ich irgend etwas anderes probiert hatte). Aber er scheint – wie ich oben schon schrieb – zumindest nicht zu schaden.↩︎</p></li>
<li id="fn2"><p>Pygbag erzeugt zusätzlich noch einen Folder <code>web-cache</code>, der nach jedem Aufruf immer »fetter« wird. Ich hielt daher ein Hochladen dieses Verzeichnisses nicht für sinnvoll.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Python</category>
  <category>Pygame</category>
  <category>Pygbag</category>
  <category>Spieleprogrammierung</category>
  <guid>https://kantel.github.io/posts/2024042101_pygbag_standalone/</guid>
  <pubDate>Sun, 21 Apr 2024 17:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024042101_pygbag_standalone/images/pygbagatlocalhost.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Gabriele Kantel (4. Januar 1959 – 19. April 2024)</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024041901_rip_gabi/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53663996486/"><img src="https://kantel.github.io/posts/2024041901_rip_gabi/images/gabi-b.jpg" class="img-fluid"></a></p>
<p>Heute gegen 8:00 Uhr in der Früh ist meine Partnerin und Ehefrau <em><a href="http://www.gabi-kantel.de/Website/Willkommen.html">Gabriele (Gabi) Kantel</a> (geb. Strauchfuß)</em> nach kurzer, aber heftiger Krankheit im Klinikum Neukölln friedlich eingeschlafen. Sie war der bessere Teil unseres Kantel-Chaos-Teams.</p>
<p>Ihr herzliches Lachen, das alle fröhlich stimmte, ist für immer verstummt, ihre Energie, die mich ständig antrieb, ist erloschen und ihre Liebe, die mich umfloß, wird mir unendlich fehlen. Doch was bleibt ist die dankbare Erinnerung an 37&nbsp;gemeinsame Jahre, die mir niemand nehmen kann.</p>
<p>Ich bin unendlich traurig.</p>



 ]]></description>
  <category>Interna</category>
  <guid>https://kantel.github.io/posts/2024041901_rip_gabi/</guid>
  <pubDate>Fri, 19 Apr 2024 12:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024041901_rip_gabi/images/gabi.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Google korrigiert mit Version 124 seines Browsers Chrome kritische Sicherheitslücken</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024041702_chrome_update/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53559703530/"><img src="https://kantel.github.io/posts/2024041702_chrome_update/images/datenkrakeseaart1-b.jpg" class="img-fluid"></a></p>
<p>Unser aller Datenkrake liefert auch wieder die wöchentlichen Sicherheitskorrekturen für sein Flagschiff aus: Google veröffentlicht das Update der Version 124 (124.0.6367.60/61) seines Browsers Chrome und schließt damit <a href="https://chromereleases.googleblog.com/2024/04/stable-channel-update-for-desktop_16.html">kritische Sicherheitslücken</a>.</p>
<p>Chrome aktualisiert sich (außer bei Linux) über die integrierte Update-Funktion, kann aber – wenn es pressiert – auch <a href="https://www.google.com/intl/de/chrome/browser/">hier geladen</a> werden. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/53559703530/">Octopussy</a></em>, erstellt mit <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/seaart.html">SeaArt AI</a>. Prompt: »<em>A sexy female robot flees from a gigantic data octopus, colored french comic style</em>«. Modell: Stable Diffusion XL, Style: Realistic Fantasy Mix SDXL.</p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2024041702_chrome_update/</guid>
  <pubDate>Wed, 17 Apr 2024 16:50:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024041702_chrome_update/images/datenkrakeseaart1.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Mozilla Thunderbird Version 115.10 freigegeben</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024041701_thunderbird_update/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53539789685/"><img src="https://kantel.github.io/posts/2024041701_thunderbird_update/images/donnervogel3-b.jpg" class="img-fluid"></a></p>
<p>Wie fast immer folgt der Donnervogel dem <a href="https://kantel.github.io/posts/2024041601_firefox_update/">Feuerfuchs auf dem Fuß</a>: Die Entwickler des <a href="http://www.mozillamessaging.com/">Mozilla Thunderbird</a> haben das Update auf die Version 115.10 freigegeben und damit auch wieder <a href="https://www.thunderbird.net/en-US/thunderbird/115.10.0/releasenotes/">Sicherheitslücken</a> behoben.</p>
<p>Thunderbird weist selbst auf dieses Update hin. Diese Prozedur kann aber auch wie immer über das Menü <code>Hilfe &gt; Über Thunderbird</code> angestoßen werden. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/53539789685/">Bunter Donnervogel</a></em>, erstellt mit <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/scenario.html">Scenario</a>. Prompt: »<em>A huge colorful+ thunderbird, in a clearing, in an enchanted spring forest</em>«. Modell: Stable Diffusion XL, Style: Creepy Nordic Fairytale.</p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2024041701_thunderbird_update/</guid>
  <pubDate>Wed, 17 Apr 2024 16:20:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024041701_thunderbird_update/images/donnervogel3.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Damit ich es nicht vergesse: NetLogo (Video-) Tutorials</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024041602_netlogo_tuts/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53589779258/"><img src="https://kantel.github.io/posts/2024041602_netlogo_tuts/images/altemannlogo-b.jpg" class="img-fluid"></a></p>
<p>Ich weiß ja nicht, ob ich alter Mann in diesem Leben noch jemals etwas mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/netlogo.html">NetLogo</a> anstellen werde, der Multi-Agenten-Programmiersprache mit integrierter Modellierungsumgebung. Aber das Teil ist ein faszinierendes Spielzeug, das mir immer wieder in <a href="https://kantel.github.io/posts/2023110301_agenten_archaeologie/">diversen Anwendungsszenarien</a> unterkommt und mir dabei jedes Mal ins Gesicht schreit: »Stell doch etwas mit mir an!«</p>
<p>Darum habe ich – damit ich im Fall der Fälle einen Einstiegspunkt besitze – mir ein paar vielversprechende Playlisten mit Video-Tutorials zu NetLogo herausgesucht und sie hier aufgeführt, damit sie für mich wiederauffindbar sind.</p>
<ul>
<li><p>»<a href="https://www.youtube.com/playlist?list=PLsv8cj_Tu8KuF54jMWP576wmRy6Obigww">NetLogo - The ultimate tutorial</a>« des Kanals <em>Social Complexity/Computational Social Science</em> besteht aus dreizehn maximal zehnminütigen Videos und überschneidet sich teilweise mit der Reihe »<a href="https://www.youtube.com/playlist?list=PLsv8cj_Tu8Ks_JKH9ZshfA6C6DO3MAG_q">Agent-based modeling - All you wanted to know</a>« (elf Videos).</p></li>
<li><p>Die »<a href="https://www.youtube.com/playlist?list=PL8D7C9C2B47090E80">NetLogo Tutorials</a>« von <em>Ralph Abraham</em> bestehen aus vierzehn Videos, die zwischen fünf und fünfzehn Minuten lang sind.</p></li>
<li><p><em>José Vidal</em> hatte schon vor über zehn Jahren die Playlist »<a href="https://www.youtube.com/playlist?list=PLSx7bGPy9gbHivKzRg2enzdABgKUd3u-E">Agent-Based Modeling and Multiagent Systems using NetLogo</a>« (34 Videos mit je zwischen zehn Minuten und einer Stunde Laufzeit) erstellt. Eine komprimierte Zusammenfassung findet Ihr in seinen »<a href="https://www.youtube.com/playlist?list=PLSx7bGPy9gbFCWOQ6bAb_4ASLIrblXhqP">NetLogo Programming Tutorials</a>« (zwölf Videos).</p></li>
<li><p>Und da Modellbildung und Simulation immer auch eine Schnittstelle zur Spieleprogrammierung besitzt, zum Schluß noch die NetLogo-Tutorial-Reihe »<a href="https://www.youtube.com/playlist?list=PLJTCLffaZ2Ztxx1Pzp1qTkBX9hphS1YsZ">Agent Based Model to Make a Video Game</a>« des Kanals <em>Thaprobane Interactive</em>, die aus achtzehn eher kürzeren Videos besteht und gerade einmal zwei Jahre jung ist (das ist für NetLogo-Verhältnisse bestenfalls ein »Grünschnabel«-Alter).</p></li>
</ul>
<p>So, wenn es mich jetzt überkommen sollte, bin ich gerüstet. Und vielleicht sind einige der Links ja auch für Euch da draußen von Interesse?</p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/53589779258/">Alter Mann am Computer</a></em>, erstellt mit <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/scenario.html">Scenario</a>. Prompt: »<em>An old man, white hair, clean-shaven, without beard+, blue eyes, glasses, sits at a desk in front of huge monitors with lots of colorful diagrams, there are other open books on the desk, and there is a large mug of steaming coffee next to them, and a computer keyboard in front of the monitor, on the wall there are shelves with files and books, the spring sun shines through a large window, colored french comic style</em>«, Negative Prompt: »<em>ugly, beard, deformed, noisy, blurry, distorted, out of focus, bad anatomy, extra limbs, poorly drawn face, poorly drawn hands, missing fingers, tie</em>«. Modell: Stable Diffusion XL, Style: Scifi Magic + Belgian School.</p>



 ]]></description>
  <category>NetLogo</category>
  <category>Simulation</category>
  <category>Modellbildung</category>
  <category>Dynamische Systeme</category>
  <guid>https://kantel.github.io/posts/2024041602_netlogo_tuts/</guid>
  <pubDate>Tue, 16 Apr 2024 19:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024041602_netlogo_tuts/images/altemannlogo.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Mozilla veröffentlicht neue Firefox-Versionen</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024041601_firefox_update/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53658687030/"><img src="https://kantel.github.io/posts/2024041601_firefox_update/images/firefoxspring-b.jpg" class="img-fluid"></a></p>
<p>Die Entwickler des Mozilla Firefox haben die neue <a href="https://www.mozilla.org/en-US/firefox/125.0.1/releasenotes/">Version 125.0.1</a> und die <a href="https://www.mozilla.org/en-US/firefox/115.10.0/releasenotes/">Version ESR 115.10</a> veröffentlicht und darin auch wieder Sicherheitslücken behoben. In die Updates sind auch wieder viele Veränderungen geflossen.</p>
<p>Firefox weist selbst auf dieses Update hin. Diese Prozedur kann aber auch wie immer über das Menü <code>Hilfe &gt; Über Firefox</code> angestoßen werden. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/53658687030/">Feuerfuchs im Frühling</a></em>, erstellt mit <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/scenario.html">Scenario</a>. Prompt: »<em>a naked nymph bathing in a stream in an enchanted garden and watching two fire foxes playing in the spring sunshine</em>«, Negative Prompt: »<em>ugly, deformed, noisy, blurry, distorted, out of focus, bad anatomy, extra limbs, poorly drawn face, poorly drawn hands, missing fingers, extra legs, extra tail</em>«. Modell: Stable Diffusion XL, Style: Detailed RPG Anime Characters.</p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2024041601_firefox_update/</guid>
  <pubDate>Tue, 16 Apr 2024 16:10:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024041601_firefox_update/images/firefoxspring.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Es ist ja alles so neonbunt hier – neue Farbpalette in meinem Wiki</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024041201_neonbunt/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53649386211/"><img src="https://kantel.github.io/posts/2024041201_neonbunt/images/cyberpunk-b.jpg" class="img-fluid"></a></p>
<p>Eher zufällig spülte der Artikel »<a href="https://towardsdatascience.com/how-to-make-cyberpunk-dark-mode-data-visualizations-in-python-b28f82386e75">How to Make Cyberpunk »Dark Mode« Data Visualizations in Python</a>« von <em>Mia Dwyer</em> in meinen Feedreader. Der war zwar hinter einer Bezahlschranke versteckt, aber der verwendete <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/matplotlib.html">Matplotlib</a>-Stil »mplcyberpunk« ist unter einer MIT-Lizenz auf <a href="https://github.com/dhaitz/mplcyberpunk/tree/main">GitHub zu finden</a>.</p>
<p>Und da man ja bekanntlich niemals zu viele Farbpaletten kennen kann, auf die man für Visualisierungen oder kreative Programme zurückgreifen möchte, habe ich aus dem Quellcode die Farben extrahiert und sie als Farbpalette <strong><a href="http://cognitiones.kantel-chaos-team.de/multimedia/farbpaletten/mplcyberpunk.html">MPL Cyberpunk</a></strong> in <a href="http://cognitiones.kantel-chaos-team.de/index.html">meinem Wiki</a> veröffentlicht, damit auch Ihr Kreatives damit anstellen könnt. Habt Spaß damit&nbsp;…</p>



 ]]></description>
  <category>Farbpaletten</category>
  <category>Visualisierung</category>
  <category>Creative Coding</category>
  <guid>https://kantel.github.io/posts/2024041201_neonbunt/</guid>
  <pubDate>Fri, 12 Apr 2024 19:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024041201_neonbunt/images/cyberpunk.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
