<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Der Schockwellenreiter</title>
<link>https://kantel.github.io/index.html</link>
<atom:link href="https://kantel.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description>Schockwellenreiter</description>
<generator>quarto-1.3.433</generator>
<lastBuildDate>Wed, 16 Aug 2023 14:05:00 GMT</lastBuildDate>
<item>
  <title>Microsoft ver√∂ffentlicht Update f√ºr Office for Mac</title>
  <dc:creator>J√∂rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023081601_office_mac_update/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjtIRqgpSHCrwSdoA5mJewqKA6u12JKL5HrHi7fQ4ZTC5cSPZVsfPVJx3lj7Bmd44MI9qOPg9gPn1c-zXZJlVDXPxSWA2Vu9Q58FNv6maBQLdZwwbYUv102yEiCzf0e2VGtdqRvhy8Z9HsiIjHJK4opHd3FB1eh06-rNvCy7scbif7cyOBt8gVkXiOF9x07/s1276/T.E.%20Powers,%20Nov%2026,%201912.jpeg"><img src="https://kantel.github.io/posts/2023081601_office_mac_update/images/thanksgivingsport-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Microsoft liefert mit dem <a href="https://docs.microsoft.com/en-us/officeupdates/release-notes-office-for-mac">Update auf 16.76 f√ºr Office 365, 2021 und 2019 for Mac</a> nat√ºrlich auch wieder aktuelle Sicherheitskorrekturen.</p>
<p>Sofern Office nicht schon von sich aus darauf hinweist, erh√§lt man die Korrekturen am einfachsten √ºber Microsofts AutoUpdate ‚Äì in einem beliebigen Office-Programm √ºber Men√º <code>Hilfe &gt; Auf Updates √ºberpr√ºfen</code>. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">pers√∂nlicher CERT</a> per Email.)</em></p>
<p><em>(Bild: <a href="http://john-adcock.blogspot.com/2023/07/t-e-powers-two-obituaries.html">Thomas E. Powers</a> (1870-1939), Chicago Examiner, 26. November 1912)</em></p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2023081601_office_mac_update/index.html</guid>
  <pubDate>Wed, 16 Aug 2023 14:05:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023081601_office_mac_update/images/thanksgivingsport.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Neu in meinem Wiki: Tweego</title>
  <dc:creator>J√∂rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023081502_tweego/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.youtube.com/watch?v=sy2lye_3wpg"><img src="https://kantel.github.io/posts/2023081502_tweego/images/tweego-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Wenn Dein Visual-Novel-Projekt Dir √ºber den Kopf zu wachsen droht, dann nimmst Du einfach ein paar blasse, farbstichige Food-Photos und <a href="http://www.motoslave.net/tweego/">Tweego</a> ‚Äì und alles wird wieder gut. Aber im Ernst: Der freie (BSD-Lizenz), in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/go.html">Go</a> geschriebene <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/twine2.html">Twine</a>-/Twee-Compiler k√∂nnte eine L√∂sung f√ºr meine Idee zu sein, einen Prototypen interaktiver Geschichten erst in Twine zu entwickeln und dann das endg√ºltige Produkt in <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/renpy.html">Ren‚ÄôPy</a> zu schreiben.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/sy2lye_3wpg" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Das w√§re dann so etwas wie die <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/inkle.html">Ink</a>-/<a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/unity.html">Unity</a>-Integration. Daf√ºr spricht, da√ü man Tweego-Skripte in einem Editor wie <a href="http://cognitiones.kantel-chaos-team.de/produktivitaet/visualstudiocode.html">Visual Studio Code</a> erstellen und bearbeiten kann. Ich bearbeite meine Ren‚ÄôPy-Skripte ebenfalls in Visual Studio Code, daher d√ºrfte der Transfer von der einen in die andere Applikation recht schmerzfrei verlaufen.</p>
<p>Ob diese Kombination wirklich etwas taugt, mu√ü ich erst noch durch weitere Tests herausfinden. Aber wie immer in solchen F√§llen habe ich <strong><a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/tweego.html">Tweego</a></strong> schon einmal eine Seite in <a href="http://cognitiones.kantel-chaos-team.de/index.html">meinem Wiki</a> spendiert. <em>Still digging!</em></p>



 ]]></description>
  <category>Spieleprogrammierung</category>
  <category>Twine</category>
  <category>RenPy</category>
  <category>Visual Studio Code</category>
  <category>Interaktive Fiction</category>
  <guid>https://kantel.github.io/posts/2023081502_tweego/index.html</guid>
  <pubDate>Tue, 15 Aug 2023 17:45:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023081502_tweego/images/tweego.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Der Weg nach Hogwarts f√ºhrt √ºber die Neuk√∂llner B√ºrgerstra√üe</title>
  <dc:creator>J√∂rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023081501_weg_nach_hogwarts/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53118329366/"><img src="https://kantel.github.io/posts/2023081501_weg_nach_hogwarts/images/hogwarts-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Denn in die B√ºrgerstra√üe kann man zwar in eine Richtung hineinfahren (Einbahnstra√üe), aber heraus kommt man dann ohne Zauberei nicht mehr (Sackgasse). Was sich die Neuk√∂llner Beh√∂rden bei dieser Verkehrsf√ºhrung gedacht haben, wissen vermutlich nicht einmal sie selber.</p>
<p>An so eine Form der Verkehrsberuhigung habe ich in meinen wildesten Kiezblock-Tr√§umen nicht einmal zu denken gewagt. Aber jetzt hat mich das Bezirksamt auf die Idee gebracht. Das habt Ihr nun davon.&nbsp;ü§ì <em>(Photo (<a href="http://creativecommons.org/licenses/by-nc-nd/2.0/">cc</a>) 2023: <a href="http://cognitiones.kantel-chaos-team.de/cv.html">J√∂rg Kantel</a>)</em></p>



 ]]></description>
  <category>Neuk√∂lln</category>
  <category>Beh√∂rdenversagen</category>
  <category>Failed City Neuk√∂lln</category>
  <guid>https://kantel.github.io/posts/2023081501_weg_nach_hogwarts/index.html</guid>
  <pubDate>Tue, 15 Aug 2023 11:20:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023081501_weg_nach_hogwarts/images/hogwarts.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Die Folgen von Verdr√§ngung und Profitmaximierung</title>
  <dc:creator>J√∂rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023081403_profitmaximierung/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53115248352/"><img src="https://kantel.github.io/posts/2023081403_profitmaximierung/images/profitmaximierung-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Da kann man nur sagen: Dumm gelaufen! Warum mu√üten die Besitzer des Ladens auch das bisherige Friseur-Team, das dort fast 25&nbsp;Jahre ans√§ssig war und unter anderem auch meinen Kopf versch√∂nerte, aus Profitgier vor die T√ºre setzen? Ich mu√ü gestehen, ich kann (m)ein ger√ºtteltes Ma√ü an Schadenfreude einfach nicht verhehlen. <em>(Photo (<a href="http://creativecommons.org/licenses/by-nc-nd/2.0/">cc</a>) 2023: <a href="http://cognitiones.kantel-chaos-team.de/cv.html">J√∂rg Kantel</a>)</em></p>



 ]]></description>
  <category>Neuk√∂lln</category>
  <category>Gentrifizierung</category>
  <guid>https://kantel.github.io/posts/2023081403_profitmaximierung/index.html</guid>
  <pubDate>Mon, 14 Aug 2023 17:50:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023081403_profitmaximierung/images/profitmaximierung.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Pl√§ne schmieden im Garten: Py5 in Beispielen?</title>
  <dc:creator>J√∂rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023081402_plaene_schmieden/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53113454571/"><img src="https://kantel.github.io/posts/2023081402_plaene_schmieden/images/plaeneschmieden-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Gestern hatte ich den ersten warmen und sonnigen Nachmittag nach der langen Regenperiode mit ein paar B√ºchern und einem (alkoholfreien ‚Äì seit meinem Schlaganfall vor knapp zwei Jahren trinke ich weitestgehend abstinent) Bier auf unserer Terrasse verbracht. Und da es schon wieder etwas zu warm und zu schw√ºl zum Lesen war, geriet ich ins D√∂sen und dann in eine von den B√ºchern auf dem Gartentisch inspirierte Tr√§umerei: Ich hatte ja seinerzeit alle meine im <em>Schockwellenreiter</em> (erst-) erschienenen <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processingpy.html">Processing.py</a>-Tutorials auf der Website ¬ª<a href="http://py.kantel-chaos-team.de.s3-website-us-east-1.amazonaws.com/">Processing.py in Beispielen</a>¬´ geschlossen gesammelt und ver√∂ffentlicht. Warum sollte ich nicht etwas √§hnliches mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/py5.html">Py5</a> anstellen?</p>
<p>F√ºr mich ist Py5 sowieso so etwas wie der legitime Nachfolger von Processing.py, das durch sein (C)Python 3-Fundament zus√§tzlich die M√∂glichkeiten einschlie√üt, die der <em>Scientific Stack</em> von Python bietet. Damit meine ich vor allem die Bibliotheken <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/numpy.html">Numpy</a>, <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/scipy.html">SciPy</a>, <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/pillow.html">Pillow</a> und ‚Äì wenn <em>Jim Schmitz</em>, der Sch√∂pfer von Py5, seine Ank√ºndigung vom <a href="https://kantel.github.io/posts/2023072402_py5_update/">letzten Update</a> wahrmacht ‚Äì auch die <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/matplotlib.html">Matplotlib</a>. Diese F√ºlle der neuen M√∂glichkeiten alleine rechtfertigt schon eine √úberarbeitung.</p>
<p>Hinzu kommt, da√ü auch ich in den letzten Jahren einiges dazugelernt und einige neue Themen entdeckt habe. Die neue Tutorialreihe wird daher mit Sicherheit kein Eins-zu-Eins-Port der Processing.py-Tutorials werden, sondern es wird (hoffentlich!) etwas neues entstehen.</p>
<p>Und auch technisch m√∂chte ich (mindestens) eine √Ñnderung vornehmen. W√§hrend ich die Site ¬ªProcessing.py in Beispielen¬´ noch mit <a href="http://cognitiones.kantel-chaos-team.de/webworking/staticsites/mkdocs.html">MkDocs</a> realisiert hatte, m√∂chte ich f√ºr das neue Projekt meine <a href="http://cognitiones.kantel-chaos-team.de/webworking/staticsites/quarto.html">Quarto</a>- (und meine <a href="http://cognitiones.kantel-chaos-team.de/produktivitaet/visualstudiocode.html">Visual Studio Code</a>-) Skills ausbauen und eventuell daf√ºr auch das <a href="http://cognitiones.kantel-chaos-team.de/webworking/tools/tuftecss.html">Tufte CSS</a> einsetzen.</p>
<p>Es gibt so viel zu tr√§umen und manche Tr√§ume sollten einfach wahr werden. <em>Still digging!</em> <em>(Photo (<a href="http://creativecommons.org/licenses/by-nc-nd/2.0/">cc</a>) 2023: <a href="http://cognitiones.kantel-chaos-team.de/cv.html">J√∂rg Kantel</a>)</em></p>



 ]]></description>
  <category>Py5</category>
  <category>Python</category>
  <category>Processing</category>
  <category>Creative Coding</category>
  <category>Spieleprogrammierung</category>
  <guid>https://kantel.github.io/posts/2023081402_plaene_schmieden/index.html</guid>
  <pubDate>Mon, 14 Aug 2023 16:55:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023081402_plaene_schmieden/images/plaeneschmieden.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Neues aus der Graphikschmiede von Kenney.nl</title>
  <dc:creator>J√∂rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023081401_neues_von_kenney/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://kenney.nl/media/pages/assets/tiny-battle/9420b535c9-1691487572/sample.png"><img src="https://kantel.github.io/posts/2023081401_neues_von_kenney/images/tinybattle-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Aus der niederl√§ndischen Graphikschmiede <a href="https://kenney.nl/">Kenney</a>, der wir alle Tonnen von freien (<a href="https://creativecommons.org/share-your-work/public-domain/cc0/">CC0</a>) <a href="https://kenney.nl/assets">Spiele-Assets</a> verdanken, gibt es neues zu berichten:</p>
<p><strong>Erstens</strong> hat Kenney mit <a href="https://kenney.nl/assets/tiny-battle">Tiny Battle</a> ein weiteres Sprite- und Tileset seiner <a href="https://kenney.nl/assets/series:Tiny">Tiny-Reihe</a> ver√∂ffentlicht. Die Tiles und Sprites passen in das von mir derzeit bevorzugte 16x16 Pixel-Raster und lassen sich alle gut miteinander kombinieren ‚Äì nicht nur mit den anderen Bildchen aus der <a href="https://kantel.github.io/posts/2023072303_freie_tiles_und_sprites/">Tiny- und Pixel-Platformer-Reihe</a> und dem <a href="https://kantel.github.io/posts/2023072602_weitere_16x16_tiles_kenney/">Roguelike/RPG-Pack</a> aus dem Hause Kenney, sondern mit ein wenig Bastelarbeit auch mit anderen freien Sets, die man in das 16x16-Raster pressen kann.</p>
<p><strong>Zweitens</strong> ‚Äì da Partikelsysteme momentan sowieso <a href="https://kantel.github.io/posts/2023080802_py5_particelsystem_1/">mein Thema</a> sind ‚Äì fiel mir ein nettes Tutorial von Kenney auf: ¬ª<a href="https://kenney.nl/learn/drawing-particle-effect-sprites">Partikel und Partikelsystem selber zeichnen</a>. Als Verfechter freier Software nutzt Kenney das freie (GPL) <a href="http://cognitiones.kantel-chaos-team.de/multimedia/computergraphik/gimp.html">Gimp</a> als Malprogramm, jedoch sollte das Tutorial auch mit jedem anderen, besseren (Pixel-) Graphikprogramm nachvollziehbar sein (auch wenn es wirklich nicht immer Photoshop sein mu√ü).</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/l87PwbgFCuQ" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p><strong>War sonst noch was?</strong> Ach ja, die <a href="https://kantel.github.io/posts/2023072102_kenney_jam_2023/">Kenney Jam 2023</a> ist erfolgreich zu Ende gegangen (auch wenn ich <a href="https://kantel.github.io/posts/2023072301_night_in_the_park/">meinen Beitrag</a> nicht rechtzeitig fertigestellt hatte). Im Nachtrag hat Kenney noch <a href="https://www.youtube.com/watch?v=l87PwbgFCuQ">ein Video mit <strong>seinen</strong> Favoriten</a> auf YouTube ver√∂ffentlicht. Habt Spa√ü damit.</p>



 ]]></description>
  <category>Tiles und Sprites</category>
  <category>Spieleprogrammierung</category>
  <guid>https://kantel.github.io/posts/2023081401_neues_von_kenney/index.html</guid>
  <pubDate>Mon, 14 Aug 2023 14:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023081401_neues_von_kenney/images/tinybattle.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Py5 im Module Mode in Visual Studio Code</title>
  <dc:creator>J√∂rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023081302_py5_vscode/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53113984909/"><img src="https://kantel.github.io/posts/2023081302_py5_vscode/images/py5modulemode-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Ich bin Euch ja noch den Beweis schuldig, da√ü <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/py5.html">Py5</a> im <a href="https://py5coding.org/content/py5_modes.html">Module Mode</a> so ziemlich mit allem zusammenspielt, was auch nur im Entferntesten nach einem Editor oder einer IDE aussieht. Als Beispiel habe ich es hier einmal mit <a href="http://cognitiones.kantel-chaos-team.de/produktivitaet/visualstudiocode.html">Visual Studio Code</a> durchgezogen (vergleiche <a href="https://www.flickr.com/photos/schockwellenreiter/53113984909/">Screenshot</a>), aber auch andere Editoren (wie zum Beispiel <a href="http://cognitiones.kantel-chaos-team.de/produktivitaet/geany.html">Geany</a>) sollten damit zurecht kommen:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Random Rectangles in Py5</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Module Mode</span></span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> py5</span>
<span id="cb1-4"></span>
<span id="cb1-5">WIDTH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span></span>
<span id="cb1-6">HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span></span>
<span id="cb1-7">NO_RECT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span></span>
<span id="cb1-8"></span>
<span id="cb1-9">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># alpha</span></span>
<span id="cb1-10"></span>
<span id="cb1-11">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [py5.color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">43</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">51</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span>), py5.color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">126</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">114</span>), py5.color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">149</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">156</span>),</span>
<span id="cb1-12">          py5.color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">139</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">72</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">82</span>), py5.color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">57</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">152</span>), py5.color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">169</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">193</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>),</span>
<span id="cb1-13">          py5.color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">212</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">108</span>), py5.color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">211</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">132</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">65</span>), py5.color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">112</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">198</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">169</span>),</span>
<span id="cb1-14">          py5.color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">118</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">222</span>), py5.color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">151</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">152</span>), py5.color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">237</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">199</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">176</span>)]</span>
<span id="cb1-15"></span>
<span id="cb1-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> setup():</span>
<span id="cb1-17">    py5.size(WIDTH, HEIGHT)</span>
<span id="cb1-18">    py5.window_move(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1400</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb1-19">    py5.window_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Random Rectangles"</span>)</span>
<span id="cb1-20">    py5.rect_mode(py5.CENTER)</span>
<span id="cb1-21">    py5.no_loop()</span>
<span id="cb1-22"></span>
<span id="cb1-23"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> draw():</span>
<span id="cb1-24">    py5.background(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">233</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">195</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">91</span>)</span>
<span id="cb1-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(NO_RECT):</span>
<span id="cb1-26">        py5.fill(py5.random_choice(colors), a)</span>
<span id="cb1-27">        rect_w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> py5.random_int(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb1-28">        rect_h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> py5.random_int(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb1-29">        py5.rect(py5.random_int(rect_w, py5.width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> rect_w),</span>
<span id="cb1-30">                 py5.random_int(rect_h, py5.height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> rect_h),</span>
<span id="cb1-31">                 rect_w, rect_h)</span>
<span id="cb1-32">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I did it, Babe!"</span>)</span>
<span id="cb1-33"></span>
<span id="cb1-34">py5.run_sketch()</span></code></pre></div>
<p>Was mich daran ein wenig st√∂rt, ist die inflation√§re Verwendung des Prefixes <code>py5.</code>. Weniger, weil ich ein fauler Tipper bin (das auch), sondern mehr, weil ich oft √ºberlegen mu√ü, was denn nun ein Py5-Kommando ist und was nicht. Aber das passiert mir zum Beispiel mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/numpy.html">Numpy</a> (Prefix: <code>np.</code>) und anderen, umfangreichen Bibliotheken ebenfalls. Damit mu√ü man leben&nbsp;‚Ä¶</p>



 ]]></description>
  <category>Python</category>
  <category>Py5</category>
  <category>Visual Studio Code</category>
  <guid>https://kantel.github.io/posts/2023081302_py5_vscode/index.html</guid>
  <pubDate>Sun, 13 Aug 2023 19:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023081302_py5_vscode/images/py5modulemode.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Thonny Version 4.1.2 freigegeben</title>
  <dc:creator>J√∂rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023081301_thonny_4_1_2/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53113250501/"><img src="https://kantel.github.io/posts/2023081301_thonny_4_1_2/images/thonny412-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Auch wenn ich gestern erfolgreich <a href="https://kantel.github.io/posts/2023081202_py5_jupyterlab_desktop/">Py5 mit JupyterLab Desktop verbandelt</a> hatte, wird doch <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/thonny.html">Thonny</a> weiterhin der Editor sein, den ich im Zusammenhang mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/py5.html">Py5</a>-Sketchen bevorzugt verwenden werde. Daf√ºr ist <em>Tristan Bunns</em> <a href="https://github.com/tabreturn/thonny-py5mode">Thonny-Py5-Plugin</a> einfach zu elegant und komfortabel zu bedienen.</p>
<p>Daher freut es mich, da√ü von Thonny gestern das <a href="https://github.com/thonny/thonny/releases/tag/v4.1.2">Update auf die Version 4.1.2</a> freigegeben wurde. Thonny kommt nun auch mit einem vorinstallierten Python 3.10 (auf dem Mac mit dem <em>Universal2 Build</em> ‚Äì das hei√üt es funzt sowohl mit Intel- wie auch mit ARM-Macs). Neben der Behebung einiger kleiner Fehler betrifft das Update sonst wohl in der Hauptsache Nutzer von MicroPython.</p>
<p>Dennoch habe ich das Update nat√ºrlich sofort bei mir installiert und getestet. Und ich freue mich, da√ü ich so mit <a href="http://cognitiones.kantel-chaos-team.de/produktivitaet/visualstudiocode.html">Visual Studio Code</a>, <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/jupyterlabdesktop.html">JupyterLab Desktop</a> und Thonny mindestens drei IDEs installiert habe, die mit Python und Py5 hervorragend zusammenarbeiten.</p>



 ]]></description>
  <category>Thonny</category>
  <category>Python</category>
  <category>Py5</category>
  <guid>https://kantel.github.io/posts/2023081301_thonny_4_1_2/index.html</guid>
  <pubDate>Sun, 13 Aug 2023 14:35:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023081301_thonny_4_1_2/images/thonny412.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Es mu√ü nicht immer Thonny sein: Py5 und JupyterLab Desktop</title>
  <dc:creator>J√∂rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023081202_py5_jupyterlab_desktop/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53110766127/"><img src="https://kantel.github.io/posts/2023081202_py5_jupyterlab_desktop/images/py5jupyterlabdesktop-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Da ich mich in Erinnerung an meine fr√ºhen Jahre, in denen ich offenen Auges und mit wachsender Begeisterung in die <em>Mac-Only-Falle</em> getappt war, mittlerweile sehr unwohl f√ºhle, wenn ich von einem Programm und/oder einem Betriebssystem abh√§ngig bin, wollte ich mich bei meinen <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/py5.html">Py5</a>-Experimenten aus meiner Abh√§ngigkeit von <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/thonny.html">Thonny</a> l√∂sen. Denn immerhin habe ich mit Py5 noch einiges vor.</p>
<p>Ich hatte schon vor einigen Monaten versucht, Py5 auch mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/jupyter.html">Jupyter</a> respektive <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/jupyterlab.html">JupyterLab</a> zu verbandeln. Nachdem ich erst einmal in ein <a href="http://blog.schockwellenreiter.de/2022/08/2022082302.html">mittleres Fiasko</a> geschlittert war, konnte ich dann doch mit Hilfe der Leserinnen und Leser des <em>Schockwellenreiters</em> das <a href="http://blog.schockwellenreiter.de/2022/08/2022082601.html">Monster JupyterLab z√§hmen</a>. Das ben√∂tigte jedoch eine <a href="http://blog.schockwellenreiter.de/2022/08/2022082801.html">separate virtuelle Umgebung</a> und seltsamerweise wollte dennoch <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/jupyterlabdesktop.html">JupyterLab Desktop</a> einfach <a href="http://blog.schockwellenreiter.de/2022/08/2022082701.html">nicht mit mir spielen</a>. Und das war ein Game-Stopper, weil ich vom Editieren im Browser immer Pickel bekomme.</p>
<p>Nun sind einige Monate ins Land gezogen und Jupyter inklusive JupyterLab/JupyterLab Desktop sind in einer brandneuen, <a href="https://kantel.github.io/posts/2023060802_jupyterlab_4/">stark verbesserten Version erschienen</a>. Und auch von <a href="https://kantel.github.io/posts/2023050601_py5_090a0/">Py5 gab es ein Update</a>. Also habe ich einen neuen Versuch gewagt. Ich habe mit</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1">pip install py5</span></code></pre></div>
<p>erst einmal mein <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/anaconda.html">Anaconda-Python</a> mit Py5 verm√§hlt. Danach habe ich mit</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1">pip install py5jupyter</span></code></pre></div>
<p>auch noch die <code>py5jupyter</code>-Bibliothek installiert (die in der <a href="https://py5coding.org/content/install.html">Dokumentation</a> vorgeschlagene Installation ¬ªauf einem Rutsch¬´ mit <code>pip install py5[jupyter]</code> funktionierte bei mir nicht, vermutlich weil ich bei meinen fr√ºheren Experimenten schon ein ‚Äì wenn auch √§lteres ‚Äì Py5 f√ºr mein Anaconda-Python installiert hatte).</p>
<p>Danach war ich mutig geworden und habe mit</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1">python <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>m py5jupyter.kernels.py5.install <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>sys<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>prefix</span></code></pre></div>
<p>den <code>py5 Jupyter Notebook Kernel</code> und mit</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1">python <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>m py5jupyter.kernels.py5bot.install <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>sys<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>prefix</span></code></pre></div>
<p>den <code>py5 Kernel</code> f√ºr den <a href="https://py5coding.org/content/py5_modes.html">¬ªstatischen Mode¬´ in Jupyter</a> installiert. F√ºr den letzten habe ich momentan zwar noch kein Anwendungsstenario, aber man kann ja nie wissen.</p>
<p>Und was soll ich sagen? Py5 lief ohne zu Meckern in JupyterLab Desktop. Und zwar in der Standard Anaconda-Umgebung ohne vorher separat eine virtuelle Umgebung einrichten zu m√ºssen. Der <em>Module Mode</em> (und vermutlich auch der <em>Class Mode</em>) lief im Standard-Anaconda-Jupyter-Kernel, f√ºr den <em>Imported Mode</em> (das ist der Mode, mit dem Py5 auch in Thonny l√§uft) mu√üte man oben links im JuypterLab Desktop Men√º auf den <code>py5</code>-Kernel umschalten uns f√ºr den <em>Static Mode</em> stellte JupyterLab Desktop den <code>py5bot</code>-Kernel an gleicher Stelle bereit.</p>
<p>Der f√ºnfte Mode <em>(<a href="https://py5coding.org/content/processing_mode.html">Processing Mode</a>)</em> ist eine Art Bridge zwischen Py5, Processing und Java und klingt danach, als ob er nur f√ºr Leute w√§re, die nicht nur Seltsames vorhaben, sondern auch genau wissen, was sie tun. Ich habe erst einmal die Finger davon gelassen und bin auch so mit dem Erreichten zufrieden.</p>
<p>Auch wenn es etwas Zeit und einige Versuche gekostet hat, ich hatte jedenfalls Spa√ü an der Installation und freue mich, da√ü Py5 bei mir jetzt endlich auch mit und in JupyterLab Desktop l√§uft. Vielleicht werden Jupyter Notebooks und ich doch noch Freunde. Vor allem, weil erste Versuche gezeigt haben, da√ü Py5 in Jupyter Notebooks nun nicht nur in JupyterLab Desktop, sondern auch in <a href="http://cognitiones.kantel-chaos-team.de/produktivitaet/visualstudiocode.html">Visual Studio Code</a> (nach Installation der <a href="https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter">Jupyter-Erweiterungen</a>) l√§uft. Da tun sich doch noch viele weitere M√∂glichkeiten auf. <em>Still digging!</em></p>



 ]]></description>
  <category>Py5</category>
  <category>JupyterLab Desktop</category>
  <guid>https://kantel.github.io/posts/2023081202_py5_jupyterlab_desktop/index.html</guid>
  <pubDate>Sat, 12 Aug 2023 18:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023081202_py5_jupyterlab_desktop/images/py5jupyterlabdesktop.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Neuk√∂llner Bilderbogen: Was mir sonst noch so vor die Linse lief</title>
  <dc:creator>J√∂rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023081201_neukoellner_bilderbogen/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53095066121/"><img src="https://kantel.github.io/posts/2023081201_neukoellner_bilderbogen/images/bilderbogen2023081201-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Der ruhige Sonnabend heute ist eine gute Gelegenheit, die restlichen Bilder rauszuhauen, die mir w√§hrend der letzten vierzehn Tage vor meine Smartphone-Photoknipse geraten und dann in <a href="https://www.flickr.com/photos_user.gne?path=schockwellenreiter&amp;nsid=&amp;page=&amp;details=1">meinem Flickr-Archiv</a> h√§ngengeblieben waren:</p>
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53111022516/"><img src="https://kantel.github.io/posts/2023081201_neukoellner_bilderbogen/images/bilderbogen2023081202.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/53077640130/"><img src="https://kantel.github.io/posts/2023081201_neukoellner_bilderbogen/images/bilderbogen2023081203.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/53111434315/"><img src="https://kantel.github.io/posts/2023081201_neukoellner_bilderbogen/images/bilderbogen2023081204.jpg" class="img-fluid"></a></p>
<p><em>Mit einem Klick auf die Vorschaubilder kommt Ihr je auf eine Seite mit einer Vergr√∂√üerung.</em></p>
<p>Ob Kaffe und Kuchen auf der <a href="https://www.diemarktplaner.de/die-dicke-linda/">Dicken Linda</a>, sommerliche Bl√ºtenpracht am Neuk√∂llner Ufer des <a href="https://de.wikipedia.org/wiki/Teltowkanal">Teltowkanals</a>, ein Schaufelbagger im <a href="https://de.wikipedia.org/wiki/Carl-Weder-Park">Carl-Weder-Park</a> oder ein verlassener Wohnzimmersessel in der Jahnstra√üe ‚Äì Neuk√∂lln ist immer einen Schnappschu√ü wert. Daher ist meine kleine und sofort einsatzbereite Handykamera auch mein st√§ndiger Begleiter. <em>(Photos (<a href="http://creativecommons.org/licenses/by-nc-nd/2.0/">cc</a>) 2023: <a href="http://cognitiones.kantel-chaos-team.de/cv.html">J√∂rg Kantel</a>)</em></p>



 ]]></description>
  <category>Neuk√∂lln</category>
  <category>Neuk√∂llner Bilderbogen</category>
  <category>Wohnsitz Neuk√∂lln</category>
  <category>Photographie</category>
  <guid>https://kantel.github.io/posts/2023081201_neukoellner_bilderbogen/index.html</guid>
  <pubDate>Sat, 12 Aug 2023 15:05:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023081201_neukoellner_bilderbogen/images/bilderbogen2023081201.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Logseq, Quarto und Visual Studio Code: Ein Werkzeugkasten f√ºr meinen Publikations-Workflow</title>
  <dc:creator>J√∂rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023081101_logseq_quarto_vscode/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53109018336/"><img src="https://kantel.github.io/posts/2023081101_logseq_quarto_vscode/images/quartovscode-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Weil das in den letzten Tagen auch Thema hier in diesem <del>Blog</del> Kritzelheft war: Die Frage, mit welchem Werkzeugen frau und man (und damit auch ich) unabh√§ngig und selbstst√§ndig im Netz und auch f√ºr totes Holz publizieren kann. Meine derzeitigen √úberlegungen, die sich aber noch in Entwicklung befinden, basieren auf diesen drei Bausteinen: <a href="http://cognitiones.kantel-chaos-team.de/webworking/auszeichnungssprachen/logseq.html">Logseq</a> als mein Zettelkasten und mein zweites Gehirn, <a href="http://cognitiones.kantel-chaos-team.de/webworking/staticsites/quarto.html">Quarto</a> als ein Layer, der die Publikation via <a href="http://cognitiones.kantel-chaos-team.de/webworking/auszeichnungssprachen/pandoc.html">Pandoc</a> als statische Seiten, Epub, LaTeX und PDF herausschreibt, und <a href="http://cognitiones.kantel-chaos-team.de/produktivitaet/visualstudiocode.html">Visual Studio Code</a>, das als Editor auch f√ºr Quarto mittelfristig das von mir momentan noch genutzte <a href="http://cognitiones.kantel-chaos-team.de/mathematik/rstudio.html">RStudio</a> ‚Äì mit dem ich nie richtig warm geworden bin ‚Äì abl√∂sen soll.</p>
<p>Zu diesem Trio habe ich Euch heute eine Sammlung von Videos zusammengestellt. Zwar soll es √ºber das Wochenende recht sonnig und warm werden, aber zu Beginn der Woche drohen die Wetterfr√∂sche doch wieder mit Gewittern und Regen. Sollte Euch dann die Langeweile √ºberw√§ltigen, habt Ihr mit diesen Videos ja etwas, was sie vertreiben kann.</p>
<p>Und um das Trio zu einem Quartett zu machen, hat sich noch <a href="https://shiny.posit.co/py/">Shiny for Python</a> in die Sammlung hineingemogelt, denn irgendwie geh√∂rt <a href="http://cognitiones.kantel-chaos-team.de/mathematik/shiny.html">Shiny</a> ebenfalls zu diesem Workflow (dazu im letzten Absatz mehr).</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/dggcqfGe1xs" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p><strong>Fangen wir aber dennoch mit Visual Studio Code an</strong>: <a href="https://www.youtube.com/watch?v=dggcqfGe1xs">Develop from anywhere with Visual Studio Code</a> ist der Mitschnitt eines Streams mit <em>Birgit Murtaugh</em>, die zeigt, auf welchen Plattformen VS Code l√§uft und wie und wann man die Webversion des Editors nutzen kann. Auch wenn ich den Editor auf <a href="http://blog.schockwellenreiter.de/2021/12/2021120701.html">meinem Chromebook</a> zur Mitarbeit bewegen konnte, kann ich von diesem Video sicher noch eine Menge lernen.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/z5jZ9lrSpqk" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Das betrifft vor allen Dingen die Synchronisation via <a href="http://cognitiones.kantel-chaos-team.de/webworking/versionsverwaltung/git.html">Git</a> und <a href="http://cognitiones.kantel-chaos-team.de/webworking/versionsverwaltung/github.html">GitHub</a>. <a href="https://www.youtube.com/watch?v=z5jZ9lrSpqk">Using Git &amp; GitHub in VSCode: Stage, Commit, and Push</a> gibt einen ersten Einblick.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/LQ42shquiY4" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Und irgendwann mu√ü es vielleicht auch einmal eine Datenbank sein. Warum dann nicht eine NoSQL-Datenbank wie <a href="http://cognitiones.kantel-chaos-team.de/webworking/db/mongodb.html">MongoDB</a>? Denn ‚Äì wie <em>Jesse Hall</em> behauptet, sei dies die ¬ª<a href="https://www.youtube.com/watch?v=LQ42shquiY4">Winning Combo for Peak Efficiency</a>¬´. Ich nehme ihn beim Wort.</p>
<p><strong>War sonst noch was?</strong> Ach ja, Einf√ºhrungs-Tutorials kann man eigentlich nie genug haben: Bei <a href="https://www.youtube.com/watch?v=yjeHLSrhPao">Learn Visual Studio Code - Course for Beginners</a> haben die Kanalinhaber leider das Einbetten in fremde Websites verboten. Ihr m√º√üt also schon selber zu YouTube pilgern.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/XPl-OxJRHsQ" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p><strong>Doch weiter mit Quarto</strong>: <em>J.J. Allaire</em> ist einer der Gr√ºnder und Chefs von <a href="https://posit.co/">Posit</a>, der Firma, die hinter RStudio, Quarto und Shiny steckt. Wer ‚Äì wenn nicht er ‚Äì kann fach- und sachkundig √ºber ¬ª<a href="https://www.youtube.com/watch?v=XPl-OxJRHsQ">Publishing Jupyter Notebooks with Quarto</a>¬´ plaudern?</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/ZtRozP8hfEY" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p><strong>Und schlie√ülich Logseq</strong>: Vom omnipr√§senten <em>OneStutteringMind</em> gibt es ein neues Einf√ºhrungstutorial ¬ª<a href="https://www.youtube.com/watch?v=ZtRozP8hfEY">How to get started in Logseq - analogue model of blocks and pages</a>¬´, das er mit neuem Kurzhaarschnitt pr√§sentiert.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/fHc2cVNMNrA" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Frau oder man kann nat√ºrlich auch mit Logseq online gehen. Im gleichen Kurzhaarschnitt zeigt uns das <em>stotternde Gehirn</em> in ¬ª<a href="https://www.youtube.com/watch?v=fHc2cVNMNrA">The simplest way to publish your Logseq graph online</a>¬´ einen Weg dorthin.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/RzT20ejft3c" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Aber das ist nat√ºrlich nicht der einzige Weg. <em>Brian Sunter</em> geht ihn in <a href="https://www.youtube.com/watch?v=RzT20ejft3c">seinem ¬ªDeep Dive¬´-Video</a> mit GitHub und <a href="http://cognitiones.kantel-chaos-team.de/webworking/staticsites/hugo.html">Hugo</a>, den in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/go.html">Go</a> geschriebenen Generator f√ºr statische Seiten.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/CYc1SW4wjyk" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Auch wenn das <em>Franziska Giffey</em> <a href="https://de.wikipedia.org/wiki/Franziska_Giffey#Plagiatsaff%C3%A4ren_um_wissenschaftliche_Abschlussarbeiten">nicht glauben mag</a>: Wer (wissenschaftlich) publiziert, braucht einen ¬ªApparat¬´. Die <a href="https://de.wikipedia.org/wiki/Zotero">Zotero</a>-Power-Userin <em>Jay Colbert</em> zeigt in ¬ª<a href="https://www.youtube.com/watch?v=CYc1SW4wjyk">Advanced Reference Management with Zotero</a>¬´, wie man das freie, quelloffene (AGPL) Literaturverwaltungsprogramm mit Logseq verm√§hlt. Eingef√ºhrt wird auch sie von <em>stotternden Gehirn</em>, da aber noch mit <em>Dreadlocks</em>.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/pXidQWYY14w" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p><strong>Zum Abschlu√ü der heutigen Sammlung von Video-Tutorials dann noch einige zu Shiny for Python</strong>: Von <em>Gordon Shotwell</em> gibt es mit ¬ª<a href="https://www.youtube.com/watch?v=pXidQWYY14w">Create a Python Web App Using Shiny</a>¬´ eine einst√ºndige Einf√ºhrung in dieses Framework.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/YN0hnAmid7A" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Ebenfalls eine Spieldauer von einer Stunde hat der <a href="https://www.youtube.com/watch?v=YN0hnAmid7A">Podcast mit <em>Joe Cheng</em></a>. Er ist einer der Entwickler von Shiny und er kann daher viel und sachkundig zu Shiny erz√§hlen.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/sG2dWWothoM" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Direkt aus dem Hause Posit, der Heimat von Shiny for Python kommen auch die Tutorials ¬ª<a href="https://www.youtube.com/watch?v=sG2dWWothoM">A&nbsp;Beginner‚Äôs Guide to Shiny for Python</a>¬´ mit <em>Winston Chang</em> und ¬ª<a href="https://www.youtube.com/watch?v=BIxLcbGMFJo">Wrangling data for a Shiny app in Python</a>¬´ mit <em>Michael Chow</em>. Beide Vortragenden geh√∂ren ebenfalls zur Shiny-Entwickler-Crew.</p>
<p>Shiny for Python nimmt deshalb so einen gro√üen Raum in dieser Tutorial-Sammlung ein, weil das Programm auch f√ºr mich neu ist. Aber das es aus dem gleichen Haus wie Quarto stammt, gehe ich davon aus, da√ü Quarto und Shiny for Python gut miteinander spielen, daher m√∂chte ich das Teil, das Web-Anwendungen mit Python f√ºr den Browser herausschreibt, unbedingt lernen. <em>Still digging!</em></p>



 ]]></description>
  <category>Logseq</category>
  <category>Quarto</category>
  <category>Visual Studio Code</category>
  <category>Shiny for Python</category>
  <category>Statische Seiten</category>
  <guid>https://kantel.github.io/posts/2023081101_logseq_quarto_vscode/index.html</guid>
  <pubDate>Fri, 11 Aug 2023 17:40:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023081101_logseq_quarto_vscode/images/quartovscode.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Atlas Curiosa: Pop-Art trifft auf Brutalismus ‚Äì der ¬ªBierpinsel¬´ in Berlin-Steglitz</title>
  <dc:creator>J√∂rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023081001_bierpinsel/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53107072765/"><img src="https://kantel.github.io/posts/2023081001_bierpinsel/images/bierpinsel2023-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Ein kaum zu √ºbersehendes und dennoch meist geflissentlich ignoriertes Geb√§ude √ºberragt die Steglitzer Schlo√üstra√üe: Das 47 Meter hohe <em>Turmrestaurant Steglitz</em>, besser bekannt unter dem Namen ¬ª<a href="https://de.wikipedia.org/wiki/Bierpinsel">Bierpinsel</a>¬´. Der markante Bau wurde von 1972 bis 1976 nach Pl√§nen der Architekten <em>Ralf Sch√ºler</em> und <em>Ursulina Sch√ºler-Witte</em> erbaut, die auch das ICC Berlin und das ehemalige Tierversuchslabor der Charit√©, den sogenannten ¬ª<a href="https://taz.de/Denkmalschutz/!5941666/">M√§usebunker</a>¬´, entwarfen. Der Bau ist in eine Autobahnbr√ºcke integriert, die an dieser Stelle die Schlo√üstra√üe √ºberspannt und Teil des gescheiterten Projekts einer autogerechten Stadt war.</p>
<p>Der Turm sollte zum einen den dominanten Charakter der Hochstra√üe mildern und zum andern mit den beiden darunter- und √ºbereinanderliegenden Bahnsteigen des U-Bahnhofs Schlo√üstra√üe eine einheitliche Gestaltung bilden. Deshalb bestand der Bau in seiner urspr√ºnglichen Form aus dem gleichen Sichtbeton und der roten Kunststoffverkleidung und den Anstrichen wie die Innenfassaden der U-Bahnsteige darunter. So war der Bau eine geniale <a href="https://taz.de/Aussenseiter-der-Architektur/!5943168/">Mischung zwischen Pop-Art und Brutalismus</a> und ist eine der wenigen architektonischen √úberbleibsel aus den 1970er Jahren, die erhalten geblieben sind.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/137599854/"><img src="https://kantel.github.io/posts/2023081001_bierpinsel/images/bierpinsel2006.jpg" class="img-fluid figure-img"></a></p>
<figcaption class="figure-caption">Der Bierpinsel 2006 noch in seinen Originalfarben</figcaption>
</figure>
</div>
<p>Doch wurde der Bierpinsel viel zu sp√§t ‚Äì erst 2017 ‚Äì unter Denkmalschutz gestellt. Denn schon im Jahre 2010 wurde die Fassade von Street-Art-K√ºnstlern √ºbermalt und somit die urspr√ºngliche Gestaltung verw√§ssert.</p>
<p>Das hat auch damit zu tun, da√ü sich das als ¬ªPleitebau¬´ verrufene Geb√§ude schwer mit einer Nutzung tat: Es stand nach der Fertigstellung zun√§chst leer. Erst Mitte 1976 wurden Restaurants und Caf√©s er√∂ffnet und aus dem gro√üen <em>Turm-Caf√©</em> im dritten Stock wurde in diesen Jahren die w√∂chentliche Radiosendung <em>Zweites Fr√ºhst√ºck</em> mit <em>John Hendrik</em> vom RIAS aufgezeichnet und eine Woche sp√§ter ausgestrahlt.</p>
<p>Danach erwarb die mittlerweile auch schon pleite gegangene H√§hnchenbraterei-Kette <em>Wienerwald</em> den Bierpinsel. Wie diese konnte sich in den folgenden Jahren kein Betrieb lange halten und die Besitzer wechselten h√§ufig. Letzte Nutzer des Geb√§udes waren von 2003 bis 2006 eine Diskothek und eine Sport-Bar, danach vermietete eine neue Besitzerin, die <em>Schlossturm GmbH</em>, das Geb√§ude eher sporadisch als <em>Event Location</em>. Sie war auch f√ºr die √úbermalung der Au√üenfassade verantwortlich und will das Geb√§ude ab 2025 nach einer umfangreichen, durch Frost- und Wassersch√§den notwendig gewordenen Sanierung, <a href="https://entwicklungsstadt.de/ab-2024-bueros-und-gastronomie-im-bierpinsel-an-der-schlossstrasse/">wieder f√ºr Gastronomie und Veranstaltungen, aber auch als <em>Co-Working Spaces</em> f√ºr Start-Up-Unternehmen nutzen</a>. Das klingt mir aber mehr danach, <a href="https://www.deutschlandmalanders.com/der-bierpinsel-in-berlin/">als w√ºrde ein rettender Strohhalm gesucht</a>.</p>
<p>Kleiner Fun-Fakt am Rande: Auch wenn die weitere Zukunft des Bierpinsels noch unklar ist, konnte er dank seines markanten √Ñu√üeren zwischenzeitlich als Filmkulisse re√ºssieren. In der 2018 gesendeten Netflix-Serie <em>Dogs of Berlin</em> diente er als Hauptquartier des Landeskriminalamtes Berlin und erlangte so eine gewisse popkulturelle Ber√ºhmtheit √ºber Berlin hinaus.</p>
<p><em>(Photos: <a href="http://creativecommons.org/licenses/by-nc-nd/2.0/">CC BY-NC-ND 2.0</a> 2006 by <a href="http://www.gabi-kantel.de/">Gabriele Kantel</a> und 2023 by <a href="http://cognitiones.kantel-chaos-team.de/cv.html">J√∂rg Kantel</a>)</em></p>
<section id="quellen" class="level3">
<h3 class="anchored" data-anchor-id="quellen">Quellen</h3>
<ul>
<li>Der <em><a href="https://de.wikipedia.org/wiki/Bierpinsel">Bierpinsel</a></em> in der deutschsprachigen Wikipedia</li>
<li>Der <em><a href="https://www.berlin.de/sehenswuerdigkeiten/5514897-3558930-bierpinsel.html">Bierpinsel</a></em> auf Berlin.de</li>
<li>Ab 2024: <em><a href="https://entwicklungsstadt.de/ab-2024-bueros-und-gastronomie-im-bierpinsel-an-der-schlossstrasse/">B√ºros und Gastronomie im ¬ªBierpinsel¬´ an der Schlo√üstra√üe</a></em>, Entwicklungsstadt Berlin vom 13. Juni 2022</li>
<li>Andreas Hartmann: <em><a href="https://taz.de/Aussenseiter-der-Architektur/!5943168/">Au√üenseiter der Architektur. Der Brutalismus in voller Anmut</a></em>, taz vom 10. Juli 2023</li>
<li>ders.: <em><a href="https://taz.de/Denkmalschutz/!5941666/">Zur√ºck in die Zukunft</a></em>, taz vom 3. Juli 2023</li>
<li>Roman Kugge: <em><a href="https://www.deutschlandmalanders.com/der-bierpinsel-in-berlin/">Der Bierpinsel in Berlin. Futuristische Architektur in Reinkultur</a></em>, Deutschland mal anders! o.J.</li>
</ul>


</section>

 ]]></description>
  <category>Atlas Curiosa</category>
  <category>Denkmalschutz</category>
  <category>Architektur</category>
  <guid>https://kantel.github.io/posts/2023081001_bierpinsel/index.html</guid>
  <pubDate>Thu, 10 Aug 2023 17:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023081001_bierpinsel/images/bierpinsel2023.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Security Alert: Neue Schwachstelle in Intel-CPUs erm√∂glicht Datendiebstahl</title>
  <dc:creator>J√∂rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023080902_intel_security_alert/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiIu-xeUKR_xFCW5MkiX6jW_g8fWDMHqocCKH2IcR8TscCNg6suMfRkWsJsZLqFeH1j4RnVnlSE3FOpOHAb5XANPUphh_d0h4oVxTRXgHlv98aoViUzELbPdmntUS4XFIiKPdpv5tdvRk5GYLZwAYF0sQKBvWlikuNAoA_so0GQyUqx0KOdXGdiyMkbAeZA/s1723/Jan%2019,%201913.jpg"><img src="https://kantel.github.io/posts/2023080902_intel_security_alert/images/goatgetters-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Der Sicherheitsforscher <em>Daniel Moghimi</em> hat eine ¬ªDownfall¬´ genannte Schwachstelle in mehreren CPU-Modellen von Intel entdeckt. Diese erlaubt es einem Angreifer sensible Daten wie zum Beispiel Passw√∂rter, Verschl√ºsselungsschl√ºssel oder Bankverbindungen zu stehlen. N√§heres hat der Entdecker auf <a href="https://downfall.page/">dieser Informationsseite</a> erl√§utert.</p>
<p>Diese Sicherheitsl√ºcke l√§√üt sich auch aus der Ferne ausnutzen. Gef√§hrdet sind zudem besonders Cloud-Systeme, da dort ein Angreifer zum Beispiel Anmeldeinformationen anderer Benutzer stehlen k√∂nnte.</p>
<p>Betroffen sind besonders die Intel-Prozessoren, die auf den Prozessorarchitekturen Skylake (6.&nbsp;Intel-Core-Generation) bis Tiger Lake (11. Intel-Core-Generation) basieren. Der Hersteller wird hier zeitnah Microcodes bereitstellen. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">pers√∂nlicher CERT</a> per Email.)</em></p>
<p><em>(Bild: <a href="http://john-adcock.blogspot.com/2023/07/t-e-powers-two-obituaries.html">Thomas E. Powers</a> (1870-1939), Chicago Examiner, 19. Januar 1913)</em></p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2023080902_intel_security_alert/index.html</guid>
  <pubDate>Wed, 09 Aug 2023 16:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023080902_intel_security_alert/images/goatgetters.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Sicherheitsupdate f√ºr Adobe Reader und Acrobat</title>
  <dc:creator>J√∂rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023080901_update_reader_acrobat/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi1LZCs_LelzS5bB2vf3qqiSjfjfk1tzmu0Gx7S3VOYvC8qX0T24lmVh0jIR-NEc6DF_RwdfNLlheSqhAKnAuMeRdtGY3PZvnTZAAq6c-kMf-YKW-7WTrP1w1rmQIrb9mOVNKSVjUzXVJjrwjt57x0ZL6XC94Xn1BgSdVV8CXhcO4oA62PPne_G0YazFV4q/s1682/may%208%201910%20powers.jpg"><img src="https://kantel.github.io/posts/2023080901_update_reader_acrobat/images/bildaufhaengen-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Adobe liefert wieder <a href="https://helpx.adobe.com/security/products/acrobat/apsb23-30.html">Korrekturen f√ºr Sicherheitsl√ºcken (APSB23-30)</a> im Reader und in Acrobat (unter Windows und Mac).</p>
<p>Das Update gelingt am einfachsten √ºber den internen Update-Mechanismus. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">pers√∂nlicher CERT</a> per Email.)</em></p>
<p><em>(Bild: <a href="http://john-adcock.blogspot.com/2023/07/t-e-powers-two-obituaries.html">Thomas E. Powers</a> (1870-1939), Chicago Examiner, 8. Mai 1910)</em></p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2023080901_update_reader_acrobat/index.html</guid>
  <pubDate>Wed, 09 Aug 2023 15:55:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023080901_update_reader_acrobat/images/bildaufhaengen.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>¬ªThe Nature of Code¬´ in Python (Py5): Ein einfaches Partikelsystem (Stage¬†1)</title>
  <dc:creator>J√∂rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023080802_py5_particelsystem_1/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53099848727/"><img src="https://kantel.github.io/posts/2023080802_py5_particelsystem_1/images/partikelsystempy5-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Ich habe noch gestern meine <a href="https://kantel.github.io/posts/2023080701_partikelsysteme/">Ank√ºndigung</a> wahrgemacht und ein einfaches <a href="https://de.wikipedia.org/wiki/Partikelsystem">Partikelsystem</a> in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/py5.html">Py5</a> implementiert. Das ging ziemlich flott, nicht nur, weil ich √§hnliches schon einmal in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processingpy.html">Processing.py</a> <a href="http://blog.schockwellenreiter.de/2019/05/2019050501.html">programmiert</a>, sondern ich auch schon einmal <a href="http://blog.schockwellenreiter.de/2021/08/2021081501.html">Versuche</a> mit der <a href="http://blog.schockwellenreiter.de/2018/05/2018052501.html">NodeBox 1</a> und sogar mit <a href="http://blog.schockwellenreiter.de/2018/05/2018052501.html">Pythons Schildkr√∂te</a> angestellt hatte. Alle diese Programme basierten auf der <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processing.html">Processing (Java)</a>-Version eines Partikelsystems, die <em>Daniel Shiffman</em> in seinem wunderbaren Buch ¬ª<a href="https://natureofcode.com/">The Nature of Code</a> im <a href="https://natureofcode.com/book/chapter-4-particle-systems/">vierten Kapitel</a> (Seiten 143-188) implementiert hatte.</p>
<div style="float: right; margin-left: 12px; margin-top: 6px;">
<a href="https://natureofcode.com/"><img src="https://kantel.github.io/posts/2023080802_py5_particelsystem_1/images/noc.jpg" class="img-fluid"></a>
</div>
<p>Dadurch fiel mir der Port nach Py5 nicht allzu schwer, dennoch habe ich dabei einiges √ºber Py5 und seine Besonderheiten gelernt. Als erstes: Ich hatte die Klassen <code>Particle()</code> und <code>RectParticle()</code> in eine separate Datei ausgelagert und daher endlich verstanden, welche <a href="https://kantel.github.io/posts/2023072402_py5_update/">Probleme seit dem letzten Update</a> mit dem <code>import</code>-Befehl im Py5-<em><a href="http://py5coding.org/content/importing_py5_code.html#importing-imported-mode-code">Imported Mode</a></em> nun behoben seien. Das mir die Probleme bisher nicht unterkamen, lag daran, da√ü ich nur Bibliotheken/Module importiert hatte, die nicht auf Py5 basierten und daher auch nicht den <code>JPype</code>-√úbersetzer aufrufen mu√üten. Meine beiden Partikel-Klassen waren aber Py5-Klassen und mu√üten daher <code>JPype</code> passieren. Nur: Woher sollte <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/thonny.html">Thonny</a> das wissen?</p>
<p>Die L√∂sung fand ich in der <a href="https://py5coding.org/content/importing_py5_code.html#importing-imported-mode-code">Py5-Dokmentation</a>: Der Datei mu√ü als ¬ªmagischer Kommentar¬´ die Zeile</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># PY5 IMPORTED MODE CODE</span></span></code></pre></div>
<p>vorangestellt werden (es mu√ü nicht unbedingt die erste Kommentarzeile sein, aber sie sollte vor den eigentlichen Codezeilen stehen). Und dieser ¬ªmagische Kommentar¬´ ist unabh√§ngig von der Gro√ü- oder Kleinschreibung: <code># py5 imported mode code</code> funktioniert ebenfalls, auch <code># py5 Imported Mode code</code> bringt keine Probleme. Ich empfehle aber zur besseren Hervorhebung und um die Zeile von den gew√∂hnlichen Kommentaren zu unterscheiden, die Gro√üschreibung.</p>
<p>Der zweite Stolperstein war ein seltsamer ‚Äì denn dar√ºber stolpern vermutlich nur diejenigen, die Processings PDE gewohnt sind. Dieser war es n√§mlich v√∂llig egal, welcher Tab mit welcher Datei gerade offen war (den Fokus hatte), der <code>Run</code>-Befehl startete immmer die Datei mit dem jeweiligen Hauptprogramm.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53102946740/"><img src="https://kantel.github.io/posts/2023080802_py5_particelsystem_1/images/falschertabpy5.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Hier zeigt Thonny im Py5-Mode ein anderes Verhalten. Hat man zum Beispiel den Tab mit den Klassen-Definitionen offen, dann versucht der Interpreter, diese Datei zu starten. Und da er durch das ¬ªmagische Kommando¬´ <code># PY5 IMPORTED MODE CODE</code> wei√ü, das dies ein Py5-Programm ist, startet er ohne eine Fehlermeldung ein ¬ªleeres¬´ Py5-Programm mit dem Default-Fensterchen (siehe <a href="https://www.flickr.com/photos/schockwellenreiter/53102946740/">Screenshot</a>).</p>
<p>Eigentlich ist das ein logisches Verhalten, aber glaubt mir, ich habe lange geflucht und den Fehler bei mir und in meinem Code gesucht, bis ich darauf gekommen bin.</p>
<p>Nachdem ich nun diese H√ºrden √ºberwunden hatte, konnte ich mich endlich an meinem Partikelsystem erfreuen. Es besitzt einen <em>Emitter</em>, der zuf√§llig entweder Scheiben oder Rechtecke (genauer: Quardrate) ausst√∂√üt, Diese fallen nach unten, und verblassen dabei, je l√§nger sie leben (im System sind). Ist ihre Lebenszeit abgelaufen, werden sie aus dem System entfernt. Daf√ºr habe ich ‚Äì in Anlehnung an <em>Daniel Shiffmans</em> Sketch, eine Klasse <code>Particle()</code> entworfen:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Particle():</span>
<span id="cb2-2">    </span>
<span id="cb2-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, _x, _y):</span>
<span id="cb2-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Py5Vector(_x, _y)</span>
<span id="cb2-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Py5Vector(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>)</span>
<span id="cb2-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Py5Vector(random(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>), random(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>))</span>
<span id="cb2-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random_choice(codingtrain)</span>
<span id="cb2-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">255.0</span></span>
<span id="cb2-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span></span>
<span id="cb2-10">        </span>
<span id="cb2-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> run(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.update()</span>
<span id="cb2-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.show()</span>
<span id="cb2-14">        </span>
<span id="cb2-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-16">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.acc</span>
<span id="cb2-17">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel</span>
<span id="cb2-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> random(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-19">        </span>
<span id="cb2-20">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> show(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-21">        stroke(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan)</span>
<span id="cb2-22">        fill(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan)</span>
<span id="cb2-23">        circle(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d)</span>
<span id="cb2-24">        </span>
<span id="cb2-25">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> is_not_alive(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-26">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb2-27">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb2-28">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb2-29">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span></code></pre></div>
<p>Dabei habe ich dann den dritten Stolperstein √ºberwinden m√ºssen: <code>is_dead</code> ist in Py5 ein reserviertes Wort, daher habe ich die Methode <code>is_not_alive()</code> genannt.</p>
<p>Die Klasse <code>RectParticle()</code> erbt von <code>Particle</code>. Daher waren im <em>Constructor</em> nur der <code>rect_mode(CENTER)</code> (wird f√ºr die Rotation der Quadrate gebraucht) und der Rotationswinkel zus√§tzlich n√∂tig:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> RectParticle(Particle):</span>
<span id="cb3-2">    </span>
<span id="cb3-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, _x, _y):</span>
<span id="cb3-4">        Particle.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, _x, _y)</span>
<span id="cb3-5">        rect_mode(CENTER)</span>
<span id="cb3-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rota <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PI<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span></code></pre></div>
<p>Und die Methode <code>show()</code> mu√üte ‚Äì damit die Quadrate rotieren ‚Äì komplett √ºberschrieben werden. Hier kam die von mir hei√ü geliebte (weil in meinem Augen ¬ªpythonischere¬´) Sprachkonstruktion mit dem <code>with</code>-Statement zum Einsatz:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> show(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-2">        stroke(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan)</span>
<span id="cb4-3">        fill(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan)</span>
<span id="cb4-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> push_matrix():</span>
<span id="cb4-5">            translate(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y)</span>
<span id="cb4-6">            rotate(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rota)</span>
<span id="cb4-7">            rect(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb4-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rota <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> random(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.02</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.10</span>)</span></code></pre></div>
<p>Als zus√§tzliche Reminiszenz an <em>Daniel Shiffman</em> und seinem <a href="https://thecodingtrain.com/">Coding Train</a> habe ich die Partikel noch mit der <a href="http://cognitiones.kantel-chaos-team.de/multimedia/farbpaletten/codingtrainfarben.html">Coding Train Farbpalette</a> eingef√§rbt.</p>
<p>Nun zum kompletten Programm, damit Ihr auch alles nachlesen, nachvollziehen, nachprogrammieren und weiterentwickeln k√∂nnt. Das Hauptprogramm (<code>particles01.py</code>) ist ‚Äì dank der Partikelklassen ‚Äì von erfrischender K√ºrze:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> particles <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Particle, RectParticle</span>
<span id="cb5-2"></span>
<span id="cb5-3">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span></span>
<span id="cb5-4">START_X, START_Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span></span>
<span id="cb5-5"></span>
<span id="cb5-6">particles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb5-7"></span>
<span id="cb5-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> setup():</span>
<span id="cb5-9">    size(WIDTH, HEIGHT)</span>
<span id="cb5-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># window_move(1400, 30)</span></span>
<span id="cb5-11">    window_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Partikelsystem 1"</span>)</span>
<span id="cb5-12">    </span>
<span id="cb5-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> draw():</span>
<span id="cb5-14">    background(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">49</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">197</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">244</span>)   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Hellblau</span></span>
<span id="cb5-15">    change <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb5-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> change <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>:</span>
<span id="cb5-17">        particles.append(Particle(START_X, START_Y))</span>
<span id="cb5-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb5-19">        particles.append(RectParticle(START_X, START_Y))</span>
<span id="cb5-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(particles) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb5-21">        particles[i].run()</span>
<span id="cb5-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> particles[i].is_not_alive():</span>
<span id="cb5-23">            particles.pop(i)</span></code></pre></div>
<p>Die (auskommentierte) Zeile <code>window_move(1400, 30)</code> ist ein Hack, der das Ausgabefenster auf meinen zweiten Monitor positioniert. Ihr solltet sie daher nur verwenden, wenn Ihr ebenfalls einen zweiten Bildschirm besitzt und dessen Pixelkoordinaten kennt.</p>
<p>Etwas fetter ist dann schon die Datei <code>particles.py</code> mit den beiden Klassen:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># PY5 IMPORTED MODE CODE</span></span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Coding Train Farbpalette</span></span>
<span id="cb6-4">codingtrain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">240</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">37</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">248</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">158</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">248</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">239</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">34</span>) , (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">240</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">99</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">164</span>),</span>
<span id="cb6-5">               (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">146</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">82</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">161</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">129</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">122</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">198</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">98</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">199</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">119</span>)]</span>
<span id="cb6-6"></span>
<span id="cb6-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Particle():</span>
<span id="cb6-8">    </span>
<span id="cb6-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, _x, _y):</span>
<span id="cb6-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Py5Vector(_x, _y)</span>
<span id="cb6-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Py5Vector(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>)</span>
<span id="cb6-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Py5Vector(random(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>), random(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>))</span>
<span id="cb6-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random_choice(codingtrain)</span>
<span id="cb6-14">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">255.0</span></span>
<span id="cb6-15">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span></span>
<span id="cb6-16">        </span>
<span id="cb6-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> run(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb6-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.update()</span>
<span id="cb6-19">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.show()</span>
<span id="cb6-20">        </span>
<span id="cb6-21">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb6-22">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.acc</span>
<span id="cb6-23">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel</span>
<span id="cb6-24">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> random(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb6-25">        </span>
<span id="cb6-26">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> show(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb6-27">        stroke(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan)</span>
<span id="cb6-28">        fill(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan)</span>
<span id="cb6-29">        circle(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d)</span>
<span id="cb6-30">        </span>
<span id="cb6-31">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> is_not_alive(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb6-32">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb6-33">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb6-34">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb6-35">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb6-36">        </span>
<span id="cb6-37"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> RectParticle(Particle):</span>
<span id="cb6-38">    </span>
<span id="cb6-39">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, _x, _y):</span>
<span id="cb6-40">        Particle.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, _x, _y)</span>
<span id="cb6-41">        rect_mode(CENTER)</span>
<span id="cb6-42">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rota <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PI<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb6-43">    </span>
<span id="cb6-44">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> show(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb6-45">        stroke(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan)</span>
<span id="cb6-46">        fill(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan)</span>
<span id="cb6-47">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> push_matrix():</span>
<span id="cb6-48">            translate(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y)</span>
<span id="cb6-49">            rotate(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rota)</span>
<span id="cb6-50">            rect(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb6-51">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rota <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> random(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.02</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.10</span>)</span></code></pre></div>
<p>Auf meinem betagten MacBook Pro (von 2012) l√§uft der Sketch gerade noch in ertr√§glicher Geschwindigkeit. Wer √ºber potentere Hardware verf√ºgt, kann ja mal versuchen, den <code>lifespan</code> der Partikel zu verl√§ngern.</p>
<p>Nat√ºrlich sind die Dateien auch in meinem <a href="https://github.com/kantel/py5/tree/main/noc">GitHub-Repositorium</a> abgelegt (<a href="https://github.com/kantel/py5/blob/main/noc/particlesys01.py">particles01.py</a> und <a href="https://github.com/kantel/py5/blob/main/noc/particles.py">particles.py</a>). Ich m√∂chte die Experimente gerne noch ein wenig fortf√ºhren. Also seid auf weitere Beitr√§ge zu Py5 gespannt. <em>Still digging!</em></p>



 ]]></description>
  <category>Py5</category>
  <category>Processing</category>
  <category>Python</category>
  <category>Creative Coding</category>
  <category>Nature of Code</category>
  <guid>https://kantel.github.io/posts/2023080802_py5_particelsystem_1/index.html</guid>
  <pubDate>Tue, 08 Aug 2023 18:05:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023080802_py5_particelsystem_1/images/partikelsystempy5.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Google schlie√üt am ¬ªAugust-Patchday¬´ wieder Sicherheitsl√ºcken in Android</title>
  <dc:creator>J√∂rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023080801_android_patchday/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://cafans.b-cdn.net/images/Category_2305/subcat_207318/xKGxG4F6_1906201900281gpadd.jpg"><img src="https://kantel.github.io/posts/2023080801_android_patchday/images/cubaoccupation-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Google hat mit seinem monatlichen <a href="https://source.android.com/docs/security/bulletin/2023-08-01?hl=en">Sicherheitsupdate f√ºr Android</a> (und damit auch auf seinen <a href="https://source.android.com/docs/security/bulletin/pixel/2023-08-01?hl=de">Pixel-Ger√§ten</a> ‚Äì derzeit noch nicht verf√ºgbar) wieder Sicherheitsl√ºcken geschlossen.</p>
<p>Die Updates werden so nach und nach per OTA <em>(over the air)</em> auf Pixel Tablet, Pixel Fold, Pixel 7a, Pixel 7/7 pro, Pixel 6a, Pixel 6/6 pro, Pixel 5, Pixel 4a 5G, Pixel 4a verteilt.</p>
<p>Die anderen Hersteller werden wie √ºblich in B√§lde nachziehen, sofern sie √ºberhaupt noch entsprechenden Support leisten. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">pers√∂nlicher CERT</a> per Email.)</em></p>
<p><em>(Bild: <a href="https://www.comicartfans.com/galleryroom.asp?gsub=207318">Thomas E. Powers</a> (1870-1939), <a href="https://www.comicartfans.com/gallerypiece.asp?piece=1642501">William Howard Taft ‚Äì Occupation of Cuba</a>, 1906)</em></p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2023080801_android_patchday/index.html</guid>
  <pubDate>Tue, 08 Aug 2023 13:50:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023080801_android_patchday/images/cubaoccupation.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Partikelsysteme programmieren</title>
  <dc:creator>J√∂rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023080701_partikelsysteme/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://thecodingtrain.com/tracks/the-nature-of-code-2/noc/4-particles/1-particle-system"><img src="https://kantel.github.io/posts/2023080701_partikelsysteme/images/particlesystem-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p><a href="https://www.gorillasun.de/blog/spring-physics-and-connecting-particles-with-springs/">Spring Physics, Particles and Meshes</a> ist der vorerst letzte Beitrag einer Tutorialreihe zu <a href="https://de.wikipedia.org/wiki/Partikelsystem">Partikelsystemen</a>, die <em><a href="https://www.gorillasun.de/about/">Ahmad Moussa</a></em> in seinem Blog ¬ª<a href="https://www.gorillasun.de/">Gorilla Sun</a>¬´ ver√∂ffentlicht hat. Die Programme (oder besser: Sketche) sind in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/p5js.html">P5.js</a>, der JavaScript-Version von <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processing.html">Processing</a> geschrieben und mit Hilfe der <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/p5xjswidget.html">P5 Widgets</a> seinen Blog-Leserinnen und -Lesern zug√§nglich gemacht.</p>
<p>Die anderen, bisher erschienenen Beitr√§ge zu diesem Thema sind (in chronologischer Reihenfolge):</p>
<ul>
<li><a href="https://www.gorillasun.de/blog/programming-a-particle-system-with-chatgpt/">Programming a Particle System with ChatGPT</a></li>
<li><a href="https://www.gorillasun.de/blog/an-algorithm-for-particle-systems-with-collisions/">An Algorithm for Particle Systems with Collisions</a></li>
<li><a href="https://www.gorillasun.de/blog/particle-system-optimization-grid-lookup-spatial-hashing/">Optimizing Particle Systems with a Grid Lookup and Spatial Hashing</a></li>
</ul>
<p><em>Ahmad Moussa</em> orientiert sich bei seinen Tutorials stark an <em>Daniel Shiffmans</em> <a href="https://thecodingtrain.com/tracks/the-nature-of-code-2">The Nature of Code 2</a>. Und das erinnert mich nat√ºrlich daran, da√ü ich ja auch mal eine Python-Version von <em><a href="https://natureofcode.com/book/">The Nature of Code</a></em> angefangen hatte. Und mein <a href="https://kantel.github.io/posts/2023080601_ghostly_disks/">gestriger Sketch</a> √ºber Geister-Pucks in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/py5.html">Py5</a> legt ja schon fast so etwas wie die Grundlagen f√ºr ein <a href="https://natureofcode.com/book/chapter-4-particle-systems/">Partikelsystem</a>. Ich glaube, ich bin angefixt. Ich mu√ü mich sofort hinsetzen und ein Partikelsystem in Py5 implementieren.</p>
<p>Auch die Reihe von <em>Ahmad Moussa</em> wird vermutlich fortgesetzt. Und die <a href="https://www.gorillasun.de/articles/">anderen Artikel</a> aus seinem (noch jungen) Blog scheinen ebenfalls hochinteressant zu sein. Ich mu√ü mich da aber erst einmal durchw√ºhlen, bevor ich weitere Inspirationen daraus tanke. <em>Still digging!</em></p>



 ]]></description>
  <category>Py5</category>
  <category>Processing</category>
  <category>P5.js</category>
  <category>Creative Coding</category>
  <category>Nature of Code</category>
  <guid>https://kantel.github.io/posts/2023080701_partikelsysteme/index.html</guid>
  <pubDate>Mon, 07 Aug 2023 15:05:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023080701_partikelsysteme/images/particlesystem.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Spielereien mit Py5: Geisterscheiben ziehen vorbei</title>
  <dc:creator>J√∂rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023080601_ghostly_disks/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53097641941/"><img src="https://kantel.github.io/posts/2023080601_ghostly_disks/images/ghostlydisks-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Da hatte ich mir ja gestern etwas eingebrockt. Es war nicht so sehr die Tatsache, da√ü es mir gelungen war, <a href="https://kantel.github.io/posts/2023080502_pimp_quarto/">mein Quarto in wenig aufzumotzen</a>, sondern mir ging das eher zuf√§llig und auf die Schnelle ausgew√§hlte Beispielprogramm nicht mehr aus dem Kopf. Dazu fiel mir aus meinen Regalen die fast tausendseitige Schwarte ¬ª<a href="https://www.glassner.com/portfolio/processing-for-visual-artists/">Processing for Visual Artists</a>¬´ von <em><a href="https://www.glassner.com/bio-cv-contact/biography/">Andrew Glassner</a></em> in die H√§nde und der verwandelte dort die <em>Bouncing Balls</em> in geisterhafte Pucks, die bei einem virtuellen Airhockey √ºber den Bildschirm schweben <em>(Seiten 341ff)</em>.</p>
<p>Das mu√üte ich nat√ºrlich sofort in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/py5.html">Py5</a>, dem netten Python3-Port von <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processing.html">Processing</a> implementieren und ein wenig aufmotzen. Im Gro√üen und Ganzen entspricht das dem <a href="http://blog.schockwellenreiter.de/2021/09/2021091501.html">Bouncing-Ball-Beispiel</a> von gestern. Ich habe lediglich den Scheiben einen Trail spendiert und ‚Äì das habe ich bei <em>Andrew Glassner</em> geklaut ‚Äì das Abprallen an den Fensterr√§ndern etwas realistischer gestaltet:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bouncing Balls w/ Classes (improved)</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># nach Andrew Glassner: Processing for Visual Artists, p. 341pp</span></span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> randint</span>
<span id="cb1-4"></span>
<span id="cb1-5">WIDTH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600</span></span>
<span id="cb1-6">HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span></span>
<span id="cb1-7">BG_COLOR <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">240</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">215</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">175</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># color(164, 164, 164)</span></span>
<span id="cb1-8">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>              <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># alpha</span></span>
<span id="cb1-9">BORDER <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span></span>
<span id="cb1-10">NO_GHOSTS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span></span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Disk():</span>
<span id="cb1-13">    </span>
<span id="cb1-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, _x, _y, _vx, _vy, _radius, _col):</span>
<span id="cb1-15">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _radius</span>
<span id="cb1-16">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb1-17">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _col</span>
<span id="cb1-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Py5Vector(_x, _y)</span>
<span id="cb1-19">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Py5Vector(_vx, _vy)</span>
<span id="cb1-20">    </span>
<span id="cb1-21">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> check_boundaries(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pos.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pos.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r:</span>
<span id="cb1-23">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-24">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pos.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.x</span>
<span id="cb1-25">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pos.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pos.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r:</span>
<span id="cb1-26">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-27">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pos.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.y</span>
<span id="cb1-28">    </span>
<span id="cb1-29">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-30">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pos.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.x</span>
<span id="cb1-31">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pos.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.y</span>
<span id="cb1-32">    </span>
<span id="cb1-33">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> show(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-34">        stroke(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-35">        stroke_weight(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-36">        fill(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c)</span>
<span id="cb1-37">        circle(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pos.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pos.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d)</span>
<span id="cb1-38">        </span>
<span id="cb1-39">ghosts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb1-40"></span>
<span id="cb1-41"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> build_ghosts(n):</span>
<span id="cb1-42">    border <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BORDER</span>
<span id="cb1-43">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n):</span>
<span id="cb1-44">        xpos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(border, width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> border)</span>
<span id="cb1-45">        ypos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(border, height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> border)</span>
<span id="cb1-46">        xvel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-47">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># no vertical move</span></span>
<span id="cb1-48">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> xvel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>: xvel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-49">        yvel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-50">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># no horizontal move</span></span>
<span id="cb1-51">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> yvel  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>: yvel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-52">        radius <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb1-53">        clr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> color(randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">230</span>), randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">230</span>), randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">230</span>), a)</span>
<span id="cb1-54">        ghost <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Disk(xpos, ypos, xvel, yvel, radius, clr)</span>
<span id="cb1-55">        ghosts.append(ghost)</span>
<span id="cb1-56">                    </span>
<span id="cb1-57"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> setup():</span>
<span id="cb1-58">    size(WIDTH, HEIGHT)</span>
<span id="cb1-59">    window_move(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1400</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb1-60">    window_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bouncing Ghosts"</span>)</span>
<span id="cb1-61">    build_ghosts(NO_GHOSTS)</span>
<span id="cb1-62">    </span>
<span id="cb1-63"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> draw():</span>
<span id="cb1-64">    no_stroke()</span>
<span id="cb1-65">    fill(BG_COLOR, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb1-66">    rect(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, width, height)</span>
<span id="cb1-67">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ghost <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> ghosts:</span>
<span id="cb1-68">        ghost.show()</span>
<span id="cb1-69">        ghost.check_boundaries()</span>
<span id="cb1-70">        ghost.update()</span></code></pre></div>
<p>Aus irgendeinem Grund kann man dem <code>background</code> in Processing keine Transparenz mitgeben. Damit die Scheiben eine Spur hinter sich herziehen k√∂nnen, habe ich mich daher mit einem fenstergro√üen Rechteck beholfen, das ich als erstes zeichnen lasse. Diesem Rechteck habe ich mit <code>alpha = 30</code> eine Transparenz spendiert. Dadurch verblassen die in den Frames vorher gezeichneten Scheiben nur sehr langsam und vermitteln die Illusion, da√ü sie eine Spur hinterlassen.</p>
<p>Und wenn der Geisterpuck auf die R√§nder trifft, wird nicht nur die Richtung umgekehrt, sondern die Position wird auch mit <code>self.pos.x += 2*self.vel.x</code> respektive <code>self.pos.y += 2*self.vel.y</code> soweit korrigiert, da√ü ein Hinausschie√üen der Scheiben √ºber den Rand unm√∂glich ist.</p>
<div style="float: right; margin-left: 12px; margin-top: 6px;">
<a href="https://www.glassner.com/portfolio/processing-for-visual-artists/"><img src="https://kantel.github.io/posts/2023080601_ghostly_disks/images/pvacover.jpg" class="img-fluid"></a>
</div>
<p>Dadurch gewinnen die simplen, springenden B√§lle eine ganz neue, spirituelle Qualit√§t. <em>Andrew Glassner</em> schrieb dazu:</p>
<blockquote class="blockquote">
<p>Mir gef√§llt, wie das aussieht: Gespenstische Airhockey-Pucks, die umherh√ºpfen und nach der geheimen Wahrheit suchen, die es ihnen erm√∂glicht, ihre sterbliche H√ºlle zu verlassen und zur n√§chsten Stufe des spirituellen Airhockey-Puck-Lebens aufzusteigen.</p>
</blockquote>
<p>Allein wegen dieses Zitats sollte man <a href="https://www.glassner.com/">Website</a> und <a href="https://imaginary-institute.com/">Blog</a> von <em>Andrew Glassner</em> auf seine Leseliste setzen. Es gab zwar schon lange keine Updates mehr, aber wer wei√ü, welche ewigen Weisheiten in seinen Texten noch meiner Entdeckung harren.&nbsp;ü§ì</p>



 ]]></description>
  <category>Py5</category>
  <category>Processing</category>
  <category>Python</category>
  <category>Creative Coding</category>
  <guid>https://kantel.github.io/posts/2023080601_ghostly_disks/index.html</guid>
  <pubDate>Sun, 06 Aug 2023 18:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023080601_ghostly_disks/images/ghostlydisks.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Pimp my Quarto Site</title>
  <dc:creator>J√∂rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023080502_pimp_quarto/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53095390734/"><img src="https://kantel.github.io/posts/2023080502_pimp_quarto/images/bballpy5vector-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Erinnert Ihr Euch an <em>Albert Rapp</em>, den Sch√∂pfer des ¬ª<a href="https://albert-rapp.de/posts/13_quarto_blog_writing_guide/13_quarto_blog_writing_guide.html">Ultimate guide to starting a Quarto blog</a>? Der auch das Video ¬ª<a href="https://www.youtube.com/watch?v=ErRX8plZpQE">How to style your Quarto blog without knowing a lot of HTML/CSS</a>¬´ ver√∂ffentlicht hatte? Beides hatte ich im <em>Schockwellenreiter</em> ja schon <a href="https://kantel.github.io/posts/2022120902_quarto_blog_tutorial/">lobend erw√§hnt</a>.</p>
<p>Nun hat er wieder zugeschlagen und diese drei kurzen Videos ver√∂ffentlicht:</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=jX4_Dnzhl0M">A Dead-Simple Strategy to style your Quarto docs without knowing HTML &amp; CSS</a> (siebeneinhalb Minuten)</li>
<li>Den Nachfolger: <a href="https://www.youtube.com/watch?v=QU8wSya-Y9E">An easy way to style your Quarto docs without knowing HTML &amp; CSS</a> (elf Minuten)</li>
<li>Und als Follow-up: <a href="https://www.youtube.com/watch?v=vaPBOqfus7w">A GPDR-compliant way to import Google fonts in Quarto</a> (vier Minuten)</li>
</ul>
<p>Besonders gefallen an diesen Videos hat mir, wie er die in <a href="http://cognitiones.kantel-chaos-team.de/webworking/staticsites/quarto.html">Quarto</a> eingebetteten Codebl√∂cke aufgemotzt hat. Da ich mit dem Default von Quarto schon seit Beginn leicht unzufrieden war, wollte ich auch so etwas. Also mu√üte zum Ausprobieren erst einmal <a href="http://blog.schockwellenreiter.de/2021/09/2021091501.html">ein Codeblock her</a> ‚Äì es ist ein Expriment von vor zwei Jahren, in dem ich zum ersten Mal statt meiner eigenen <code>PVector</code>-Klasse die in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/py5.html">Py5</a> eingebaute <code>Py5Vector</code>-Klasse verwendet hatte:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bouncing Balls w/ Classes (improved)</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># nach Peter Farrell ¬ªMath Adventures with Python¬´, p183ff</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Einige Ungereimtheiten aus Farrells Code ausger√§umt und</span></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># erstmals Py5Vector anstelle meiner eigenen PVector-Implementierung genutzt</span></span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> randint, choice</span>
<span id="cb1-6"></span>
<span id="cb1-7">WIDTH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">640</span></span>
<span id="cb1-8">HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span></span>
<span id="cb1-9">NO_BALLS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span></span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Coding Train Farbpalette</span></span>
<span id="cb1-12">codingtrain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">240</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">37</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">248</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">158</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">248</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">239</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">34</span>) , (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">240</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">99</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">164</span>),</span>
<span id="cb1-13">               (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">146</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">82</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">161</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">129</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">122</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">198</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">98</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">199</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">119</span>)]</span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Ball():</span>
<span id="cb1-16">    </span>
<span id="cb1-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.radius <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>)</span>
<span id="cb1-19">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dia <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.radius</span>
<span id="cb1-20">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.location <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Py5Vector(randint(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dia, WIDTH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dia),</span>
<span id="cb1-21">                                  randint(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dia, HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dia))</span>
<span id="cb1-22">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Py5Vector(random(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), random(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb1-23">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># No horizontal or vertical move</span></span>
<span id="cb1-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb1-25">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-26">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb1-27">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-28">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dir</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Py5Vector(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>)</span>
<span id="cb1-29">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> choice(codingtrain)</span>
<span id="cb1-30">        </span>
<span id="cb1-31">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-32">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.location.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dir</span>.x</span>
<span id="cb1-33">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.location.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dir</span>.y</span>
<span id="cb1-34">    </span>
<span id="cb1-35">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> show(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-36">        fill(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb1-37">        circle(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.location.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.location.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dia)</span>
<span id="cb1-38">    </span>
<span id="cb1-39">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> check_boundaries(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-40">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.location.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.radius <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.location.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.radius:</span>
<span id="cb1-41">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-42">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.location.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.radius <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.location.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.radius:</span>
<span id="cb1-43">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>            </span>
<span id="cb1-44">balls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []       </span>
<span id="cb1-45"></span>
<span id="cb1-46"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> setup():</span>
<span id="cb1-47">    size(WIDTH, HEIGHT)</span>
<span id="cb1-48">    window_move(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1400</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb1-49">    window_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bouncing Balls w/Py5Vector"</span>)</span>
<span id="cb1-50">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(NO_BALLS):</span>
<span id="cb1-51">        balls.append(Ball())</span>
<span id="cb1-52"></span>
<span id="cb1-53"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> draw():</span>
<span id="cb1-54">    background(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">49</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">197</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">244</span>)   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Hellblau</span></span>
<span id="cb1-55">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ball <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> balls:</span>
<span id="cb1-56">        ball.show()</span>
<span id="cb1-57">        ball.check_boundaries()</span>
<span id="cb1-58">        ball.update()</span></code></pre></div>
<p>Gem√§√ü den Tutorials von <em>Albert Rapp</em> habe ich in dem Projektverzeichnis (das ist das Verzeichnis, das auch die Datei <code>_quarto.yml</code> enth√§lt) eine Datei <code>custom_themes.css</code> angelegt. Diese Datei habe ich dann in meine <code>_quarto.yml</code> eingebunden:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource yaml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">html</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">code-line-numbers</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb2-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> litera</span></span>
<span id="cb2-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> custom_theme.scss</span></span>
<span id="cb2-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">css</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> styles.css</span></span>
<span id="cb2-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">link-external-icon</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">false</span></span>
<span id="cb2-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">include-in-header</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"js/goatcounter.js"</span></span></code></pre></div>
<p>Damit man nicht sofort mit Fehlermeldungen √ºbersch√ºttet wird, <strong>mu√ü</strong> die <code>custom_theme.css</code> (Ihr k√∂nnt sie √ºbrigens nennen, wie Ihr wollt) mindestens diese zwei Zeilen enthalten:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource yaml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb3-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">/*-- scss:defaults --*/</span></span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">/*-- scss:rules --*/</span></span></code></pre></div>
<p>Ich wollte, da√ü die Code-Bl√∂cke wie auch der Inline-Code mit einem leichten Grau (<code>#eeeeee</code>) hinterlegt wird. Au√üerdem sollte der Inline-Code mit einer gr√ºnen Schrift (<code>#009991</code>) dargestellt werden. Dies wird alles in den SCSS-Defaults festgelegt. Zu guter letzt wollte ich die Schrift in den Code-Bl√∂cken etwas kleiner darstellen (<code>font-size: 0.8em;</code>), damit nicht sofort horizontale Scrollbalken provoziert werden. Diese Festlegung mu√ü wiederum in den SCSS-Rules getroffen werden. Daher sieht meine <code>custom_theme.scss</code> nun wie folgt aus:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource yaml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb4-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">/*-- scss:defaults --*/</span></span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">/*-- Define colors --*/</span></span>
<span id="cb4-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">$mybgcode</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> #eeeeee;</span></span>
<span id="cb4-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">$mycodecol</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> #009991;</span></span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">// Code block background</span></span>
<span id="cb4-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">$code-block-bg</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> $mybgcode;</span></span>
<span id="cb4-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">// Background color of inline code</span></span>
<span id="cb4-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">$code-bg</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> $mybgcode;</span></span>
<span id="cb4-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">// Color of inline Code</span></span>
<span id="cb4-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">$code-color</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> $mycodecol;</span></span>
<span id="cb4-13"></span>
<span id="cb4-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">/*-- scss:rules --*/</span></span>
<span id="cb4-15"></span>
<span id="cb4-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">div.sourceCode {</span></span>
<span id="cb4-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">font-size</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> 0.8em;</span></span>
<span id="cb4-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Es m√ºssen nur die Werte in die <code>custom_theme.scss</code> eingetragen werden, die das Default-Theme (in meinem Fall <code>litera</code>) √ºberschreiben. Die wichtigsten SCSS-Variblen, die man √ºberschreiben kann, findet Ihr <a href="https://quarto.org/docs/output-formats/html-themes">auf dieser Seite</a>. Ganz unten auf der Seite gibt es noch einen Link zur Bootstrap-Dokumentation mit einer <a href="https://github.com/twbs/bootstrap/blob/main/scss/_variables.scss">Liste aller SCSS- (oder: SASS-) Variablen</a>.</p>
<p>So jedenfalls gefallen mir meine Code-Bl√∂cke schon besser, aber ich kann mir weitere Verbesserungen durchaus vorstellen. Daher m√∂chte ich mir als n√§chstes <a href="https://hamel.dev/notes/quarto/highlighting.html">diese Seite</a> vornehmen, die beschreibt, wie man das <em>Syntax Highlighting</em> von Quarto verbessern kann. Eine <a href="https://github.com/quarto-dev/quarto-cli/tree/main/src/resources/pandoc/highlight-styles">Liste der in Quarto vorhandenen Syntax-Highlighter findet Ihr hier</a>.</p>
<p><strong>War sonst noch was?</strong> Ach ja, es gibt auch noch ein weiteres, nettes Video von <em>Albert Rapp</em>: ¬ª<a href="https://www.youtube.com/watch?v=4-6jDDCADvU">How to build an interactive point-and-click game with {Shiny}</a>¬´ (35 Minuten). Das hat zwar nichts (oder bestenfalls nur am Rande) mit Quarto zu tun, ist aber trotzdem interessant, da <a href="https://shiny.rstudio.com/py/">Shiny for Python</a> auch schon lange auf der Liste der von mir zu testenden Bibliotheken steht. <em>Still digging!</em></p>



 ]]></description>
  <category>Quarto</category>
  <category>Statische Seiten</category>
  <category>Interna</category>
  <guid>https://kantel.github.io/posts/2023080502_pimp_quarto/index.html</guid>
  <pubDate>Sat, 05 Aug 2023 17:50:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023080502_pimp_quarto/images/bballpy5vector.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Bereit f√ºr die Tonne</title>
  <dc:creator>J√∂rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023080501_bereit_tonne/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53095241649/"><img src="https://kantel.github.io/posts/2023080501_bereit_tonne/images/bereittonne-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Denn da geh√∂ren die Teile hin! <em>(Photo (<a href="http://creativecommons.org/licenses/by-nc-nd/2.0/">CC BY-NC-ND 2.0</a>) 2023: <a href="http://cognitiones.kantel-chaos-team.de/cv.html">J√∂rg Kantel</a>)</em></p>



 ]]></description>
  <category>Neuk√∂lln</category>
  <category>Verkehr</category>
  <guid>https://kantel.github.io/posts/2023080501_bereit_tonne/index.html</guid>
  <pubDate>Sat, 05 Aug 2023 14:25:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023080501_bereit_tonne/images/bereittonne.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
