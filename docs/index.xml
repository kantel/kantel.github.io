<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Der Schockwellenreiter</title>
<link>https://kantel.github.io/</link>
<atom:link href="https://kantel.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description>Schockwellenreiter</description>
<generator>quarto-1.5.47</generator>
<lastBuildDate>Wed, 02 Apr 2025 19:30:00 GMT</lastBuildDate>
<item>
  <title>Mozilla Thunderbird Version 137.0 freigegeben</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025040202_thunderbird_update/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54426720921/"><img src="https://kantel.github.io/posts/2025040202_thunderbird_update/images/thunderbird-b.jpg" class="img-fluid"></a></p>
<p>Dieses Mal hat sich der Donnervogel <a href="https://kantel.github.io/posts/2025033101_firefox_update/">zwei Tage Zeit gelassen</a>, bevor er den Feuerfuchs jagte: Die Entwickler des <a href="http://www.mozillamessaging.com/">Mozilla Thunderbird</a> haben das Update auf die Version 137.0 freigegeben und damit auch <a href="https://www.thunderbird.net/en-US/thunderbird/137.0/releasenotes/">Sicherheitslücken behoben</a>.</p>
<p>Thunderbird weist selbst auf dieses Update hin. Diese Prozedur kann aber auch wie immer über das Menü <code>Hilfe &gt; Über Thunderbird</code> angestoßen werden. <em>(Mein <a href="https://wwwuser.gwdguser.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54426720921/">Tunderbird hunts Firefox</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>Colored DC Comic style, illustration of a majestic thunderbird with colored feathers soaring above a mountain range during a bright sunset, hunting a red firefox</em>«. Modell: Flux.1 (Dev), Style: PixelWave.</p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2025040202_thunderbird_update/</guid>
  <pubDate>Wed, 02 Apr 2025 19:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025040202_thunderbird_update/images/thunderbird.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Apple veröffentlicht watchOS 11.4</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025040201_apple_update_nachschlag/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54424039170/"><img src="https://kantel.github.io/posts/2025040201_apple_update_nachschlag/images/applewatch-b.jpg" class="img-fluid"></a></p>
<p>Der IT-Riese aus Cupertino hat die beim <a href="https://kantel.github.io/posts/2025040102_apple_updates/">gestrigen Flickentag</a> fehlende Aktualisierung seiner Uhr heute nachgeliefert: Apple hat für die Apple Watch nun auch <a href="https://support.apple.com/en-us/122376">watchOS 11.4 bereitgestellt</a> und bietet damit im wesentlichen Fehlerbehebungen.</p>
<p>Die Aktualisierung wird über die Apple-Watch-App auf dem iPhone gestartet unter <code>Allgemein &gt; Softwareupdate</code>. Dabei sollte sich die Uhr in Reichweite des iPhones befinden, mit dem Ladekabel verbunden und mindestens zu 50 Prozent geladen sein. <em>(Mein <a href="https://wwwuser.gwdguser.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54424038415/">Zauberapfel im Zauberwald</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>Colored DC Comic style, a mad hatter gives a sexy naked woman, with big boops, and a nice butt an apple in the summer enchanted forest</em>«. Modell: Flux.1 (Dev), Style: PixelWave.</p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2025040201_apple_update_nachschlag/</guid>
  <pubDate>Wed, 02 Apr 2025 18:55:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025040201_apple_update_nachschlag/images/applewatch.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Apples monatlicher Flickentag</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025040102_apple_updates/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54424038415/"><img src="https://kantel.github.io/posts/2025040102_apple_updates/images/appleupdates-b.jpg" class="img-fluid"></a></p>
<p>Der monatliche Patchday des IT-Riesen aus Cupertino mit dem angebissenen Apfel im Logo kommt dieses Mal sehr früh, was auf eine gewisse Dringlichkeit schließen lässt. Und bis auf die Uhr sind auch diesen Monat wieder alle Betriebssystem-Versionen betroffen, so daß ich sie der Einfachheit halber <em>en bloc</em> abhandeln kann:</p>
<section id="apple-veröffentlicht-macos-sequoia-15.4" class="level2">
<h2 class="anchored" data-anchor-id="apple-veröffentlicht-macos-sequoia-15.4">Apple veröffentlicht macOS Sequoia 15.4</h2>
<p>Apple hat das Update auf die neue <a href="https://support.apple.com/en-us/122373">Betriebssystemversion macOS Sequoia&nbsp;15.4</a> freigegeben bietet auch hierzulande nun »Apple Intelligence« (KI) für die neueren Gerätemodelle und korrigiert auch wieder Sicherheitsprobleme.</p>
<p>Das Update steht – nachdem <a href="https://www.mactechnews.de/news/article/Apple-veroeffentlicht-macOS-15-4-186910.html">anfängliche Schwierigkeiten</a> behoben wurden – über die Systemeinstellungen zur Verfügung.</p>
</section>
<section id="apple-veröffentlicht-sicherheitsupdate-für-macos-ventura-und-sonoma" class="level2">
<h2 class="anchored" data-anchor-id="apple-veröffentlicht-sicherheitsupdate-für-macos-ventura-und-sonoma">Apple veröffentlicht Sicherheitsupdate für macOS Ventura und Sonoma</h2>
<p>Apple hat auch das Sicherheitsupdate auf <a href="https://support.apple.com/en-us/122375">macOS Ventura 13.7.5</a> und <a href="https://support.apple.com/en-us/122374">macOS Sonoma 14.7.5</a> freigegeben.</p>
<p>Die Updates stehen wie üblich über die Softwareaktualisierung bereit.</p>
</section>
<section id="apple-veröffentlicht-ios-ipados-18.4" class="level2">
<h2 class="anchored" data-anchor-id="apple-veröffentlicht-ios-ipados-18.4">Apple veröffentlicht iOS / iPadOS 18.4</h2>
<p>Wie angekündigt hat Apple das <a href="https://support.apple.com/en-us/122371">Update auf iOS 18.4 und iPadOS 18.4</a> bereitgestellt. Die Updates bieten auch hierzulande nun »Apple Intelligence« (KI) für die neueren Gerätemodelle und darüber hinaus viele neue Funktionen und Fehlerbehebungen und korrigieren Sićherheitslücken.</p>
<p>Das Update auf auf iOS 18.4 und iPadOS 18.4 kann über OTA (<em>Over the Air</em> - in <code>Einstellungen &gt; Allgemein &gt; Softwareaktualisierung</code> an ausreichende Akku-Kapazität und freien Speicherplatz sollte gedacht werden) erfolgen.</p>
<p>Eine vorherige Sicherung des Geräts ist wie immer sehr zu empfehlen.</p>
</section>
<section id="apple-veröffentlicht-ipados-17.7.6-für-ältere-systeme" class="level2">
<h2 class="anchored" data-anchor-id="apple-veröffentlicht-ipados-17.7.6-für-ältere-systeme">Apple veröffentlicht iPadOS 17.7.6 für ältere Systeme</h2>
<p>Apple hat nun das Update auf iPadOS 17.7.6 für ältere iPads bereitgestellt. Das Update behebt <a href="https://support.apple.com/en-us/122372">kritische Sicherheitslücken</a> für die Anwender, die nicht auf iOS/iPadOS 18 updaten wollen.</p>
<p>Das Update auf iPadOS 17.7.6 kann über OTA (<em>Over the Air</em> - in <code>Einstellungen &gt; Allgemein &gt; Softwareaktualisierung</code> an ausreichende Akku-Kapazität und freien Speicherplatz sollte gedacht werden) erfolgen.</p>
<p>Eine vorherige Sicherung des Geräts ist wie immer sehr zu empfehlen.</p>
</section>
<section id="apple-veröffentlicht-updates-für-diverse-ältere-systeme-von-iosipados" class="level2">
<h2 class="anchored" data-anchor-id="apple-veröffentlicht-updates-für-diverse-ältere-systeme-von-iosipados">Apple veröffentlicht Updates für diverse ältere Systeme von iOS/iPadOS</h2>
<p>Apple hat auch Updates für diverse ältere Systeme von iOS/iPadOS bereitgestellt. Auch diese Updates auf <a href="https://support.apple.com/en-us/122346">iOS/iPadOS 16.7.11</a> und <a href="https://support.apple.com/en-us/122345">iOS/iPadOS 15.8.4</a> beheben kritische Sicherheitslücken für alle Anwender, die nicht auf iOS/iPadOS 18 updaten wollen.</p>
<p>Auch diese Updates können über OTA (<em>Over the Air</em> - in <code>Einstellungen &gt; Allgemein &gt; Softwareaktualisierung</code> an ausreichende Akku-Kapazität und freien Speicherplatz sollte gedacht werden) erfolgen.</p>
<p>Eine vorherige Sicherung des Geräts ist wie immer sehr zu empfehlen.</p>
<p><em>(Mein <a href="https://wwwuser.gwdguser.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54424038415/">Zauberapfel im Zauberwald</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>Colored DC Comic style, a mad hatter gives a sexy naked woman, with big boops, and a nice butt an apple in the summer enchanted forest</em>«. Modell: Flux.1 (Dev), Style: PixelWave.</p>


</section>

 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2025040102_apple_updates/</guid>
  <pubDate>Tue, 01 Apr 2025 11:25:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025040102_apple_updates/images/appleupdates.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Die Mediadaten zum Frühlingsanfang</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025040101_mediadaten/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54362942869/"><img src="https://kantel.github.io/posts/2025040101_mediadaten/images/biber-b.jpg" class="img-fluid"></a></p>
<p>Ich hoffe <a href="https://kantel.github.io/posts/2025030301_mediadaten/">immer noch</a> auf den Frühling und das soll Euch auch wieder das (zugegeben leicht kitschige) <a href="https://www.flickr.com/photos/schockwellenreiter/54362942869/">Bannerbild oben</a> vermitteln. Aber auch an einem 1.&nbsp;April beginnt ein neuer Monat und daher ist es Zeit für das, was manches Mal hochtrabend auch <em>Mediadaten</em> genannt wird: Im März 2025 hatte der <em>Schockwellenreiter</em> laut seinem nicht immer zuverlässigen, aber dafür (hoffentlich!) datenschutzkonformen <del>Geißenpeter</del> <a href="https://www.goatcounter.com/">Neugiertool</a> exakt <strong>5.332&nbsp;Seitenaufrufe</strong>. Wie immer täuscht diese Exaktheit der Ziffer eine Genauigkeit der Zahl nur vor, trotzdem freue ich mich über jede Besucherin und jeden Besucher und bedanke mich bei allen meinen Leserinnen und Lesern.</p>
<p><em>😎 &nbsp; Bleibt mir gewogen!</em></p>
<p>Und dann noch der Blick auf die <em>Top Five</em> des Vormonats, der dieses Mal wieder ein paar interessante Einblicke aufweist:</p>
<ol type="1">
<li>Unangefochten an der Spitze steht – wie schon seit Monaten – der Artikel »<a href="https://kantel.github.io/posts/2024011002_ki_ohne_zensor/index.html">Bildgeneratoren und Künstliche Intelligenz – ohne Zensoren</a>« vom 10.&nbsp;Januar&nbsp;2024.</li>
<li>Schon weit abgeschlagen folgt »<a href="https://kantel.github.io/posts/2025030901_marimo/">Marimo – ein neuer Stern am (Python-) Notebook-Himmel?</a>« vom 9.&nbsp;des Vormonats.</li>
<li>Dann überraschend wieder etwas aus meinem Backkatalog: »<a href="https://kantel.github.io/posts/2023061701_platformer_pygame_pygbag_1/index.html">Ein Jump and Run (Mario Style) in Pygame und Pygbag (Stage 1)</a>«, ein Beitrag, den ich schon am 17.&nbsp;Juni&nbsp;2023 veröffentlicht hatte.</li>
<li>Doch auch (relativ) aktuelle Update-Meldungen finden ihre Leser, wie zum Beispiel die »<a href="https://kantel.github.io/posts/2025022801_libre_office_update/">Neue Version 24.8.5 von LibreOffice</a>«, erschienen am 28.&nbsp;Februar dieses Jahres.</li>
<li>Und <em>last but not least</em> fand die über ein Jahr alte Meldung »<a href="https://kantel.github.io/posts/2024031501_atom_wird_pulsar/">Der Atom-Editor lebt – und heißt jetzt Pulsar</a>« Euer reges Interesse.</li>
</ol>
<p>Bemerkenswert finde ich, daß drei der fünf Beiträge mindestens älter als ein Jahr sind, aber dennoch im letzten Monat viele Leser fanden. Das lässt zwei Rückschlüsse zu: Erstens, daß unser aller Datenkrake mich in ihrem Suchmaschinen-Algorithmus hochgerankt hat oder zweitens, daß im letzten Monat keine interessanten neuen Artikel hier in diesem <del>Blog</del> Kritzelheft erschienen sind. Ich hoffe jedoch stark, daß nur der erste Schluß zutrifft.</p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54362942869/">Ein Biber im Frühling</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>Colored french comic style, a beaver in a red dressing gown sits on a bench in the garden with a laptop on his lap, next to him a small table with a steaming cup of coffee. It is spring, many flowering plants and many small birds can be seen, the warm spring sun is bathing the scenery</em>«. Modell: Flux (Pro), Style: None.</p>



 ]]></description>
  <category>Mediadaten</category>
  <category>Interna</category>
  <guid>https://kantel.github.io/posts/2025040101_mediadaten/</guid>
  <pubDate>Tue, 01 Apr 2025 10:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025040101_mediadaten/images/biber.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Pizza Plane – jetzt in microStudio (Stage 1)</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025033102_pizzaplane_v1_microstudio/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54412341755/"><img src="https://kantel.github.io/posts/2025033102_pizzaplane_v1_microstudio/images/pizzaplanev1-b.jpg" class="img-fluid"></a></p>
<p>Wer meinen Beiträgen hier im <em>Schockwellenreiter</em> schon länger folgt, hat sicher geahnt, daß der vor einem <a href="https://kantel.github.io/posts/2025032501_seamless_scrolling_desert/">»endlos« scrollenden Hintergrund durch die Luft schwebende Dachs</a> nicht grundlos den Weg auf diese Seiten fand. Ich möchte nämlich herausfinden, ob mein Projekt »<a href="http://blog.schockwellenreiter.de/2022/10/2022101502.html">Pizza Plane</a>«, das ich ursprünglich einmal in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/tigerjython.html">TigerJython</a> begonnen, dann aber – nach meiner <a href="http://blog.schockwellenreiter.de/2022/10/2022103001.html">Abkehr von TigerJython</a> – in <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a> wieder <a href="https://kantel.github.io/posts/2023010102_pizzaplane4/">aufgenommen</a> hatte, nicht auch in <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/microstudio.html">microStudio</a> mit Python/<a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/brython.html">Brython</a> realisieren kann.<sup>1</sup> Spoiler: Die ersten Experimente verliefen recht vielversprechend.</p>
<iframe src="pizzaplanev1/index.html" class="if16_9" name="Pzza Plane (v1)">
</iframe>
<p>Ich erinnere an die Spielidee: Die pöse Meloni möchte mit Hilfe mutierter, tödlicher und angriffslustiger Pizzen halb Europa unterdrücken. Nur ein kleiner grüner<sup>2</sup> Flieger leistet Widerstand und stellt sich den Pizzen über einer Kulturwüste entgegen. In einer ersten Version habe ich den Hintergrund, den Flieger und die Pizzen implementiert.</p>
<p>Zuerst einmal die Klasse <code>Background</code>, die sich kaum von der gleichnamigen Klasse im Dachsbeispiel unterscheidet:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Background:</span>
<span id="cb1-2">  </span>
<span id="cb1-3">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, _x, _y):</span>
<span id="cb1-4">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _x</span>
<span id="cb1-5">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _y</span>
<span id="cb1-6">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span></span>
<span id="cb1-7">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">285</span></span>
<span id="cb1-8">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.speed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span></span>
<span id="cb1-9">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"desert_bg"</span></span>
<span id="cb1-10">    </span>
<span id="cb1-11">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-12">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.speed</span>
<span id="cb1-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w:</span>
<span id="cb1-14">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w</span>
<span id="cb1-15">      </span>
<span id="cb1-16">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-17">    screen.drawSprite(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h)</span></code></pre></div>
<p>Dann die Klasse <code>Plane</code>, bei der ich dem Flieger im Sprite-Editor eine kleine Animation (wie <a href="https://kantel.github.io/posts/2025032401_microstudio_anim_sprites/">hier beschrieben</a>) spendiert habe. Diese läuft, ohne daß man etwas programmieren muß, automatisch ab:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Plane:</span>
<span id="cb2-2">  </span>
<span id="cb2-3">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-4">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">140</span></span>
<span id="cb2-5">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span></span>
<span id="cb2-6">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span></span>
<span id="cb2-7">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span></span>
<span id="cb2-8">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"planefly"</span></span>
<span id="cb2-9">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.updown <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-10">    </span>
<span id="cb2-11">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> check_input(keyboard, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"UP"</span>):</span>
<span id="cb2-13">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.updown</span>
<span id="cb2-14">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check border</span></span>
<span id="cb2-15">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> screen.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:</span>
<span id="cb2-16">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> screen.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> check_input(keyboard, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DOWN"</span>):</span>
<span id="cb2-18">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.updown</span>
<span id="cb2-19">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check Border</span></span>
<span id="cb2-20">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>screen.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:</span>
<span id="cb2-21">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>screen.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-22">    </span>
<span id="cb2-23">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-24">    screen.drawSprite(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h)</span></code></pre></div>
<p>Die Klasse, die momentan nur die Pizzen beherbergt, habe ich <code>Enemy</code> genannt, weil sie eventuell später auch noch feindliche Tomaten, Pepperoni, Auberginen oder sonstiges, gefährliches Gemüse aufnehmen soll:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> randint</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Enemy:</span>
<span id="cb3-4">  </span>
<span id="cb3-5">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-6">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span></span>
<span id="cb3-7">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pizza"</span></span>
<span id="cb3-8">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.reset()</span>
<span id="cb3-9">    </span>
<span id="cb3-10">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> reset(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-11">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>)</span>
<span id="cb3-12">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb3-13">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.speed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb3-14">    </span>
<span id="cb3-15">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-16">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.speed</span>
<span id="cb3-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check Border</span></span>
<span id="cb3-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w:</span>
<span id="cb3-19">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.reset()</span>
<span id="cb3-20">      </span>
<span id="cb3-21">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-22">    screen.drawSprite(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h)</span></code></pre></div>
<p>Die Methode <code>reset()</code> setzt die Pizzen auf eine zufällige Position rechts außerhalb des Bildschirmausschnitts zurück, so daß es – obwohl nur eine endliche Anzahl von Sprites im Spiel ist – so aussieht, als würden ständig neue Gegner den armen kleinen Flieger angreifen. Die Methode wird daher sowohl im Constructor als auch in <code>update()</code> (wenn eine Pizza das Fenster links verlassen hat) aufgerufen.</p>
<p>Der Vorteil der Objektorientierung ist ja, daß dadurch das Hauptprogramm relativ kurz und übersichtlich gehalten wird:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1">NUM_ENEMIES <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb4-2"></span>
<span id="cb4-3">bgs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb4-4">enemies <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb4-5"></span>
<span id="cb4-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> init():</span>
<span id="cb4-7">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">global</span> plane</span>
<span id="cb4-8">  plane <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Plane()</span>
<span id="cb4-9">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(NUM_ENEMIES):</span>
<span id="cb4-10">    enemies.append(Enemy())</span>
<span id="cb4-11">  bgs.append(Background(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>))</span>
<span id="cb4-12">  bgs.append(Background(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1152</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>))</span>
<span id="cb4-13"></span>
<span id="cb4-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update():</span>
<span id="cb4-15">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> bg <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> bgs:</span>
<span id="cb4-16">    bg.update()</span>
<span id="cb4-17">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> enemy <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> enemies:</span>
<span id="cb4-18">    enemy.update()</span>
<span id="cb4-19">  plane.update()</span>
<span id="cb4-20"></span>
<span id="cb4-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw():</span>
<span id="cb4-22">  screen.clear()</span>
<span id="cb4-23">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> bg <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> bgs:</span>
<span id="cb4-24">    bg.draw()</span>
<span id="cb4-25">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> enemy <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> enemies:</span>
<span id="cb4-26">    enemy.draw()</span>
<span id="cb4-27">  plane.draw()</span>
<span id="cb4-28">  </span>
<span id="cb4-29"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> check_input(obj, val):</span>
<span id="cb4-30">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">hasattr</span>(obj, val):</span>
<span id="cb4-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> obj[val] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb4-32">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span></code></pre></div>
<p>Wie immer habe ich auch dieses Skript auf den <a href="https://microstudio.io/i/kantel/pizzaplanev1/">Seiten von microStudio veröffentlicht</a>, damit Ihr es klonen, erweitern oder einfach nur damit herumspielen könnt.</p>
<p>Und unter <a href="https://kantel.github.io/#category=microStudio">diesem Link</a> könnt Ihr Euch alle bisher im <em>Schockwellenreiter</em> erschienenen Beiträge zu microStudio anzeigen lassen.</p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Fußnoten</h2>

<ol>
<li id="fn1"><p>Das Projekt liegt mir wirlich am Herzen. Zwischenzeitlich hatte ich mich auch schon einmal an eine <a href="https://kantel.github.io/posts/2023032602_pizza_plane_with_pizzas/">Version</a> in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/trinket.html">Trinket</a> (in der <a href="https://kantel.github.io/posts/2023021601_my_first_trinket/">Processing.py-Variante</a>) und an eine <a href="https://kantel.github.io/posts/2024012902_pizzaplane_3/">Version in JavaScript</a> (<a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/p5js.html">P5.js</a>) versucht.↩︎</p></li>
<li id="fn2"><p>Das »Grün« ist nicht politisch gemeint, aber den ursprünglich verwendeten <strong>roten</strong> Doppeldecker habe ich wegen einer möglichen Assoziation mir dem »Roten Baron« <a href="https://de.wikipedia.org/wiki/Manfred_von_Richthofen">Manfred von Richthofen</a> suspendiert.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>microStudio</category>
  <category>Python</category>
  <category>Brython</category>
  <category>Spieleprogrammierung</category>
  <guid>https://kantel.github.io/posts/2025033102_pizzaplane_v1_microstudio/</guid>
  <pubDate>Mon, 31 Mar 2025 15:10:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025033102_pizzaplane_v1_microstudio/images/pizzaplanev1.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Mozilla Firefox: Reguläre Updates nachgeschoben</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025033101_firefox_update/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54416583582/"><img src="https://kantel.github.io/posts/2025033101_firefox_update/images/pandas2-b.jpg" class="img-fluid"></a></p>
<p>Nachdem die <a href="https://kantel.github.io/posts/2025032901_firefox_update/">Aktualisierung vom Sonnabend</a> offensichtlich ein Notfall-Update war (auch erkenntlich an den »schrägen« Versionsnummern) hat Mozilla heute die regulären Updates nachgeschoben: Die Entwickler des Firefox haben die neue <a href="https://www.mozilla.org/en-US/firefox/137.0/releasenotes/">Version 137</a> und die <a href="https://www.mozilla.org/en-US/firefox/128.9.0/releasenotes/">Version ESR 128.9</a> veröffentlicht und darin auch wieder Sicherheitslücken behoben. Auch in diese Updates sollen wieder viele Veränderungen eingeflossen sein.</p>
<p>Firefox weist selbst auf diese Updates hin. Diese Prozedur kann aber auch über das Menü <code>Hilfe &gt; Über Firefox</code> angestoßen werden. <em>(Mein <a href="https://wwwuser.gwdguser.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54416583582/">Zwei rote Pandas</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>Colored DC comic style, two red pandas in a spring enchanted forest</em>«. Modell: Flux (Dev), Style: PixelWave.</p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2025033101_firefox_update/</guid>
  <pubDate>Mon, 31 Mar 2025 14:25:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025033101_firefox_update/images/pandas2.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Es muß nicht immer Microsoft sein: Neue Version 25.2.2 von LibreOffice</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025032902_libre_office_update/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54356593908/"><img src="https://kantel.github.io/posts/2025032902_libre_office_update/images/officewoman-b.jpg" class="img-fluid"></a></p>
<p>In der <a href="https://blog.documentfoundation.org/blog/2025/03/27/libreoffice-25-2-2-and-24-8-6/">neuen Version 25.2.2 des quelloffenen Officepaketes LibreOffice</a> wurden zahlreiche neue Funktionen bereitgestellt und zudem wurden Sicherheitslücken behoben.</p>
<p>Die <a href="https://www.libreoffice.org/download/download-libreoffice/?type=mac-x86_64&amp;version=25.2.2&amp;lang=de">Downloads der korrigierten Versionen</a> finden sich hier. <em>(Mein <a href="https://wwwuser.gwdguser.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54356593908/">(Libre-) Office Woman</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>Colored French Comic Style. A sexy young woman with long red hair, green eyes and red lipstick is sitting in an office at a desk in front of a monitor and a keyboard. She is wearing a white, open blouse with a low neckline and a rust-colored vest. She has a pencil in one hand. On the desk is an open notepad, a cup with writing utensils and a stack of books. There are shelves on the walls with many more books and files. The spring sun is shining through a window in the background</em>«. Modell: Flux (Pro), Style: None.</p>



 ]]></description>
  <category>LibreOffice</category>
  <category>Produktivität</category>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2025032902_libre_office_update/</guid>
  <pubDate>Sat, 29 Mar 2025 15:40:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025032902_libre_office_update/images/officewoman.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Ein Feuerfuchs kommt selten allein</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025032901_firefox_update/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54416583502/"><img src="https://kantel.github.io/posts/2025032901_firefox_update/images/pandas-b.jpg" class="img-fluid"></a></p>
<p>Die Entwickler des Mozilla Firefox haben die neue <a href="https://www.mozilla.org/en-US/firefox/136.0.4/releasenotes/">Version 136.0.4</a> und die <a href="https://www.mozilla.org/en-US/firefox/128.8.1/releasenotes/">Version ESR 128.8.1</a> veröffentlicht und darin auch wieder Sicherheitslücken behoben. Wie immer sind in diese Updates auch viele Veränderungen eingeflossen.</p>
<p>Firefox weist selbst auf diese Updates hin. Diese Prozedur kann aber auch über das Menü <code>Hilfe &gt; Über Firefox</code> angestoßen werden. <em>(Mein <a href="https://wwwuser.gwdguser.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54416583502/">Zwei rote Pandas</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>Colored DC comic style, two red pandas in a spring enchanted forest</em>«. Modell: Flux (Dev), Style: PixelWave.</p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2025032901_firefox_update/</guid>
  <pubDate>Sat, 29 Mar 2025 15:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025032901_firefox_update/images/pandas.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Sicherheitslücken im PDF/Postscript-Interpreter Ghostscript</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025032701_ghostscript/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54370053019/"><img src="https://kantel.github.io/posts/2025032701_ghostscript/images/ghost-b.jpg" class="img-fluid"></a></p>
<p>In dem besonders unter Linux/Unix verbreiteten Interpreter Ghostscript zum Umgang mit PDF- und PostScript-Dateien befindet sich einige Schwachstellen, die von Angreifer genutzt werden können, um Schadcode auszuführen.</p>
<p><a href="https://ghostscript.readthedocs.io/en/gs10.05.0/News.html?utm_source=ghostscript&amp;utm_medium=website&amp;utm_content=inline-link">Eine Korrektur ist bereits verfügbar</a> und sollte zeitnah eingefahren werden. <em>(Mein <a href="https://wwwuser.gwdguser.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54370053019/">Robo-Ghost</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>Colored french comic style, a sexy female robot evades from a gigantic data octopus</em>«. Modell: Flux (Pro), Style: None.</p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2025032701_ghostscript/</guid>
  <pubDate>Thu, 27 Mar 2025 11:45:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025032701_ghostscript/images/ghost.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Google korrigiert wieder kritische Sicherheitslücken in Chrome</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025032601_chrome_update/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54370014529/"><img src="https://kantel.github.io/posts/2025032601_chrome_update/images/octopussy-b.jpg" class="img-fluid"></a></p>
<p>Heute kommt die wöchentliche Mittwochs-Aktualisierung des Flaggschiffs unser aller Datenkrake tatsächlich am Mittwoch, weder die Datenkrake noch ich haben geschlampt: Google veröffentlicht das Update der Version 134 (134.0.6998.177/178) seines Browsers Chrome und schließt damit <a href="https://chromereleases.googleblog.com/2025/03/stable-channel-update-for-desktop_25.html">kritische Sicherheitslücken</a>.</p>
<p>Chrome aktualisiert sich (außer bei Linux) über die integrierte Update-Funktion, kann aber – wenn es pressiert – auch <a href="https://www.google.com/intl/de/chrome/browser/">hier geladen</a> werden. <em>(Mein <a href="https://wwwuser.gwdguser.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54370014529/">Octopussy</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>Colored french comic style, a sexy female robot evades from a gigantic data octopus</em>«. Modell: Flux (Pro), Style: None.</p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2025032601_chrome_update/</guid>
  <pubDate>Wed, 26 Mar 2025 15:20:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025032601_chrome_update/images/octopussy.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>MicroStudio: Endlos schwebt der Dachs (jetzt auch in Python)</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025032501_seamless_scrolling_desert/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54409670008/"><img src="https://kantel.github.io/posts/2025032501_seamless_scrolling_desert/images/desert01-b.jpg" class="img-fluid"></a></p>
<p>So viele <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/microstudio.html">microStudio</a>-Tutorials wie ich befürchtet hatte, waren es nun doch nicht, die der Portierung von microScript nach Python/<a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/brython.html">Brython</a> harrten. Neben der <a href="https://kantel.github.io/posts/2025032401_microstudio_anim_sprites/">gestern fertiggestellten Sprite-Animation</a> war es eigentlich nur noch der vor einem <a href="https://kantel.github.io/posts/2024031702_scrolling_badger/">scheinbar endlosen Hintergrund schwebende Dachs</a>, der noch nicht nach Python portiert war.</p>
<iframe src="seamlessscrollingdesert/index.html" class="if16_9" name="Seamless Scrolling Desert (Python)">
</iframe>
<p>Das hatte ich dann heute in Angriff genommen. Das <a href="https://www.flickr.com/photos/schockwellenreiter/54409610490/">Hintergrundbild der scheinbar endlos scrollenden Wüstenlandschaft</a> hatte ich von <a href="https://www.flickr.com/photos/schockwellenreiter/53537297945/">Scenarios</a> Skybox generieren lassen, denn diese Bilder gehen an den Enden wieder nahtlos ineinander über. Also mußte ich das Bild nur, wenn es am linken Bildschirmrand verschwunden war, am rechten Bildschirmrand wieder »ankleben«. Dafür habe ich eine Klasse <code>Background</code> geschrieben:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Background:</span>
<span id="cb1-2">  </span>
<span id="cb1-3">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, _x, _y):</span>
<span id="cb1-4">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _x</span>
<span id="cb1-5">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _y</span>
<span id="cb1-6">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span></span>
<span id="cb1-7">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">285</span></span>
<span id="cb1-8">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.speed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span></span>
<span id="cb1-9">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"desert02"</span></span>
<span id="cb1-10">    </span>
<span id="cb1-11">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-12">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.speed</span>
<span id="cb1-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w:</span>
<span id="cb1-14">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w</span>
<span id="cb1-15">      </span>
<span id="cb1-16">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-17">    screen.drawSprite(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h)</span></code></pre></div>
<p>Auch das <a href="https://www.flickr.com/photos/schockwellenreiter/53539184633/">Bild des fliegenden Dachses</a> hatte ich von Scenario erstellen lassen und dann mit einer Bildverarbeitung freigestellt. Eigentlich verharrt der Dachs an einer festen Stelle auf dem Bildschirm (daher bnötigt die Klasse <code>Badger</code> auch keine <code>update()</code>-Methode), die Illusion, daß er über einer Landschaft schwebt, wird durch das nach links gleitende Hintergrundbild erzeugt:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Badger:</span>
<span id="cb2-2">  </span>
<span id="cb2-3">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-4">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span></span>
<span id="cb2-5">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span></span>
<span id="cb2-6">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">44</span></span>
<span id="cb2-7">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">65</span></span>
<span id="cb2-8">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"badger"</span></span>
<span id="cb2-9">    </span>
<span id="cb2-10">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-11">    screen.drawSprite(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h)</span></code></pre></div>
<p>Im Hauptscript wird dann alles zusammengefügt:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1">bgs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> init():</span>
<span id="cb3-4">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">global</span> badger</span>
<span id="cb3-5">  badger <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Badger()</span>
<span id="cb3-6">  bgs.append(Background(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">334</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>))</span>
<span id="cb3-7">  bgs.append(Background(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1358</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>))</span>
<span id="cb3-8"></span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update():</span>
<span id="cb3-11">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> bg <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> bgs:</span>
<span id="cb3-12">    bg.update()</span>
<span id="cb3-13">    </span>
<span id="cb3-14"></span>
<span id="cb3-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw():</span>
<span id="cb3-16">  screen.clear(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(100, 160, 160)"</span>)</span>
<span id="cb3-17">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> bg <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> bgs:</span>
<span id="cb3-18">    bg.draw()</span>
<span id="cb3-19">  badger.draw()</span></code></pre></div>
<p>Ich muß gestehen, die Startposition der x-Achse der ersten Instanz des Backgrounds (<code>x = 334</code>) habe ich durch Experimente ermittelt. Das Bild ist 1024 Pixel weit, die x-Achse der Fensterkordinaten (beim (Quer-) Format 16:9) reicht von <img src="https://latex.codecogs.com/png.latex?-178"> bis <img src="https://latex.codecogs.com/png.latex?178"> und die Startkoordinaten des Bildes liegen im Nullpunkt des Koordinatensystems in der Mitte des Bildes. Wie ich von diesen Zahlen auf <img src="https://latex.codecogs.com/png.latex?334"> kommen kann, hat sich mir bisher noch nicht erschlossen, aber mit diesem Wert liegt der linke Rand des Bildes exakt auf <img src="https://latex.codecogs.com/png.latex?-178"> der Bildschirmkoordinaten. Für die zweite Instanz des Bildes war es dann einfacher: Ich habe auf die Bildbreite (1024 Pixel) einfach den Wert <img src="https://latex.codecogs.com/png.latex?334"> aufaddiert.</p>
<p>Auch die y-Koordinaten (<code>y = -30</code>) hatte ich experimentell herausgefunden. Hier war der Grund aber ein ästhetischer: Ich wollte, daß der Dachs über einen scheinbar im Vordergrund wachsenden Kaktus schwebt, dadurch entsteht die Illusion, daß er <em>hinter</em> dem Kaktus vorbeigleitet. Da das Bild mit 285 Pixeln Höhe etwas größer ist als die Bildschirmhöhe von 200 Pixeln, hatte ich hier Spielraum, um einen passenden Ausschnitt zu finden.</p>
<p>Auch dieses Tutorial habe ich wieder auf den <a href="https://microstudio.io/i/kantel/seamlessscrollingdesert/">Seiten von microStudio veröffentlicht</a>, damit Ihr es klonen, erweitern oder einfach nur damit herumspielen könnt. Denn das Ziel dieser kleinen Tutorial-Reihe ist ja, daß nicht nur ich, sondern auch Ihr microStudio (mit Python/Brython) lernt.</p>
<p>Und unter diesem Link könnt Ihr Euch alle bisher im <em>Schockwellenreiter</em> erschienenen <a href="https://kantel.github.io/index.html#category=microStudio">Beiträge zu microStudio</a> anzeigen lassen. Und auch später alle noch neu erscheinenden, von denen sicher noch viele folgen werden. <em>Still digging!</em></p>



 ]]></description>
  <category>microStudio</category>
  <category>Python</category>
  <category>Brython</category>
  <category>Spieleprogrammierung</category>
  <category>Creative Coding</category>
  <guid>https://kantel.github.io/posts/2025032501_seamless_scrolling_desert/</guid>
  <pubDate>Tue, 25 Mar 2025 14:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025032501_seamless_scrolling_desert/images/desert01.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Animierte Sprites mit microStudio und Python</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025032401_microstudio_anim_sprites/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54408082434/"><img src="https://kantel.github.io/posts/2025032401_microstudio_anim_sprites/images/rogue0-b.jpg" class="img-fluid"></a></p>
<p>Bei der Durchsicht meiner Beiträge zu <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/microstudio.html">microStudio</a> hier in <a href="https://kantel.github.io/index.html#category=microStudio">diesem <del>Blog</del> Kritzelheft</a> fiel mir auf, daß ich noch nicht alle Tutorials, die ich zu Beginn noch in microScript (der <em>nativen</em> Scriptsprache von microStudio) entwickelt hatte, nach Python/<a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/brython.html">Brython</a> portiert habe. Das werde ich – beginnend mit <a href="https://kantel.github.io/posts/2024031201_microstudio_tut_01/">diesem Tutorial über Sprite-Animationen</a> – in den nächsten Tagen sukzessive nachholen.</p>
<p>Doch zuerst etwas anderes. Ich bemühe mich ja immer für meine Beiträge neue und gutaussehende (und frei zu nutzende) Tiles und Sprites zu entdecken. Und bei der Vorbereitung zu diesem Artikel bin ich über die <a href="https://o-lobster.itch.io/">Seiten von O_Lobster auf Itch.io</a> gestolpert und fand diese drei Asset-Packs bemerkenswert:</p>
<p><a href="https://img.itch.zone/aW1hZ2UvNjY0NjUxLzM1OTM5NjMucG5n/original/3GoyIU.png"><img src="https://kantel.github.io/posts/2025032401_microstudio_anim_sprites/images/3GoyIU.png" class="img-fluid"></a>&nbsp;<a href="https://img.itch.zone/aW1hZ2UvNDM2ODI5LzIxOTIxMjEucG5n/original/k2WT1Y.png"><img src="https://kantel.github.io/posts/2025032401_microstudio_anim_sprites/images/k2WT1Y.png" class="img-fluid"></a>&nbsp;<a href="https://img.itch.zone/aW1hZ2UvMTA3MjQ0OC82MTQ3OTUxLnBuZw==/original/F%2Bgnw1.png"><img src="https://kantel.github.io/posts/2025032401_microstudio_anim_sprites/images/F+gnw1.png" class="img-fluid"></a></p>
<ol type="1">
<li><a href="https://o-lobster.itch.io/simple-dungeon-crawler-16x16-pixel-pack">Simple Dungeon Crawler 16x16 Pixel Art Asset Pack</a>, (<a href="https://creativecommons.org/publicdomain/zero/1.0/">CC0</a>)</li>
<li><a href="https://o-lobster.itch.io/adventure-pack">Top-Down Adventure Pack</a>, (<a href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a>)</li>
<li><a href="https://o-lobster.itch.io/platformmetroidvania-pixel-art-asset-pack">Platformer/Metroidvania Asset Pack</a>, (<a href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a>)</li>
</ol>
<p>Diese 16x16 Pixel großen Bildchen im Retro-Style sehen nicht nur gut aus, sondern lassen sich auch gut miteinander kombinieren, so daß Ihr mit diesen drei Packs schon ein nettes Roguelike oder einen Retro-Platformer zusammenstricken könnt. Ich habe sie jedenfalls heruntergeladen und werde sie in meinen nächsten Experimenten mit microStudio verwenden.</p>
<p>Und nun zu dem versprochenen Tutorial, in dem ein kleiner, animierter Rogue mithilfe der Pfeiltasten (alternativ sind auch die Tasten <code>a</code>, <code>s</code>, <code>d</code> und <code>w</code> möglich) über den Monitor bewegt werden kann:</p>
<iframe src="roguelike01python/index.html" class="if16_9" name="Roguelike 01 (Python)">
</iframe>
<p>Dafür habe ich aus dem oben schon erwähnten <a href="https://o-lobster.itch.io/adventure-pack">Top-Down Adventure Pack</a> von <a href="https://o-lobster.itch.io/">O_Lobster</a> den Helden mit je vier Streifen mit je vier Einzelbildern heruntergeladen. Einmal für die Idle-Animationen in den Richtungen oben, unten, rechts, links und dann für die Run-Animationen ebenfalls in den vier Himmelsrichtungen. Diese Streifen habe ich dann in microStudio importiert.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/54405330686/"><img src="https://kantel.github.io/posts/2025032401_microstudio_anim_sprites/images/rogue1.jpg" class="img-fluid figure-img" alt="Screenshot 1: Strip zur Animation"></a></p>
<figcaption>Screenshot 1: Strip zur Animation</figcaption>
</figure>
</div>
<p>Dort habe ich dann im Sprite-Editor das erste Teilbild mit dem Auswahlwerkzeug markiert und dann mit dem darauf erscheinenden Button »Strip zur Animation« die Animation erstellt. Wichtig ist, daß die Größe des Streifens korrekt angegeben wird (in meinem Fall 4 mal 16 Pixel breit und 16 Pixel hoch, also 64 x 16 Pixel), sonst erscheinen die Bilder ziemlich gequetscht.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/54405565818/"><img src="https://kantel.github.io/posts/2025032401_microstudio_anim_sprites/images/rogue2.jpg" class="img-fluid figure-img" alt="Screenshot 2: Animationsgeschwindigkeit einstellen"></a></p>
<figcaption>Screenshot 2: Animationsgeschwindigkeit einstellen</figcaption>
</figure>
</div>
<p>Dann habe ich noch in dem darauf angezeigten Schieberegler rechts unten die Animationsgeschwindigekeit auf <code>8 FPS</code> eingestellt. Das war es dann schon. Denn wenn man nun im Code-Editor in der Funktion <code>draw()</code> zum Beispiel die Zeile</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1">screen.drawSprite(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hero_idle_right"</span>, hero.x, hero.y, hero.w, hero.h)</span></code></pre></div>
<p>eingibt, zeigt microStudio den komplette Animationszyklus an, ohne daß man ihn zusätzlich programmieren muß. Interessant ist auch, daß man mit <code>w</code> und <code>h</code> die Sprites skalieren kann. Ich habe zum Beispiel die im Original 16x16&nbsp;Pixel großen Bildchen des Helden mit <code>self.w = 32</code> und <code>self.h = 32</code><sup>1</sup> auf die doppelte Größe aufgeblasen, was den Retro-Effekt noch einmal betont.</p>
<p>Jetzt gilt es nur noch, in der <code>update()</code>-Methode die korrekten Richtungen abhängig davon, welche Taste gedrückt ist, zu implementieren:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> check_input(keyboard, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RIGHT"</span>):</span>
<span id="cb2-3">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.speed</span>
<span id="cb2-4">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dir</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"right"</span></span>
<span id="cb2-5">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hero_run_right"</span></span>
<span id="cb2-6">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check Border</span></span>
<span id="cb2-7">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:</span>
<span id="cb2-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hero_idle_right"</span></span>
<span id="cb2-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> check_input(keyboard, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LEFT"</span>):</span>
<span id="cb2-11">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.speed</span>
<span id="cb2-12">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dir</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span></span>
<span id="cb2-13">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hero_run_left"</span></span>
<span id="cb2-14">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check Border</span></span>
<span id="cb2-15">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:</span>
<span id="cb2-16">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-17">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hero_idle_left"</span></span>
<span id="cb2-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> check_input(keyboard, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"UP"</span>):</span>
<span id="cb2-19">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.speed</span>
<span id="cb2-20">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dir</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"up"</span></span>
<span id="cb2-21">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hero_run_up"</span></span>
<span id="cb2-22">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check Border</span></span>
<span id="cb2-23">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> screen.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:</span>
<span id="cb2-24">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> screen.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-25">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hero_idle_up"</span></span>
<span id="cb2-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> check_input(keyboard, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DOWN"</span>):</span>
<span id="cb2-27">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.speed</span>
<span id="cb2-28">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dir</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"down"</span></span>
<span id="cb2-29">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hero_run_down"</span></span>
<span id="cb2-30">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check Border</span></span>
<span id="cb2-31">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>screen.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:</span>
<span id="cb2-32">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>screen.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-33">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hero_idle_down"</span></span>
<span id="cb2-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb2-35">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dir</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"right"</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hero_idle_right"</span></span>
<span id="cb2-36">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dir</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hero_idle_left"</span></span>
<span id="cb2-37">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dir</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"up"</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hero_idle_up"</span></span>
<span id="cb2-38">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dir</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"down"</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hero_idle_down"</span></span></code></pre></div>
<p>Da ich wollte, daß der Rogue auch stehen bleibt und nicht auf der Stelle zappelt, wenn die Taste wieder losgelassen wird, lasse ich im letzten <code>else</code> die einzelnen idle-Sprite-Animationen für die jeweilige Richtung anzeigen<sup>2</sup>.</p>
<p>Die Klasse <code>Hero</code> leistet im großen und ganzen die Hauptarbeit und sieht so aus:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Hero:</span>
<span id="cb3-2">  </span>
<span id="cb3-3">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-4">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-5">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-6">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb3-7">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb3-8">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hero_idle_down"</span></span>
<span id="cb3-9">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dir</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"down"</span></span>
<span id="cb3-10">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.speed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-11">    </span>
<span id="cb3-12">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># siehe oben</span></span>
<span id="cb3-14">  </span>
<span id="cb3-15">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-16">    screen.drawSprite(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h)</span></code></pre></div>
<p>Dadurch ist der Hauptteil des Sketches wieder recht kurz geraten:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> init():</span>
<span id="cb4-2">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">global</span> hero</span>
<span id="cb4-3">  hero <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Hero()</span>
<span id="cb4-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(screen.width//4)</span></span>
<span id="cb4-5"></span>
<span id="cb4-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update():</span>
<span id="cb4-7">  hero.update()</span>
<span id="cb4-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> check_input(keyboard.press, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SPACE"</span>):</span>
<span id="cb4-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print("RESTART")</span></span>
<span id="cb4-10">    init()</span>
<span id="cb4-11"></span>
<span id="cb4-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw():</span>
<span id="cb4-13">  screen.clear(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(89, 127, 30"</span>)</span>
<span id="cb4-14">  hero.draw()</span>
<span id="cb4-15"></span>
<span id="cb4-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> check_input(obj, val):</span>
<span id="cb4-17">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">hasattr</span>(obj, val):</span>
<span id="cb4-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> obj[val] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb4-19">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span></code></pre></div>
<p>Das war es auch schon, das komplette Tutorial inklusive Quellcode und aller verwendeten Assets habe ich wieder auf den <a href="https://microstudio.io/i/kantel/roguelike01python/">Seiten von microStudio veröffentlicht</a>. Ihr könnt es Euch dort anschauen, klonen, herunterladen und/oder damit eigene Varianten erstellen.</p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Fußnoten</h2>

<ol>
<li id="fn1"><p>Ihr seht, mein Held ist in seiner eigenen Klasse gekapselt.↩︎</p></li>
<li id="fn2"><p>Das passiert momentan bei gedrückter Taste in den mit <code># Check Border</code> kommentierten Code-Teilen, wo mein Held gestoppt und auf die exakte Randposition gesetzt wird.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>microStudio</category>
  <category>Python</category>
  <category>Brython</category>
  <category>Spieleprogrammierung</category>
  <category>Tiles und Sprites</category>
  <category>Creative Coding</category>
  <guid>https://kantel.github.io/posts/2025032401_microstudio_anim_sprites/</guid>
  <pubDate>Mon, 24 Mar 2025 19:05:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025032401_microstudio_anim_sprites/images/rogue0.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>MicroStudio: Video-Tutorials zum Wochenende</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025032201_microstudio_tutorials/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54401197019/"><img src="https://kantel.github.io/posts/2025032201_microstudio_tutorials/images/jugglingpython2-b.jpg" class="img-fluid"></a></p>
<p>Da ich vermutlich in den nächsten Wochen (oder sogar Monaten) noch einiges mit <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/microstudio.html">microStudio</a> und Python/<a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/brython.html">Brython</a> anstellen möchte, habe ich bei YouTube mal nachgeschaut, was das Netz denn so an Tutorials zu microStudio anbietet. Die Auswahl war nicht gerade üppig, so daß ich sie nahezu komplett hier im <del>Blog</del> Kritzelheft auflisten kann:</p>
<iframe class="if16_9" src="https://www.youtube.com/embed/jQ744nrh8uE?si=Xh3V5gs-kmr8MR0l" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p><strong>GameFromScratch</strong> ist immer die erste Adresse, wenn es um Game Engines geht. Und auch im Fall von microStudio enttäuschte mich der Kanal nicht. Neben dem obigen Beitrag »<a href="https://gamefromscratch.com/microstudio-game-engine-adds-desktop-versions/">MicroStudio Game Engine Adds Desktop Versions</a>« hatte er noch zwei andere Beiträge im Portfolio: »<a href="https://gamefromscratch.com/microstudio-game-engine-open-sourced/">microStudio Game Engine Open Sourced</a>« und »<a href="https://gamefromscratch.com/microstudio-game-engine-hands-on/">microStudio Game Engine Hands-On</a>«. Zu beachten ist, daß die Beiträge in <em>GameFromScratch</em> eher Reviews und keine Tutorials sind.</p>
<iframe class="if16_9" src="https://www.youtube.com/embed/1cd-IWCEMoI?si=L6eeDpjoK2-wQQWX" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p><strong>mrLman</strong>: Die Tutorials von <em>mrLman</em> werden auch auf der <a href="https://microstudio.dev/tutorials/">Website von microStudio</a> angeboten. Zu ihnen gehört auch die Playlist »<a href="https://www.youtube.com/playlist?list=PLKKvmO6ujLbJhyQTkkhjnXmzCVHXWGC66">Microstudio Game Elements</a>«, die aus 24 eher kurzen Videos besteht, die jeweils ein Thema behandeln.</p>
<iframe class="if16_9" src="https://www.youtube.com/embed/baeSkAv8sg8?si=YhC60XYex9H7R_Mz" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p><strong>Makercademy</strong>: Aus nur drei, aber dafür sehr umfangreichen Videos besteht die Liste »<a href="https://www.youtube.com/playlist?list=PLBe3We7ebJUQgy3ZRJfIcc2LH4sVOjPgg">Design, Code, Play</a>« der <em>Makercademy</em>. Neben dem obigen »<a href="https://www.youtube.com/watch?v=baeSkAv8sg8">Make a simple game in Microstudio</a>« (1&nbsp;Stunde, 41 Minuten) besteht sie noch aus den Videos »<a href="https://www.youtube.com/watch?v=Y1aoBTP-iuQ">Code a Jumping Obstacles Game</a>« (54&nbsp;Minuten) und »<a href="https://www.youtube.com/watch?v=n27wp5C2vl0">Build a Simple Platformer Level</a>« (50 Minuten).</p>
<iframe class="if16_9" src="https://www.youtube.com/embed/Eaf9VsB3WLU?si=YT-OSWFyGVRDhcUr" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p><strong>Mr.&nbsp;Play</strong>: Den Abschluß bildet die Playlist »<a href="https://www.youtube.com/playlist?list=PLIos1eMgRASadQvFm8p_QX7CiSRCFJkbL">microStudio</a>« von <em>Mr.&nbsp;Play</em>. Sie besteht aus neun extrem kurzen Videos (alle unter zwei Minuten).</p>
<p>Zu beachten ist, daß alle diese Tutorials die Programmierung mit microStudios eigener Programmiersprache microScript (einer Lua-ähnlichen Sprache) behandeln, Tutorials zu microScript mit Python/Brython habe ich keine gefunden. Da müsst Ihr schon auf die <a href="https://kantel.github.io/index.html#category=microStudio">Beiträge hier im <em>Schockwellenreiter</em></a> zurückgreifen.</p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54401197019/">Juggling Python</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>Colored DC Comic Style. A python with horn-rimmed glasses juggles a few balls with painted animal heads in a circus tent in front of an animal audience</em>«. Modell: Flux (Pro), Style: None.</p>



 ]]></description>
  <category>microStudio</category>
  <category>Python</category>
  <category>Brython</category>
  <category>Nature of Code</category>
  <category>Creative Coding</category>
  <guid>https://kantel.github.io/posts/2025032201_microstudio_tutorials/</guid>
  <pubDate>Sat, 22 Mar 2025 14:25:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025032201_microstudio_tutorials/images/jugglingpython2.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>MicroStudio und Python: Bouncing Heads</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025032101_microstudio_bouncing_heads/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54401021036/"><img src="https://kantel.github.io/posts/2025032101_microstudio_bouncing_heads/images/jugglingpython-b.jpg" class="img-fluid"></a></p>
<p>Natürlich konnte ich meine <a href="https://kantel.github.io/posts/2025031901_microstudio_bouncing_balls/">verbesserte Version der kollidierenden Bälle</a> von vorgestern nicht einfach so stehen lassen, ohne nicht noch ein paar Spielereien damit anzustellen. Also habe ich mir wieder das freie (<a href="https://kenney.nl/assets/animal-pack-redux">CC0</a>) <a href="https://kenney.nl/assets/animal-pack-redux">Animal Pack Redux</a> aus dem schier unerschöpflichen Fundus von Kenney geschnappt und statt der Bälle ein paar Tierköpfe sich gegenseitig die Schädel an- und wieder abstoßen lassen:</p>
<iframe src="bouncingheads/index.html" class="if16_9" name="Bouncing Heads">
</iframe>
<p>Als Entwicklungsumgebung habe ich wieder <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/microstudio.html">microStudio</a> mit Python/<a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/brython.html">Brython</a> benutzt und der Quellcode unterscheidet sich nur unwesentlich von der Version von Mittwoch: Zuerst die Klasse <code>Head</code>:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> randint, choice</span>
<span id="cb1-2"></span>
<span id="cb1-3">heads_im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bear"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"buffalo"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chick"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chicken"</span>,</span>
<span id="cb1-4">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cow"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"crocodile"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dog"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"duck"</span>,</span>
<span id="cb1-5">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"elephant"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"frog"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"giraffe"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"goat"</span>,</span>
<span id="cb1-6">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gorilla"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hippo"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"horse"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"monkey"</span>,</span>
<span id="cb1-7">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"moose"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"narwhal"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"owl"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"panda"</span>,</span>
<span id="cb1-8">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"parrot"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"penguin"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pig"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rabbit"</span>,</span>
<span id="cb1-9">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rhino"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sloth"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"snake"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"walrus"</span>,</span>
<span id="cb1-10">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"whale"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"zebra"</span>]</span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Head:</span>
<span id="cb1-13">  </span>
<span id="cb1-14">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-15">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb1-16">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb1-17">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d),</span>
<span id="cb1-18">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d))</span>
<span id="cb1-19">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb1-20">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PVector2(x, y)</span>
<span id="cb1-21">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PVector2(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-22">    dx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb1-23">    dy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-24">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PVector2(dx, dy)</span>
<span id="cb1-25">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gravity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span></span>
<span id="cb1-26">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> choice(heads_im)</span>
<span id="cb1-27">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.stroke <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(0, 0, 0)"</span></span>
<span id="cb1-28">    </span>
<span id="cb1-29">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-30">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gravity</span>
<span id="cb1-31">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.add(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel)</span>
<span id="cb1-32">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check border</span></span>
<span id="cb1-33">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>screen.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d:</span>
<span id="cb1-34">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>screen.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d</span>
<span id="cb1-35">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-36">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d:</span>
<span id="cb1-37">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d</span>
<span id="cb1-38">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-39">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d:</span>
<span id="cb1-40">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d</span>
<span id="cb1-41">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-42">    </span>
<span id="cb1-43">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-44">    screen.drawSprite(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h)</span>
<span id="cb1-45">    screen.drawRound(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.stroke)</span></code></pre></div>
<p>Hier wurden lediglich die Kreis der Vorgängerversion durch zufällig ausgewählte Sprites aus dem Kenney-Pack ersetzt. Und auch das Hauptprogramm unterscheidet sich ebenfalls nur dadurch, daß die Kreise durch Köpfe ausgetauscht wurden:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> randint, choice</span>
<span id="cb2-2"></span>
<span id="cb2-3">heads <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-4">NUM_HEADS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span></span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> init():</span>
<span id="cb2-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(NUM_HEADS):</span>
<span id="cb2-8">    heads.append(Head())</span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update():</span>
<span id="cb2-11">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> head <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> heads:</span>
<span id="cb2-12">    head.update()</span>
<span id="cb2-13">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(heads)):</span>
<span id="cb2-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(heads)):</span>
<span id="cb2-15">      impact_vector <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> heads[j].loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> heads[i].loc</span>
<span id="cb2-16">      d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> impact_vector.mag()</span>
<span id="cb2-17">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> is_circle_collision(heads[i], heads[j]):</span>
<span id="cb2-18">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make sure that the balls don't overlap</span></span>
<span id="cb2-19">        overlap <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (heads[i].d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> heads[j].d))</span>
<span id="cb2-20">        diff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> impact_vector</span>
<span id="cb2-21">        diff.limit(overlap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb2-22">        heads[i].loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> diff </span>
<span id="cb2-23">        heads[j].loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> diff </span>
<span id="cb2-24">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Swap the velocity of the colliding balls</span></span>
<span id="cb2-25">        heads[i].vel.x, heads[j].vel.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> heads[j].vel.x, heads[i].vel.x</span>
<span id="cb2-26">        heads[i].vel.y, heads[j].vel.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> heads[j].vel.y, heads[i].vel.y</span>
<span id="cb2-27">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> check_input(keyboard.press, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SPACE"</span>):</span>
<span id="cb2-28">    heads.clear()</span>
<span id="cb2-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print("RESTART")</span></span>
<span id="cb2-30">    init()</span>
<span id="cb2-31"></span>
<span id="cb2-32"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw():</span>
<span id="cb2-33">  screen.clear(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(234, 218, 184)"</span>)</span>
<span id="cb2-34">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> head <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> heads:</span>
<span id="cb2-35">    head.draw()</span></code></pre></div>
<p>Dazu muß natürlich auch noch meine <a href="https://github.com/kantel/learningarcade/blob/master/noc/pvector.py">PVector2</a>-Bibliothek eingebunden werden (dich hier hier – um Platz zu sparen – nicht noch einmal abdrucke) und der Reiter <code>util</code> mit den zwei Hilfsfunktionen <code>check_input(obj, val)</code> und <code>is_circle_collision(obj1, obj2)</code>:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> check_input(obj, val):</span>
<span id="cb3-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">hasattr</span>(obj, val):</span>
<span id="cb3-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> obj[val] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> is_circle_collision(obj1, obj2):</span>
<span id="cb3-7">  distance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> math.dist([obj1.loc.x, obj1.loc.y], [obj2.loc.x, obj2.loc.y])</span>
<span id="cb3-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> distance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> obj1.d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> obj2.d:</span>
<span id="cb3-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb3-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span></code></pre></div>
<p>Das <a href="https://microstudio.io/i/kantel/bouncingheads/">komplette Skript inklusive aller verwendeten Sprites</a> auf meinem microStudio-Account finden. Meine kleine »microStudio mit Python/Brython«-Reihe ist damit auf 15&nbsp;Beiträge angewachsen:</p>
<ul>
<li>MicroStudio und Python (Teil 1): <a href="https://kantel.github.io/posts/2024032201_microstudio_python_1/">Hallo Brython</a>!</li>
<li>MicroStudio und Python (Teil 2): <a href="https://kantel.github.io/posts/2024032401_microstudio_python_2/">Zombie Apokalypse</a></li>
<li>MicroStudio und Python (Teil 3): <a href="https://kantel.github.io/posts/2024032502_microstudio_python_3/">Dancing Crab</a></li>
<li>MicroStudio und Python (Teil 4): <a href="https://kantel.github.io/posts/2024032703_flying_badger_python/">Flying Badger</a></li>
<li>MicroStudio und Python (Teil 5): <a href="https://kantel.github.io/posts/2024032801_microstudio_noc_1/">PVector2 und »The Nature of Code«</a></li>
<li>MicroStudio und Python (Teil 6): <a href="https://kantel.github.io/posts/2024033102_bouncing_balls_microstudio/">Bouncing Balls</a></li>
<li>MicroStudio und Python (Teil 7): <a href="https://kantel.github.io/posts/2024040201_collision_detection_1/">Kollisionserkennung mit Kreisen</a></li>
<li>MicroStudio und Python (Teil 8): <a href="https://kantel.github.io/posts/2024040401_bouncing_birds/">Bouncing Birds</a></li>
<li>MicroStudio und Python (Teil 9): <a href="https://kantel.github.io/posts/2024040701_rect_collision/">Kollisionserkennung mit Rechtecken</a></li>
<li>MicroStudio und Python (Teil 10): <a href="https://kantel.github.io/posts/2024042301_bubbling_emojis/">Bubbly Emojis</a></li>
<li>MicroStudio und Python (Teil 11): <a href="https://kantel.github.io/posts/2024042702_microstudio_partikel/">Ein Partikelsystem</a></li>
<li>MicroStudio und Python (Teil 12): <a href="https://kantel.github.io/posts/2024042801_microstudio_particle2/">Ein Partikelsystem (2)</a></li>
<li>MicroStudio und Python (Teil 13): <a href="https://kantel.github.io/posts/2025031601_microstudio_nature_of_code/">Bouncing Duck</a> (mit Vektoren)</li>
<li>MicroStudio und Python (Teil 14): <a href="https://kantel.github.io/posts/2025031901_microstudio_bouncing_balls/">Bouncing Balls</a> (ohne Überlappungen)</li>
<li>MicroStudio und Python (Teil 15): Bouncing Heads</li>
</ul>
<p>Und ich habe immer noch neue Ideen, was ich mit microStudio alles so anstellen könnte. <em>Still digging!</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54401021036/">Juggling Python</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>Colored DC Comic Style. A python with horn-rimmed glasses juggles a few balls with painted animal heads in a circus tent in front of an animal audience</em>«. Modell: Flux (Pro), Style: None.</p>



 ]]></description>
  <category>microStudio</category>
  <category>Python</category>
  <category>Brython</category>
  <category>Nature of Code</category>
  <category>Creative Coding</category>
  <guid>https://kantel.github.io/posts/2025032101_microstudio_bouncing_heads/</guid>
  <pubDate>Fri, 21 Mar 2025 17:20:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025032101_microstudio_bouncing_heads/images/jugglingpython.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Google korrigiert wieder kritische Sicherheitslücken in Chrome</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025032001_chrome_update/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54370060323/"><img src="https://kantel.github.io/posts/2025032001_chrome_update/images/octopussy-b.jpg" class="img-fluid"></a></p>
<p>Das Mittwochs-Update kommt gewiss, auch wenn es erst am Donnerstag ist: Unser aller Datenkrake veröffentlichte eine Aktualisierung ihres Flaggschiffs Chrome in der Version 134 (134.0.6998.117/118) und schloss damit <a href="https://chromereleases.googleblog.com/2025/03/stable-channel-update-for-desktop_19.html">kritische Sicherheitslücken</a>.</p>
<p>Chrome aktualisiert sich (außer bei Linux) über die integrierte Update-Funktion, kann aber – wenn es pressiert – auch <a href="https://www.google.com/intl/de/chrome/browser/">hier geladen</a> werden. <em>(Mein <a href="https://wwwuser.gwdguser.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54370060323/">Octopussy</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>Colored french comic style, a sexy female robot evades from a gigantic data octopus</em>«. Modell: Flux (Pro), Style: None.</p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2025032001_chrome_update/</guid>
  <pubDate>Thu, 20 Mar 2025 15:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025032001_chrome_update/images/octopussy.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>MicroStudio und Python: Bouncing Balls (ohne Überlappungen)</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025031901_microstudio_bouncing_balls/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54397295180/"><img src="https://kantel.github.io/posts/2025031901_microstudio_bouncing_balls/images/bouncingballs-b.jpg" class="img-fluid"></a></p>
<p>Mein Abenteuer <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/microstudio.html">»microStudio</a> mit Python/<a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/brython.html">Brython</a>« geht weiter. Heute habe ich mich einem Problem gewidmet, das mich spätestens seit dem Beitrag »<a href="https://kantel.github.io/posts/2024040401_bouncing_birds/">Bouncing Birds</a>« verfolgt hat: Wenn ich eine Kollisionserkennung implementiert hatte, kam es in einigen Fällen vor, daß sich die Kreise überlappten und nur schwer wieder zu trennen waren. Das lag daran, daß – bedingt durch die Euler-Integration und die Framerate von 60&nbsp;FPS – bei einer Kollision sich die Kreise so weit überschnitten, daß sie auch beim nächsten (oder über- (über-)) nächsten Schritt immer noch kollidierten.</p>
<p>Die Lösung ist aus der Spieleprogrammierung eigentlich bekannt: Bei einer Kollision setzt man die Akteure (die Kreise oder auch die Sprites) soweit auf die Position zurück, daß sie sich zwar gerade noch berühren, aber nicht mehr überlappen. <em>Daniel Shiffman</em> hat das in seiner 184.&nbsp;Coding Challenge »<a href="https://www.youtube.com/watch?v=dJNFPv9Mj-Y">Collisions Without a Physics Library!</a>« wunderbar erklärt. In microStudio/Brython sieht dann die Lösung so aus:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check for collision between balls</span></span>
<span id="cb1-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(balls)):</span>
<span id="cb1-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(balls)):</span>
<span id="cb1-4">      impact_vector <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> balls[j].loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> balls[i].loc</span>
<span id="cb1-5">      d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> impact_vector.mag()</span>
<span id="cb1-6">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> is_circle_collision(balls[i], balls[j]):</span>
<span id="cb1-7">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make sure that the balls don't overlap</span></span>
<span id="cb1-8">        overlap <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (balls[i].d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> balls[j].d))</span>
<span id="cb1-9">        diff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> impact_vector</span>
<span id="cb1-10">        diff.limit(overlap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb1-11">        balls[i].loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> diff </span>
<span id="cb1-12">        balls[j].loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> diff </span>
<span id="cb1-13">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Swap the velocity of the colliding balls</span></span>
<span id="cb1-14">        balls[i].vel.x, balls[j].vel.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> balls[j].vel.x, balls[i].vel.x</span>
<span id="cb1-15">        balls[i].vel.y, balls[j].vel.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> balls[j].vel.y, balls[i].vel.y</span></code></pre></div>
<p>Wenn sich zwei Kreise überlappen, berechnet man zuerst den Abstand <code>d</code> und zieht davon die beiden Radii ab. Dann addiert man jeweils die Hälfte dieser Differenz <code>diff</code> auf die Position des einen Vektors und zieht beim zweiten Vektor die zweite Hälfte der Differenz ab. Dadurch werden beide Kreise auf eine Position gesetzt, die sich zwar gerade noch schneiden, aber nicht mehr überlappen. Als Kollisionsergebnis habe ich eine Reaktion gewählt, die von diesem Video »<a href="https://www.youtube.com/watch?v=Pl_w9qSgMGY">Python Bouncing Ball Simulator 5</a>« von <em>Christian Thompson</em> (aka <em>TokyoEdtech</em> – Ihr wisst schon, der Mann, der Unglaubliches mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/turtlepython.html">Pythons Turtle</a> anstellt) inspiriert wurde: Bei einer Kollision wird einfach die Velocity der beiden beteiligten Kreise getauscht. Das ist zwar nicht wirklich eine exakte (ideale) elastische Kollision, kommt Ihr aber relativ nahe<sup>1</sup>.</p>
<p>Das Ergebnis sieht dann so aus:</p>
<iframe src="bouncingballsimulator/index.html" class="if16_9" name="Bouncing Ball Simulator">
</iframe>
<p>Für die Kollisionserkennung habe ich die Funktion <code>is_circle_collision()</code> wiederverwendet, die ich hier schon einmal <a href="https://kantel.github.io/posts/2024040201_collision_detection_1/">eingeführt hatte</a> und im Reiter <code>util</code> untergebracht:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> is_circle_collision(obj1, obj2):</span>
<span id="cb2-2">  distance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> math.dist([obj1.loc.x, obj1.loc.y], [obj2.loc.x, obj2.loc.y])</span>
<span id="cb2-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> distance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> obj1.d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> obj2.d:</span>
<span id="cb2-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb2-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span></code></pre></div>
<p>Wenn man mal von der Kollisionsbehandlung absieht, wird die meiste Arbeit in der Klasse <code>Ball</code> erledigt, die so aussieht:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> randint, choice</span>
<span id="cb3-2"></span>
<span id="cb3-3">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgba(230, 96, 55, 200)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgba(17, 42, 106, 200)"</span>,</span>
<span id="cb3-4">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgba(183, 116, 64, 200)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgba(212, 251, 69, 200)"</span>,</span>
<span id="cb3-5">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgba(252, 75, 200, 200)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgba(159, 53, 233, 200)"</span>,</span>
<span id="cb3-6">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgba(57, 218, 56, 200)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgba(67, 253, 133, 200)"</span>,</span>
<span id="cb3-7">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgba(78, 148, 42, 200)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgba(67, 254, 211, 200)"</span>,</span>
<span id="cb3-8">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgba(74, 143, 186, 200)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgba(52, 99, 234, 200)"</span>]</span>
<span id="cb3-9">          </span>
<span id="cb3-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Ball:</span>
<span id="cb3-11">  </span>
<span id="cb3-12">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-13">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># randint(4, 10)</span></span>
<span id="cb3-14">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb3-15">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d),</span>
<span id="cb3-16">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d))</span>
<span id="cb3-17">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb3-18">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PVector2(x, y)</span>
<span id="cb3-19">    dx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb3-20">    dy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-21">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PVector2(dx, dy)</span>
<span id="cb3-22">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gravity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span></span>
<span id="cb3-23">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> choice(colors)</span>
<span id="cb3-24">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.stroke <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(0, 0, 0)"</span></span>
<span id="cb3-25"></span>
<span id="cb3-26">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-27">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gravity</span>
<span id="cb3-28">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.add(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel)</span>
<span id="cb3-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check border</span></span>
<span id="cb3-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>screen.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d:</span>
<span id="cb3-31">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>screen.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d</span>
<span id="cb3-32">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-33">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d:</span>
<span id="cb3-34">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d</span>
<span id="cb3-35">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-36">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d:</span>
<span id="cb3-37">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d</span>
<span id="cb3-38">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-39">      </span>
<span id="cb3-40">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-41">    screen.fillRound(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c)</span>
<span id="cb3-42">    screen.drawRound(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.stroke)</span></code></pre></div>
<p>Die Bewegung der Kreise wird vertikal (in y-Richtung) von einer Gravitationskraft <code>gravity</code> beeinflusst, die von der Velocity abgezogen wird. Kollidiert der Kreis mit dem unteren Fensterrand, wird das Vorzeichen umgekehrt, der Kreis steigt wieder nach oben, bis wieder soviel zum negativen Wert hinzuaddiert ist, daß die Velocity wieder positiv wird und sie wieder nach unten fällt. Die horizontale Richtung (x-Achse) wird von einer Konstanten gesteuert, die per Zufallszahlengenerator zwischen <code>-3</code> und <code>3</code> erzeugt wird. Ihr seid eingeladen, mit diesen Werten zu spielen.</p>
<p>Aber auch bei der Behandlung der Ränder (Boden, Seitenwände) bin ich dieses Mal genauer. Wenn der Wert kleiner oder gleich der Position des Bodens oder der Seitenwände ist, wird er exakt auf die Position des Bodens oder der Seitenwände gesetzt<sup>2</sup>.</p>
<p>Die Hauptroutine ist – bis auf die Zeilen zur Kollisionserkennung, die ich aber auch in die Klasse <code>Ball</code> hätte auslagern können – wieder recht kompakt geraten:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb4-2">NUM_BALLS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span></span>
<span id="cb4-3">balls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> init():</span>
<span id="cb4-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(NUM_BALLS):</span>
<span id="cb4-7">    balls.append(Ball())</span>
<span id="cb4-8"></span>
<span id="cb4-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update():</span>
<span id="cb4-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ball <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> balls:</span>
<span id="cb4-11">    ball.update()</span>
<span id="cb4-12">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check for collision between balls</span></span>
<span id="cb4-13">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(balls)):</span>
<span id="cb4-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(balls)):</span>
<span id="cb4-15">      impact_vector <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> balls[j].loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> balls[i].loc</span>
<span id="cb4-16">      d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> impact_vector.mag()</span>
<span id="cb4-17">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> is_circle_collision(balls[i], balls[j]):</span>
<span id="cb4-18">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make sure that the balls don't overlap</span></span>
<span id="cb4-19">        overlap <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (balls[i].d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> balls[j].d))</span>
<span id="cb4-20">        diff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> impact_vector</span>
<span id="cb4-21">        diff.limit(overlap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb4-22">        balls[i].loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> diff </span>
<span id="cb4-23">        balls[j].loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> diff </span>
<span id="cb4-24">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Swap the velocity of the colliding balls</span></span>
<span id="cb4-25">        balls[i].vel.x, balls[j].vel.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> balls[j].vel.x, balls[i].vel.x</span>
<span id="cb4-26">        balls[i].vel.y, balls[j].vel.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> balls[j].vel.y, balls[i].vel.y</span>
<span id="cb4-27">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> check_input(keyboard.press, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SPACE"</span>):</span>
<span id="cb4-28">    balls.clear()</span>
<span id="cb4-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print("RESTART")</span></span>
<span id="cb4-30">    init()</span>
<span id="cb4-31"></span>
<span id="cb4-32"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw():</span>
<span id="cb4-33">  screen.clear(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(234, 218, 184)"</span>)</span>
<span id="cb4-34">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ball <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> balls:</span>
<span id="cb4-35">    ball.draw()</span></code></pre></div>
<p>Ihr habt hoffentlich bemerkt, daß durch die Einführung der Liste <code>balls[]</code> und der Klasse <code>Ball</code> die von mir nicht geliebte Deklaration von <code>ball</code> als <code>global</code> weggefallen ist.</p>
<p>Wie immer habe ich auch dieses Skript auf meinen microStudio-Account <a href="https://microstudio.io/i/kantel/bouncingballsimulator/">hochgeladen</a>. Macht damit, was Ihr wollt.</p>
<section id="literatur" class="level3">
<h3 class="anchored" data-anchor-id="literatur">Literatur</h3>
<p>Bei der Programmierung und zur Vertiefung des Beitrags haben mir folgende Texte und Videos geholfen:</p>
<ol type="1">
<li>Daniel Shiffman: <em><a href="https://www.youtube.com/watch?v=dJNFPv9Mj-Y">Collisions Without a Physics Library!</a></em> (Coding Challenge 184) vom 13.&nbsp;Juli&nbsp;2024</li>
<li>Christan Thompson (aka <em>TokyoEdtech</em>): <em><a href="https://www.youtube.com/playlist?list=PLlEgNdBJEO-mRsbxRND_Cu805SCrXoOZB">Bouncing Ball Simulator</a></em>, Playlist mit fünf Videos, zuletzt aktualisiert am 3.&nbsp;November&nbsp;2020</li>
<li>Reducible: <em><a href="https://www.youtube.com/watch?v=eED4bSkYCB8">Building Collision Simulations: An Introduction to Computer Graphics</a></em>, Video-Tutorial vom 19.&nbsp;Januar&nbsp;2021</li>
<li>Wikipedia-Artikel: <em><a href="https://de.wikipedia.org/wiki/Sto%C3%9F_(Physik)">Stoß (Physik)</a></em>, zuletzt besucht am 19.&nbsp;März&nbsp;2025</li>
<li>Chad Berchek: <em><a href="https://www.vobarian.com/collisions/2dcollisions2.pdf">2-Dimensional Elastic Collisions without Trigonometry</a></em> (PDF), 3.&nbsp;August&nbsp;2009</li>
</ol>
</section>
<section id="alle-bisherigen-beiträge-zu-microstudio-und-pythonbrython-im-schockwellenreiter" class="level3">
<h3 class="anchored" data-anchor-id="alle-bisherigen-beiträge-zu-microstudio-und-pythonbrython-im-schockwellenreiter">Alle bisherigen Beiträge zu Microstudio und Python/Brython im <em>Schockwellenreiter</em></h3>
<ul>
<li>MicroStudio und Python (Teil 1): <a href="https://kantel.github.io/posts/2024032201_microstudio_python_1/">Hallo Brython</a>!</li>
<li>MicroStudio und Python (Teil 2): <a href="https://kantel.github.io/posts/2024032401_microstudio_python_2/">Zombie Apokalypse</a></li>
<li>MicroStudio und Python (Teil 3): <a href="https://kantel.github.io/posts/2024032502_microstudio_python_3/">Dancing Crab</a></li>
<li>MicroStudio und Python (Teil 4): <a href="https://kantel.github.io/posts/2024032703_flying_badger_python/">Flying Badger</a></li>
<li>MicroStudio und Python (Teil 5): <a href="https://kantel.github.io/posts/2024032801_microstudio_noc_1/">PVector2 und »The Nature of Code«</a></li>
<li>MicroStudio und Python (Teil 6): <a href="https://kantel.github.io/posts/2024033102_bouncing_balls_microstudio/">Bouncing Balls</a></li>
<li>MicroStudio und Python (Teil 7): <a href="https://kantel.github.io/posts/2024040201_collision_detection_1/">Kollisionserkennung mit Kreisen</a></li>
<li>MicroStudio und Python (Teil 8): <a href="https://kantel.github.io/posts/2024040401_bouncing_birds/">Bouncing Birds</a></li>
<li>MicroStudio und Python (Teil 9): <a href="https://kantel.github.io/posts/2024040701_rect_collision/">Kollisionserkennung mit Rechtecken</a></li>
<li>MicroStudio und Python (Teil 10): <a href="https://kantel.github.io/posts/2024042301_bubbling_emojis/">Bubbly Emojis</a></li>
<li>MicroStudio und Python (Teil 11): <a href="https://kantel.github.io/posts/2024042702_microstudio_partikel/">Ein Partikelsystem</a></li>
<li>MicroStudio und Python (Teil 12): <a href="https://kantel.github.io/posts/2024042801_microstudio_particle2/">Ein Partikelsystem (2)</a></li>
<li>MicroStudio und Python (Teil 13): <a href="https://kantel.github.io/posts/2025031601_microstudio_nature_of_code/">Bouncing Duck</a> (mit Vektoren)</li>
<li>MicroStudio und Python (Teil 14): Bouncing Balls (ohne Überlappungen)</li>
</ul>
<p>Mit der (Wieder-) Entdeckung von microStudio mit Python/Brython hatte ich bisher viel Spaß. Schauen wir mal, was die Zukunft mir noch bringen wird. <em>Still digging!</em></p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Fußnoten</h2>

<ol>
<li id="fn1"><p>Wer eine genauere Simulation einer elastischen Kollision (eines (in diesem Falle zweidimensionalen) elastischen Stoß) implementieren will, kann sich ja an <em>Shiffmans</em> Implementierung orientieren. Oder sie oder er greifen gleich zu einer Physik Engine (microStudio will ja auch in Brython mit <a href="https://brm.io/matter-js/">Matter.js</a> zusammenspielen).↩︎</p></li>
<li id="fn2"><p>Dadurch werden auch hier mögliche Glitches beseitigt, die von der Euler-Integration und der Framerate von (maximal) 60&nbsp;FPS hervorgerufen werden könnten.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>microStudio</category>
  <category>Python</category>
  <category>Brython</category>
  <category>Nature of Code</category>
  <category>Creative Coding</category>
  <guid>https://kantel.github.io/posts/2025031901_microstudio_bouncing_balls/</guid>
  <pubDate>Wed, 19 Mar 2025 15:35:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025031901_microstudio_bouncing_balls/images/bouncingballs.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>MicroStudio und Python: Bouncing Duck (mit Vektoren)</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025031601_microstudio_nature_of_code/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54390641943/"><img src="https://kantel.github.io/posts/2025031601_microstudio_nature_of_code/images/bouncingduck-b.jpg" class="img-fluid"></a></p>
<p>Die bedauerliche Tatsache, daß es Apple auch mit dem <a href="https://kantel.github.io/posts/2025031201_apple_updates/">letzten Update von Sequoia</a> immer noch nicht gelungen ist, den <a href="https://kantel.github.io/posts/2025022501_noc_python/">ärgerlichen Fehler</a> zu beheben, der mich daran hindert, meine <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a>-Skripte mit Hilfe von <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygbag.html">Pygbag</a> webtauglich zu machen, hat mich bei <a href="https://kantel.github.io/posts/2025021701_vectory_pygame/">meinem Vorhaben</a> ziemlich ausgebremst, wenigstens die ersten Kapitel aus <em>Daniel Shiffmans</em> neuer, verbesserter und erweiterter Auflage von »<a href="https://natureofcode.com/">The Nature of Code</a>« von <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/p5js.html">P5.js</a> nach <a href="https://pyga.me/">Pygame CE</a> zu portieren. Denn das, was <em>Daniel Shiffman</em> in der Online-Version seines Buches mit den Skripten angestellt hat, möchte ich auch mit Python anstellen können: Skripte präsentieren, die im Browser laufen – denn statische Screenshots sind langweilig.</p>
<p>Daher hatte ich die letzten Tage mit der Suche nach Alternativen verplempert. Als erstes fiel mir <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/trinket.html">Trinket</a> ein. Denn dies besitzt neben der Turtle-Bibliothek auch eine Art <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processingpy.html">Processing.py</a>-Mode. Allerdings ist die <a href="https://kantel.github.io/posts/2023042502_malewitsch_trinket/">Impementierung ziemlich picky</a> und ich konnte einfach nicht herausbekommen, welcher Transpiler (Python nach JavaScript) hinter den Kulissen werkelt.</p>
<p>Dann fiel mir ein, daß ich vor fast genau einem Jahr schon einmal ein <a href="https://kantel.github.io/posts/2024032801_microstudio_noc_1/">ähnliches Projekt</a> mit <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/microstudio.html">microStudio</a> in Angriff genommen hatte, das ich aber damals wegen <a href="https://kantel.github.io/posts/2024041901_rip_gabi/">Gabis Tod</a> aus den Augen verloren hatte. Die Python-Implementierung in microStudio beruht auf <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/brython.html">Brython</a>, das ist zumindest <a href="https://brython.info/static_doc/3.13/en/intro.html">gut dokumentiert</a>, wird aktuell noch weitergepflegt (das <a href="https://github.com/brython-dev/brython/releases">letzte Release</a> ist vom Januar dieses Jahres) und steht mit <a href="https://github.com/brython-dev/brython/graphs/contributors">über 100 Kontributoren</a> auf einer breiten Basis. Ein wichtiger Wermutstropfen ist allerdings, daß mit Brython kein Zugriff auf Pythons <em>Scientific Stack</em> (das betrifft in diesem Zusammenhang vor allen Dingen <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/numpy.html">NumPy</a> und <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/scipy.html">SciPy</a>) möglich ist. Auf der positiven Seite steht dagegen, daß auch Brython in microStudio Zugriff auf die Physik Engine <a href="https://brm.io/matter-js/">Matter.js</a> besitzt, auf die auch <em>Shiffman</em> im sechsten Kapitel von »The Nature of Code« zugreift.</p>
<p>Auch wenn ich mir immer noch nicht sicher bin, ob ich dies bereuen werde, habe ich meine <a href="https://kantel.github.io/posts/2025021701_vectory_pygame/">bisherigen</a> <a href="https://kantel.github.io/posts/2025021802_vectory_pygame_2/">Pygame</a>-<a href="https://kantel.github.io/posts/2025022501_noc_python/">Versuche</a> testweise nach micoStudio/Brython portiert. Als Vektoren-Bibliothek habe ich dafür wieder meine eigene <a href="https://github.com/kantel/learningarcade/blob/master/noc/pvector.py">PVector.py</a>-Klasse verwendet (hier geringfügig modifiziert als <code>pvector2.py</code>). Doch zuerst einmal die Version »<a href="https://microstudio.dev/i/kantel/bouncingballwithnovectors/">Bouncing Ball ohne Vektoren</a>«.</p>
<p>Alle microStudio/Brython-Skripte benötigen – um eventuelle Glitches bei der Tastatur- oder Mausabfrage auszuschließen – eine Funktion <code>check_input(obj, val)</code> die ich im Reiter <code>util</code> abgelegt habe:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> check_input(obj, val):</span>
<span id="cb1-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">hasattr</span>(obj, val):</span>
<span id="cb1-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> obj[val] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span></code></pre></div>
<p>Dann folgt die Klasse des Actors, die ich in Anlehnung an <em>Shiffman</em> <code>Mover</code> genannt und im Reiter <code>mover</code> untergebracht habe:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> randint</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Mover:</span>
<span id="cb2-4">  </span>
<span id="cb2-5">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-6">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb2-7">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-8">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>)</span>
<span id="cb2-9">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb2-10">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_speed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span></span>
<span id="cb2-11">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y_speed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-12">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgba(17, 42, 106, 200)"</span></span>
<span id="cb2-13">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.stroke <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(0, 0, 0)"</span></span>
<span id="cb2-14">    </span>
<span id="cb2-15">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-16">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_speed</span>
<span id="cb2-17">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y_speed</span>
<span id="cb2-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check borders</span></span>
<span id="cb2-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d:</span>
<span id="cb2-20">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_speed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>screen.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> screen.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d:</span>
<span id="cb2-22">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y_speed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-23">      </span>
<span id="cb2-24">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-25">    screen.fillRound(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c)</span>
<span id="cb2-26">    screen.setLineWidth(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb2-27">    screen.drawRound(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.stroke)</span>
<span id="cb2-28">    screen.setLineWidth(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<p>Da in dieser Klasse eigentlich alles abgehandelt wird, ist das Hauptprogramm <code>main</code> erfrischend kurz geraten:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bouncing Ball with No Vectors</span></span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> init():</span>
<span id="cb3-4">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">global</span> mover</span>
<span id="cb3-5">  mover <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Mover()</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update():</span>
<span id="cb3-8">  mover.update()</span>
<span id="cb3-9">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Restart</span></span>
<span id="cb3-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> check_input(keyboard.press, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SPACE"</span>):</span>
<span id="cb3-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RESTART"</span>)</span>
<span id="cb3-12">    init()</span>
<span id="cb3-13"></span>
<span id="cb3-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw():</span>
<span id="cb3-15">  screen.clear(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(234, 218, 184)"</span>)</span>
<span id="cb3-16">  mover.draw()</span></code></pre></div>
<p>Die Version »<a href="https://microstudio.dev/i/kantel/bouncingballwithvectors/">Bouncing Ball mit Vektoren</a>« benötigt natürlich meine PVector2-Implementierung, die ich hier der Vollständigkeit halber noch einmal abdrucke:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> PVector2():</span>
<span id="cb4-5">    </span>
<span id="cb4-6">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x, y):</span>
<span id="cb4-7">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x</span>
<span id="cb4-8">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y</span>
<span id="cb4-9"></span>
<span id="cb4-10">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, v):</span>
<span id="cb4-11">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> v.x</span>
<span id="cb4-12">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> v.y</span>
<span id="cb4-13">    </span>
<span id="cb4-14">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-15">    v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PVector2(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y)</span>
<span id="cb4-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> v</span>
<span id="cb4-17"></span>
<span id="cb4-18">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> add(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, v):</span>
<span id="cb4-19">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> v.x</span>
<span id="cb4-20">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> v.y</span>
<span id="cb4-21">        </span>
<span id="cb4-22">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> sub(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, v):</span>
<span id="cb4-23">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> v.x</span>
<span id="cb4-24">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> v.y</span>
<span id="cb4-25">    </span>
<span id="cb4-26">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Multiplikation mit einem Skalar</span></span>
<span id="cb4-27">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> mult(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, n):</span>
<span id="cb4-28">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> n</span>
<span id="cb4-29">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> n</span>
<span id="cb4-30">    </span>
<span id="cb4-31">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Division durch einen Skalar</span></span>
<span id="cb4-32">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> div(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, n):</span>
<span id="cb4-33">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/=</span> n</span>
<span id="cb4-34">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/=</span> n</span>
<span id="cb4-35"></span>
<span id="cb4-36">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Elementweise Multiplikation eines Vektor mit einem anderen Vektor</span></span>
<span id="cb4-37">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> mult2(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, v):</span>
<span id="cb4-38">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> v.x</span>
<span id="cb4-39">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> v.y</span>
<span id="cb4-40"></span>
<span id="cb4-41">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Elementweise Division eines Vektor mit einem anderen Vektor</span></span>
<span id="cb4-42">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> div2(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, v):</span>
<span id="cb4-43">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/=</span> v.x</span>
<span id="cb4-44">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/=</span> v.y</span>
<span id="cb4-45"></span>
<span id="cb4-46">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Magnitude</span></span>
<span id="cb4-47">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> mag(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-48">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> math.sqrt(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y)</span>
<span id="cb4-49">    </span>
<span id="cb4-50">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Normalisierung</span></span>
<span id="cb4-51">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> normalize(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-52">    m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mag()</span>
<span id="cb4-53">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb4-54">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.div(m)</span>
<span id="cb4-55"></span>
<span id="cb4-56"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Berechnung der euklidischen Distanz zwischen zwei Vektoren</span></span>
<span id="cb4-57">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> dist(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, v):</span>
<span id="cb4-58">    dx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> v.x</span>
<span id="cb4-59">    dy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> v.y</span>
<span id="cb4-60">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> math.sqrt(dx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>dx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>dy)</span>
<span id="cb4-61">    </span>
<span id="cb4-62">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Berechnung des Skalarprodukts (inneren Produkts) eines Vektors</span></span>
<span id="cb4-63">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> dot(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, v):</span>
<span id="cb4-64">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>v.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>v.y</span>
<span id="cb4-65">    </span>
<span id="cb4-66">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Begrenzt die Magnitude eines Vektors auf max</span></span>
<span id="cb4-67">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> limit(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>):</span>
<span id="cb4-68">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mag() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>:</span>
<span id="cb4-69">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.normalize()</span>
<span id="cb4-70">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mult(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>)</span>
<span id="cb4-71">    </span>
<span id="cb4-72">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Berechnet den Winkel der Rotation eines Vektors</span></span>
<span id="cb4-73">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> heading(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-74">    angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> math.atan2(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x)</span>
<span id="cb4-75">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>angle</span>
<span id="cb4-76"></span>
<span id="cb4-77">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__add__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, other):</span>
<span id="cb4-78">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> other.x</span>
<span id="cb4-79">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> other.y</span>
<span id="cb4-80">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PVector2(x, y)</span>
<span id="cb4-81">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> result</span>
<span id="cb4-82">    </span>
<span id="cb4-83">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__sub__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, other):</span>
<span id="cb4-84">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> other.x</span>
<span id="cb4-85">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> other.y</span>
<span id="cb4-86">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PVector2(x, y)</span>
<span id="cb4-87">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> result</span>
<span id="cb4-88">    </span>
<span id="cb4-89">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__str__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-90">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"["</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"]"</span></span>
<span id="cb4-91">        </span>
<span id="cb4-92">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@classmethod</span></span>
<span id="cb4-93">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> random2D(cls):</span>
<span id="cb4-94">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.uniform(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-95">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.uniform(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-96">    v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cls(x, y)</span>
<span id="cb4-97">    v.normalize()</span>
<span id="cb4-98">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> v</span>
<span id="cb4-99"></span>
<span id="cb4-100">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Klassenmethoden: Skalare Multiplikation und Division</span></span>
<span id="cb4-101">    </span>
<span id="cb4-102">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Multiplikation mit einem Skalar</span></span>
<span id="cb4-103">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> smult(v, n):</span>
<span id="cb4-104">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> v.x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>n</span>
<span id="cb4-105">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> v.y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>n</span>
<span id="cb4-106">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PVector2(x, y)</span>
<span id="cb4-107">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> result</span>
<span id="cb4-108"></span>
<span id="cb4-109">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Division mit einem Skalar</span></span>
<span id="cb4-110">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> sdiv(v, n):</span>
<span id="cb4-111">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb4-112">      x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> v.x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>n</span>
<span id="cb4-113">      y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> v.y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>n</span>
<span id="cb4-114">      result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PVector2(x, y)</span>
<span id="cb4-115">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> result</span>
<span id="cb4-116">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb4-117">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Error. Divison durch Null!"</span>)</span></code></pre></div>
<p>Ansonsten unterscheidet sich nur die Klasse <code>Mover</code> von der ersten, naiven Implemetierung:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> randint</span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Mover:</span>
<span id="cb5-4">  </span>
<span id="cb5-5">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb5-6">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb5-7">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb5-8">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>)</span>
<span id="cb5-9">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb5-10">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PVector2(x, y)</span>
<span id="cb5-11">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PVector2(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb5-12">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgba(230, 96, 55, 200)"</span></span>
<span id="cb5-13">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.stroke <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(0, 0, 0)"</span></span>
<span id="cb5-14">    </span>
<span id="cb5-15">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb5-16">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.add(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel)</span>
<span id="cb5-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check border</span></span>
<span id="cb5-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d</span>
<span id="cb5-19">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d):</span>
<span id="cb5-20">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb5-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>screen.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span></span>
<span id="cb5-22">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> screen.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d):</span>
<span id="cb5-23">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb5-24">      </span>
<span id="cb5-25">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb5-26">    screen.fillRound(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c)</span>
<span id="cb5-27">    screen.setLineWidth(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb5-28">    screen.drawRound(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.stroke)</span>
<span id="cb5-29">    screen.setLineWidth(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<p>Die beiden anderen Programmteile <code>util</code> und <code>main</code> sind identisch.</p>
<p>Natürlich wollte ich auch in microStudio auf meine Zugabe nicht verzichten. Während in der <a href="https://kantel.github.io/posts/2025021601_arcade_tut_3/">Arcade</a>- und in der <a href="https://kantel.github.io/posts/2025021701_vectory_pygame/">Pygame-Version</a> (<a href="https://kantel.github.io/posts/2025021802_vectory_pygame_2/">Nachschlag</a>) ein Küken über den Bildschirm schwebt und von den Wänden abprallt, habe ich dieses Mal eine Ente dafür auserkoren (das Bild stammt ebenfalls wieder aus der freien (<a href="https://creativecommons.org/publicdomain/zero/1.0/">CC0</a>) <a href="https://kenney.nl/assets/animal-pack-redux">Animal Pack Redux</a> von Kenney). Der <a href="https://microstudio.dev/i/kantel/bouncingduckwithvectors/">Quellcode</a> ist ebenfalls auf meinem microStudio-Account zu finden.</p>
<iframe src="bouncingduckwithvectors/index.html" class="if16_9" name="Bouncing Duck">
</iframe>
<p>Auch in diesem Skript liegen die eigentlichen Unterschiede zu den beiden Skripten oben nur in der Klasse <code>Duck</code>,</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> randint</span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Duck:</span>
<span id="cb6-4">  </span>
<span id="cb6-5">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb6-6">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb6-7">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb6-8">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>)</span>
<span id="cb6-9">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb6-10">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PVector2(x, y)</span>
<span id="cb6-11">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PVector2(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb6-12">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"duck"</span></span>
<span id="cb6-13">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.stroke <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(0, 0, 0)"</span></span>
<span id="cb6-14">    </span>
<span id="cb6-15">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb6-16">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.add(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel)</span>
<span id="cb6-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check border</span></span>
<span id="cb6-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d</span>
<span id="cb6-19">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d):</span>
<span id="cb6-20">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb6-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>screen.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span></span>
<span id="cb6-22">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> screen.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d):</span>
<span id="cb6-23">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb6-24">    </span>
<span id="cb6-25">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb6-26">    screen.drawSprite(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h)</span>
<span id="cb6-27">    screen.drawRound(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.stroke)</span></code></pre></div>
<p>während im Hauptprogramm <code>main</code> der Unterschied nur darin besteht, daß ich die Instanz der Klasse <code>Duck()</code> aus naheliegenden Gründen <code>donald</code> genannt habe:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bouncing Duck</span></span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> init():</span>
<span id="cb7-4">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">global</span> donald</span>
<span id="cb7-5">  donald <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Duck()</span>
<span id="cb7-6"></span>
<span id="cb7-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update():</span>
<span id="cb7-8">  donald.update()</span>
<span id="cb7-9">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Restart</span></span>
<span id="cb7-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> check_input(keyboard.press, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SPACE"</span>):</span>
<span id="cb7-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RESTART"</span>)</span>
<span id="cb7-12">    init()</span>
<span id="cb7-13"></span>
<span id="cb7-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw():</span>
<span id="cb7-15">  screen.clear(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(234, 218, 184)"</span>)</span>
<span id="cb7-16">  donald.draw()</span></code></pre></div>
<p>Nun bin ich hin- und hergerissen. Soll ich mit microStudio weitermachen? Wie schon vor eonem Jahr hatte ich heute viel Spaß damit und Skripte, die im Browser laufen, sind einfach geiler als statische Screenshots. Und die in diese Seiten eingebetteten microStudio-Apps laufen auch noch viel geschmeidiger als die Pygbag-Skripte. Ich werde daher erst einmal weitermachen und hoffe, daß ich mich damit nicht in eine Sackgasse manövriere.</p>
<p>Um den Überblick zu behalten hier – wie schon bei den Beispielen aus dem letzten Jahr – eine Auflistung aller bisher im <em>Schockwellenreiter</em> erschienenen microScript/Brython-Tutorials:</p>
<ul>
<li>MicroStudio und Python (Teil 1): <a href="https://kantel.github.io/posts/2024032201_microstudio_python_1/">Hallo Brython</a>!</li>
<li>MicroStudio und Python (Teil 2): <a href="https://kantel.github.io/posts/2024032401_microstudio_python_2/">Zombie Apokalypse</a></li>
<li>MicroStudio und Python (Teil 3): <a href="https://kantel.github.io/posts/2024032502_microstudio_python_3/">Dancing Crab</a></li>
<li>MicroStudio und Python (Teil 4): <a href="https://kantel.github.io/posts/2024032703_flying_badger_python/">Flying Badger</a></li>
<li>MicroStudio und Python (Teil 5): <a href="https://kantel.github.io/posts/2024032801_microstudio_noc_1/">PVector2 und »The Nature of Code«</a></li>
<li>MicroStudio und Python (Teil 6): <a href="https://kantel.github.io/posts/2024033102_bouncing_balls_microstudio/">Bouncing Balls</a></li>
<li>MicroStudio und Python (Teil 7): <a href="https://kantel.github.io/posts/2024040201_collision_detection_1/">Kollisionserkennung mit Kreisen</a></li>
<li>MicroStudio und Python (Teil 8): <a href="https://kantel.github.io/posts/2024040401_bouncing_birds/">Bouncing Birds</a></li>
<li>MicroStudio und Python (Teil 9): <a href="https://kantel.github.io/posts/2024040701_rect_collision/">Kollisionserkennung mit Rechtecken</a></li>
<li>MicroStudio und Python (Teil 10): <a href="https://kantel.github.io/posts/2024042301_bubbling_emojis/">Bubbly Emojis</a></li>
<li>MicroStudio und Python (Teil 11): <a href="https://kantel.github.io/posts/2024042702_microstudio_partikel/">Ein Partikelsystem</a></li>
<li>MicroStudio und Python (Teil 12): <a href="https://kantel.github.io/posts/2024042801_microstudio_particle2/">Ein Partikelsystem (2)</a></li>
<li>MicroStudio und Python (Teil 13): Bouncing Duck (mit Vektoren)</li>
</ul>
<p>Wenn ich das mal überblicke, ist da eigentlich schon eine ganze Menge zusammengekommen. Daraus muß sich doch etwas machen lassen. <em>Still digging!</em></p>



 ]]></description>
  <category>microStudio</category>
  <category>Python</category>
  <category>Brython</category>
  <category>Nature of Code</category>
  <category>Creative Coding</category>
  <guid>https://kantel.github.io/posts/2025031601_microstudio_nature_of_code/</guid>
  <pubDate>Sun, 16 Mar 2025 16:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025031601_microstudio_nature_of_code/images/bouncingduck.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Happy Pi-Day: Python’s π-zza Party</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025031401_pi-day_python/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54386582845/"><img src="https://kantel.github.io/posts/2025031401_pi-day_python/images/piday-b.jpg" class="img-fluid"></a></p>
<p>Heute ist der 14. März. Wegen der seltsamen Datumsdarstellung der US-Amerikaner, den Monat <strong>vor</strong> den Tag zu stellen, wird er dort auch <strong>3/14</strong> geschrieben. Da dies die ersten 3 Ziffern der Kreiszahl π sind, wird dieser Tag seit 1988 zuerst in den USA und mittlerweile weltweit als <a href="https://de.wikipedia.org/wiki/Pi-Tag">Pi-Tag</a> gefeiert (seit 2009 in den USA sogar offiziell durch Kongress-Beschluß). Besonders pedantische Anhänger feiern um 13:59:26 Uhr und erreichen die Kreiszahl damit bis zur siebten Nachkommastelle (3/14 1:59:26 pm).</p>
<p>Auch an YouTube geht dieser Pi-Tag natürlich nicht spurlos vorbei. Und so möchte ich Euch heute einige Videos vorstellen, die auf ihre Art den Pi-Tag zelebrieren, in vielen Fällen mit kleinen Python-Programmen.</p>
<iframe class="if16_9" src="https://www.youtube.com/embed/vlUTlbZT4ig?si=VLsfOWAiSLbgLjhG" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p><a href="https://www.youtube.com/watch?v=vlUTlbZT4ig">Aber zuerst ein Film</a>, der ganz ohne Python auskommt und aus Handarbeit besteht. Er zeigt, wie man π approximieren kann, in dem man eine kleine und eine große Kiste von einer Wand abprallen und die beiden dann π-x kollidieren lässt. Die Idee beruht auf 3Blue1Browns genialen Video »<a href="https://www.youtube.com/watch?v=6dTyOl1fmDo">There’s more to those colliding blocks that compute pi</a>« und wurde auch von <em>Daniel Shiffman</em> vor sechs Jahren <a href="https://www.youtube.com/watch?v=PoW8g67XNxA">schon einmal aufgegriffen</a> (ich <a href="http://blog.schockwellenreiter.de/2019/03/2019031401.html">berichtete</a>).</p>
<iframe class="if16_9" src="https://www.youtube.com/embed/bqs50GjWkcM?si=DBzQ8tTEHTolP9iW" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p>Jetzt aber endlich Python: <em>Rhett Allain</em> zeigt auf seinem Kanal <em>Dot Physics</em> in dem Video »<a href="https://www.youtube.com/watch?v=bqs50GjWkcM">Pi Day Python: So erstellen Sie diese irrationale Pi-Animation</a>« auf coole Weise (und mit Hilfe von <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/vpython.html">VPython</a>), daß Pi <a href="https://de.wikipedia.org/wiki/Irrationale_Zahl">irrational</a> ist. Als Konsequenz daraus schiebt der gleich noch das Video »<a href="https://www.youtube.com/watch?v=21ybF6nMaVE">Die beste Bruchdarstellung von Pi finden</a>« hinterher.</p>
<iframe class="if16_9" src="https://www.youtube.com/embed/koXuKlPTzng?si=TdL3iK-eGpOzSl7k" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p>Doch auch <em>Margaret Burke</em> enttäuscht uns am Pi-Tag nicht: In ihrem Video »<a href="https://www.youtube.com/watch?v=koXuKlPTzng">Let’s look at some pi approximations with Python and pygame for pi day!</a>« zeigt sie zum einen, wie man Pi mit Hilfe einer Monte-Carlo-Methode annähernd berechnen kann und zum zweiten, wie man Pi mit Hilfe eines eingeschriebenen Vielecks approximiert. <a href="https://de.wikipedia.org/wiki/Archimedischer_Algorithmus">Diese Methode</a> geht schon auf den antiken Mathematiker <em><a href="https://de.wikipedia.org/wiki/Archimedes">Archimedes von Syrakus</a></em> (* um 287 vor unserer Zeitrechnung - †&nbsp;vermutlich 212 vor unserer Zeitrechnung). <em>Margaret Burke</em> verwendet <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a> für Ihre Pi-Programme.</p>
<p><strong>War sonst noch was?</strong> Ach ja, »<a href="https://www.derstandard.de/story/3000000260802/verrueckt-nach-pi-illustriert-die-suche-nach-einer-faszinierenden-zahl">Verrückt nach Pi</a>« ist ein auch für Kinder geeigneter Comic von dem Mathematiker (und Magier) <em>Jean-Baptiste Aubin</em>, der Historikerin <em>Anita Lehmann</em> und dem Zeichner <em>Joonas Sildre</em>, der sich ganz und gar der Kreiszahl widmet. Und da der 14.&nbsp;März auch der Geburtstag <em>Albert Einsteins</em> und der Todestag <em>Stephen Hawkings</em> ist, ist dieser Tag seit 2020 auch der <a href="https://de.wikipedia.org/wiki/Internationaler_Tag_der_Mathematik">Internationale Tag der Mathematik</a>.</p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54386582845/">Python’s π-zza Party</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>Colored DC Comics Style. A python wearing horn-rimmed glasses pushes a large and a small box against a wall. In the background, a poster with a large π</em>«. Modell: Flux (Pro), Style: None.</p>



 ]]></description>
  <category>Mathematik</category>
  <category>Python</category>
  <category>Creative Coding</category>
  <category>VPython</category>
  <category>Pygame</category>
  <guid>https://kantel.github.io/posts/2025031401_pi-day_python/</guid>
  <pubDate>Fri, 14 Mar 2025 15:10:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025031401_pi-day_python/images/piday.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Voilà et Voici – Jupyter Notebooks im Web</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025031301_voila_voici/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54384293866/"><img src="https://kantel.github.io/posts/2025031301_voila_voici/images/voilavoici-b.jpg" class="img-fluid"></a></p>
<p>Nicht nur das Publizieren von mit Python entwickelten Spielen (sei es mit <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a> (-<a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygamezero.html">Zero</a>) oder <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/arcade.html">Arcade</a>), sondern auch das Teilen von Juypter Notebooks im Web ist meistens eine Qual, zumindest wenn der Empfänger kein Python installiert hat und/oder nicht weiß, wie man ein Python-Skript startet. Um dem abzuhelfen, wurde Voilà entwickelt:</p>
<p><strong><a href="https://voila.readthedocs.io/en/stable/">Voilà</a></strong> ist eine (freie) Anwendung (<a href="https://github.com/voila-dashboards/voila">Quellcode</a> auf GitHub), um <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/jupyter.html">Jupyter</a> Notebooks in Standalone-Webapplikationen zu konvertieren. Aus einem Jupyter Notebook lassen sich beispielsweise Slideshows oder interaktive Dashboards erzeugen. Die Voilà-Webapplikationen vereinfachen das Teilen mit nicht-technischen Zielgruppen und verhindern, daß Anwender beliebigen Code ausführen. Voilà ist ein Unterprojekt des Jupyter-Projekts. Die <a href="https://voila-gallery.org/">Voilà Gallery</a> stellt ist eine Sammlung von frei zugänglichen Beispielen zur Verfügung.</p>
<p>Doch das ist nicht alles, wenn Ihr Euer Voilá-Dashboard als statische Webseite veröffentlichen wollt, bietet das <a href="https://jupyterlite.readthedocs.io/">JupyterLite</a>-Projekt auch noch Voici an:</p>
<p><strong><a href="https://voici.readthedocs.io/en/latest/">Voici</a></strong> ist ein Tool zum Generieren statischer Dashboards aus Jupyter Notebooks. Es kann als direkter Ersatz für Voilà verwendet werden, verfügt über dieselben Befehle und unterstützt die meisten Konfigurationsoptionen von Voila.</p>
<p>Im Gegensatz zu Voila, das interaktive Dashboards serverseitig herausschreibt, verwendet Voici einen <a href="https://developer.mozilla.org/en-US/docs/WebAssembly">WebAssembly</a> (WASM)-Kernel, um Notebooks im Browser zu rendern. Dadurch ist das resultierende Dashboard vollständig eigenständig und ohne serverseitige Abängigkeiten verteilbar.</p>
<p>Auch von Voici gibt es eine <a href="https://voila-dashboards.github.io/voici-gallery/">Galerie mit Beispielprojekten</a> und der <a href="https://github.com/voila-dashboards/voici">Quellcode</a> ist ebenfalls auf GitHub zu finden.</p>
<section id="literatur" class="level2">
<h2 class="anchored" data-anchor-id="literatur">Literatur</h2>
<ul>
<li>Maika Möbus: <em><a href="https://entwickler.de/programmierung/voila-live-dashboards-aus-jupyter-notebooks-sind-da">Voilà – Live-Dashboards aus Jupyter Notebooks sind da</a></em>, Entwickler.de vom 12. Juli 2019</li>
<li>Stefan Luber/Nico Litzel: <em><a href="https://www.bigdata-insider.de/was-ist-voila-a-997206/">Was ist Voilà</a>?</em> BigData Insider vom 12. Februar 2021</li>
<li>Duc Trung Le: <em><a href="https://blog.jupyter.org/and-voici-e02367197ba2">And Voici! Scaling Jupyter dashboards up to the millions</a></em>, Jupyter Blog vom 6. Dezember 2023</li>
</ul>
<p>Voilà und Voici unterstützen nicht nur den Python-Kernel, sondern auch Julia und R (und auch Java und C(++)). Daher sollte ich unbedingt einmal testen, ob nicht auch <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/py5.html">Py5</a>-Skripte damit ins Netz gestellt werden können. <em>Still digging!</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54384293866/">Voilà et Voici</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>Colored French Comic Style. Two pretty young ladies, one blonde with blue eyes, the other with long red hair and green eyes, both with wide necklines, are sitting on a cafe terrace in front of a laptop with data visualizations. It’s spring, the sun is shining, and the Eiffel Tower is visible in the background</em>«. Modell: Flux (Pro), Style: None.</p>


</section>

 ]]></description>
  <category>Jupyter</category>
  <category>JupyterLite</category>
  <category>WASM</category>
  <category>Python</category>
  <category>Py5</category>
  <guid>https://kantel.github.io/posts/2025031301_voila_voici/</guid>
  <pubDate>Thu, 13 Mar 2025 16:20:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025031301_voila_voici/images/voilavoici.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Apples monatlicher Flickentag</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025031201_apple_updates/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54320672611/"><img src="https://kantel.github.io/posts/2025031201_apple_updates/images/apple-b.jpg" class="img-fluid"></a></p>
<p>Zwar hat diesen Monat der IT-Riese aus Cupertino mit dem angebissenen Apfel im Logo für nicht alle seine Produkte eine Aktualisierung herausgehauen, dennoch sind es so viele Updates, daß ich sie wieder <em>en bloc</em> behandeln kann. Doch der Reihe nach:</p>
<section id="apple-veröffentlicht-macos-sequoia-15.3.2" class="level3">
<h3 class="anchored" data-anchor-id="apple-veröffentlicht-macos-sequoia-15.3.2">Apple veröffentlicht macOS Sequoia 15.3.2</h3>
<p>Apple hat das Update auf die neue Betriebssystemversion macOS Sequoia 15.3.2 freigegeben und korrigiert damit auch wieder <a href="https://support.apple.com/en-us/122283">Sicherheitsprobleme</a>.</p>
<p>Das Update steht über die Systemeinstellungen zur Verfügung.</p>
<p>Leider hat auch dieses Update immer noch nicht die <a href="https://kantel.github.io/posts/2025022501_noc_python/">hier angesprochenen Probleme</a> behoben (ich bekomme immer noch Fehlermeldungen, die irgendetwas von <code>IMKClient</code> und <code>IMKInputSession</code> faseln). Hier sollte Apple <del>irgend wann einmal</del> möglichst schnell in die Puschen kommen.</p>
</section>
<section id="apple-veröffentlicht-sicherheitsupdate-für-macos-ventura-und-sonoma" class="level3">
<h3 class="anchored" data-anchor-id="apple-veröffentlicht-sicherheitsupdate-für-macos-ventura-und-sonoma">Apple veröffentlicht Sicherheitsupdate für macOS Ventura und Sonoma</h3>
<p>Apple hat auch das <a href="https://support.apple.com/en-us/122285">Sicherheitsupdate für macOS Ventura und macOS Sonoma</a> (Safari 18.3.1) freigegeben.</p>
<p>Die Updates stehen wie üblich über die Softwareaktualisierung bereit.</p>
</section>
<section id="apple-veröffentlicht-ios-ipados-18.3.2" class="level3">
<h3 class="anchored" data-anchor-id="apple-veröffentlicht-ios-ipados-18.3.2">Apple veröffentlicht iOS / iPadOS 18.3.2</h3>
<p>Apple hat das Update auf iOS 18.3.2 und iPadOS 18.3.2 bereitgestellt. Die Updates korrigieren <a href="https://support.apple.com/en-us/122281">kritische Sicherheitslücken</a>.</p>
<p>Das Update auf auf iOS 18.3.2 und iPadOS 18.3.2 kann über OTA (<em>Over the Air</em> - in <code>Einstellungen &gt; Allgemein &gt; Softwareaktualisierung</code>, an ausreichender Akku-Kapazität und freien Speicherplatz sollte gedacht werden) erfolgen.</p>
<p>Eine vorherige Sicherung des Geräts ist wie immer sehr zu empfehlen.</p>
<p><em>(Mein <a href="https://wwwuser.gwdguser.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54320672611/">Zauberapfel im Zauberwald</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>the mad hatter gives a sexy naked woman, with big boops, and a nice butt a apple in the summer enchanted forest colored french comic style</em>«, Negative Prompt: »<em>lowres, error, cropped, worst quality, low quality, jpeg artifacts, out of frame, watermark, signature, ugly, beard, deformed, noisy, blurry, distorted, out of focus, bad anatomy, extra limbs, poorly drawn face, poorly drawn hands, missing fingers</em>«. Modell: Stable Diffusion 3.5 Large Turbo, Style: None.</p>


</section>

 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2025031201_apple_updates/</guid>
  <pubDate>Wed, 12 Mar 2025 11:25:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025031201_apple_updates/images/apple.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
