<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Der Schockwellenreiter</title>
<link>https://kantel.github.io/index.html</link>
<atom:link href="https://kantel.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description>Schockwellenreiter</description>
<generator>quarto-1.3.433</generator>
<lastBuildDate>Tue, 03 Oct 2023 16:30:00 GMT</lastBuildDate>
<item>
  <title>Weitere (weniger zufriedenstellende) Experimente mit bildergenerierender KI</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023100301_ki_bilder/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53231803523/"><img src="https://kantel.github.io/posts/2023100301_ki_bilder/images/craiyoncaterpillar-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Ich muß gestehen, aufgrund des positiven Ausgangs meiner <a href="https://kantel.github.io/posts/2023100201_wiki_comic_factory/">gestrigen</a> und <a href="https://kantel.github.io/posts/2023100103_ai_comic_factory/">vorgestrigen</a> Versuche mit der <a href="https://aicomicfactory.com/">AI Comic Factory</a>, hatte mich kurzzeitig eine Faszination für die Möglichkeiten bildergenerierender gekünstelter Intelligenzia gepackt. Und so habe ich heute noch einmal etliche Zeit verschleudert, um zu erkunden, was sonst noch so alles <strong>kostenlos</strong> möglich ist und wurde schnell wieder auf den harten Boden der Realität zurückgeholt.</p>
<div style="float: right; margin-left: 12px; margin-top: 6px;">
<a href="https://www.flickr.com/photos/schockwellenreiter/53230629202/"><img src="https://kantel.github.io/posts/2023100301_ki_bilder/images/dalleminiscreenshot.jpg" class="img-fluid"></a>
</div>
<p>Um es kurz zu machen: Googles <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/imagegen.html">Imagegen</a> scheint momentan noch nicht mehr als ein <em>Research Paper</em> zu sein, das vielgelobte (und wohl auch sehr leistungsfähige) <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/midjourney.html">Midjourney</a> bietet seit März dieses Jahres keinen kostenlosen Zugriff mehr an (dabei hatte ich mir extra dafür einen <a href="https://de.wikipedia.org/wiki/Discord">Discord</a>-Account zugelegt) und auch das vergleichbar ähnlich leistungsstarke <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/dalle.html">DALL-E</a> kann ohne »Credits« nicht mehr genutzt werden. Da bleibt also nur noch das »abgespeckte«. dafür aber freie (Apache-2.0-Lizenz) <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/dallemini.html">DALL-E mini</a>.</p>
<p>Das hat sich mittlerweile aber in das zwar verbesserte, dafür aber teils kostenpflichtige <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/craiyon.html">Craiyon</a> umbenannt, das in der kostenlosen Version die Bilder mit einem Wasserzeichen versieht. Die Seite mit <a href="https://huggingface.co/spaces/dalle-mini/dalle-mini">DALL-E mini auf <em>Hugging Faces</em></a> existiert aber weiterhin und können – ohne das die Software ein Wasserzeichen ausgibt – genutzt werden.</p>
<p>Beide Versionen geben Bilder in einer Größe von 1.024 x 1.024 Pixel bei einer Auflösung von 72 Pixel/Zoll heraus. Das ist schon recht brauchbar und die künstliche Intelligenz dahinter scheint die <em>Prompts</em> auch recht gut zu interpretieren. Dennoch wirken die Ergebnisse oft recht gruselig und sind auf keinen Fall mit denen der <em>Comic Factory</em> oder den Bildern, die uns im Web als Produkte von DALL-E oder Midjourney präsentiert werden, zu vergleichen.</p>
<p><strong>(Vorläufiges) Fazit</strong>: Zumindes für das, was ich vorhabe, also einen KI-Bildgenerator zu nutzen, der Bilder für interaktive Geschichten produziert, die ich in <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/twine2.html">Twine</a> oder <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/renpy.html">Ren’Py</a> implementieren und erzählen möchte, scheint es momentan noch keine (freie!) Alternative zur <em>AI Comic Factory</em> zu geben.</p>
<p>Wie dem auch sei, dennoch habe ich <strong><a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/craiyon.html">Craiyon</a></strong> (das Teil ist auf jeden Fall ausbaufähig, vielleicht wird das ja doch noch was) eine Seite in <a href="http://cognitiones.kantel-chaos-team.de/index.html">meinem Wiki</a> spendiert und den Seiten zu <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/midjourney.html">Midjourney</a>, <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/dalle.html">DALL-E</a> und <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/dallemini.html">DALL-E mini</a> ein Update gegönnt.</p>



 ]]></description>
  <category>Bilder</category>
  <category>Künstliche Intelligenz</category>
  <category>Interactive Fiction</category>
  <category>Twine</category>
  <category>RenPy</category>
  <guid>https://kantel.github.io/posts/2023100301_ki_bilder/index.html</guid>
  <pubDate>Tue, 03 Oct 2023 16:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023100301_ki_bilder/images/craiyoncaterpillar.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>AI Comic Factory: Weitere Testergebnisse und neu in meinem Wiki</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023100201_wiki_comic_factory/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53228808058/"><img src="https://kantel.github.io/posts/2023100201_wiki_comic_factory/images/caterpillar3-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Die <a href="https://kantel.github.io/posts/2023100103_ai_comic_factory/">gestern auf diesen Seiten</a> vorgestellte <a href="https://aicomicfactory.com/">AI Comic Factory</a> hat mir keine Ruhe gelassen – ich mußte damit heute noch ein wenig (und noch ein wenig mehr als geplant) spielen. Dabei habe ich folgende Erfahrungen gemacht:</p>
<ul>
<li>Die Anwendung ist wohl noch relativ jung, daher ist <em>Hugging Face</em> dem Ansturm auf die <a href="https://huggingface.co/">Seiten der Comic Factory</a> nicht immer gewachsen. Manchmal nehmen diese einfach keinen neuen Prompt mehr an.</li>
<li>Außerdem kann es passieren, daß in Spitzenzeiten nicht alle Panels gezeichnet werden. Da hilft dann auch kein Warten, wenn der Warte-Kreis innerhalb eines Panels geschlossen ist und trotzdem kein Bild erscheint, dann gibt es auch trotz langen Wartens kein Ergebnis mehr (zumindestens innerhalb einer halben Stunde, länger habe ich das Warten bisher nicht ausgehalten).</li>
<li>Die »<a href="https://aicomicfactory.com/playground">Spielwiese</a>« auf den Seiten der <em>AI Comic Factory</em> ist zwar einerseits noch schneller außer Gefecht gesetzt, auf der anderen Seite scheinen die Zeiten der Spitzenbelastung andere als auf <em>Hugging Face</em> zu sein. Als Alternative kann man sie daher durchaus in Betracht ziehen.</li>
<li>Wenn man mit der Maus über ein einzelnes Panel-Bild streicht, erscheint ein »Redraw«-Button. Damit kann man eine neue Version jedes einzelnen Panel-Bildes erzeugen, wobei die übrigen Bilder der Seite nicht angetastet werden.</li>
<li>Die JPEG-Bilder, die aus der Anwendung heraus mit dem Button »Save« erzeugt werden, sind eindeutig zu klein (545 x 648 Pixel bei einer Auflösung von 72 Pixel/Zoll) und daher weder als Comic-Seite noch als Rohmaterial für weitere Bearbeitungen zu gebrauchen. Sie taugen bestenfalls als Vorschau-Bilder.</li>
</ul>
<p>Ich habe heute viel Zeit mit dem Programm verbracht und bin trotz der oben aufgezählten Macken (die ich unter »Kinderkrankheiten« verbuche) begeistert. Daher habe ich dem Teil eine <strong><a href="http://cognitiones.kantel-chaos-team.de/multimedia/computergraphik/comicfactory.html">ausführliche Seite</a></strong> in <a href="http://cognitiones.kantel-chaos-team.de/index.html">meinem Wiki</a> spendiert. Und weil ich gerade so schön dabei war, habe ich auch den Seiten zu <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/dalle.html">DALL-E</a> und <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/midjourney.html">Midjourney</a> ein Update gegönnt.</p>



 ]]></description>
  <category>Bilder</category>
  <category>Künstliche Intelligenz</category>
  <category>Interactive Fiction</category>
  <guid>https://kantel.github.io/posts/2023100201_wiki_comic_factory/index.html</guid>
  <pubDate>Mon, 02 Oct 2023 17:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023100201_wiki_comic_factory/images/caterpillar3.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Künstlerin des Monats: AI Comic Factory</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023100103_ai_comic_factory/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53226621561/"><img src="https://kantel.github.io/posts/2023100103_ai_comic_factory/images/humptydumpty02-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Bisher hatte ich mich ja um den ganzen Hype um die künstliche Intelligenzia mit ChatGPT, <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/midjourney.html">Midjourney</a>, <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/dalle.html">DALL-E</a> und Konsorten herausgehalten. Ich bin zu alt und muß daher nicht mehr jeder Sau hinterherhecheln, die durchs Dorf getrieben wird. Jetzt ist mir aber eher zufällig eine Anwendung untergekommen, die mich doch ziemlich aus den Socken gehauen hat.</p>
<p>Die Anwendung heißt <strong><a href="https://huggingface.co/spaces/jbilcke-hf/ai-comic-factory">AI Comic Factory</a></strong> und ist erst einmal (laut <a href="https://huggingface.co/spaces/jbilcke-hf/ai-comic-factory/blob/main/README.md">Readme</a>) komplett <em>Open Source</em>. Es ist keine monolithische Anwendung und sie benötigt diverse Komponenten, aber diese stehen alle tatsächlich alle unter einer freien Lizenz. Allerdings erfordert aus diesem Grunde ein Selberhosten schon etliches an Bastelarbeit und so werden die meisten – wie auch ich – die Implementierung auf <a href="https://huggingface.co/">Hugging Face</a> (das ja auch noch etliche andere, frei zugängliche KI-Anwendungen hostet) in Anspruch nehmen.</p>
<p>Und was macht diese <em>Comic Factory</em> nun? Sie nimmt einen Prompt (in englisch oder französisch) entgegen und produziert daraus eine Comic-Seite. Der Anwender kann unter diversen Stilen (unter anderem <em>Franco-Belgian</em>, <em>American (1950)</em>, <em>Flying Saucer</em>, <em>Amorican</em>, <em>Haddock</em>, aber auch <em>Klimt</em> oder Alt-Ägyptisch) wählen, auf die die Engine trainiert ist. Die Ergebnise sind ohne Nachbearbeitung noch nicht wirklich brauchbar, aber sehen oft schon recht hübsch aus.</p>
<p>Daher kann man sie auf eine recht große Bildgröße (4.966&nbsp;x&nbsp;7.021 Pixel bei einer Auflösung von 150&nbsp;x&nbsp;150 Pixel) aufblasen und dann als PDF herunterladen. Es gibt eine <a href="https://huggingface.co/spaces/jbilcke-hf/ai-comic-factory/discussions/105#64f84d182f7d3d945cdde3d2">Anleitung im Forum von Hugging Face</a>, wie man dies am besten bewerkstelligt und auch ein (etwas knapp geratenes) <a href="https://www.youtube.com/watch?v=ZSyEQPqSWuk">Video-Tutorial</a> dazu könnt Ihr Euch auf YouTube anschauen.</p>
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53226621561/"><img src="https://kantel.github.io/posts/2023100103_ai_comic_factory/images/humptydumpty02-o.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/53226955969/"><img src="https://kantel.github.io/posts/2023100103_ai_comic_factory/images/madhatter_01-o.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/53226940414/"><img src="https://kantel.github.io/posts/2023100103_ai_comic_factory/images/humptydumpty01-o.jpg" class="img-fluid"></a></p>
<p><em>Mit einem Klick auf die Vorschaubilder kommt Ihr je auf eine Seite mit einer Vergrößerung.</em></p>
<p>Ich habe mal ein wenig mit der KI herumgespielt und mir ein paar Seiten für meinen Alice-Kosmos erstellen lassen. Die Ergebnisse halte ich unter der Voraussetzung, daß man die einzelnen Bilder zu einer richtigen Geschichte noch einzeln ausschneiden und remixen muß, für recht brauchbar. Man muß damit leben, das die Protagonisten immer wieder anders aussehen (obwohl die Seiten alle mit dem Stil <em>Franco-Belgian</em> erstellt wurden) und bei dem verrückten Hutmacher hat sich die KI eindeutig an <em>Johnny Depp</em> abtrainiert. Aber ey, das ist nun mal so, wenn man aus zusammengewürfelten Bildern eine eigene Geschichte erzählen will. Und das ist ja gerade der Moment, wo die Kreativität ins Spiel kommt.</p>
<p>Denn kreativ ist der <em>Comic Generator</em> sicher nicht, aber er kann ein wertvolles Werkzeug sein, vor allem für Menschen, die – wie ich – kein eigenes Zeichentalent besitzen. Da von einer KI erzeugte Bilder (zumindest in Europa) frei von Urheberrechten sind, muß man bei der Nutzung auch keine Angst vor Abmahnanwälten haben. Ich spiele mit dem Gedanken (das habt Ihr Euch sicher schon bei der Bildauswahl gedacht), mir von diesem Tool Bilder für meine Wunderland-Abenteuer mit <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/twine2.html">Twine</a> erstellen zu lassen und daraus neue, interaktive Geschichten zu entwickeln.</p>
<p>Dazu werde ich mir von der <em>Comic Factory</em> sicher noch ein paar Bildern in anderen Stilen erzeugen lassen. Denn wenn das Wunderland auf fliegende Untertassen trifft, sind wieder ganz neue Abenteuer möglich.</p>
<p>Aber erst einmal als Premiere und Appetizer: Künstlerin des Monats Oktober, deren Bilder immer dann im <em>Schockwellenreiter</em> erscheinen, wenn ich keine anderen Bilder besitze, ist mit der <em>Comic Factory</em> erstmals eine Künstliche Intelligenz.</p>



 ]]></description>
  <category>Bilder</category>
  <category>Künstliche Intelligenz</category>
  <category>Interactive Fiction</category>
  <category>Twine</category>
  <guid>https://kantel.github.io/posts/2023100103_ai_comic_factory/index.html</guid>
  <pubDate>Sun, 01 Oct 2023 18:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023100103_ai_comic_factory/images/humptydumpty02.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Blaues Sofa am Britzer Damm</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023100102_blaues_sofa/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53223705036/"><img src="https://kantel.github.io/posts/2023100102_blaues_sofa/images/blauessofabritzerdamm-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Dieses Photo eines wunderschönen, wenn auch schon etwas durchgesessenen Zweisitzers, der gestern am Britzer Damm, Ecke Bürgerstraße frei-, aber auch allein sich selbst überlassen wurde, konnte und wollte ich Euch nicht vorenthalten. <em>(Photo (<a href="http://creativecommons.org/licenses/by-nc-nd/2.0/">cc</a>) 2023: <a href="http://cognitiones.kantel-chaos-team.de/cv.html">Jörg Kantel</a>)</em></p>



 ]]></description>
  <category>Wohnsitz Neukölln</category>
  <category>Photographie</category>
  <guid>https://kantel.github.io/posts/2023100102_blaues_sofa/index.html</guid>
  <pubDate>Sun, 01 Oct 2023 15:45:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023100102_blaues_sofa/images/blauessofabritzerdamm.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Ein fröhlicher Herbstanfang mit frischen Zahlen: Die Mediadaten für den September 2023</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023100101_mediadaten_2023_09/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53226508953/"><img src="https://kantel.github.io/posts/2023100101_mediadaten_2023_09/images/mediadaten202309-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Auch wenn offiziell nach Ansicht der Meteorologen der Herbst schon im September beginnt, für mich fängt er immer erst mit dem »goldenen« Oktober an. Doch wie dem auch sei, mit den heute (am 1. Oktober) veröffentlichten Zahlen (die manches Mal hochtrabend auch <em>Mediadaten</em> genannt werden) für den Monat September 2023 werde ich allen Seiten gerecht und tue keinem weh: Im letzten Monat hatte der <em>Schockwellenreiter</em> laut seinem nicht immer ganz zuverlässigen, aber dafür (hoffentlich) <a href="https://de.wikipedia.org/wiki/Datenschutz-Grundverordnung">DSGVO</a>-konformen <del>Geißenpeter</del> <a href="https://kantel.github.io/posts/2022120702_goatcounter/">GoatCounter</a> exakt <strong>4.973&nbsp;Besucherinnen und Besucher</strong>. Wie immer freue ich mich über jede, die und jeden, der den Weg auf diese Seiten gefunden hat, und bedanke mich bei allen meinen Leserinnen und Lesern.</p>
<p>😎 &nbsp; <em>Bleibt mir gewogen!</em></p>
<p>Natürlich gibt es auch für den letzten Monat wieder eine <em>Top Five</em>. Im September haben viele von Euch diese Seiten aufgerufen:</p>
<ol type="1">
<li><a href="https://kantel.github.io/posts/2023091002_typst_1st_steps/">Erste (und vermutlich letzte) Schritte mit Typst</a>.</li>
<li>Aus der Nachbarschaft: <a href="https://kantel.github.io/posts/2023091303_fussballturnier_abgesagt/">Fußballturnier und Spielefest abgesagt</a>.</li>
<li><a href="https://kantel.github.io/posts/2023091001_duschdas_mogelpackung/">DuschDas-Mogelpackung</a>: Mit Öko-Bla-Bla zu weniger Inhalt.</li>
<li><a href="https://kantel.github.io/posts/2023083003_myst_jupyterbook/">Interaktive Publikationen mit MyST Markdown und Jupyter Book</a>.</li>
<li><a href="https://kantel.github.io/posts/2023091302_gehwegzuparker/">Gehwegzuparker versus »Klimakleber«</a>.</li>
</ol>
<p>Das ist mal wieder eine sehr bunte Mischung, die Euer Interesse gefunden hat. Ich hoffe, daß ich auch in diesem Monat ähnlich interessante Beiträge für Euch verfassen kann.</p>



 ]]></description>
  <category>Interna</category>
  <guid>https://kantel.github.io/posts/2023100101_mediadaten_2023_09/index.html</guid>
  <pubDate>Sun, 01 Oct 2023 15:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023100101_mediadaten_2023_09/images/mediadaten202309.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Neue Experimente mit Py5: Ein Sketch – zwei (oder noch mehr) Fenster</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023093002_py5_2windows/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53222219531/"><img src="https://kantel.github.io/posts/2023093002_py5_2windows/images/py5twowindow-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Ich gebe es ja zu, ich stehe manchmal ein wenig auf dem Schlauch. So hat es bis gestern gedauert, bis ich herausgefunden hatte, wozu der <em><a href="https://py5coding.org/content/py5_modes.html#class-mode">Class Mode</a></em> in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/py5.html">Py5</a> eigentlich nützlich ist: Mit ihm kann man nämlich einen Sketch mit mehr als einem Fenster schreiben. Getestet habe ich das mit diesem Notebook, das mit einem Skript zwei Fenster erzeugt, die zwar unabhängig sind, aber zur gleichen Zeit angezeigt werden (siehe <a href="https://www.flickr.com/photos/schockwellenreiter/53222219531/">Screenshot</a> im Banner oben).</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>gui osx</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> py5 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Sketch</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Window_1(Sketch):</span>
<span id="cb1-5">    </span>
<span id="cb1-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> settings(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.size(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>)</span>
<span id="cb1-8">        </span>
<span id="cb1-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> setup(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.window_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fenster 1"</span>)</span>
<span id="cb1-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect_mode(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.CENTER)</span>
<span id="cb1-12">        </span>
<span id="cb1-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-14">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.background(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">49</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">197</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">244</span>)</span>
<span id="cb1-15">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fill(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">248</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">239</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">34</span>)</span>
<span id="cb1-16">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.circle(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb1-17">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fill(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">248</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">158</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb1-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mouse_x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mouse_y, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>)</span>
<span id="cb1-19"></span>
<span id="cb1-20">window_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Window_1()</span>
<span id="cb1-21">window_1.run_sketch(py5_options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--location=1300,30"</span>])</span>
<span id="cb1-22"></span>
<span id="cb1-23"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Window_2(Sketch):</span>
<span id="cb1-24">    </span>
<span id="cb1-25">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> settings(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-26">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.size(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>)</span>
<span id="cb1-27">        </span>
<span id="cb1-28">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> setup(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-29">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.window_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fenster 2"</span>)</span>
<span id="cb1-30">        </span>
<span id="cb1-31">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-32">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.background(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">98</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">199</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">119</span>)</span>
<span id="cb1-33">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fill(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">240</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">99</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">164</span>)</span>
<span id="cb1-34">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>)</span>
<span id="cb1-35">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fill(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">240</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">37</span>)</span>
<span id="cb1-36">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.circle(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mouse_x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mouse_y, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>)</span>
<span id="cb1-37">        </span>
<span id="cb1-38">window_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Window_2()</span>
<span id="cb1-39">window_2.run_sketch(py5_options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--location=1500,360"</span>])</span>
<span id="cb1-40"></span>
<span id="cb1-41">window_2.println(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Start Fenster 2"</span>)</span></code></pre></div>
<p>Der Test läuft in meiner <a href="https://kantel.github.io/posts/2023081202_py5_jupyterlab_desktop/">Py5-Installation</a> für <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/jupyterlabdesktop.html">JupyterLab Desktop</a>. Die erste Zeile <code>%gui osx</code> ist nur für <a href="https://py5coding.org/content/osx_users.html">Jupyter Notebooks unter macOS notwendig</a>, Nutzer anderer Betriebssysteme müssen diese Zeile weglassen. Sollte ein Notebook auf verschiedenen Plattformen laufen, kann dies mit diesen Zeilen ermöglicht werden:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sys</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> sys.platform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"darwin"</span>:</span>
<span id="cb2-4">        get_ipython().run_line_magic(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gui"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"osx"</span>)</span></code></pre></div>
<p>Die (optionalen) <code>py5_options="["--location=&lt;x_screen&gt;,&lt;y_screen&gt;"]</code> übergeben die Koordinaten, an denen die Fenster auf dem Monitor erscheinen sollen. Die x-Werte sind in diesem Sketch so hoch, weil das Ziel der beiden Fenster ein Platz auf meinem zweiten Monitor sein sollte. Das hat auch anstandslos geklappt. Wer keinen zweiten Monitor sein eigen nennt, sollte entweder kleinere x-Werte eintragen oder auf die Option verzichten. Py5 sucht sich dann selber einen passenden Wert für die Postion der Fenster.</p>
<p>Ich bin jedenfalls erst einmal begeistert, denn dies eröffnet mir die Möglichkeit, in einem Fenster eine Simulation laufen zu lassen und in einem zweiten Fenster (zum Beispiel mit <a href="https://kantel.github.io/posts/2023092401_fplotter_py5/">FPlotter</a>) einen Graphen mit den Ergebnissen dieser Simulation zu zeigen. Dies am Beispiel <a href="https://kantel.github.io/posts/2023092301_forestfire_sim_1/">meiner Waldbrandsimulation</a> zu implementieren, wird eines meiner nächsten Schritte sein.</p>
<p>Doch zuvor möchte ich noch ausprobieren, ob und wie der <a href="https://kantel.github.io/posts/2023081302_py5_vscode/"><em>Class Mode</em> auch in einem stinknormalen Editor läuft</a>, zum Beispiel in <a href="http://cognitiones.kantel-chaos-team.de/produktivitaet/visualstudiocode.html">Visual Studio Code</a>. Und auch, ob Py5 im <em>Class Mode</em> mit der <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/matplotlib.html">Matplotlib</a> spielt, steht noch auf meiner Testliste. <em>Still digging!</em></p>
<p><strong>War sonst noch was?</strong> Ach ja, ich habe für diesen Test mein JupyterLab Desktop auf die <a href="https://github.com/jupyterlab/jupyterlab-desktop/releases/tag/v4.0.5-1">neueste Version 4.0.5-1</a> aktualisiert. Das ist noch nicht das Ende der Fahnenstange, denn <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/jupyterlab.html">JupyterLab</a> selber ist schon bei der <a href="https://github.com/jupyterlab/jupyterlab/releases/tag/v4.0.6">Version 4.0.6</a> angekommen. Sinn der Übung ist, daß ich für meine schon seit langem geplanten und angekündigten numerischen Experimente endlich meine Scheu vor Notebooks verlieren möchte. Denn das scheint sich zu lohnen, so man soll zum Beispiel mit <a href="https://blog.jupyter.org/and-voil%C3%A0-f6a2c08a4a93">Voilà</a> (das aktuell die <a href="https://blog.jupyter.org/voil%C3%A0-0-5-0-homecoming-66f2465aa86f">Version 0.5.0</a> erreicht hat) aus einem Jupyter Notebook eine <em>Standalone Web Applikation</em> oder ein <em>Dashboard</em> erzeugen können. Ich bin gespannt, ob das auch mir einem Py5-Kernel gelingt. Und mit <a href="https://mystmd.org/">MyST</a> <em>(Markedly Structured Text)</em>, einem Markdown-Superset ähnlich <a href="http://cognitiones.kantel-chaos-team.de/webworking/staticsites/quarto.html">Quarto</a>, und <a href="https://jupyterbook.org/en/stable/intro.html">Jupyter Book</a> soll man aus <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/jupyter.html">Jupyter</a>-Notebooks (auch aus JupyterLab und JupyterLab Desktop heraus) <a href="https://kantel.github.io/posts/2023083003_myst_jupyterbook/">wunderschöne Publikationen erstellen</a> können. Das kann ein Spielkalb wie ich doch nicht links liegen lassen. Also noch einmal: <em>Still digging!</em></p>



 ]]></description>
  <category>Py5</category>
  <category>Python</category>
  <category>Creative Coding</category>
  <category>JupyterLab Desktop</category>
  <category>Jupyter Book</category>
  <guid>https://kantel.github.io/posts/2023093002_py5_2windows/index.html</guid>
  <pubDate>Sat, 30 Sep 2023 15:55:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023093002_py5_2windows/images/py5twowindow.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Mozilla Thunderbird Version 115.3.1 freigegeben</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023093001_thunderbird_11531/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://upload.wikimedia.org/wikipedia/commons/thumb/b/b5/La_Bacchante_Courbet.jpg/950px-La_Bacchante_Courbet.jpg"><img src="https://kantel.github.io/posts/2023093001_thunderbird_11531/images/bacchante-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Mozilla bleibt seinen Gepflogenheiten treu: Einen Tag nach dem <a href="https://kantel.github.io/posts/2023092902_firefox_11801/">außerplanmäßgen Update</a> des kleinen roten Pandas <a href="https://kantel.github.io/posts/2023092702_thunderbird_update/">folgt das ebenso außerplanmäßige</a> Update des Donnervogels: Die Entwickler des <a href="http://www.mozillamessaging.com/">Mozilla Thunderbird</a> haben das Update auf die Version 115.3.1 freigegeben und damit ebenfalls <a href="https://www.thunderbird.net/en-US/thunderbird/115.3.1/releasenotes/">Sicherheitslücken</a> behoben.</p>
<p>Thunderbird weist selbst auf dieses Update hin. Diese Prozedur kann aber auch wie immer über das Menü <code>Hilfe &gt; Über Thunderbird</code> angestoßen werden. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<p><em>(Bild: <a href="https://fr.wikipedia.org/wiki/Liste_de_tableaux_de_Gustave_Courbet">Gustave Courbet</a> (1819-1877): La Bacchante, zwischen 1844-1847. Bildquelle: <a href="https://commons.wikimedia.org/wiki/File:La_Bacchante_Courbet.jpg">Wikimedia Commons</a>)</em></p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2023093001_thunderbird_11531/index.html</guid>
  <pubDate>Sat, 30 Sep 2023 14:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023093001_thunderbird_11531/images/bacchante.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Mozilla hat eine neue Version Firefox 118.0.1 nachgeschoben</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023092902_firefox_11801/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://upload.wikimedia.org/wikipedia/commons/thumb/d/dc/Gustave_Courbet_-_Nude_Woman_with_Dog_-_WGA05508.jpg/948px-Gustave_Courbet_-_Nude_Woman_with_Dog_-_WGA05508.jpg"><img src="https://kantel.github.io/posts/2023092902_firefox_11801/images/femmechien-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Diesen Monat überschlagen sich die Softwarehäuser aber regelrecht mit ihren Updates. Hatte Mozilla erst <a href="https://kantel.github.io/posts/2023092601_firefox_118/">vor wenigen Tagen</a> die Firefox-Version 118.0 (und ESR 115.3) freigegeben, mußten sie gestern die Versionen <a href="https://www.mozilla.org/en-US/firefox/118.0.1/releasenotes/">118.0.1</a> und <a href="https://www.mozilla.org/en-US/firefox/115.3.1/releasenotes/">ESR 115.3.1</a> nachschieben und darin auch wieder Sicherheitslücken beheben.</p>
<p>Wie immer: Firefox weist selbst auf dieses Update hin. Diese Prozedur kann aber auch über das Menü <code>Hilfe &gt; Über Firefox</code> angestoßen werden. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<p><em>(Bild: <a href="https://fr.wikipedia.org/wiki/Liste_de_tableaux_de_Gustave_Courbet">Gustave Courbet</a> (1819-1877): Femme nue au chien, etwa 1861-1862. Bildquelle: <a href="https://commons.wikimedia.org/wiki/File:Gustave_Courbet_-_Nude_Woman_with_Dog_-_WGA05508.jpg">Wikimedia Commons</a>)</em></p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2023092902_firefox_11801/index.html</guid>
  <pubDate>Fri, 29 Sep 2023 12:25:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023092902_firefox_11801/images/femmechien.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Thonny 4.1.3 ist draußen</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023092901_thonny_413/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53221746598/"><img src="https://kantel.github.io/posts/2023092901_thonny_413/images/thonny413-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Wie ich gestern über den asozialen Dienst, der früher mal <del>Raider</del> Twitter hieß, nun aber <del>Twix</del> X genannt werden will (aber sonst ändert sich nix!), erfuhr, ist von <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/thonny.html">Thonny</a>, eine meiner bevorzugten Entwicklungsumgebungen für Python und speziell für <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/py5.html">Py5</a>, die <a href="https://github.com/thonny/thonny/releases/tag/v4.1.3">Version 4.1.3</a> freigegeben worden. Es ist ein Bugfix-Release ohne neue Features.</p>
<p>Da aber ein – bei mir bisher nie aufgetretener – gelegentlicher Crash unter macOS beseitigt worden sein soll und weil ich prinzipiell ein neugieriger Mensch bin, mußte ich diese neue Version bei mir sofort installieren. Und wie der <a href="https://www.flickr.com/photos/schockwellenreiter/53221746598/">Screenshot</a> im Banner oben zeigt, verlief das Update ohne Probleme.</p>



 ]]></description>
  <category>Thonny</category>
  <category>Python</category>
  <category>Py5</category>
  <guid>https://kantel.github.io/posts/2023092901_thonny_413/index.html</guid>
  <pubDate>Fri, 29 Sep 2023 11:45:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023092901_thonny_413/images/thonny413.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Dynamik eines nichtlinearen Mini-Weltmodells: Experimente mit Py5 und FPlotter</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023092802_miniweltsim/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53216111029/"><img src="https://kantel.github.io/posts/2023092802_miniweltsim/images/weltsim-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Nachdem ich vor ein <a href="https://kantel.github.io/posts/2023092401_fplotter_py5/">paar Tagen</a> meine »Matplotlib für Arme« <a href="http://blog.schockwellenreiter.de/2021/03/2021031901.html">FPlotter</a> (<a href="http://blog.schockwellenreiter.de/2021/03/2021033002.html">2</a>) von <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processingpy.html">Processing.py</a> nach <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/py5.html">Py5</a> portiert hatte, galt es, dies auch mit Leben zu erfüllen. Bevor ich damit die Ergebnisse der hier vorgestellten <a href="https://kantel.github.io/posts/2023092301_forestfire_sim_1/">Waldbrandsimulation</a> nach <em>Al Sweigart</em> visualisiere, wollte ich als Fingerübung erst einmal ein Modell von <em>Hartmut Bossel</em>, ein »nichtlineares Mini-Weltmodell«<sup>1</sup> in Py5 implementieren. Das erwies sich aufwendiger, als ursprünglich geplant, aber dafür kann sich das Ergebnis durchaus sehen lassen.</p>
<p>Ziel der Simulation ist es, ein (stark vereinfachtes) »Weltmodell« zu erstellen, das eine in etwa richtige Beschreibung der globalen Dynamik liefern kann, wie sie sich aus dem Zusammenspiel zwischen Bevölkerungsentwicklung, Umweltbelastung und Konsum entweickeln könnte. Dafür wird ein System aus drei gekoppelten Differentialgleichungen angenommen, die sich wie folgt zusammensetzen:</p>
<p>Die <strong>Bevölkerungsentwicklung</strong> (<img src="https://latex.codecogs.com/png.latex?V">) entspricht in etwa der Beziehung <em>neue Bevölkerungszahl = alte alte Bevölkerungszahl + Geburtenrate (<img src="https://latex.codecogs.com/png.latex?B">) - Sterberate (<img src="https://latex.codecogs.com/png.latex?D">)</em> (als Einheit wird – auch in allen folgenden Beziehungen/Gleichungen – ein Jahr vorausgesetzt). Das ergibt die Gleichung</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5CDelta%20V%7D%7B%5CDelta%20t%7D=B-D%0A"></p>
<p>Im Teilmodell der <strong>Umweltbelastung</strong> (<img src="https://latex.codecogs.com/png.latex?L">) müssen zwei Verhaltensmöglichkeiten berücksichtigt werden. Liegt sie <strong>unter</strong> einem kritischen Wert (der Kapazitätsgrenze <img src="https://latex.codecogs.com/png.latex?L%5E%5Cast">), so ist der Abbau pro Zeiteinheit proportional zur vorhandenen Umweltbelastung. Liegt die Belastung dagegen <strong>über</strong> den kritischen Wert, so kann pro Zeiteinheit nur noch die (konstante) Menge abgebaut werden, die der Kapazitätsgrenze entspricht. Wenn die Belastung mit Schadstoffen pro Zeiteinheit gleich <img src="https://latex.codecogs.com/png.latex?S"> ist und das Maß für die relative Umweltbelastung <img src="https://latex.codecogs.com/png.latex?Q=%5Cfrac%7BL%5E%5Cast%7D%7BL%7D">, dann ergibt sich mit dem Parameter <img src="https://latex.codecogs.com/png.latex?a"> für die spezifische Abbaurate folgende Gleichung:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5CDelta%20L%7D%7B%5CDelta%20t%7D%20=%20%5Cbegin%7Bcases%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20S%20-%20a%20%5Ccdot%20L%20&amp;%20%5Ctext%7B%20falls%20%7D%20L%20%3C=%20L%5E%5Cast%20%5C%5C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20S%20-%20a%20%5Ccdot%20L%20%5Ccdot%20Q%20&amp;%20%5Ctext%7B%20falls%20%7D%20L%20%3E%20L%5E%5Cast%0A%5Cend%7Bcases%7D%0A"> Die Entwicklung des <strong>Konsums</strong> hingegen ist weitestgehend <em>autokatalytisch</em>, das heißt, es besteht eine positive Rückkoppelung zwischen dem Konsumniveau (<img src="https://latex.codecogs.com/png.latex?K">) und seiner Wachstumsrate. Das führt bei einer konstanten Wachstumsrate <img src="https://latex.codecogs.com/png.latex?c"> zu exponentiellem Wachstum:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5CDelta%20K%7D%7B%5CDelta%20t%7D%20=%20c%20%5Ccdot%20K%0A"></p>
<p>Da jedoch auch beim Konsumniveau exponentielles Wachstum zu einem Zusammenbruch des Gesamtsystems führen würde, wird also einer mehr oder weniger realistische Wachstumsbegrenzung angenommen. Sinnvoll ist die Annahme einer Kapazitätsgrenze <img src="https://latex.codecogs.com/png.latex?K%5E%5Cast"> und der Modifizierung der Wachstumsrate so, daß diese sich bei der Annäherung an die Kapazitätsgrenze auf Null reduziert. Dies kann erreicht werden duch den <em>logistischen</em> Ansatz</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5CDelta%20K%7D%7B%5CDelta%20t%7D%20=%20c%20%5Ccdot%20K%20%5Ccdot%20(1%20-%20f%20%5Ccdot%20K)%0A"></p>
<p>Dabei bestimmt der Kapazitätsfaktor <img src="https://latex.codecogs.com/png.latex?f%20=%20%5Cfrac%7B1%7D%7BK%5E%5Cast%7D">, auf welchem Konsumniveau Sättigung eintritt.</p>
<p>Jetzt müssen diese Teilmodelle »nur« noch verkoppelt werden. Dabei trifft <em>Bossel</em> folgende Annahmen:</p>
<p>Die erste Verkopplung von Umweltbelastung (im Quellcode <code>last</code>) mit der Bevölkerungsentwicklung (im Quellcode <code>volk</code>) ist intendiert als Maßnahme zur Bevölkerungskontrolle in Reaktion auf hohe Umweltbelastung. Sie setzt daher bei der Geburtenrate an. Ausgangspunkt ist zweckmäßigerweise der bereits definierte Umweltqualitätsfaktor <img src="https://latex.codecogs.com/png.latex?Q%20=%20%5Cfrac%7BL%5E%5Cast%7D%7BL%7D%20=%20%5Cfrac%7B1%7D%7BL%7D">. Bei sinkender Umweltqualität würde damit die Geburtenrate entsprechend verringert. Diese Wirkung ist durch den Faktor <img src="https://latex.codecogs.com/png.latex?u"> zu beeinflussen<sup>2</sup>.</p>
<p>Die zweite Kopplung von <code>last</code> nach <code>volk</code> beschreibt ein Sinken der Lebenserwartung durch den gesundheitsschädlichen Einfluß der Umweltbelastung. Sie muß deshalb von <img src="https://latex.codecogs.com/png.latex?L"> auf die Sterberate wirken. Im Modell wird <img src="https://latex.codecogs.com/png.latex?L"> direkt mit dem Faktor <img src="https://latex.codecogs.com/png.latex?1"> für die Sterberate genutzt.</p>
<p>Die Kopplung von <code>volk</code>nach <code>last</code> steht in einem direkten Zusammenhang mit der Kopplung des Konsums (im Quellcode <code>kons</code>) nach <code>last</code>, da der Schadstoffeintrag sowohl von der Bevölkerungsgröße wie auch von der Höhe des Konsums abhängt. Er ist daher proprtional zum Produkt <img src="https://latex.codecogs.com/png.latex?V%20%5Ccdot%20K">. Als Wichtungsfaktor wird im Modell <img src="https://latex.codecogs.com/png.latex?e%20=%200.02"> eingesetzt.</p>
<p>Die Kopplung von <code>kons</code> nach <code>volk</code> modelliert die Erhöhung der Zahl der (überlebenden) Kinder bei wachsendem Wohlstand. Ähnlich wie bei der Verbindung von <img src="https://latex.codecogs.com/png.latex?L"> auf die Sterberate wirkt <img src="https://latex.codecogs.com/png.latex?K"> (ebenfalls mit der Gewichtung von <img src="https://latex.codecogs.com/png.latex?1">) direkt auf die Geburtenrate</p>
<p>Die Kopplung von <code>kons</code> nach <code>volk</code> nimmt an, daß eine Erhöhung der Umweltbelastung auch eine Erhöhung des Konsums mit sich zieht, daß <img src="https://latex.codecogs.com/png.latex?L"> also auch auf die Wachstumsrate von <img src="https://latex.codecogs.com/png.latex?K"> wirkt. Auch hier nimmt <em>Bossels</em> Modell wieder einen einfachen, proportionalen Einfluß mit der Gewichtung von <img src="https://latex.codecogs.com/png.latex?1"> an.</p>
<p>Die letzte verbleibende Kopplung von <code>last</code> nach <code>kons</code> besitzt eine von der Eingriffsstärke abhängige Gewichtung, die bewirkt, daß das Wachstum des Konsumniveaus eine Grenze findet. Im Modell wird daher sinnvollerweise <img src="https://latex.codecogs.com/png.latex?L"> mit dem Sättigungsterm so verkoppelt, daß auch diese Wichtung durch den Kapazitätsfaktor <img src="https://latex.codecogs.com/png.latex?f"> ausgedrückt wird.</p>
<p>Unter diesen Annahmen erhalten wir ein Gleichungssystem, das aus folgenden, nichtlinearen Differentialgleichungen besteht:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%5Cfrac%7B%5CDelta%20V%7D%7B%5CDelta%20t%7D%20&amp;%20=%20b%20%5Ccdot%20V%20%5Ccdot%20u%20%5Ccdot%20(%5Cfrac%7BL%5E%5Cast%7D%7BL%7D%20K%20-%20d%20%5Ccdot%20V%20%5Ccdot%20L)%20%5C%5C%0A%5Cfrac%7B%5CDelta%20L%7D%7B%5CDelta%20t%7D%20&amp;%20=%20%5Cbegin%7Bcases%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20e%20%5Ccdot%20K%20%5Ccdot%20V%20-%20a%20%5Ccdot%20L%5E%5Cast%20&amp;%20%5Ctext%7B%20falls%20%7D%20L%20%3E%20L%5E%5Cast%20%5C%5C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20e%20%5Ccdot%20K%20%5Ccdot%20V%20-%20a%20%5Ccdot%20L%20%20%20%20%20%20&amp;%20%5Ctext%7B%20falls%20%7D%20L%20%3C=%20L%5E%5Cast%0A%5Cend%7Bcases%7D%20%5C%5C%0A%5Cfrac%7B%5CDelta%20K%7D%7B%5CDelta%20t%7D%20&amp;%20=%20c%20%5Ccdot%20K%20%5Ccdot%20L%20%5Ccdot%20(1%20-%20K%20%5Ccdot%20L%20%5Ccdot%20f)%0A%5Cend%7Balign*%7D%0A"></p>
<p>mit den Anfangsbedingungen</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AV_0%20=%201,%20L_0%20=%201,%20K_0%20=%201%0A"></p>
<p>und den Paramtern</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Aa%20=%200.1,%20b%20=%200.03,%20c%20=%200.05,%20d%20=%200.01,%20e%20=%200.02%0A"></p>
<p>Der Eingriffsparameter <img src="https://latex.codecogs.com/png.latex?u"> sollte in der Nähe von <img src="https://latex.codecogs.com/png.latex?1"> gewählt werden, der Eingriffsparameter <img src="https://latex.codecogs.com/png.latex?f"> kann zwischen etwa <img src="https://latex.codecogs.com/png.latex?0"> und <img src="https://latex.codecogs.com/png.latex?10"> liegen.</p>
<p>In Code gegossen und mit Hilfe des Eulerschen Polygonzugverfahrens gelöst sieht das so aus:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> calc_world_model():</span>
<span id="cb1-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">global</span> t, volk, last, kons</span>
<span id="cb1-3">    qual <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>last</span>
<span id="cb1-4">    volk_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>volk<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>u<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>qual<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>kons <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>volk<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>last</span>
<span id="cb1-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> qual <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb1-6">        abbau <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>last</span>
<span id="cb1-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb1-8">        abbau <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>last<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>qual</span>
<span id="cb1-9">    last_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> e<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>kons<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>volk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> abbau</span>
<span id="cb1-10">    kons_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>kons<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>last<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (kons<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>last<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>f))</span>
<span id="cb1-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Numerische Lösung nach Euler</span></span>
<span id="cb1-12">    volk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> volk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> volk_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>dt</span>
<span id="cb1-13">    last <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> last <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> last_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>dt</span>
<span id="cb1-14">    kons <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kons <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> kons_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>dt</span>
<span id="cb1-15">    volk_array.append(volk)</span>
<span id="cb1-16">    last_array.append(last)</span>
<span id="cb1-17">    kons_array.append(kons)</span>
<span id="cb1-18">    t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> dt</span></code></pre></div>
<p>Das der »Rest« des Skriptes mit insgesamt fast 200 Zeilen unerwarteterweise doch recht umfangreich geraten ist, liegt daran, daß mich das Bastelfieber gepackt hatte und ich die Plotfunktionen noch etwas aufhübschen wollte. Der Kasten links mit den Namen und Farben der einzelnen Kurven wie auch der Kasten unten mit den Eingriffsparamtern hatten etliche zusätzliche Codezeilen verursacht. Dafür ist das Gesamtergebnis (siehe <a href="https://www.flickr.com/photos/schockwellenreiter/53216111029/">Screenshot</a>) doch recht nett geworden (wie ich als stolzer Schöpfer finde).</p>
<p>Nun aber – wie gewohnt – für alle, die gerne Quellcode lesen, das Skript nachvollziehen, nachprogrammieren oder variieren wollen, hier das komplette Programm:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Einfache Simulation eines Weltmodells</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># nach Hartmut Bossel: Modellbildung und Simulation</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Braunschweig 2. Auflage 1994, Seiten 78ff.</span></span>
<span id="cb2-4"></span>
<span id="cb2-5">WIN_WIDTH, WIN_HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">740</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span></span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot-Parameter</span></span>
<span id="cb2-8">plot_x1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">140</span>                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Start Fensterbreite rechts</span></span>
<span id="cb2-9">plot_x2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> WIN_WIDTH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>         <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ende Fensterbreite links</span></span>
<span id="cb2-10">label_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb2-11">plot_y1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>                     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Start Fensterhöhe oben</span></span>
<span id="cb2-12">plot_y2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> WIN_HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ende Fensterhöhe unten</span></span>
<span id="cb2-13">label_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> WIN_HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span></span>
<span id="cb2-14">plot_title <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dynamik eines nichtlinearen Mini-Weltmodells"</span></span>
<span id="cb2-15"></span>
<span id="cb2-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Sonstige Parameter</span></span>
<span id="cb2-17">final <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simulationszeitraum (Jahre)</span></span>
<span id="cb2-18">dt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Schrittweite</span></span>
<span id="cb2-19"></span>
<span id="cb2-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Funktionsabhängige Konstanten</span></span>
<span id="cb2-21">x_min <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>                        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Startwert x</span></span>
<span id="cb2-22">x_max <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> final                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Maximalwert x</span></span>
<span id="cb2-23">y_min <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>                        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Startwert f(x)</span></span>
<span id="cb2-24">y_max <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>                       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Maximalwert f(x)</span></span>
<span id="cb2-25">stepsize_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_max<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>           <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ticks auf der x-Achse</span></span>
<span id="cb2-26">stepsize_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>                  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ticks auf der y-Achse</span></span>
<span id="cb2-27"></span>
<span id="cb2-28"></span>
<span id="cb2-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Farben</span></span>
<span id="cb2-30">bg_color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">234</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">218</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">184</span>)           <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Packpapier</span></span>
<span id="cb2-31">text_color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Grün</span></span>
<span id="cb2-32">text_color_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Schwarz</span></span>
<span id="cb2-33">plot_window_color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Weiß</span></span>
<span id="cb2-34">grid_color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>)           <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Blau-Grau</span></span>
<span id="cb2-35">line_color_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)           <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Rot</span></span>
<span id="cb2-36">line_color_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>)           <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Blau</span></span>
<span id="cb2-37">line_color_3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">235</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">146</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">52</span>)        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Orange</span></span>
<span id="cb2-38"></span>
<span id="cb2-39"></span>
<span id="cb2-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Paramteter des Weltmodells</span></span>
<span id="cb2-41"></span>
<span id="cb2-42"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Bevölkerungsentwicklung</span></span>
<span id="cb2-43">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.03</span>       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Geburtenrate</span></span>
<span id="cb2-44">d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sterberate</span></span>
<span id="cb2-45"></span>
<span id="cb2-46"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Umweltbelastung</span></span>
<span id="cb2-47">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Abbaurate Umweltbelastung</span></span>
<span id="cb2-48">e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.02</span>       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Wichtungsfaktor Schadstoffeintrag</span></span>
<span id="cb2-49"></span>
<span id="cb2-50"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Konsum</span></span>
<span id="cb2-51">c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Wachstumsrate Konsum</span></span>
<span id="cb2-52"></span>
<span id="cb2-53"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Eingriffsfaktoren -- Hier kann geändert werden ###################</span></span>
<span id="cb2-54">u <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Wirkung Umweltqualität auf Bevölkerungsentwicklung #</span></span>
<span id="cb2-55">f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.03</span>       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Kapazitätsfaktor Sättigung Konsum                  #</span></span>
<span id="cb2-56"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#####################################################################</span></span>
<span id="cb2-57"></span>
<span id="cb2-58">volk_array <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-59">last_array <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-60">kons_array <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-61"></span>
<span id="cb2-62"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> settings():</span>
<span id="cb2-63">    size(WIN_WIDTH, WIN_HEIGHT)</span>
<span id="cb2-64"></span>
<span id="cb2-65"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> setup():</span>
<span id="cb2-66">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">global</span> t, volk, last, kons</span>
<span id="cb2-67">    window_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dynamik eines nichtlinearen Mini-Weltmodells"</span>)</span>
<span id="cb2-68">    window_move(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1300</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb2-69"></span>
<span id="cb2-70">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Anfangswerte</span></span>
<span id="cb2-71">    t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb2-72">    volk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bevölkerungsentwicklung</span></span>
<span id="cb2-73">    last <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Umweltbelastung</span></span>
<span id="cb2-74">    kons <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Konsum</span></span>
<span id="cb2-75">    </span>
<span id="cb2-76"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> draw():</span>
<span id="cb2-77">    background(bg_color)</span>
<span id="cb2-78">    draw_plot_window()</span>
<span id="cb2-79">    calc_world_model()</span>
<span id="cb2-80">    </span>
<span id="cb2-81">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> final:</span>
<span id="cb2-82">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(volk, last, kons)</span>
<span id="cb2-83">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_min</span>
<span id="cb2-84">        i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-85">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(volk_array):</span>
<span id="cb2-86">            stroke(line_color_1)</span>
<span id="cb2-87">            x_v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> remap(x, x_min, x_max, plot_x1, plot_x2)</span>
<span id="cb2-88">            y_v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> remap(volk_array[i], y_min, y_max, plot_y2, plot_y1)</span>
<span id="cb2-89">            circle(x_v, y_v, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb2-90">            stroke(line_color_2)</span>
<span id="cb2-91">            x_v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> remap(x, x_min, x_max, plot_x1, plot_x2)</span>
<span id="cb2-92">            y_v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> remap(last_array[i], y_min, y_max, plot_y2, plot_y1)</span>
<span id="cb2-93">            circle(x_v, y_v, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb2-94">            stroke(line_color_3)</span>
<span id="cb2-95">            x_v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> remap(x, x_min, x_max, plot_x1, plot_x2)</span>
<span id="cb2-96">            y_v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> remap(kons_array[i], y_min, y_max, plot_y2, plot_y1)</span>
<span id="cb2-97">            circle(x_v, y_v, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb2-98">            x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> dt</span>
<span id="cb2-99">            i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-100">                                </span>
<span id="cb2-101">        stroke(text_color)                       </span>
<span id="cb2-102">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I did it, Babe"</span>)</span>
<span id="cb2-103">        no_loop()</span>
<span id="cb2-104">    </span>
<span id="cb2-105"></span>
<span id="cb2-106"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> calc_world_model():</span>
<span id="cb2-107">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">global</span> t, volk, last, kons</span>
<span id="cb2-108">    qual <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>last</span>
<span id="cb2-109">    volk_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>volk<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>u<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>qual<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>kons <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>volk<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>last</span>
<span id="cb2-110">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> qual <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb2-111">        abbau <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>last</span>
<span id="cb2-112">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb2-113">        abbau <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>last<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>qual</span>
<span id="cb2-114">    last_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> e<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>kons<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>volk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> abbau</span>
<span id="cb2-115">    kons_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>kons<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>last<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (kons<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>last<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>f))</span>
<span id="cb2-116">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Numerische Lösung nach Euler</span></span>
<span id="cb2-117">    volk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> volk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> volk_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>dt</span>
<span id="cb2-118">    last <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> last <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> last_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>dt</span>
<span id="cb2-119">    kons <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kons <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> kons_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>dt</span>
<span id="cb2-120">    volk_array.append(volk)</span>
<span id="cb2-121">    last_array.append(last)</span>
<span id="cb2-122">    kons_array.append(kons)</span>
<span id="cb2-123">    t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> dt</span>
<span id="cb2-124"> </span>
<span id="cb2-125"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> draw_plot_window():</span>
<span id="cb2-126">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Den Plot in einem weißen Kasten zeichnen</span></span>
<span id="cb2-127">    fill(plot_window_color)</span>
<span id="cb2-128">    rect_mode(CORNERS)</span>
<span id="cb2-129">    no_stroke()</span>
<span id="cb2-130">    rect(plot_x1, plot_y1, plot_x2, plot_y2)</span>
<span id="cb2-131">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Kasten für y-Label</span></span>
<span id="cb2-132">    stroke(grid_color)</span>
<span id="cb2-133">    stroke_weight(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-134">    rect(label_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, (plot_y1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> plot_y2)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, label_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, (plot_y1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> plot_y2)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb2-135">    no_stroke()</span>
<span id="cb2-136">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Kasten für x-Label</span></span>
<span id="cb2-137">    stroke(grid_color)</span>
<span id="cb2-138">    stroke_weight(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-139">    rect(plot_x1, label_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, plot_x1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">450</span>, label_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span>
<span id="cb2-140">    no_stroke()</span>
<span id="cb2-141">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Titel des Plots zeichnen</span></span>
<span id="cb2-142">    fill(text_color)</span>
<span id="cb2-143">    text_size(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb2-144">    text_align(LEFT)</span>
<span id="cb2-145">    text(plot_title, plot_x1, plot_y1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb2-146">    draw_grid()</span>
<span id="cb2-147">    draw_axis_labels()</span>
<span id="cb2-148">    </span>
<span id="cb2-149"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> draw_grid():</span>
<span id="cb2-150">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Zeichne Gitter und Label</span></span>
<span id="cb2-151">    text_size(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb2-152">    text_align(CENTER, TOP)</span>
<span id="cb2-153">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># x_Achse</span></span>
<span id="cb2-154">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(x_min, x_max <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, stepsize_x):</span>
<span id="cb2-155">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> remap(i, x_min, x_max, plot_x1, plot_x2)</span>
<span id="cb2-156">        fill(text_color)</span>
<span id="cb2-157">        text(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(i), x, plot_y2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb2-158">        stroke_weight(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-159">        stroke(grid_color)</span>
<span id="cb2-160">        line(x, plot_y1, x, plot_y2)</span>
<span id="cb2-161">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># y-Achse</span></span>
<span id="cb2-162">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(y_max, y_min <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, stepsize_y):</span>
<span id="cb2-163">        y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> remap(j, y_max, y_min, plot_y1, plot_y2)</span>
<span id="cb2-164">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> y_min:</span>
<span id="cb2-165">            text_align(RIGHT, BOTTOM)   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Unten</span></span>
<span id="cb2-166">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> y_max:</span>
<span id="cb2-167">            text_align(RIGHT, TOP)      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open</span></span>
<span id="cb2-168">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb2-169">            text_align(RIGHT, CENTER)   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Vertikal zentrieren</span></span>
<span id="cb2-170">        fill(text_color)</span>
<span id="cb2-171">        text(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(j), plot_x1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, y)</span>
<span id="cb2-172">        stroke_weight(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-173">        stroke(grid_color)</span>
<span id="cb2-174">        line(plot_x1, y, plot_x2, y)</span>
<span id="cb2-175">        </span>
<span id="cb2-176"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> draw_axis_labels():</span>
<span id="cb2-177">    text_size(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>)</span>
<span id="cb2-178">    text_leading(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span>
<span id="cb2-179">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># y-Achse</span></span>
<span id="cb2-180">    text_align(LEFT, CENTER)</span>
<span id="cb2-181">    fill(line_color_1)</span>
<span id="cb2-182">    text(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bevölkerung"</span>, label_x, (plot_y1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> plot_y2)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb2-183">    fill(line_color_2)</span>
<span id="cb2-184">    text(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Umweltbelastung"</span>, label_x, (plot_y1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> plot_y2)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb2-185">    fill(line_color_3)</span>
<span id="cb2-186">    text(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Konsum"</span>, label_x, (plot_y1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> plot_y2)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb2-187">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># x-Achse</span></span>
<span id="cb2-188">    fill(text_color_2)</span>
<span id="cb2-189">    text_size(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>)</span>
<span id="cb2-190">    text(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Eingriffsparameter: Umwelt-Qualität: "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(u) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", Konsum-Faktor: "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(f), plot_x1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, label_y)</span>
<span id="cb2-191">    fill(text_color)</span></code></pre></div>
<p>Den Code findet Ihr natürlich auch in meinem <a href="https://github.com/kantel/py5/tree/main/weltsim">GitHub-Repositorium</a>.</p>
<p>Ein Wort noch zur Gültigkeit des Modells: <em>Bossel</em> selber weist darauf hin (S. 92f), daß sich sein Programm zwar im großen und ganzen plausibel verhält, daß dieser Eindruck aber nie dazu verleiten darf, den Modellergebnissen ohne weitere Überprüfungen bedingungslos zu vertrauen oder sie gar zur Grundlage wichtiger Entscheidungen zu machen. Vor allem müßte die empirische Gültigkeit und die Anwendungsgültigkeit hinterfragt werden.</p>
<p>Eine <strong>empirische Gültigkeit</strong>, das heißt eine zahlenmäßige Übereinstimmung mit der Realität, kann dieses Modell sicher nicht leisten. Dafür fehlen nicht nur die zahlenmäßigen Übereinstimmungen mit realen Größen mit meßbaren Entsprechungen im Realsystem, sondern auch die Parameter hätten wesentlich genauer (und komplexer) erfaßt und formuliert werden müssen.</p>
<p>Dagegen dürfte eine <strong>Anwendungsgültigkeit</strong> als einfaches, didaktisches Modell zur Demonstration der dynamischen Effekte elementarer Zusammenhänge zwischen Umwelt und der menschlichen Gesellschaft durchaus gegeben sein.</p>
<p>Diese Einschränkungen gelten aber nahezu für alle Modelle. So machen zum Beispiel <em>Svein Linge</em> und <em>Hans Petter Langtangen</em> in ihrem SIR-Modell zur Ausbreitung einer Grippe<sup>3</sup> ähnliche Einschränkungen zur Güligkeit – und das, obwohl ihre Modellparameter eine viel kleinere Gruppe (Schüler in einem Internat) und nicht die ganze Welt, sondern nur einen begrenzten Raum (das Internat ist abgeschlossen von der Umwelt und besitzt daher keinen Kontakt zur Außenwelt) umfassen.</p>
<p>Behaltet diese Einschränkungen also im Hinterkopf, bevor Ihr in den sozialen Medien ein Faß aufmacht und über Wissenschaftlerinnen und Wissenschaftler im Besonderen und über Wissenschaft im Allgemeinen herzieht. Denn diese sind sich schon der Beschränkungen ihrer Modelle bewußt, aber die Presse, die die Ergebnisse vermitteln sollte, unterschlägt dies gerne und häufig.</p>
<section id="literatur" class="level3">
<h3 class="anchored" data-anchor-id="literatur">Literatur</h3>
<ul>
<li>Hartmut Bossel: <em>Modellbildung und Simulation. Konzepte, Verfahren und Modelle zum Verhalten dynamischer Systeme. Ein Lehr- und Arbeitsbuch</em>, Braunschweig (Vieweg) 2.,&nbsp;veränderte Auflage mit verbesserter Simulationssoftware 1994</li>
<li>Svein Linge, Hans Petter Langtangen: <em>Programming Computations – Python. A Gentle Introduction to Numerical Simulations with Python 3.6</em>, Cham CH (Springer) Second Edition 2020</li>
</ul>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Fußnoten</h2>

<ol>
<li id="fn1"><p>Vergleiche: Hartmut Bossel, <em>Modellbildung und Simulation</em> Braunschweig (Vieweg), 2. Auflage 1994, Seiten 78ff↩︎</p></li>
<li id="fn2"><p><em>Bossel</em> nennt diesen Faktor <img src="https://latex.codecogs.com/png.latex?g">, da aber <code>g</code> in Py5 ein »reservierter« Bezeichner ist, habe ich ihn in meiner Version durch <img src="https://latex.codecogs.com/png.latex?u"> ersetzt.↩︎</p></li>
<li id="fn3"><p>Vergleiche: Svein Linge, Hans Petter Langtangen: <em>Programming Computations</em>, Cham CH (Springer) 2.&nbsp;Auflage 2020, Seiten 225ff↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Python</category>
  <category>Py5</category>
  <category>Simulation</category>
  <category>Modellierung</category>
  <category>Dynamische Systeme</category>
  <category>FPlotter</category>
  <category>Visualisierung</category>
  <guid>https://kantel.github.io/posts/2023092802_miniweltsim/index.html</guid>
  <pubDate>Thu, 28 Sep 2023 18:35:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023092802_miniweltsim/images/weltsim.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Google korrigiert erneut in Version 117 seines Browsers Chrome kritische Sicherheitslücken</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023092801_chrome_update/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://upload.wikimedia.org/wikipedia/commons/6/6e/Gustave_Courbet_-_Reclining_Woman.jpg"><img src="https://kantel.github.io/posts/2023092801_chrome_update/images/femmecouchee-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Auch Google kommt in diesem update-reichen Monat nicht zur Ruhe und veröffentlicht ein weiteres Update der Version 117 (117.0.5938.132) seines Browsers Chrome und schließt damit erneut <a href="https://chromereleases.googleblog.com/2023/09/stable-channel-update-for-desktop_27.html">kritische Sicherheitslücken</a>.</p>
<p>Chrome aktualisiert sich (außer bei Linux) über die integrierte Update-Funktion, kann aber – wenn es pressiert – auch <a href="https://www.google.com/intl/de/chrome/browser/">hier geladen</a> werden. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<p><em>(Bild: <a href="https://fr.wikipedia.org/wiki/Liste_de_tableaux_de_Gustave_Courbet">Gustave Courbet</a> (1819-1877): Femme couchée, etwa 1865-1866. Bildquelle: <a href="https://commons.wikimedia.org/wiki/File:Gustave_Courbet_-_Reclining_Woman.jpg">Wikimedia Commons</a>)</em></p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2023092801_chrome_update/index.html</guid>
  <pubDate>Thu, 28 Sep 2023 13:35:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023092801_chrome_update/images/femmecouchee.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Spätsommer in Neukölln – der Bilderbogen im September</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023092703_bilderbogen/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53212715441/"><img src="https://kantel.github.io/posts/2023092703_bilderbogen/images/bilderbogen20230901-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Auch wenn es nur wenige Schnappschüsse sind: Der Monat neigt sich dem Ende zu und so will ich heute alle die Photos heraushauen, die mir im September vor die Linse meines Smartphones geraten sind und die anderweitig (noch) keine Verwendung fanden. Denn sonst sind sie nicht mehr aktuell.</p>
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53173505619/"><img src="https://kantel.github.io/posts/2023092703_bilderbogen/images/bilderbogen20230902.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/53189741878/"><img src="https://kantel.github.io/posts/2023092703_bilderbogen/images/bilderbogen20230903.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/53189379896/"><img src="https://kantel.github.io/posts/2023092703_bilderbogen/images/bilderbogen20230904.jpg" class="img-fluid"></a><br><br> <a href="https://www.flickr.com/photos/schockwellenreiter/53200661774/"><img src="https://kantel.github.io/posts/2023092703_bilderbogen/images/bilderbogen20230905.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/53200661854/"><img src="https://kantel.github.io/posts/2023092703_bilderbogen/images/bilderbogen20230906.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/53217836683/"><img src="https://kantel.github.io/posts/2023092703_bilderbogen/images/bilderbogen20230907.jpg" class="img-fluid"></a></p>
<p><em>Mit einem Klick auf die Vorschaubilder kommt Ihr je auf eine Seite mit einer Vergrößerung.</em></p>
<p>Ob ein flüchtiger <a href="https://www.flickr.com/photos/schockwellenreiter/53173505619/">Polstersessel mit gebrochenem</a> Bein neben einem Mülleimer in der Glasower Straße, ein <a href="https://www.flickr.com/photos/schockwellenreiter/53189379896/">freigelassenes Sofa</a> eben dort, ein <a href="https://www.flickr.com/photos/schockwellenreiter/53189741878/">leergeräumter Kleiderschrank</a>, die Parole, daß der <a href="https://www.flickr.com/photos/schockwellenreiter/53200661774/">Emmauswald bleibt</a> (natürlich bleibt er, da kann sich der <a href="https://www.rbb24.de/panorama/beitrag/2023/09/berlin-neukoelln-bezirk-senat-emmaus-kirchhof-wald.html">Senat noch so auf den Kopf stellen</a>), die <a href="https://www.flickr.com/photos/schockwellenreiter/53200661854/">Stolpersteine in der Andreasberger Straße</a> vor der Hausnummer&nbsp;9 (die dringend mal geputzt werden müßten), der spätsommmerliche <a href="https://www.flickr.com/photos/schockwellenreiter/53212715441/">Himmel über dem Carl-Weder-Park</a> oder ein <a href="https://www.flickr.com/photos/schockwellenreiter/53217836683/">Getränkestand im Freien</a> vor unserer Haustür – all das ist (nicht nur, aber auch) Neukölln. <em>(Photos (<a href="http://creativecommons.org/licenses/by-nc-nd/2.0/">cc</a>) 2023: <a href="http://cognitiones.kantel-chaos-team.de/cv.html">Jörg Kantel</a>)</em></p>



 ]]></description>
  <category>Neuköllner Bilderbogen</category>
  <category>Wohnsitz Neukölln</category>
  <category>Neukölln</category>
  <category>Photographie</category>
  <guid>https://kantel.github.io/posts/2023092703_bilderbogen/index.html</guid>
  <pubDate>Wed, 27 Sep 2023 16:55:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023092703_bilderbogen/images/bilderbogen20230901.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Mozilla Thunderbird Version 115.3 freigegeben</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023092702_thunderbird_update/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://upload.wikimedia.org/wikipedia/commons/c/cf/Le_R%C3%A9veil_by_Courbet_Bern_Kunstmuseum.png"><img src="https://kantel.github.io/posts/2023092702_thunderbird_update/images/lereveil-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p><a href="https://kantel.github.io/posts/2023092601_firefox_118/">Gestern</a> war der kleine, rote Panda dran, also folgt nach den Regeln von Mozilla heute der Donnervogel: Daher haben Entwickler des <a href="http://www.mozillamessaging.com/">Mozilla Thunderbird</a> das Update auf die Version 115.3 freigegeben und damit auch wieder <a href="https://www.thunderbird.net/en-US/thunderbird/115.3.0/releasenotes/">Sicherheitslücken</a> behoben.</p>
<p>Thunderbird weist selbst auf dieses Update hin. Diese Prozedur kann aber auch wie immer über das Menü <code>Hilfe &gt; Über Thunderbird</code> angestoßen werden. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<p><em>(Bild: <a href="https://fr.wikipedia.org/wiki/Liste_de_tableaux_de_Gustave_Courbet">Gustave Courbet</a> (1819-1877): Le Réveil, 1866. Bildquelle: <a href="https://commons.wikimedia.org/wiki/File:Le_R%C3%A9veil_by_Courbet_Bern_Kunstmuseum.png">Wikimedia Commons</a>)</em></p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2023092702_thunderbird_update/index.html</guid>
  <pubDate>Wed, 27 Sep 2023 14:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023092702_thunderbird_update/images/lereveil.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>MacOS Sonoma und die Folgen – noch eine Apple Update-Orgie</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023092701_sonoma/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://upload.wikimedia.org/wikipedia/commons/thumb/8/86/A_Young_Woman_Reading_A17297.jpg/1257px-A_Young_Woman_Reading_A17297.jpg"><img src="https://kantel.github.io/posts/2023092701_sonoma/images/jeunefemmelisant-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Diesen Monat kommt Apple aus seiner Update-Orgie <a href="https://kantel.github.io/posts/2023090901_apple_flickentag/">einfach</a> nicht <a href="https://kantel.github.io/posts/2023092201_apple_updates_2/">heraus</a>. Denn ohne das übliche Trara hatte Apple eine neue Betriebssystem-Version für seine Computer freigegeben und dies hatte wieder gleich einen ganzen Rattenschwanz weiterer Updates zur Folge, die ich – wie mittlerweile bei Apple üblich – nur noch <em>en bloc</em> abhandeln kann. Also wie gewohnt der Reihe nach:</p>
<section id="apple-veröffentlicht-macos-14-sonoma" class="level3">
<h3 class="anchored" data-anchor-id="apple-veröffentlicht-macos-14-sonoma">Apple veröffentlicht macOS 14 Sonoma</h3>
<p>Gestern abend hatte Apple die neue Betriebssystemversion <a href="https://www.ifun.de/macos-sonoma-ist-da-das-neue-mac-betriebssystem-leistet-viel-219312/">macOS 14 Sonoma freigegeben</a>. Das kostenlose Update stellt an die Hardware folgende Voraussetzungen:</p>
<ul>
<li>MacBook Air 2018 und neuer</li>
<li>MacBook Pro 2018 und neuer</li>
<li>Mac mini 2018 und neuer</li>
<li>iMac 2019 und neuer</li>
<li>Mac Studio ab 2022</li>
<li>Mac Pro 2019 und neuer</li>
<li>iMac Pro ab 2017</li>
</ul>
<p>Das neue Betriebssystem, dessen wichtigste Funktionen Apple auf <a href="https://www.apple.com/de/macos/sonoma-preview/">dieser Sonderseite</a> zusammengefaßt hat, legt seine Widgets nun erstmals auf dem Desktop ab und bringt die vom Apple TV bekannten Bildschirmschoner auf den Mac.</p>
<p>Wie immer bei neuen macOS-Versionen gilt auch hier der unter langjährigen Mac-Nutzern bekannte Rat, besser das »erste Punkt-Update« (also z. B. macOS Sonoma 14.1) abzuwarten, ehe man sich auf das Abenteuer des Umstiegs einläßt.</p>
<p>Falls man sich dennoch mutig zu einem Upgrade entschließt, ist natürlich eine entsprechende Datensicherung dringend zu empfehlen.</p>
</section>
<section id="apple-veröffentlicht-sicherheitsupdate-für-macos-ventura-und-monterey" class="level3">
<h3 class="anchored" data-anchor-id="apple-veröffentlicht-sicherheitsupdate-für-macos-ventura-und-monterey">Apple veröffentlicht Sicherheitsupdate für macOS Ventura und Monterey</h3>
<p>Apple hat auch das Sicherheitsupdate auf <a href="https://support.apple.com/de-de/HT213941">macOS Ventura</a> (nur Safari) und <a href="https://support.apple.com/de-de/HT213941">macOS Monterey</a> (ebenfalls nur Safari) freigegeben.</p>
<p>Die Updates stehen wie üblich über die Softwareaktualisierung bereit.</p>
</section>
<section id="apple-veröffentlicht-iosipados-17.0.2" class="level3">
<h3 class="anchored" data-anchor-id="apple-veröffentlicht-iosipados-17.0.2">Apple veröffentlicht iOS/iPadOS 17.0.2</h3>
<p>Apple hat nun das Update auf iOS 17.0.2 auch für die übrigen Modelle des iPhones ebenso wie iPadOS 17.0.2 für die iPads bereitgestellt. Das Update soll ein Problem bei der Datenübertragung während des Einrichtungsprozesses beheben.</p>
<p>Das Update auf iOS/iPadOS 17.0.2 kann über OTA (<em>Over the Air</em> - in <code>Einstellungen &gt; Allgemein &gt; Softwareaktualisierung</code>, an ausreichender Akku-Kapazität und freien Speicherplatz sollte gedacht werden) oder über iTunes erfolgen.</p>
<p>Eine vorherige Sicherung des Geräts ist wie immer sehr zu empfehlen.</p>
</section>
<section id="apple-veröffentlicht-watchos-10.0.2-für-apple-watch-series-9-und-ultra-2" class="level3">
<h3 class="anchored" data-anchor-id="apple-veröffentlicht-watchos-10.0.2-für-apple-watch-series-9-und-ultra-2">Apple veröffentlicht watchOS 10.0.2 für Apple Watch Series 9 und Ultra&nbsp;2</h3>
<p>Und wie gewohnt zum Schluß die Uhr: Apple hat für die neuen Uhrenmodellen Series 9 und Ultra 2 die Versions watchOS 10.0.2 bereitgestellt.</p>
<p>Die Aktualisierung wird über die Apple-Watch-App auf dem iPhone gestartet unter <code>Allgemein &gt; Softwareupdate</code>. Dabei sollte sich die Uhr in Reichweite des iPhones befinden, mit dem Ladekabel verbunden und mindestens zu 50 Prozent geladen sein.</p>
<p><em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<p><em>(Bild: <a href="https://fr.wikipedia.org/wiki/Liste_de_tableaux_de_Gustave_Courbet">Gustave Courbet</a> (1819-1877): Jeune femme lisant, zwischen 1866 und 1868. Bildquelle: <a href="https://commons.wikimedia.org/wiki/File:A_Young_Woman_Reading_A17297.jpg">Wikimedia Commons</a>)</em></p>


</section>

 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2023092701_sonoma/index.html</guid>
  <pubDate>Wed, 27 Sep 2023 13:50:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023092701_sonoma/images/jeunefemmelisant.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Mozilla veröffentlicht neue Firefox-Version 118.0</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023092601_firefox_118/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.pubhist.com/works/25/large/gustave_courbet_bathers.jpg"><img src="https://kantel.github.io/posts/2023092601_firefox_118/images/courbetbathers-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Die Entwickler des Mozilla Firefox haben die neue <a href="https://www.mozilla.org/en-US/firefox/118.0/releasenotes/">Version 118.0</a> und die <a href="https://www.mozilla.org/en-US/firefox/115.3.0/releasenotes/">Version ESR 115.3</a> veröffentlicht und darin auch wieder Sicherheitslücken behoben.</p>
<p>Firefox weist selbst auf dieses Update hin. Diese Prozedur kann aber auch wie immer über das Menü <code>Hilfe &gt; Über Firefox</code> angestoßen werden. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<p><em>(Bild: <a href="https://www.pubhist.com/person/3782/gustave-courbet">Gustave Courbet</a> (1819-1877) zugeschrieben: <a href="https://www.pubhist.com/w25202">Bathers</a>)</em></p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2023092601_firefox_118/index.html</guid>
  <pubDate>Tue, 26 Sep 2023 12:20:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023092601_firefox_118/images/courbetbathers.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>FPlotter: Meine »Matplotlib für Arme« nach Py5 portiert</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023092401_fplotter_py5/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53210041601/"><img src="https://kantel.github.io/posts/2023092401_fplotter_py5/images/fplotterpy5-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Um meine <a href="https://kantel.github.io/posts/2023092301_forestfire_sim_1/">gestern begonnenen Experimente</a> weiterführen zu können, habe ich heute erst einmal das Skript <a href="http://blog.schockwellenreiter.de/2021/03/2021031901.html">FPlotter</a> (<a href="http://blog.schockwellenreiter.de/2021/03/2021033002.html">2</a>), meine »Matplotlib für Arme«, von <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processingpy.html">Processing.py</a> nach <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/py5.html">Py5</a> portiert.</p>
<p>Im großen und ganzen war der Port <em>straight forward</em>, lediglich bei der von mir beinahe inflationär verwendeten <code>map()</code>-Funktion von <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processing.html">Processing</a> mußte ich berücksichtigen, daß diese – damit sie nicht in Konflikt mit der gleichnamigen Python-Funktion gerät – in Py5 in <a href="https://py5coding.org/reference/sketch_remap.html"><code>remap()</code></a> umbenannt wurde.</p>
<p>Außerdem habe ich schon Slots vorbereitet, die es zum einen ermöglichen sollen, mehr als eine Funktion zu zeichnen und zum anderen, die zu zeichnenden Funktionswerte aus einer Liste (oder mehrere Listen) lesen zu können. Doch dies werde ich ein einer zweiten Version dieses Skriptes realisieren, die ich in den nächsten Tagen fertig- und vorstellen möchte.</p>
<p>Doch hier erst einmal den Quellcode der ersten Fassung dieses Skriptes in Py5, damit Ihr das Modul nachvollziehen und mit Euren eigenen Ideen erweitern könnt:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Funkrionsplotter in Py5</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Inspired from »Visualizing Data« (Ben Fry) and</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># »Math Adventures with Python« (Peter Farrell)</span></span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb1-6"></span>
<span id="cb1-7">WIN_WIDTH, WIN_HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">740</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span></span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Zeichenfenster</span></span>
<span id="cb1-10">plot_x1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span>                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Start Fensterbreite rechts</span></span>
<span id="cb1-11">plot_x2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> WIN_WIDTH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>         <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ende Fensterbreite links</span></span>
<span id="cb1-12">label_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span></span>
<span id="cb1-13">plot_y1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>                     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Start Fensterhöhe oben</span></span>
<span id="cb1-14">plot_y2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> WIN_HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> plot_y1   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ende Fensterhöhe unten</span></span>
<span id="cb1-15">label_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> WIN_HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span></span>
<span id="cb1-16"></span>
<span id="cb1-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Schrittweite</span></span>
<span id="cb1-18">dt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span></span>
<span id="cb1-19"></span>
<span id="cb1-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Titel</span></span>
<span id="cb1-21">plot_title <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sinuskurve"</span></span>
<span id="cb1-22"></span>
<span id="cb1-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Farben</span></span>
<span id="cb1-24">bg_color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">234</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">218</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">184</span>)           <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Packpapier</span></span>
<span id="cb1-25">text_color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Grün</span></span>
<span id="cb1-26">plot_window_color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Weiß</span></span>
<span id="cb1-27">grid_color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>)           <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Blau-Grau</span></span>
<span id="cb1-28">line_color_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)           <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Rot</span></span>
<span id="cb1-29">line_color_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>)           <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Blau</span></span>
<span id="cb1-30"></span>
<span id="cb1-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Funktionsabhängige Konstanten</span></span>
<span id="cb1-32">x_min <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb1-33">x_max <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb1-34">y_min <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb1-35">y_max <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb1-36">stepsize_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>                  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ticks auf der x-Achse</span></span>
<span id="cb1-37">stepsize_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>                 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ticks auf der y-Achse</span></span>
<span id="cb1-38"></span>
<span id="cb1-39"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> setup():</span>
<span id="cb1-40">    size(WIN_WIDTH, WIN_HEIGHT)</span>
<span id="cb1-41">    window_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Funktionsplotter"</span>)</span>
<span id="cb1-42">    window_move(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1300</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb1-43">    plot_font <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_font(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"American Typewriter"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb1-44">    text_font(plot_font)</span>
<span id="cb1-45">    no_loop()</span>
<span id="cb1-46">    </span>
<span id="cb1-47"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> draw():</span>
<span id="cb1-48">    background(bg_color)</span>
<span id="cb1-49">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Den Plot in einem weißen Kasten zeichnen</span></span>
<span id="cb1-50">    fill(plot_window_color)</span>
<span id="cb1-51">    rect_mode(CORNERS)</span>
<span id="cb1-52">    no_stroke()</span>
<span id="cb1-53">    rect(plot_x1, plot_y1, plot_x2, plot_y2)</span>
<span id="cb1-54">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Titel des Plots zeichnen</span></span>
<span id="cb1-55">    fill(text_color)</span>
<span id="cb1-56">    text_size(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb1-57">    text_align(LEFT)</span>
<span id="cb1-58">    text(plot_title, plot_x1, plot_y1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb1-59">    draw_grid()</span>
<span id="cb1-60">    draw_axis_labels()</span>
<span id="cb1-61">    draw_plot()</span>
<span id="cb1-62">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I did it, Babe"</span>)</span>
<span id="cb1-63">    </span>
<span id="cb1-64"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> f(x):</span>
<span id="cb1-65">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span>(math.sin(x))</span>
<span id="cb1-66"></span>
<span id="cb1-67"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> draw_plot():</span>
<span id="cb1-68">    stroke(line_color_1)</span>
<span id="cb1-69">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_min</span>
<span id="cb1-70">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> x_max <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> dt:</span>
<span id="cb1-71">        x_0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> remap(x, x_min, x_max, plot_x1, plot_x2)</span>
<span id="cb1-72">        x_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> remap(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dt, x_min, x_max, plot_x1, plot_x2)</span>
<span id="cb1-73">        y_0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> remap(f(x), y_min, y_max, plot_y2, plot_y1)</span>
<span id="cb1-74">        y_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> remap(f(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dt), y_min, y_max, plot_y2, plot_y1)</span>
<span id="cb1-75">        line(x_0, y_0, x_1, y_1)</span>
<span id="cb1-76">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> dt</span>
<span id="cb1-77"></span>
<span id="cb1-78"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> draw_grid():</span>
<span id="cb1-79">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Zeichne Gitter und Label</span></span>
<span id="cb1-80">    text_size(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb1-81">    text_align(CENTER, TOP)</span>
<span id="cb1-82">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># x_Achse</span></span>
<span id="cb1-83">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(x_min, x_max <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, stepsize_x):</span>
<span id="cb1-84">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> remap(i, x_min, x_max, plot_x1, plot_x2)</span>
<span id="cb1-85">        fill(text_color)</span>
<span id="cb1-86">        text(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(i), x, plot_y2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb1-87">        stroke_weight(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-88">        stroke(grid_color)</span>
<span id="cb1-89">        line(x, plot_y1, x, plot_y2)</span>
<span id="cb1-90">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># y-Achse</span></span>
<span id="cb1-91">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(y_max, y_min <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, stepsize_y):</span>
<span id="cb1-92">        y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> remap(j, y_max, y_min, plot_y1, plot_y2)</span>
<span id="cb1-93">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> y_min:</span>
<span id="cb1-94">            text_align(RIGHT, BOTTOM)   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Unten</span></span>
<span id="cb1-95">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> y_max:</span>
<span id="cb1-96">            text_align(RIGHT, TOP)      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open</span></span>
<span id="cb1-97">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb1-98">            text_align(RIGHT, CENTER)   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Vertikal zentrieren</span></span>
<span id="cb1-99">        fill(text_color)</span>
<span id="cb1-100">        text(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(j), plot_x1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, y)</span>
<span id="cb1-101">        stroke_weight(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-102">        stroke(grid_color)</span>
<span id="cb1-103">        line(plot_x1, y, plot_x2, y)</span>
<span id="cb1-104">        </span>
<span id="cb1-105"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> draw_axis_labels():</span>
<span id="cb1-106">    fill(text_color)</span>
<span id="cb1-107">    text_size(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>)</span>
<span id="cb1-108">    text_leading(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span>
<span id="cb1-109">    text_align(CENTER, CENTER)</span>
<span id="cb1-110">    text(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y = sin(x)"</span>, label_x, (plot_y1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> plot_y2)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-111">    text_align(CENTER)</span>
<span id="cb1-112">    text(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x-Werte (-10 … 10)"</span>, (plot_x1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> plot_x2)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, label_y)</span></code></pre></div>
<p>Natürlich gibt es den <a href="https://github.com/kantel/py5/blob/main/fplotter/fplotter.py">Quellcode</a> auch in meinem GitHub-Repositorium.</p>
<p>Für die weitere Entwicklung wäre es schön, wenn man die Simulation und den (oder die) zu zeichnenden Graphen entweder in separaten Fenstern oder in verschiedenen Tabs<sup>1</sup> laufen lassen könnte. Hier sollte ich mal nachschauen, ob und wie weit es mittlerweile möglich ist, <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/pysimplegui.html">PySimpleGUI</a> mit Py5 <a href="http://blog.schockwellenreiter.de/2022/11/2022111201.html">zu verkuppeln</a><sup>2</sup>. <em>Still digging!</em></p>
<section id="literatur" class="level3">
<h3 class="anchored" data-anchor-id="literatur">Literatur</h3>
<p>Fogende beiden Werke hatten mich auf die Idee zu dem Funktionsplotter in Processing.py und Py5 gebracht und zu meiner eigenen Version inspiriert:</p>
<ul>
<li>Ben Fry: <em>Visualizing Data – Exploring and Explaining Data with the Processing Environment</em>, Sebastopol (O’Reilly) 2008, Seiten 54ff.</li>
<li>Peter Farrell: <em>Math Adventures with Python. An Illustrated Guide to Exploring Math with Code</em>, San Francisco (No Starch Press) 2019, Seiten 61ff.</li>
</ul>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Fußnoten</h2>

<ol>
<li id="fn1"><p>In <em>Visualizing Data</em> (eines der Inspirationsquellen für den FPlotter) pp.&nbsp;83 ff zeigt <em>BenFry</em>, wie man mehrere Tab-Panele in Processing realisiert. Sollte ich mir daher noch einmal genauer anschauen.↩︎</p></li>
<li id="fn2"><p>Es gab vor etwa einem Jahr erste, erfolgreiche Versuche von <em>Alexandre B A Villares</em>, für die aber noch <a href="https://twitter.com/villares/status/1591034843852333058">einige seltsame Hürden</a> berücksichtigt werden mußten.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Python</category>
  <category>Visualisierung</category>
  <category>Py5</category>
  <category>Processing</category>
  <guid>https://kantel.github.io/posts/2023092401_fplotter_py5/index.html</guid>
  <pubDate>Sun, 24 Sep 2023 16:10:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023092401_fplotter_py5/images/fplotterpy5.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Waldbrandsimulation in Python (Py5) – Stage 1</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023092301_forestfire_sim_1/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53206780452/"><img src="https://kantel.github.io/posts/2023092301_forestfire_sim_1/images/forestfiresimstage1-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Ich habe es getan: Ich habe mir die <a href="https://kantel.github.io/posts/2023092001_game_engines_und_mehr/">hier vorgestellte</a> Waldbrand-Simulation von <em>Al Sweigart</em> und meine eigene, in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processingpy.html">Processing.py</a> implementierte <a href="http://py.kantel-chaos-team.de.s3-website-us-east-1.amazonaws.com/12zellautom/#der-waldbrand-simulator">Version</a> geschnappt und daraus eine – wie ich hoffe – verbesserte Fassung in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/py5.html">Py5</a> programmiert.</p>
<p>Zwei grundsätzliche Änderungen gegenüber dem Programm von <em>Al Sweigart</em> habe ich vorgenommen: Zum einen habe ich die Randbedingungen vereinfacht, indem ich die Felder an den Rändern grundsätzlich leer gelassen habe (der Wald hört also nicht an den Rändern, sondern ein Zeile oder Spalte davor auf). Das ändert nichts an dem Verhalten der Simulation (der Wald ist einfach nur je eine Zeile oben und unten und je eine Spalte rechts und links kleiner), erspart der Programmiererin oder dem Programmierer aber eine Menge Arbeit bei der Behandlung der Ränder: Wenn die Abfragen immer nur von <code>range(1, N_ROWS-1)</code> respektive von <code>range(1, N_COLS-1)</code> reichen, können sie nie die Dimensionen eines zweidimendionalen Arrays sprengen.</p>
<p>Die zweite Änderung bedarf schon einer größeren Diskussion: Statt der <a href="http://cognitiones.kantel-chaos-team.de/programmierung/softcomputing/moorenb.html">Moore-Nachbarschaft</a>, die von <em>Al Sweigart</em> verwendet wurde und bei der alle acht Nachbarfelder einer Zelle abgefragt werden, habe ich die <a href="http://cognitiones.kantel-chaos-team.de/programmierung/softcomputing/neumannnb.html">Von-Neumann-Nachbarschaft</a> verwendet, bei der nur die vier Zellen, die eine Kante mit der Basisfläche gemeinsam haben, als Nachbarn berücksichtigt werden. Diese Nachbarschaft habe ich aus pragmatischen Gründen gewählt, da die Abfrage von vier statt von acht Nachbarn den Code halbiert. Und ich denke, daß man die Wahl damit begründen kann, daß die diagonal entfernten Felder, die nur eine Ecke mit der Basiszelle gemeinsam haben, weiter entfernt von der Basiszelle liegen und daher weniger der Brandgefahr ausgesetzt sind. Ich befinde mich da in guter Gesellschaft, da auch in der einschlägigen Literatur fast immer die <em>Von-Neumann-Nachbarschaft</em> Verwendung findet<sup>1</sup>. Außerdem habe ich keine grundsätzliche Änderung im Verhalten der Simulation bei Verwendung der <em>Moore-Nachbarschaft</em> feststellen können.</p>
<p>Das Modell hat in seiner einfachsten Form drei Paramter, an denen geschraubt werden kann und die Einfluß auf den Verlaut der Simulation haben: Es sind mit <code>a</code> die Wahrscheinlichkeit, mit der ein einem Feld ein Baum (nach-) wächst, <code>b</code> die Wahrscheinlichkeit, mit der ein Baum (zum Beispiel durch Blitzeinschlag) Feuer fängt und <code>s</code> die Wahrscheinlichkeit, mit welcher Dichte beim Start das Feld mit Bäumen besetzt ist. Sowohl bei Sweigart wie auch bei Scholz finden sich weiter Ideen, wie die Siumlation erweitert und ausgebaut werden kann.</p>
<p>Doch jetzt erst einmal das komplette Programm, damit Ihr die Simulation nachlesen, nachprogrammieren oder mit eigenen Ideen erweitern könnt:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Forest Fire Simulation</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> randint, uniform</span>
<span id="cb1-3"></span>
<span id="cb1-4">TS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tilesize</span></span>
<span id="cb1-5">N_ROWS, N_COLS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span></span>
<span id="cb1-6">PLOT_WIDTH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">720</span></span>
<span id="cb1-7">PLOT_HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> N_COLS<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>TS</span>
<span id="cb1-8">SCREEN_WIDTH, SCREEN_HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> N_ROWS<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>TS, N_COLS<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>TS   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 640x480 Pixel</span></span>
<span id="cb1-9"></span>
<span id="cb1-10">empty <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-11">tree <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-12">burning <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span></span>
<span id="cb1-13">w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TS</span>
<span id="cb1-14"></span>
<span id="cb1-15">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.0</span>        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Wachstumswahrscheinlichkeit in Prozent</span></span>
<span id="cb1-16">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Wahrscheinlichkeit Blitzeinschlag in Prozent</span></span>
<span id="cb1-17">s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>         <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Startbepflanzung in Prozent</span></span>
<span id="cb1-18"></span>
<span id="cb1-19">grid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb1-20">newgrid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb1-21"></span>
<span id="cb1-22">trees <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb1-23">fires <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb1-24"></span>
<span id="cb1-25"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> setup():</span>
<span id="cb1-26">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">global</span> tree_image, fire_image, no_trees, no_fire</span>
<span id="cb1-27">    size(SCREEN_WIDTH, SCREEN_HEIGHT)</span>
<span id="cb1-28">    window_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"🌲 Forest Fire Simulation 🔥"</span>)</span>
<span id="cb1-29">    window_move(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1300</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb1-30">    tree_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_image(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data/tree.png"</span>)</span>
<span id="cb1-31">    fire_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_image(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data/fire.png"</span>)</span>
<span id="cb1-32">    no_trees <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> no_fire <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-33">    create_new_forest()</span>
<span id="cb1-34">    newgrid[:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> grid[:]</span>
<span id="cb1-35">    frame_rate(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-36">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Start: Bäume = "</span>, no_trees, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" Brände = "</span>, no_fire)</span>
<span id="cb1-37">    trees.append(no_trees)</span>
<span id="cb1-38">    fires.append(no_fire)</span>
<span id="cb1-39">    </span>
<span id="cb1-40"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> draw():</span>
<span id="cb1-41">    background(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">210</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">180</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">140</span>)</span>
<span id="cb1-42">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Runde: "</span>, frame_count, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" Bäume = "</span>, no_trees, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" Brände = "</span>, no_fire)</span>
<span id="cb1-43">    display_plot()</span>
<span id="cb1-44">    trees.append(no_trees)</span>
<span id="cb1-45">    fires.append(no_fire)</span>
<span id="cb1-46">    display_forest()</span>
<span id="cb1-47">    calc_next()</span>
<span id="cb1-48">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> frame_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>:</span>
<span id="cb1-49">        no_loop()</span>
<span id="cb1-50"></span>
<span id="cb1-51"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> display_plot():</span>
<span id="cb1-52">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb1-53"></span>
<span id="cb1-54"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> create_new_forest():</span>
<span id="cb1-55">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">global</span> no_trees</span>
<span id="cb1-56">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(N_ROWS):</span>
<span id="cb1-57">        grid.append([])</span>
<span id="cb1-58">        newgrid.append([])</span>
<span id="cb1-59">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> y <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(N_COLS):</span>
<span id="cb1-60">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Erstbepflanzung Wald</span></span>
<span id="cb1-61">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> ((x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> (y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> N_ROWS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-62">                <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> (y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> N_COLS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> s):</span>
<span id="cb1-63">                grid[x].append(tree)</span>
<span id="cb1-64">                no_trees <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-65">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb1-66">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ränder bleiben leer</span></span>
<span id="cb1-67">                grid[x].append(empty)</span>
<span id="cb1-68"></span>
<span id="cb1-69"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> display_forest():</span>
<span id="cb1-70">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(N_ROWS):</span>
<span id="cb1-71">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(N_COLS):</span>
<span id="cb1-72">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> grid[i][j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> tree:</span>
<span id="cb1-73">                image(tree_image, i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>w, j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>h, w, h)</span>
<span id="cb1-74">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> grid[i][j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> burning:</span>
<span id="cb1-75">                image(fire_image, i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>w, j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>h, w, h)</span>
<span id="cb1-76"></span>
<span id="cb1-77"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> calc_next():</span>
<span id="cb1-78">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">global</span> no_trees, no_fire</span>
<span id="cb1-79">    newgrid[:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> grid[:]</span>
<span id="cb1-80">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Next Generation, Randfelder ignorieren</span></span>
<span id="cb1-81">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, N_ROWS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb1-82">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, N_COLS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb1-83">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> grid[i][j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> burning:</span>
<span id="cb1-84">                newgrid[i][j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> empty</span>
<span id="cb1-85">                no_fire <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-86">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Nachbarbaum anzünden (von-Neumann-Nachbarschaft)</span></span>
<span id="cb1-87">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> grid[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> tree:</span>
<span id="cb1-88">                    newgrid[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> burning</span>
<span id="cb1-89">                    no_trees <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-90">                    no_fire <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-91">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> grid[i][j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> tree:</span>
<span id="cb1-92">                    newgrid[i][j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> burning</span>
<span id="cb1-93">                    no_trees <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-94">                    no_fire <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-95">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> grid[i][j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> tree:</span>
<span id="cb1-96">                    newgrid[i][j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> burning</span>
<span id="cb1-97">                    no_trees <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-98">                    no_fire <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-99">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> grid[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> tree:</span>
<span id="cb1-100">                    newgrid[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> burning</span>
<span id="cb1-101">                    no_trees <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-102">                    no_fire <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-103">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Neuer Baum?</span></span>
<span id="cb1-104">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> grid[i][j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> empty:</span>
<span id="cb1-105">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> uniform(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> a:</span>
<span id="cb1-106">                    newgrid[i][j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tree</span>
<span id="cb1-107">                    no_trees <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-108">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Schlägt ein Blitz ein?</span></span>
<span id="cb1-109">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> grid[i][j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> tree:</span>
<span id="cb1-110">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> uniform(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> b:</span>
<span id="cb1-111">                    newgrid[i][j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> burning</span>
<span id="cb1-112">                    no_fire <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-113">    grid[:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> newgrid[:]</span></code></pre></div>
<p>In dem Skript sind schon Slots offengehalten, um einen Plot des Simulationsverlaufes zu erstellen. Leider weigert sich die <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/matplotlib.html">Matplotlib</a> hartnäckig, mit Py5 zusammenzuarbeiten. Daher ist meine Idee, <a href="http://blog.schockwellenreiter.de/2021/03/2021031901.html">FPlotter</a> (<a href="http://blog.schockwellenreiter.de/2021/03/2021033002.html">2</a>), meine in Processing.py implementierte »Matplotlib für Arme« wieder zu reaktivieren und in dieser Simulation einzusetzen. Das wird vermutlich mein nächster Schritt sein.</p>
<p>Ansionsten gibt es den <a href="https://github.com/kantel/py5/tree/main/forestfire">Quellcode</a> wie immer in meinem GitHub-Repositorium und die <a href="https://github.com/kantel/py5/tree/main/forestfire/data">Bilder</a> habe ich den freien (<a href="https://creativecommons.org/licenses/by/4.0/">CC-BY 4.0</a>) <a href="https://twemoji.twitter.com/">Twemojis</a> von Twitter entnommen und mit einem Graphikprogramm meines Vertrauens auf 16x16 Pixel verkleinert.</p>
<section id="verwendete-literatur" class="level3">
<h3 class="anchored" data-anchor-id="verwendete-literatur">Verwendete Literatur:</h3>
<ul>
<li>Heinz-Otto Peitgens, Hartmut Jürgens und Dietmar Saupe: <em>Bausteine des Chaos – Fraktale</em>, Berlin-Heidelberg-Stuttgart (Springer, Klett-Cotta) 1992</li>
<li>Daniel Scholz: <em>Pixelspiele – Modellieren und Simulieren mit zellulären Automaten</em>, Berlin-Heidelberg (Springer) 2014</li>
<li>Al Sweigart: <em><a href="https://inventwithpython.com/bigbookpython/">The Big Book of Small Python Projects</a> – 81 Easy Practice Programs</em>, San Francisco (No Starch Press) 2021</li>
</ul>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Fußnoten</h2>

<ol>
<li id="fn1"><p>Vergleiche Peitgen, Jürgens, Saupe: <em>Bausteine des Chaos – Fraktale</em>, Berlin-Heidelberg-Stuttgart (Klett-Cotta/Springer) 1992, Seiten 424ff. oder Scholz: <em>Pixelspiele</em>, Berlin-Heidelberg (Springer) 2014, Seiten 19ff.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Python</category>
  <category>Simulation</category>
  <category>Modellbildung</category>
  <category>Py5</category>
  <category>Processing</category>
  <guid>https://kantel.github.io/posts/2023092301_forestfire_sim_1/index.html</guid>
  <pubDate>Sat, 23 Sep 2023 17:40:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023092301_forestfire_sim_1/images/forestfiresimstage1.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Apples zweiter Flickentag in diesem Monat</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023092201_apple_updates_2/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://upload.wikimedia.org/wikipedia/commons/9/90/Les_Baigneuses-Courbet.jpg"><img src="https://kantel.github.io/posts/2023092201_apple_updates_2/images/baigneuses-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Schon zum <a href="https://kantel.github.io/posts/2023090901_apple_flickentag/">zweiten Mal in diesem Monat</a> gibt es aus Cupertino einen Patchday für alle Betriebssystem, die von der Firma mit dem angebissenen Apfel im Logo noch unterstützt werden. Das läßt eine echte Gefahr vermuten und daher sollten die Updates möglichst zeitnah eingespielt werden. Doch – wie immer – der Reihe nach:</p>
<section id="apple-veröffentlicht-macos-ventura-13.6" class="level3">
<h3 class="anchored" data-anchor-id="apple-veröffentlicht-macos-ventura-13.6">Apple veröffentlicht macOS Ventura 13.6</h3>
<p>Apple hat das Update auf die neue Betriebssystemversion macOS Ventura 13.6 freigegeben und korrigiert damit auch wieder <a href="https://support.apple.com/de-de/HT213931">Sicherheitsprobleme</a>.</p>
<p>Das Update steht über die Systemeinstellungen zur Verfügung.</p>
</section>
<section id="apple-veröffentlicht-sicherheitsupdates-für-macos-big-sur-und-monterey" class="level3">
<h3 class="anchored" data-anchor-id="apple-veröffentlicht-sicherheitsupdates-für-macos-big-sur-und-monterey">Apple veröffentlicht Sicherheitsupdates für macOS Big Sur und Monterey</h3>
<p>Gleichzeitig hat Apple auch das Sicherheitsupdate auf <a href="https://support.apple.com/de-de/HT213930">macOS Big Sur</a> (nur Safari) und macOS <a href="https://support.apple.com/de-de/HT213932">Monterey 12.7</a> freigegeben.</p>
<p>Die Updates stehen wie üblich über die Softwareaktualisierung bereit.</p>
</section>
<section id="apple-veröffentlicht-ios-17.0.1-und-ipados-17.0.1" class="level3">
<h3 class="anchored" data-anchor-id="apple-veröffentlicht-ios-17.0.1-und-ipados-17.0.1">Apple veröffentlicht iOS 17.0.1 und iPadOS 17.0.1</h3>
<p>Apple hat das Update auf iOS 17.0.1 und iPadOS 17.0.1 bereitgestellt. Die Updates korrigieren wieder <a href="https://support.apple.com/de-de/HT213926">kritische Sicherheitslücken</a> und sollten daher zügig eingefahren werden.</p>
<p>Das Update auf auf iOS 17.0.1 iPadOS 17.0.1 kann über OTA (<em>Over the Air</em> - in <code>Einstellungen &gt; Allgemein &gt; Softwareaktualisierung</code>, an ausreichender Akku-Kapazität und freien Speicherplatz sollte gedacht werden) oder über iTunes erfolgen.</p>
<p>Eine vorherige Sicherung des Geräts ist wie immer sehr zu empfehlen.</p>
</section>
<section id="apple-veröffentlicht-ein-sicherheitsupdate-auf-iosipados-für-ältere-systeme" class="level3">
<h3 class="anchored" data-anchor-id="apple-veröffentlicht-ein-sicherheitsupdate-auf-iosipados-für-ältere-systeme">Apple veröffentlicht ein Sicherheitsupdate auf iOS/iPadOS für ältere Systeme</h3>
<p>Apple hat gleichzitig das Update auf iOS/iPadOS 16.7 für ältere Systeme bereitgestellt und behebt damit ebenfalls <a href="https://support.apple.com/de-de/HT213927">kritische Sicherheitsprobleme</a>.</p>
<p>Wie oben gilt: Das Update auf auf iOS/iPadOS 16.7 kann über OTA (<em>Over the Air</em> - in <code>Einstellungen &gt; Allgemein &gt; Softwareaktualisierung</code>, an ausreichender Akku-Kapazität und freien Speicherplatz sollte gedacht werden) oder über iTunes erfolgen.</p>
<p>Auch hier ist eine vorherige Sicherung des Geräts wie immer sehr zu empfehlen.</p>
</section>
<section id="apple-veröffentlicht-ios-17.0.2-für-die-neuen-iphone-15" class="level3">
<h3 class="anchored" data-anchor-id="apple-veröffentlicht-ios-17.0.2-für-die-neuen-iphone-15">Apple veröffentlicht iOS 17.0.2 für die neuen iPhone 15</h3>
<p>Apple hat ebenfalls das Update auf iOS 17.0.2 für die ab heute verfügbaren Modelle iPhone 15 bereitgestellt. Die Updates korrigieren wieder kritische Sicherheitslücken und sollten daher zügig eingefahren werden, sobald das neue Gerät ausgepackt wurde. 😉</p>
<p>Auch das Update auf iOS 17.0.2 kann über OTA (<em>Over the Air</em> - in <code>Einstellungen &gt; Allgemein &gt; Softwareaktualisierung</code>, an ausreichender Akku-Kapazität und freien Speicherplatz sollte gedacht werden) oder über iTunes erfolgen.</p>
<p>Und wie immer: Eine vorherige Sicherung des Geräts ist sehr zu empfehlen.</p>
</section>
<section id="apple-veröffentlicht-watchos-10.0.1" class="level3">
<h3 class="anchored" data-anchor-id="apple-veröffentlicht-watchos-10.0.1">Apple veröffentlicht watchOS 10.0.1</h3>
<p><em>Last but not least</em> hat auch Apple seine Uhr nicht vergessen und hat für die Apple Watch <a href="https://support.apple.com/de-de/HT213928">watchOS 10.0.1</a> und für ältere System <a href="https://support.apple.com/de-de/HT213929">watchOS 9.6.3</a> bereitgestellt und damit auch wieder Sicherheitsprobleme behoben.</p>
<p>Die Aktualisierung wird über die Apple-Watch-App auf dem iPhone unter <code>Allgemein &gt; Softwareupdate</code>gestartet. Dabei sollte sich die Uhr in Reichweite des iPhones befinden, mit dem Ladekabel verbunden und mindestens zu 50 Prozent geladen sein.</p>
<p><em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<p><em>(Bild: Gustave Courbet (1819-1877): <a href="https://en.wikipedia.org/wiki/The_Bathers_%28Courbet%29">Les Baigneuses</a>, 1853. Bildquelle: <a href="https://en.wikipedia.org/wiki/File:Les_Baigneuses-Courbet.jpg">Wikimedia Commons</a>)</em></p>


</section>

 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2023092201_apple_updates_2/index.html</guid>
  <pubDate>Fri, 22 Sep 2023 18:35:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023092201_apple_updates_2/images/baigneuses.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Simulationen und Visualisierung mit Python: Matplotlib-Tutorials</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023092101_matplotlib_tuts/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://miro.medium.com/v2/resize:fit:1100/format:webp/1*ScqcMcxqc46jzRon-Iw1TQ.png"><img src="https://kantel.github.io/posts/2023092101_matplotlib_tuts/images/datavizseaborn-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Im Nachtrag zu meinem <a href="https://kantel.github.io/posts/2023092001_game_engines_und_mehr/">gestrigen Beitrag</a>, in dem ich ja unter anderem mein wiedererwachtes Interesse an Simulationen und Visualisierungen mit Python und der <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/matplotlib.html">Matplotlib</a> bekundete, habe ich etwas mehr als eine Handvoll Tutorials hervorgekramt, die meine noch vorhandenen Lücken bei der Matplotlib schließen sollen. Denn besonders bei der Frage, wie ich Animationen mit der Matplotlib erstelle, schwimme ich noch ein wenig. Aber auch andere Topics können eine Auffrischung durchaus vertragen.</p>
<ul>
<li>Den Anfang macht der anderthalbstündige Vortrag »<a href="https://www.youtube.com/watch?v=g8F1hufnuLU">Introduction to Matplotlib for visualization in Python</a>«, den <em>Tim Hoffmann</em> auf der EuroSciPy 2023 in Basel gehalten hat. In <a href="https://pretalx.com/euroscipy-2023/talk/AHXAXM/">seinem Beitrag</a> hatte <em>Tim Hoffmann</em> sowohl Anfänger wie auch schon erfahrene Nutzer im Visier.</li>
<li>Das viertelstündige Video-Tutorial »<a href="https://www.youtube.com/watch?v=7RgoHTMbp4A">Matplotlib Animations in Python</a>« des YouTube-Users <em>NeuralNine</em> klingt wie für mich gemacht.</li>
<li>Für (interaktive) Simulation hochinteressant ist auch das knapp halbstündige »<a href="https://www.youtube.com/watch?v=Hn24Q9MPAsk">Matplotlib Widgets – Creating Interactive Plots with Sliders</a>« von <em>Finxter</em>.</li>
<li>Manchmal funktionieren Visualisierungen mit Karten besser. Das viertelstündige Video »<a href="https://www.youtube.com/watch?v=5G-1k4CNChI">Plotting maps with Geopandas and Matplotlib</a>« zeigt, wie das geht.</li>
</ul>
<p>Da ja <a href="http://cognitiones.kantel-chaos-team.de/produktivitaet/visualstudiocode.html">Visual Studio Code</a> zu meinem beforzugten Texteditor mutiert ist, möchte ich den halbstündigen Vortrag »<a href="https://www.youtube.com/watch?v=eneTYlnYt9A">Python and VS Code: Revolutionizing The Way You Do Data Science</a>«, den <em>Jeffrey Mew</em> auf der EuroPython 2022 in Dublin gehalten hat, nicht unerwähnt lassen. Jeffrey arbeitet bei Microsoft an der Entwicklung von Data-Science- und AI-Tools, er sollte also wissen, wovon er spricht. Und außerdem ist er Halter eines kleinen <a href="https://de.wikipedia.org/wiki/Welsh_Corgi_Pembroke">Corgis</a>, damit ist er <em>per se</em> sympathisch.</p>
<p>Und keine Python-Linkschleuder ohne <em>Tech with Tim</em>. Dieses Mal hat er sich mit seinem einstündigen Tutorial »<a href="https://www.youtube.com/watch?v=lwquHLH958w">Visualizing SpaceX Launches With Python</a>« für die Aufnahme qualifiziert. Den <a href="https://github.com/techwithtim/SpaceX-Launch-Visualization">Quellcode für dieses Tutorial</a> gibt es – wie immer bei Tim – in seinem GitHub-Repositorium.</p>
<p><strong>War sonst noch was?</strong> Ach ja, <a href="https://seaborn.pydata.org/">Seaborn</a> ist eine <em>High Level</em>-Visualisierung-Bibliothek, die auf der Matplotlib aufsetzt. Die aktuelle Version ist 0.12.2 und im letzten Jahr freigegeben worden. Anläßlich der Veröffentlichung von Seaborn 0.11 vor drei Jahren gab es von <em>Soner Yıldırım</em> einen Beitrag auf Medium.com (daher eventuell hinter einer Bezahlschranke versteckt – sorry), der <a href="https://towardsdatascience.com/seaborn-0-11-just-released-with-great-new-features-c5b45efad7e2">in die neuen Features einführte</a>. Wenn ich mit der Matplotlib durch bin, sollte ich mir auch Seaborn einmal genauer anschauen. <em>Still digging!</em></p>



 ]]></description>
  <category>Python</category>
  <category>Matplotlib</category>
  <category>Seaborn</category>
  <category>Visualisierung</category>
  <category>Visual Studio Code</category>
  <category>Simulation</category>
  <guid>https://kantel.github.io/posts/2023092101_matplotlib_tuts/index.html</guid>
  <pubDate>Thu, 21 Sep 2023 14:55:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023092101_matplotlib_tuts/images/datavizseaborn.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Zurück zum Hacken mit Code: microStudio, Python, Pygame und/oder Py5</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023092001_game_engines_und_mehr/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53199499558/"><img src="https://kantel.github.io/posts/2023092001_game_engines_und_mehr/images/microstudiofirststeps-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Wie <a href="https://kantel.github.io/posts/2023091901_update_game_engines/">gestern schon angedeutet</a> möchte ich für ein paar Tage eine Pause bei meinem <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/twine2.html">Twine</a>- und <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/renpy.html">Ren’Py</a>-Projekt einlegen. Denn die Menge der Tutorials, die ich in den letzten Tagen herausgehauen habe, hat mich ein wenig ausgelaugt, und so möchte ich erst mal etwas anderes anstellen, um danach mit frischer Kraft mich wieder meinen Twine-Tutorials zu widmen.</p>
<p>Angestachelt dazu hat mich auch das <a href="https://kantel.github.io/posts/2023091502_renpy_statt_unity/">Unity-Desaster</a>, das in den letzten Tagen durch die Spieleentwicklerszene geisterte. Die Suche nach freien Alternativen zu <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/unity.html">Unity</a> hat auch mich erfaßt, doch leider werde ich immer noch nicht mit dem als Top-Alternative gehandeltem <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/godot.html">Godot</a> wirklich warm. Das liegt auch daran, daß mein räumliches Vorstellungsvermögen anscheinend begrenzt ist und ich Schwierigkeiten habe, ein Spiel in 3D zu konzipieren. Und für 2D-Spiele scheint mir Godot doch ein wenig <em>Overkill</em> zu sein.</p>
<p>Doch in meinen Kommentaren erinnerte mich ein Leser an <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/microstudio.html">microStudio</a>. Diese freie (MIT-Lizenz) 2D-Game-Engine hatte ich im Mai letzten Jahres schon einmal <a href="http://blog.schockwellenreiter.de/2022/05/2022053001.html">im Schockwellenreiter vorgestellt</a> und wollte sie damals auch unbedingt testen. Doch leider ist dies im Alltagsgeschäft untergegangen und in Vergessenheit geraten.</p>
<p>Nun habe ich die Gelegenheit am Schopf gefaßt und das Programm wieder hervorgekramt. Per Default wird die Engine mit <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/microscript.html">microScript</a> programmiert, einer <a href="http://cognitiones.kantel-chaos-team.de/programmierung/lua.html">Lua</a>-ähnlichen Programmiersprache, die nach JavaScript übersetzt. Aber auch die Programmierung in Lua selber, JavaScript direkt oder gar Python (genauer: <a href="https://brython.info/">Brython</a>) ist möglich<sup>1</sup>.</p>
<p>microStudio ist so etwas wie die freie Fantasykonsole <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/tic80.html">TIC-80</a> (oder das proprietäre Pico-8), nur ohne deren gewollten, konzeptionellen, nostalgischen Einschränkungen. Und ich würde – nicht nur wegen der Beschränkung auf 2D – die Engine nicht unbedingt als Unity-Alternative sehen, sondern eher als freie und plattformübergreifende (Windows, macOS, Linux, Raspberry Pi) Alternative zum in der Indy-Szene immer noch beliebten, aber proprietären <a href="https://de.wikipedia.org/wiki/Game_Maker">Game Maker</a> (und dem in der aktuellen Version nur noch unter Windows lauffähigen <a href="https://de.wikipedia.org/wiki/GameMaker:_Studio">GameMaker: Studio</a>).</p>
<p>Das Projekt ist noch recht jung und so ist auch die Literatur und die Anzahl der (Video-) Tutorials etwas knapp. Aber ein paar nette Tutorials habe ich doch für mich und Euch zusammengesucht (sie behandeln als darunterliegende Programmiersprache alle microScript):</p>
<ul>
<li>Die <a href="https://sites.google.com/ed.act.edu.au/games-programming/game-elements/">Tutorials von mrLman</a> werden sogar auf der microStudio-Homepage <a href="https://microstudio.dev/community/resources/game-programming-tutorials-by-mrlman/52/">empfohlen</a>.</li>
<li><a href="https://prog.world/basics-of-the-microscript-language/">Basics of the microScript language</a> ist ein sehr ausführliches und (ich glaube) vollständiges Tutorial zu microScript.</li>
<li><a href="https://www.youtube.com/playlist?list=PLBe3We7ebJUQgy3ZRJfIcc2LH4sVOjPgg">Design, Code, Play</a> ist eine Playlist der <em>Makercademy</em> mit drei Videos zwischen je ein- und zweistündiger Spieldauer.</li>
<li>Und <em>last but not least</em> hat der Kanal von <em>Retro Nick</em>, der sich sonst eher mit BASIC und (Free-) Pascal beschäftigt, auch einige Videos zu microStudio veröffentlicht (leider keine aussagekräftige Playlist). Gefunden habe ich dort:
<ul>
<li><a href="https://www.youtube.com/watch?v=1-1qmtFKudI">microStudio - Easy Game Development</a> (25 Minuten)</li>
<li><a href="https://www.youtube.com/watch?v=4wM3YBtAYp8">microStudio - My Space Invaders</a> (Fünf Minuten)</li>
<li><a href="https://www.youtube.com/watch?v=isukdmx0fOk">microStudio 2D Arrays And Other Problems</a> (Zwölf Minuten)</li>
</ul></li>
</ul>
<p>Schaun wir mal, was ich mit diesen Informationen anstellen werde …</p>
<div style="float: right; margin-left: 12px; margin-top: 6px;">
<a href="https://inventwithpython.com/bigbookpython/"><img src="https://kantel.github.io/posts/2023092001_game_engines_und_mehr/images/cover_bigbookpython_thumb.jpg" class="img-fluid"></a>&nbsp;<a href="https://inventwithpython.com/recursion/"><img src="https://kantel.github.io/posts/2023092001_game_engines_und_mehr/images/cover_recursion_thumb.jpg" class="img-fluid"></a>
</div>
<p><strong>Doch nun noch eine zweite Baustelle</strong>: Eher zufällig hat mir YouTube das Video »<a href="https://www.youtube.com/watch?v=o5ALfgFhYkQ">Forest fire simulation tutorial with PyGame</a>« von <em>Steve’s Coding Lab</em> vorgeschlagen<sup>2</sup>. Der hat in <em>Al Sweigarts</em> »<a href="https://inventwithpython.com/bigbookpython/">The Big Book of Small Python Projects</a>« gestöbert und die dort behandelte <a href="https://inventwithpython.com/bigbookpython/project29.html">Waldbrand-Simulation</a> nach <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a> übertragen und die Auswertung mit der <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/matplotlib.html">Matplotlib</a> vorgenommen. Das hatte ich auch schon einmal im <em>Schockwellenreiter</em> <a href="http://blog.schockwellenreiter.de/2022/08/2022082901.html">vorgestellt</a> und vor Jahren eine <a href="http://py.kantel-chaos-team.de.s3-website-us-east-1.amazonaws.com/12zellautom/#der-waldbrand-simulator">graphische Version</a> auch schon einmal in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processingpy.html">Processing.py</a> implementiert. Jetzt hätte ich große Lust, die Simulation auch einmal entweder in Pygame oder – noch abgefahrener – in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/py5.html">Py5</a> zu programmieren (im letzten Fall natürlich ebenfalls unter Einbeziehung der Matplotlib).</p>
<p>Das muß doch irgendwie zu machen sein. Auf jeden Fall habe ich mir schon einmal die Bücher von <em>Al Sweigart</em> (neben dem »Big Book of Small Python Projects« auch das »<a href="https://inventwithpython.com/recursion/">Recursive Book of Recursion</a>« – beide Bücher könnt Ihr online für umme lesen) aus meinen Bücherregalen <a href="http://blog.schockwellenreiter.de/2022/08/2022083102.html">wieder hervorgekramt</a> und hoffe, daraus weitere Inspirationen zu ziehen.</p>
<p>Abschließen möchte ich diesen Beitrag mit den beiden je etwa halbstündigen Videos »<a href="https://www.youtube.com/watch?v=dTX5nOoIXI0">Random Walk in 1D with Python</a>« und »<a href="https://www.youtube.com/watch?v=tJ4eng0EnyE">Random Walk in 2D with Python</a>« von <em>Abhijit Kar Gupta</em>. Auch hier juckt es mich in den Fingern, eine (Re-) Implementierung in Py5 oder in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/turtlepython.html">Pythons Turtle</a> (die habe ich in den letzten Wochen ebenfalls sträflich vernachlässigt) zu versuchen.</p>
<p>Ihr seht, neben Twine und Ren’Py habe ich noch etliche andere Baustellen zu bearbeiten. Ich habe daher zu tun. <em>Still digging!</em></p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Fußnoten</h2>

<ol>
<li id="fn1"><p>Auch wenn ich testweise mal mit Brython und microStudio herumegespielt habe (siehe <a href="https://www.flickr.com/photos/schockwellenreiter/53199499558/">Screenshot</a>), werde ich bei weiteren Versuchen mich erst einmal auf microScript beschränken. Die Dokumentation für Brython in microStudio scheint mir doch noch zu spärlich. Aber sollte ich mit microStudio und microScript vertrauter werden, werde ich mich eventuell doch an die Python-Implementierung wagen.↩︎</p></li>
<li id="fn2"><p>Das Video ist Teil der Playlist »<a href="https://www.youtube.com/playlist?list=PLnvbxuUibBuV1CP-DKKKDCy0yPau7re-7">Python – Intermediate</a>«. Daraus ist im Zusammenhang mit diesem Beitrag auch noch das <a href="https://www.youtube.com/watch?v=M6x6m3c7khs">Video zu Conway’s Game of Life</a> (15 Minuten) interessant.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Spieleprogrammierung</category>
  <category>microStudio</category>
  <category>Pygame</category>
  <category>Py5</category>
  <category>Simulation</category>
  <guid>https://kantel.github.io/posts/2023092001_game_engines_und_mehr/index.html</guid>
  <pubDate>Wed, 20 Sep 2023 15:25:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023092001_game_engines_und_mehr/images/microstudiofirststeps.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
