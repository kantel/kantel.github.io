<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Der Schockwellenreiter</title>
<link>https://kantel.github.io/index.html</link>
<atom:link href="https://kantel.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description>Schockwellenreiter</description>
<generator>quarto-1.3.433</generator>
<lastBuildDate>Wed, 09 Aug 2023 15:55:00 GMT</lastBuildDate>
<item>
  <title>Sicherheitsupdate für Adobe Reader und Acrobat</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023080901_update_reader_acrobat/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi1LZCs_LelzS5bB2vf3qqiSjfjfk1tzmu0Gx7S3VOYvC8qX0T24lmVh0jIR-NEc6DF_RwdfNLlheSqhAKnAuMeRdtGY3PZvnTZAAq6c-kMf-YKW-7WTrP1w1rmQIrb9mOVNKSVjUzXVJjrwjt57x0ZL6XC94Xn1BgSdVV8CXhcO4oA62PPne_G0YazFV4q/s1682/may%208%201910%20powers.jpg"><img src="https://kantel.github.io/posts/2023080901_update_reader_acrobat/images/bildaufhaengen-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Adobe liefert wieder <a href="https://helpx.adobe.com/security/products/acrobat/apsb23-30.html">Korrekturen für Sicherheitslücken (APSB23-30)</a> im Reader und in Acrobat (unter Windows und Mac).</p>
<p>Das Update gelingt am einfachsten über den internen Update-Mechanismus. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<p><em>(Bild: <a href="http://john-adcock.blogspot.com/2023/07/t-e-powers-two-obituaries.html">Thomas E. Powers</a> (1870-1939), Chicago Examiner, 8. Mai 1910)</em></p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2023080901_update_reader_acrobat/index.html</guid>
  <pubDate>Wed, 09 Aug 2023 15:55:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023080901_update_reader_acrobat/images/bildaufhaengen.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>»The Nature of Code« in Python (Py5): Ein einfaches Partikelsystem (Stage 1)</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023080802_py5_particelsystem_1/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53099848727/"><img src="https://kantel.github.io/posts/2023080802_py5_particelsystem_1/images/partikelsystempy5-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Ich habe noch gestern meine <a href="https://kantel.github.io/posts/2023080701_partikelsysteme/">Ankündigung</a> wahrgemacht und ein einfaches <a href="https://de.wikipedia.org/wiki/Partikelsystem">Partikelsystem</a> in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/py5.html">Py5</a> implementiert. Das ging ziemlich flott, nicht nur, weil ich ähnliches schon einmal in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processingpy.html">Processing.py</a> <a href="http://blog.schockwellenreiter.de/2019/05/2019050501.html">programmiert</a>, sondern ich auch schon einmal <a href="http://blog.schockwellenreiter.de/2021/08/2021081501.html">Versuche</a> mit der <a href="http://blog.schockwellenreiter.de/2018/05/2018052501.html">NodeBox 1</a> und sogar mit <a href="http://blog.schockwellenreiter.de/2018/05/2018052501.html">Pythons Schildkröte</a> angestellt hatte. Alle diese Programme basierten auf der <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processing.html">Processing (Java)</a>-Version eines Partikelsystems, die <em>Daniel Shiffman</em> in seinem wunderbaren Buch »<a href="https://natureofcode.com/">The Nature of Code</a> im <a href="https://natureofcode.com/book/chapter-4-particle-systems/">vierten Kapitel</a> (Seiten 143-188) implementiert hatte.</p>
<div style="float: right; margin-left: 12px; margin-top: 6px;">
<a href="https://natureofcode.com/"><img src="https://kantel.github.io/posts/2023080802_py5_particelsystem_1/images/noc.jpg" class="img-fluid"></a>
</div>
<p>Dadurch fiel mir der Port nach Py5 nicht allzu schwer, dennoch habe ich dabei einiges über Py5 und seine Besonderheiten gelernt. Als erstes: Ich hatte die Klassen <code>Particle()</code> und <code>RectParticle()</code> in eine separate Datei ausgelagert und daher endlich verstanden, welche <a href="https://kantel.github.io/posts/2023072402_py5_update/">Probleme seit dem letzten Update</a> mit dem <code>import</code>-Befehl im Py5-<em><a href="http://py5coding.org/content/importing_py5_code.html#importing-imported-mode-code">Imported Mode</a></em> nun behoben seien. Das mir die Probleme bisher nicht unterkamen, lag daran, daß ich nur Bibliotheken/Module importiert hatte, die nicht auf Py5 basierten und daher auch nicht den <code>JPype</code>-Übersetzer aufrufen mußten. Meine beiden Partikel-Klassen waren aber Py5-Klassen und mußten daher <code>JPype</code> passieren. Nur: Woher sollte <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/thonny.html">Thonny</a> das wissen?</p>
<p>Die Lösung fand ich in der <a href="https://py5coding.org/content/importing_py5_code.html#importing-imported-mode-code">Py5-Dokmentation</a>: Der Datei muß als »magischer Kommentar« die Zeile</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># PY5 IMPORTED MODE CODE</span></span></code></pre></div>
<p>vorangestellt werden (es muß nicht unbedingt die erste Kommentarzeile sein, aber sie sollte vor den eigentlichen Codezeilen stehen). Und dieser »magische Kommentar« ist unabhängig von der Groß- oder Kleinschreibung: <code># py5 imported mode code</code> funktioniert ebenfalls, auch <code># py5 Imported Mode code</code> bringt keine Probleme. Ich empfehle aber zur besseren Hervorhebung und um die Zeile von den gewöhnlichen Kommentaren zu unterscheiden, die Großschreibung.</p>
<p>Der zweite Stolperstein war ein seltsamer – denn darüber stolpern vermutlich nur diejenigen, die Processings PDE gewohnt sind. Dieser war es nämlich völlig egal, welcher Tab mit welcher Datei gerade offen war (den Fokus hatte), der <code>Run</code>-Befehl startete immmer die Datei mit dem jeweiligen Hauptprogramm.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53102946740/"><img src="https://kantel.github.io/posts/2023080802_py5_particelsystem_1/images/falschertabpy5.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Hier zeigt Thonny im Py5-Mode ein anderes Verhalten. Hat man zum Beispiel den Tab mit den Klassen-Definitionen offen, dann versucht der Interpreter, diese Datei zu starten. Und da er durch das »magische Kommando« <code># PY5 IMPORTED MODE CODE</code> weiß, das dies ein Py5-Programm ist, startet er ohne eine Fehlermeldung ein »leeres« Py5-Programm mit dem Default-Fensterchen (siehe <a href="https://www.flickr.com/photos/schockwellenreiter/53102946740/">Screenshot</a>).</p>
<p>Eigentlich ist das ein logisches Verhalten, aber glaubt mir, ich habe lange geflucht und den Fehler bei mir und in meinem Code gesucht, bis ich darauf gekommen bin.</p>
<p>Nachdem ich nun diese Hürden überwunden hatte, konnte ich mich endlich an meinem Partikelsystem erfreuen. Es besitzt einen <em>Emitter</em>, der zufällig entweder Scheiben oder Rechtecke (genauer: Quardrate) ausstößt, Diese fallen nach unten, und verblassen dabei, je länger sie leben (im System sind). Ist ihre Lebenszeit abgelaufen, werden sie aus dem System entfernt. Dafür habe ich – in Anlehnung an <em>Daniel Shiffmans</em> Sketch, eine Klasse <code>Particle()</code> entworfen:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Particle():</span>
<span id="cb2-2">    </span>
<span id="cb2-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, _x, _y):</span>
<span id="cb2-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Py5Vector(_x, _y)</span>
<span id="cb2-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Py5Vector(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>)</span>
<span id="cb2-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Py5Vector(random(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>), random(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>))</span>
<span id="cb2-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random_choice(codingtrain)</span>
<span id="cb2-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">255.0</span></span>
<span id="cb2-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span></span>
<span id="cb2-10">        </span>
<span id="cb2-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> run(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.update()</span>
<span id="cb2-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.show()</span>
<span id="cb2-14">        </span>
<span id="cb2-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-16">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.acc</span>
<span id="cb2-17">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel</span>
<span id="cb2-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> random(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-19">        </span>
<span id="cb2-20">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> show(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-21">        stroke(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan)</span>
<span id="cb2-22">        fill(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan)</span>
<span id="cb2-23">        circle(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d)</span>
<span id="cb2-24">        </span>
<span id="cb2-25">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> is_not_alive(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-26">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb2-27">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb2-28">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb2-29">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span></code></pre></div>
<p>Dabei habe ich dann den dritten Stolperstein überwinden müssen: <code>is_dead</code> ist in Py5 ein reserviertes Wort, daher habe ich die Methode <code>is_not_alive()</code> genannt.</p>
<p>Die Klasse <code>RectParticle()</code> erbt von <code>Particle</code>. Daher waren im <em>Constructor</em> nur der <code>rect_mode(CENTER)</code> (wird für die Rotation der Quadrate gebraucht) und der Rotationswinkel zusätzlich nötig:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> RectParticle(Particle):</span>
<span id="cb3-2">    </span>
<span id="cb3-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, _x, _y):</span>
<span id="cb3-4">        Particle.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, _x, _y)</span>
<span id="cb3-5">        rect_mode(CENTER)</span>
<span id="cb3-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rota <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PI<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span></code></pre></div>
<p>Und die Methode <code>show()</code> mußte – damit die Quadrate rotieren – komplett überschrieben werden. Hier kam die von mir heiß geliebte (weil in meinem Augen »pythonischere«) Sprachkonstruktion mit dem <code>with</code>-Statement zum Einsatz:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> show(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-2">        stroke(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan)</span>
<span id="cb4-3">        fill(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan)</span>
<span id="cb4-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> push_matrix():</span>
<span id="cb4-5">            translate(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y)</span>
<span id="cb4-6">            rotate(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rota)</span>
<span id="cb4-7">            rect(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb4-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rota <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> random(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.02</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.10</span>)</span></code></pre></div>
<p>Als zusätzliche Reminiszenz an <em>Daniel Shiffman</em> und seinem <a href="https://thecodingtrain.com/">Coding Train</a> habe ich die Partikel noch mit der <a href="http://cognitiones.kantel-chaos-team.de/multimedia/farbpaletten/codingtrainfarben.html">Coding Train Farbpalette</a> eingefärbt.</p>
<p>Nun zum kompletten Programm, damit Ihr auch alles nachlesen, nachvollziehen, nachprogrammieren und weiterentwickeln könnt. Das Hauptprogramm (<code>particles01.py</code>) ist – dank der Partikelklassen – von erfrischender Kürze:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> particles <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Particle, RectParticle</span>
<span id="cb5-2"></span>
<span id="cb5-3">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span></span>
<span id="cb5-4">START_X, START_Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span></span>
<span id="cb5-5"></span>
<span id="cb5-6">particles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb5-7"></span>
<span id="cb5-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> setup():</span>
<span id="cb5-9">    size(WIDTH, HEIGHT)</span>
<span id="cb5-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># window_move(1400, 30)</span></span>
<span id="cb5-11">    window_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Partikelsystem 1"</span>)</span>
<span id="cb5-12">    </span>
<span id="cb5-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> draw():</span>
<span id="cb5-14">    background(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">49</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">197</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">244</span>)   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Hellblau</span></span>
<span id="cb5-15">    change <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb5-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> change <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>:</span>
<span id="cb5-17">        particles.append(Particle(START_X, START_Y))</span>
<span id="cb5-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb5-19">        particles.append(RectParticle(START_X, START_Y))</span>
<span id="cb5-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(particles) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb5-21">        particles[i].run()</span>
<span id="cb5-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> particles[i].is_not_alive():</span>
<span id="cb5-23">            particles.pop(i)</span></code></pre></div>
<p>Die (auskommentierte) Zeile <code>window_move(1400, 30)</code> ist ein Hack, der das Ausgabefenster auf meinen zweiten Monitor positioniert. Ihr solltet sie daher nur verwenden, wenn Ihr ebenfalls einen zweiten Bildschirm besitzt und dessen Pixelkoordinaten kennt.</p>
<p>Etwas fetter ist dann schon die Datei <code>particles.py</code> mit den beiden Klassen:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># PY5 IMPORTED MODE CODE</span></span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Coding Train Farbpalette</span></span>
<span id="cb6-4">codingtrain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">240</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">37</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">248</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">158</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">248</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">239</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">34</span>) , (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">240</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">99</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">164</span>),</span>
<span id="cb6-5">               (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">146</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">82</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">161</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">129</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">122</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">198</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">98</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">199</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">119</span>)]</span>
<span id="cb6-6"></span>
<span id="cb6-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Particle():</span>
<span id="cb6-8">    </span>
<span id="cb6-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, _x, _y):</span>
<span id="cb6-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Py5Vector(_x, _y)</span>
<span id="cb6-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Py5Vector(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>)</span>
<span id="cb6-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Py5Vector(random(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>), random(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>))</span>
<span id="cb6-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random_choice(codingtrain)</span>
<span id="cb6-14">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">255.0</span></span>
<span id="cb6-15">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span></span>
<span id="cb6-16">        </span>
<span id="cb6-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> run(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb6-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.update()</span>
<span id="cb6-19">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.show()</span>
<span id="cb6-20">        </span>
<span id="cb6-21">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb6-22">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.acc</span>
<span id="cb6-23">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel</span>
<span id="cb6-24">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> random(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb6-25">        </span>
<span id="cb6-26">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> show(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb6-27">        stroke(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan)</span>
<span id="cb6-28">        fill(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan)</span>
<span id="cb6-29">        circle(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d)</span>
<span id="cb6-30">        </span>
<span id="cb6-31">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> is_not_alive(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb6-32">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb6-33">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb6-34">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb6-35">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb6-36">        </span>
<span id="cb6-37"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> RectParticle(Particle):</span>
<span id="cb6-38">    </span>
<span id="cb6-39">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, _x, _y):</span>
<span id="cb6-40">        Particle.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, _x, _y)</span>
<span id="cb6-41">        rect_mode(CENTER)</span>
<span id="cb6-42">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rota <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PI<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb6-43">    </span>
<span id="cb6-44">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> show(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb6-45">        stroke(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan)</span>
<span id="cb6-46">        fill(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lifespan)</span>
<span id="cb6-47">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> push_matrix():</span>
<span id="cb6-48">            translate(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y)</span>
<span id="cb6-49">            rotate(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rota)</span>
<span id="cb6-50">            rect(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb6-51">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rota <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> random(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.02</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.10</span>)</span></code></pre></div>
<p>Auf meinem betagten MacBook Pro (von 2012) läuft der Sketch gerade noch in erträglicher Geschwindigkeit. Wer über potentere Hardware verfügt, kann ja mal versuchen, den <code>lifespan</code> der Partikel zu verlängern.</p>
<p>Natürlich sind die Dateien auch in meinem <a href="https://github.com/kantel/py5/tree/main/noc">GitHub-Repositorium</a> abgelegt (<a href="https://github.com/kantel/py5/blob/main/noc/particlesys01.py">particles01.py</a> und <a href="https://github.com/kantel/py5/blob/main/noc/particles.py">particles.py</a>). Ich möchte die Experimente gerne noch ein wenig fortführen. Also seid auf weitere Beiträge zu Py5 gespannt. <em>Still digging!</em></p>



 ]]></description>
  <category>Py5</category>
  <category>Processing</category>
  <category>Python</category>
  <category>Creative Coding</category>
  <category>Nature of Code</category>
  <guid>https://kantel.github.io/posts/2023080802_py5_particelsystem_1/index.html</guid>
  <pubDate>Tue, 08 Aug 2023 18:05:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023080802_py5_particelsystem_1/images/partikelsystempy5.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Google schließt am »August-Patchday« wieder Sicherheitslücken in Android</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023080801_android_patchday/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://cafans.b-cdn.net/images/Category_2305/subcat_207318/xKGxG4F6_1906201900281gpadd.jpg"><img src="https://kantel.github.io/posts/2023080801_android_patchday/images/cubaoccupation-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Google hat mit seinem monatlichen <a href="https://source.android.com/docs/security/bulletin/2023-08-01?hl=en">Sicherheitsupdate für Android</a> (und damit auch auf seinen <a href="https://source.android.com/docs/security/bulletin/pixel/2023-08-01?hl=de">Pixel-Geräten</a> – derzeit noch nicht verfügbar) wieder Sicherheitslücken geschlossen.</p>
<p>Die Updates werden so nach und nach per OTA <em>(over the air)</em> auf Pixel Tablet, Pixel Fold, Pixel 7a, Pixel 7/7 pro, Pixel 6a, Pixel 6/6 pro, Pixel 5, Pixel 4a 5G, Pixel 4a verteilt.</p>
<p>Die anderen Hersteller werden wie üblich in Bälde nachziehen, sofern sie überhaupt noch entsprechenden Support leisten. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<p><em>(Bild: <a href="https://www.comicartfans.com/galleryroom.asp?gsub=207318">Thomas E. Powers</a> (1870-1939), <a href="https://www.comicartfans.com/gallerypiece.asp?piece=1642501">William Howard Taft – Occupation of Cuba</a>, 1906)</em></p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2023080801_android_patchday/index.html</guid>
  <pubDate>Tue, 08 Aug 2023 13:50:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023080801_android_patchday/images/cubaoccupation.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Partikelsysteme programmieren</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023080701_partikelsysteme/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://thecodingtrain.com/tracks/the-nature-of-code-2/noc/4-particles/1-particle-system"><img src="https://kantel.github.io/posts/2023080701_partikelsysteme/images/particlesystem-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p><a href="https://www.gorillasun.de/blog/spring-physics-and-connecting-particles-with-springs/">Spring Physics, Particles and Meshes</a> ist der vorerst letzte Beitrag einer Tutorialreihe zu <a href="https://de.wikipedia.org/wiki/Partikelsystem">Partikelsystemen</a>, die <em><a href="https://www.gorillasun.de/about/">Ahmad Moussa</a></em> in seinem Blog »<a href="https://www.gorillasun.de/">Gorilla Sun</a>« veröffentlicht hat. Die Programme (oder besser: Sketche) sind in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/p5js.html">P5.js</a>, der JavaScript-Version von <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processing.html">Processing</a> geschrieben und mit Hilfe der <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/p5xjswidget.html">P5 Widgets</a> seinen Blog-Leserinnen und -Lesern zugänglich gemacht.</p>
<p>Die anderen, bisher erschienenen Beiträge zu diesem Thema sind (in chronologischer Reihenfolge):</p>
<ul>
<li><a href="https://www.gorillasun.de/blog/programming-a-particle-system-with-chatgpt/">Programming a Particle System with ChatGPT</a></li>
<li><a href="https://www.gorillasun.de/blog/an-algorithm-for-particle-systems-with-collisions/">An Algorithm for Particle Systems with Collisions</a></li>
<li><a href="https://www.gorillasun.de/blog/particle-system-optimization-grid-lookup-spatial-hashing/">Optimizing Particle Systems with a Grid Lookup and Spatial Hashing</a></li>
</ul>
<p><em>Ahmad Moussa</em> orientiert sich bei seinen Tutorials stark an <em>Daniel Shiffmans</em> <a href="https://thecodingtrain.com/tracks/the-nature-of-code-2">The Nature of Code 2</a>. Und das erinnert mich natürlich daran, daß ich ja auch mal eine Python-Version von <em><a href="https://natureofcode.com/book/">The Nature of Code</a></em> angefangen hatte. Und mein <a href="https://kantel.github.io/posts/2023080601_ghostly_disks/">gestriger Sketch</a> über Geister-Pucks in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/py5.html">Py5</a> legt ja schon fast so etwas wie die Grundlagen für ein <a href="https://natureofcode.com/book/chapter-4-particle-systems/">Partikelsystem</a>. Ich glaube, ich bin angefixt. Ich muß mich sofort hinsetzen und ein Partikelsystem in Py5 implementieren.</p>
<p>Auch die Reihe von <em>Ahmad Moussa</em> wird vermutlich fortgesetzt. Und die <a href="https://www.gorillasun.de/articles/">anderen Artikel</a> aus seinem (noch jungen) Blog scheinen ebenfalls hochinteressant zu sein. Ich muß mich da aber erst einmal durchwühlen, bevor ich weitere Inspirationen daraus tanke. <em>Still digging!</em></p>



 ]]></description>
  <category>Py5</category>
  <category>Processing</category>
  <category>P5.js</category>
  <category>Creative Coding</category>
  <category>Nature of Code</category>
  <guid>https://kantel.github.io/posts/2023080701_partikelsysteme/index.html</guid>
  <pubDate>Mon, 07 Aug 2023 15:05:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023080701_partikelsysteme/images/particlesystem.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Spielereien mit Py5: Geisterscheiben ziehen vorbei</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023080601_ghostly_disks/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53097641941/"><img src="https://kantel.github.io/posts/2023080601_ghostly_disks/images/ghostlydisks-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Da hatte ich mir ja gestern etwas eingebrockt. Es war nicht so sehr die Tatsache, daß es mir gelungen war, <a href="https://kantel.github.io/posts/2023080502_pimp_quarto/">mein Quarto in wenig aufzumotzen</a>, sondern mir ging das eher zufällig und auf die Schnelle ausgewählte Beispielprogramm nicht mehr aus dem Kopf. Dazu fiel mir aus meinen Regalen die fast tausendseitige Schwarte »<a href="https://www.glassner.com/portfolio/processing-for-visual-artists/">Processing for Visual Artists</a>« von <em><a href="https://www.glassner.com/bio-cv-contact/biography/">Andrew Glassner</a></em> in die Hände und der verwandelte dort die <em>Bouncing Balls</em> in geisterhafte Pucks, die bei einem virtuellen Airhockey über den Bildschirm schweben <em>(Seiten 341ff)</em>.</p>
<p>Das mußte ich natürlich sofort in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/py5.html">Py5</a>, dem netten Python3-Port von <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processing.html">Processing</a> implementieren und ein wenig aufmotzen. Im Großen und Ganzen entspricht das dem <a href="http://blog.schockwellenreiter.de/2021/09/2021091501.html">Bouncing-Ball-Beispiel</a> von gestern. Ich habe lediglich den Scheiben einen Trail spendiert und – das habe ich bei <em>Andrew Glassner</em> geklaut – das Abprallen an den Fensterrändern etwas realistischer gestaltet:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bouncing Balls w/ Classes (improved)</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># nach Andrew Glassner: Processing for Visual Artists, p. 341pp</span></span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> randint</span>
<span id="cb1-4"></span>
<span id="cb1-5">WIDTH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600</span></span>
<span id="cb1-6">HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span></span>
<span id="cb1-7">BG_COLOR <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">240</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">215</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">175</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># color(164, 164, 164)</span></span>
<span id="cb1-8">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>              <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># alpha</span></span>
<span id="cb1-9">BORDER <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span></span>
<span id="cb1-10">NO_GHOSTS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span></span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Disk():</span>
<span id="cb1-13">    </span>
<span id="cb1-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, _x, _y, _vx, _vy, _radius, _col):</span>
<span id="cb1-15">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _radius</span>
<span id="cb1-16">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb1-17">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _col</span>
<span id="cb1-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Py5Vector(_x, _y)</span>
<span id="cb1-19">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Py5Vector(_vx, _vy)</span>
<span id="cb1-20">    </span>
<span id="cb1-21">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> check_boundaries(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pos.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pos.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r:</span>
<span id="cb1-23">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-24">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pos.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.x</span>
<span id="cb1-25">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pos.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pos.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r:</span>
<span id="cb1-26">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-27">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pos.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.y</span>
<span id="cb1-28">    </span>
<span id="cb1-29">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-30">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pos.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.x</span>
<span id="cb1-31">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pos.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.y</span>
<span id="cb1-32">    </span>
<span id="cb1-33">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> show(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-34">        stroke(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-35">        stroke_weight(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-36">        fill(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c)</span>
<span id="cb1-37">        circle(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pos.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pos.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d)</span>
<span id="cb1-38">        </span>
<span id="cb1-39">ghosts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb1-40"></span>
<span id="cb1-41"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> build_ghosts(n):</span>
<span id="cb1-42">    border <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BORDER</span>
<span id="cb1-43">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n):</span>
<span id="cb1-44">        xpos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(border, width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> border)</span>
<span id="cb1-45">        ypos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(border, height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> border)</span>
<span id="cb1-46">        xvel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-47">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># no vertical move</span></span>
<span id="cb1-48">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> xvel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>: xvel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-49">        yvel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-50">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># no horizontal move</span></span>
<span id="cb1-51">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> yvel  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>: yvel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-52">        radius <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb1-53">        clr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> color(randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">230</span>), randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">230</span>), randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">230</span>), a)</span>
<span id="cb1-54">        ghost <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Disk(xpos, ypos, xvel, yvel, radius, clr)</span>
<span id="cb1-55">        ghosts.append(ghost)</span>
<span id="cb1-56">                    </span>
<span id="cb1-57"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> setup():</span>
<span id="cb1-58">    size(WIDTH, HEIGHT)</span>
<span id="cb1-59">    window_move(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1400</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb1-60">    window_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bouncing Ghosts"</span>)</span>
<span id="cb1-61">    build_ghosts(NO_GHOSTS)</span>
<span id="cb1-62">    </span>
<span id="cb1-63"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> draw():</span>
<span id="cb1-64">    no_stroke()</span>
<span id="cb1-65">    fill(BG_COLOR, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb1-66">    rect(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, width, height)</span>
<span id="cb1-67">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ghost <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> ghosts:</span>
<span id="cb1-68">        ghost.show()</span>
<span id="cb1-69">        ghost.check_boundaries()</span>
<span id="cb1-70">        ghost.update()</span></code></pre></div>
<p>Aus irgendeinem Grund kann man dem <code>background</code> in Processing keine Transparenz mitgeben. Damit die Scheiben eine Spur hinter sich herziehen können, habe ich mich daher mit einem fenstergroßen Rechteck beholfen, das ich als erstes zeichnen lasse. Diesem Rechteck habe ich mit <code>alpha = 30</code> eine Transparenz spendiert. Dadurch verblassen die in den Frames vorher gezeichneten Scheiben nur sehr langsam und vermitteln die Illusion, daß sie eine Spur hinterlassen.</p>
<p>Und wenn der Geisterpuck auf die Ränder trifft, wird nicht nur die Richtung umgekehrt, sondern die Position wird auch mit <code>self.pos.x += 2*self.vel.x</code> respektive <code>self.pos.y += 2*self.vel.y</code> soweit korrigiert, daß ein Hinausschießen der Scheiben über den Rand unmöglich ist.</p>
<div style="float: right; margin-left: 12px; margin-top: 6px;">
<a href="https://www.glassner.com/portfolio/processing-for-visual-artists/"><img src="https://kantel.github.io/posts/2023080601_ghostly_disks/images/pvacover.jpg" class="img-fluid"></a>
</div>
<p>Dadurch gewinnen die simplen, springenden Bälle eine ganz neue, spirituelle Qualität. <em>Andrew Glassner</em> schrieb dazu:</p>
<blockquote class="blockquote">
<p>Mir gefällt, wie das aussieht: Gespenstische Airhockey-Pucks, die umherhüpfen und nach der geheimen Wahrheit suchen, die es ihnen ermöglicht, ihre sterbliche Hülle zu verlassen und zur nächsten Stufe des spirituellen Airhockey-Puck-Lebens aufzusteigen.</p>
</blockquote>
<p>Allein wegen dieses Zitats sollte man <a href="https://www.glassner.com/">Website</a> und <a href="https://imaginary-institute.com/">Blog</a> von <em>Andrew Glassner</em> auf seine Leseliste setzen. Es gab zwar schon lange keine Updates mehr, aber wer weiß, welche ewigen Weisheiten in seinen Texten noch meiner Entdeckung harren.&nbsp;🤓</p>



 ]]></description>
  <category>Py5</category>
  <category>Processing</category>
  <category>Python</category>
  <category>Creative Coding</category>
  <guid>https://kantel.github.io/posts/2023080601_ghostly_disks/index.html</guid>
  <pubDate>Sun, 06 Aug 2023 18:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023080601_ghostly_disks/images/ghostlydisks.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Pimp my Quarto Site</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023080502_pimp_quarto/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53095390734/"><img src="https://kantel.github.io/posts/2023080502_pimp_quarto/images/bballpy5vector-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Erinnert Ihr Euch an <em>Albert Rapp</em>, den Schöpfer des »<a href="https://albert-rapp.de/posts/13_quarto_blog_writing_guide/13_quarto_blog_writing_guide.html">Ultimate guide to starting a Quarto blog</a>? Der auch das Video »<a href="https://www.youtube.com/watch?v=ErRX8plZpQE">How to style your Quarto blog without knowing a lot of HTML/CSS</a>« veröffentlicht hatte? Beides hatte ich im <em>Schockwellenreiter</em> ja schon <a href="https://kantel.github.io/posts/2022120902_quarto_blog_tutorial/">lobend erwähnt</a>.</p>
<p>Nun hat er wieder zugeschlagen und diese drei kurzen Videos veröffentlicht:</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=jX4_Dnzhl0M">A Dead-Simple Strategy to style your Quarto docs without knowing HTML &amp; CSS</a> (siebeneinhalb Minuten)</li>
<li>Den Nachfolger: <a href="https://www.youtube.com/watch?v=QU8wSya-Y9E">An easy way to style your Quarto docs without knowing HTML &amp; CSS</a> (elf Minuten)</li>
<li>Und als Follow-up: <a href="https://www.youtube.com/watch?v=vaPBOqfus7w">A GPDR-compliant way to import Google fonts in Quarto</a> (vier Minuten)</li>
</ul>
<p>Besonders gefallen an diesen Videos hat mir, wie er die in <a href="http://cognitiones.kantel-chaos-team.de/webworking/staticsites/quarto.html">Quarto</a> eingebetteten Codeblöcke aufgemotzt hat. Da ich mit dem Default von Quarto schon seit Beginn leicht unzufrieden war, wollte ich auch so etwas. Also mußte zum Ausprobieren erst einmal <a href="http://blog.schockwellenreiter.de/2021/09/2021091501.html">ein Codeblock her</a> – es ist ein Expriment von vor zwei Jahren, in dem ich zum ersten Mal statt meiner eigenen <code>PVector</code>-Klasse die in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/py5.html">Py5</a> eingebaute <code>Py5Vector</code>-Klasse verwendet hatte:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bouncing Balls w/ Classes (improved)</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># nach Peter Farrell »Math Adventures with Python«, p183ff</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Einige Ungereimtheiten aus Farrells Code ausgeräumt und</span></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># erstmals Py5Vector anstelle meiner eigenen PVector-Implementierung genutzt</span></span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> randint, choice</span>
<span id="cb1-6"></span>
<span id="cb1-7">WIDTH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">640</span></span>
<span id="cb1-8">HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span></span>
<span id="cb1-9">NO_BALLS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span></span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Coding Train Farbpalette</span></span>
<span id="cb1-12">codingtrain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">240</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">37</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">248</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">158</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">248</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">239</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">34</span>) , (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">240</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">99</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">164</span>),</span>
<span id="cb1-13">               (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">146</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">82</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">161</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">129</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">122</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">198</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">98</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">199</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">119</span>)]</span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Ball():</span>
<span id="cb1-16">    </span>
<span id="cb1-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.radius <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>)</span>
<span id="cb1-19">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dia <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.radius</span>
<span id="cb1-20">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.location <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Py5Vector(randint(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dia, WIDTH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dia),</span>
<span id="cb1-21">                                  randint(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dia, HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dia))</span>
<span id="cb1-22">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Py5Vector(random(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), random(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb1-23">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># No horizontal or vertical move</span></span>
<span id="cb1-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb1-25">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-26">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb1-27">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-28">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dir</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Py5Vector(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>)</span>
<span id="cb1-29">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> choice(codingtrain)</span>
<span id="cb1-30">        </span>
<span id="cb1-31">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-32">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.location.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dir</span>.x</span>
<span id="cb1-33">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.location.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dir</span>.y</span>
<span id="cb1-34">    </span>
<span id="cb1-35">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> show(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-36">        fill(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.col[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb1-37">        circle(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.location.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.location.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dia)</span>
<span id="cb1-38">    </span>
<span id="cb1-39">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> check_boundaries(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-40">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.location.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.radius <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.location.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.radius:</span>
<span id="cb1-41">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-42">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.location.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.radius <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.location.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.radius:</span>
<span id="cb1-43">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>            </span>
<span id="cb1-44">balls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []       </span>
<span id="cb1-45"></span>
<span id="cb1-46"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> setup():</span>
<span id="cb1-47">    size(WIDTH, HEIGHT)</span>
<span id="cb1-48">    window_move(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1400</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb1-49">    window_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bouncing Balls w/Py5Vector"</span>)</span>
<span id="cb1-50">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(NO_BALLS):</span>
<span id="cb1-51">        balls.append(Ball())</span>
<span id="cb1-52"></span>
<span id="cb1-53"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> draw():</span>
<span id="cb1-54">    background(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">49</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">197</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">244</span>)   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Hellblau</span></span>
<span id="cb1-55">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ball <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> balls:</span>
<span id="cb1-56">        ball.show()</span>
<span id="cb1-57">        ball.check_boundaries()</span>
<span id="cb1-58">        ball.update()</span></code></pre></div>
<p>Gemäß den Tutorials von <em>Albert Rapp</em> habe ich in dem Projektverzeichnis (das ist das Verzeichnis, das auch die Datei <code>_quarto.yml</code> enthält) eine Datei <code>custom_themes.css</code> angelegt. Diese Datei habe ich dann in meine <code>_quarto.yml</code> eingebunden:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource yaml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">html</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">code-line-numbers</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb2-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> litera</span></span>
<span id="cb2-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> custom_theme.scss</span></span>
<span id="cb2-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">css</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> styles.css</span></span>
<span id="cb2-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">link-external-icon</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">false</span></span>
<span id="cb2-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">include-in-header</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"js/goatcounter.js"</span></span></code></pre></div>
<p>Damit man nicht sofort mit Fehlermeldungen überschüttet wird, <strong>muß</strong> die <code>custom_theme.css</code> (Ihr könnt sie übrigens nennen, wie Ihr wollt) mindestens diese zwei Zeilen enthalten:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource yaml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb3-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">/*-- scss:defaults --*/</span></span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">/*-- scss:rules --*/</span></span></code></pre></div>
<p>Ich wollte, daß die Code-Blöcke wie auch der Inline-Code mit einem leichten Grau (<code>#eeeeee</code>) hinterlegt wird. Außerdem sollte der Inline-Code mit einer grünen Schrift (<code>#009991</code>) dargestellt werden. Dies wird alles in den SCSS-Defaults festgelegt. Zu guter letzt wollte ich die Schrift in den Code-Blöcken etwas kleiner darstellen (<code>font-size: 0.8em;</code>), damit nicht sofort horizontale Scrollbalken provoziert werden. Diese Festlegung muß wiederum in den SCSS-Rules getroffen werden. Daher sieht meine <code>custom_theme.scss</code> nun wie folgt aus:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource yaml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb4-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">/*-- scss:defaults --*/</span></span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">/*-- Define colors --*/</span></span>
<span id="cb4-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">$mybgcode</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> #eeeeee;</span></span>
<span id="cb4-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">$mycodecol</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> #009991;</span></span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">// Code block background</span></span>
<span id="cb4-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">$code-block-bg</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> $mybgcode;</span></span>
<span id="cb4-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">// Background color of inline code</span></span>
<span id="cb4-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">$code-bg</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> $mybgcode;</span></span>
<span id="cb4-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">// Color of inline Code</span></span>
<span id="cb4-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">$code-color</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> $mycodecol;</span></span>
<span id="cb4-13"></span>
<span id="cb4-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">/*-- scss:rules --*/</span></span>
<span id="cb4-15"></span>
<span id="cb4-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">div.sourceCode {</span></span>
<span id="cb4-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">font-size</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> 0.8em;</span></span>
<span id="cb4-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Es müssen nur die Werte in die <code>custom_theme.scss</code> eingetragen werden, die das Default-Theme (in meinem Fall <code>litera</code>) überschreiben. Die wichtigsten SCSS-Variblen, die man überschreiben kann, findet Ihr <a href="https://quarto.org/docs/output-formats/html-themes">auf dieser Seite</a>. Ganz unten auf der Seite gibt es noch einen Link zur Bootstrap-Dokumentation mit einer <a href="https://github.com/twbs/bootstrap/blob/main/scss/_variables.scss">Liste aller SCSS- (oder: SASS-) Variablen</a>.</p>
<p>So jedenfalls gefallen mir meine Code-Blöcke schon besser, aber ich kann mir weitere Verbesserungen durchaus vorstellen. Daher möchte ich mir als nächstes <a href="https://hamel.dev/notes/quarto/highlighting.html">diese Seite</a> vornehmen, die beschreibt, wie man das <em>Syntax Highlighting</em> von Quarto verbessern kann. Eine <a href="https://github.com/quarto-dev/quarto-cli/tree/main/src/resources/pandoc/highlight-styles">Liste der in Quarto vorhandenen Syntax-Highlighter findet Ihr hier</a>.</p>
<p><strong>War sonst noch was?</strong> Ach ja, es gibt auch noch ein weiteres, nettes Video von <em>Albert Rapp</em>: »<a href="https://www.youtube.com/watch?v=4-6jDDCADvU">How to build an interactive point-and-click game with {Shiny}</a>« (35 Minuten). Das hat zwar nichts (oder bestenfalls nur am Rande) mit Quarto zu tun, ist aber trotzdem interessant, da <a href="https://shiny.rstudio.com/py/">Shiny for Python</a> auch schon lange auf der Liste der von mir zu testenden Bibliotheken steht. <em>Still digging!</em></p>



 ]]></description>
  <category>Quarto</category>
  <category>Statische Seiten</category>
  <category>Interna</category>
  <guid>https://kantel.github.io/posts/2023080502_pimp_quarto/index.html</guid>
  <pubDate>Sat, 05 Aug 2023 17:50:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023080502_pimp_quarto/images/bballpy5vector.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Bereit für die Tonne</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023080501_bereit_tonne/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53095241649/"><img src="https://kantel.github.io/posts/2023080501_bereit_tonne/images/bereittonne-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Denn da gehören die Teile hin! <em>(Photo (<a href="http://creativecommons.org/licenses/by-nc-nd/2.0/">CC BY-NC-ND 2.0</a>) 2023: <a href="http://cognitiones.kantel-chaos-team.de/cv.html">Jörg Kantel</a>)</em></p>



 ]]></description>
  <category>Neukölln</category>
  <category>Verkehr</category>
  <guid>https://kantel.github.io/posts/2023080501_bereit_tonne/index.html</guid>
  <pubDate>Sat, 05 Aug 2023 14:25:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023080501_bereit_tonne/images/bereittonne.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Python, Piskel und Processing: Video-Tutorials zum Wochenende</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023080402_python_piskel_processing/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52645318348/"><img src="https://kantel.github.io/posts/2023080402_python_piskel_processing/images/malewitchhommage-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Da ich momentan mit (neuen und alten) Experimenten beschäftigt bin, kommen die freitäglichen Video-Tutorials etwas spät, aber sie kommen: Heute zu Python und der Matplotlib, zu Piskel und zu <em>Creative Coding</em> mit Processing. Es sind jeweils je eine Playlist, deren jeweils recht großer Umfang Euch auch über ein verregnetes Wochenende hinweghelfen sollte.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/EPMJLbyol4I" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Den Anfang macht die Reihe »<a href="https://www.youtube.com/playlist?list=PLHwXkLexR9MAoKqIgUV9C6whwgCxlzP_M">Matplotlib Tutorial Series</a>« des Kanals <em>CodersLegacy</em>. Sie besteht aus sechsundzwanzig Videos, die im Schnitt zwischen zehn und zwanzig Minuten Laufzeit besitzen und Euch alles erzählen, was Ihr über diese <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/matplotlib.html">Python-Plotting-Bibliothek</a> schon immer wissen wolltet, aber nie zu fragen wagtet.</p>
<p>Als nächstes gibt es neun Videos der Playlist »<a href="https://www.youtube.com/playlist?list=PLO3K3VFvlU6Akj3W29_nMLZFnwNOVbAzI">How to Create Pixel Art and Animations with Piskel</a>«. <a href="http://cognitiones.kantel-chaos-team.de/multimedia/computergraphik/pixelart/piskel.html">Piskel</a> ist ein freies (Apache-Lizenz) Programm zur Erstellung von Sprites und anderen Bildern als Pixelart. Diese Reihe, die Euch mit dem Programm vertraut machen will, besteht aus neun eher kürzeren, etwa fünfminütigen Video-Tutorials. Leider wurde das Einbetten in andere Webseiten vom Kanalinhaber deaktiviert, Ihr müßt Euch daher schon selber direkt nach YouTube begeben.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/aGwGHqFgyrI" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Die Tutorialreihe »<a href="https://www.youtube.com/playlist?list=PLdIPAhekdquIUTfSuFQY8HVTcuMtQe897">Creative Coding</a>« von <em>J. Stephen Lee</em> ist der Höhepunkt der heutigen Vorstellungsrunde. Sie besteht aus dreiundzwanzig je etwa halbstündigen Videos, die Euch in die Kunst des kreativen Programmierens mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processing.html">Processing (Java)</a> einführen. Natürlich steht es Euch und mir frei, diese Ideen auch nach <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processingpy.html">Processing.py</a>, <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/py5.html">Py5</a> oder – falls Ihr noch nicht genug von geschweiften Klammern habt – nach <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/p5js.html">P5.js</a> zu portieren.</p>
<p>All dies steht auch auf meiner Agenda. Daher wird es die nächsten Tage auf diesen Seiten weiter eher ruhig zugehen. <em>Still digging!</em></p>



 ]]></description>
  <category>Python</category>
  <category>Piskel</category>
  <category>Processing</category>
  <category>Creative Coding</category>
  <category>Matplotlib</category>
  <category>Visualisierung</category>
  <guid>https://kantel.github.io/posts/2023080402_python_piskel_processing/index.html</guid>
  <pubDate>Fri, 04 Aug 2023 19:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023080402_python_piskel_processing/images/malewitchhommage.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Public Private Partnership</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023080401_public_private_partnership/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://upload.wikimedia.org/wikipedia/commons/9/91/GustaveDore_She_was_astonished_to_see_how_her_grandmother_looked.jpg"><img src="https://kantel.github.io/posts/2023080401_public_private_partnership/images/rotkaeppchenwolf-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Im Bett mit der Wirtschaft: Rechts als Rotkäppchen der Verbraucher, links die als wohltätige Großmutter getarnte Privatwirtschaft.</p>
<p><em>(Bild: <a href="https://de.wikipedia.org/wiki/Gustave_Dor%C3%A9">Gustave Doré</a> (1832-1883), »Elle était bien étonnée de voir comment sa Mère-grand était faite en son déshabillé« (She was astonished to see how her grandmother looked), 1862. Bildquelle: <a href="https://commons.wikimedia.org/wiki/File:GustaveDore_She_was_astonished_to_see_how_her_grandmother_looked.jpg">Wikimedia Commons</a>)</em></p>



 ]]></description>
  <category>Politik</category>
  <category>Satire</category>
  <category>Wirtschaft</category>
  <guid>https://kantel.github.io/posts/2023080401_public_private_partnership/index.html</guid>
  <pubDate>Fri, 04 Aug 2023 17:35:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023080401_public_private_partnership/images/rotkaeppchenwolf.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Für umme lesen: Philosophie, Wahrscheinlichkeitstheorie und Statistik, Datenvisualisierung</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023080302_umme_lesen/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://upload.wikimedia.org/wikipedia/commons/8/8f/Sadie_Wendell_Mitchell%2C_%22Dig%22%2C_1909_%28cropped%29.jpg"><img src="https://kantel.github.io/posts/2023080302_umme_lesen/images/dig1909-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Diesen verregneten Hochsommer kann man ja nur mit guten Büchern ertragen. Daher habe ich <a href="https://kantel.github.io/posts/2023072501_logseq_remainder/">mein zweites Gehirn</a> geplündert und für Euch drei Bücher herausgesucht, mit denen Ihr schmökernd auf dem Sofa den Regen draußen vergessen könnt. Die Titel sind aus den Bereichen Philosophie, Mathematik und <em>Data Science</em> und Ihr könnt sie alle kostenlos als PDF herunterladen.</p>
<p>Den Anfang macht der Sammelband »<a href="https://mkcsplit.hr/en/look-cpt/psychoanalysis-between-philosophy-and-politics/">Psychoanalysis Between Philosophy and Politics</a>« der von <em>Nicol A. Barria-Asenjo</em> und <em>Slavoj Žižek</em> herausgegeben wurde. Er ist so neu (die Print-Version ist noch gar nicht erschienen), daß ich nur den Klappentext zitieren kann: Das Buch sei</p>
<blockquote class="blockquote">
<p>ein bemerkenswerter, interdisziplinärer Band, der sich, wie der Titel schon sagt, in fünfzehn Kapiteln mit den zahlreichen und vielfältigen Verbindungen zwischen philosophischen und politischen Diskursen beschäftigt. Es ist in drei Abschnitte unterteilt: Die philosophische Vision der Politik, Die politische Krise und Der Knoten zwischen Psychoanalyse, Philosophie und Politik. Die enthaltenen Aufsätze stammen aus verschiedenen akademischen Bereichen (Philosophie, Politik, Soziologie, Psychoanalyse, klinische Psychologie, Sozialtheorie, postkoloniale Studien) und verschiedenen europäischen und asiatischen Ländern (wie dem Vereinigten Königreich, Serbien, Polen, Belgien, den Philippinen, Osttimor, Taiwan, Korea).</p>
</blockquote>
<p>Die genannten fünfzehn Kapitel machen sich auf 400 Seiten breit und <a href="https://mkcsplit.hr/wp-content/uploads/2023/08/LOOK-1.pdf">können hier als PDF</a> heruntergeladen werden.</p>
<p>Das zweite Buch ist eine Einführung in Statistik und Wahrscheinlichkeitstheorie (»<a href="https://drive.google.com/file/d/1_dWunaER8BTWKiA0LjXo5LkVVDBpqVgW/view">Introduction to Probability and Statistics</a>«) von <em>William Mendemhall, III</em> und <em>Rebert J. und Barbara M. Beaver</em>. Das Buch verspricht einen praxisorientierten Zugang und sollte mit seinen mehr als 750 Seiten keine Fragen zu dem Gebiet mehr offenlassen.</p>
<p>Das letzte Buch ist das »<a href="https://pyoflife.com/python-data-visualization-cookbook/">Python Data Visualisation Cookbook</a>«, das ein umfassender Leitfaden sein will, der verschiedene Techniken zur Visualisierung von Daten in Python behandelt. Das Kochbuch wurde von <em>Igor Milovanović</em>, <em>Aleksandar Erkalović</em> und <em>Dimitry Foures-Angelov</em> verfasst. Die zweite Auflage könnt Ihr <a href="https://github.com/beingCurious/books/blob/master/docs/src/Python/Python-Data-Visualization-Cookbook-Second-Edition.pdf">hier online lesen</a>. Um das PDF herunterzuladen, müßt Ihr auf das kleine Downloadsymbol links oben klicken. Es ist mit einem Umfang von 275 Seiten gegenüber der Schwarte oben geradezu schlank geraten, aber dennoch sehr lesenswert. Denn auch wenn die Pubikationen aus dem <em>Packt</em>-Verlag von – sagen wir mal – manchmal stark wechselnder Qualität sind, ich hatte jedenfalls schon beim ersten Durchstöbern dieses Buches viel Spaß.</p>
<p><em>(Bild: <a href="https://20x200.com/collections/sadie-wendell-mitchell">Sadie Wendell Mitchell</a> (1883-1929), »Dig«, aus der Plakat-Serie »Girls Will Be Girls«, 1909, Bildquelle: <a href="https://commons.wikimedia.org/wiki/File:Sadie_Wendell_Mitchell,_%22Dig%22,_1909_(cropped).jpg">Wikimedia Commons</a>)</em></p>



 ]]></description>
  <category>Philosophie</category>
  <category>Mathematik</category>
  <category>Visualisierung</category>
  <guid>https://kantel.github.io/posts/2023080302_umme_lesen/index.html</guid>
  <pubDate>Thu, 03 Aug 2023 15:10:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023080302_umme_lesen/images/dig1909.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Google korrigiert erneut kritische Sicherheitslücken in Chrome</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023080301_chrome_update/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://dyn1.heritagestatic.com/lf?set=path%5B1%2F9%2F0%2F9%2F6%2F19096214%5D&amp;call=url%5Bfile%3Aproduct.chain%5D"><img src="https://kantel.github.io/posts/2023080301_chrome_update/images/movingpicturesorig1910-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Google veröffentlicht ein weiteres Update der Version 115 (115.0.5790.170/171) seines Browsers Chrome und schließt erneut <a href="https://chromereleases.googleblog.com/2023/08/stable-channel-update-for-desktop.html">kritische Sicherheitslücken</a>.</p>
<p>Chrome aktualisiert sich (außer bei Linux) über die integrierte Update-Funktion, kann aber – wenn es pressiert – auch <a href="https://www.google.com/intl/de/chrome/browser/">hier geladen</a> werden. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<p><em>(Bild: Thomas E. Powers (1870-1939), <a href="https://comics.ha.com/itm/original-comic-art/comic-strip-art/te-powers-our-moving-pictures-sunday-comic-strip-original-art-dated-7-10-10-hearst-newspapers-/a/121835-11178.s">Our Moving Pictures Sunday Comic Strip Original Art dated 7-10-10</a> (Hearst Newspapers, 1910))</em></p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2023080301_chrome_update/index.html</guid>
  <pubDate>Thu, 03 Aug 2023 13:45:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023080301_chrome_update/images/movingpicturesorig1910.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Kenney Jam 2023 – Auswertung</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023080203_kenney_jam_auswertung/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://itch.io/jam/kenney-jam-2023/entries"><img src="https://kantel.github.io/posts/2023080203_kenney_jam_auswertung/images/kenneyjamsubmissions-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Die <a href="https://itch.io/jam/kenney-jam-2023">Kenney Jam 2023</a>, bei der innerhalb von 48 Stunden ein Spiel zu einem vorgegebenen Thema (das erst zu Beginn des Wettbewerbs bekanntgegeben wurde) programmiert werden sollte, und deren einzige Einschränkung war, daß nur Assets aus dem unerschöpflichen und freien (<a href="https://creativecommons.org/share-your-work/public-domain/cc0/">CC0</a>) Fundes von <a href="https://kenney.nl/assets">Kenney.nl</a> verwendet werden durften, ist erfolgreich zu Ende gegangen. Alle 460 Einsendungen findet Ihr <a href="https://itch.io/jam/kenney-jam-2023/entries">hier</a>. Den größten Teil davon – nämlich 313 Spiele – könnt Ihr im Browser spielen.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/vLcQUpMqLwI" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Außerdem gibt es eine <a href="https://itch.io/jam/kenney-jam-2023/results">Liste in der Reihenfolge der am besten bewerteten Spiele</a>. Und Kenney hat ein <a href="https://www.youtube.com/watch?v=vLcQUpMqLwI">Video der Top Five</a> (über alle Kategorien) hochgeladen. Das sind</p>
<ol type="1">
<li><a href="https://ludows.itch.io/enchanted-realms">Enchanted Realms</a></li>
<li><a href="https://ironhidemakes.itch.io/stellarexplorer">Stellar Explorer</a></li>
<li><a href="https://duckgoosegames.itch.io/beware-the-mine">Beware the Mines</a></li>
<li><a href="https://melonboyo.itch.io/callie">Callie</a></li>
<li><a href="https://liftyforever.itch.io/treacherous-sea">Treacherous Sea</a></li>
</ol>
<p>Die Links führen alle zu einer spielbaren Version.</p>
<p>Ich habe mich mal ein wenig durchgesteppt, bestimmte Asset-Serien (<a href="https://kenney.nl/assets/series:Pixel%20Platformer">Pixel</a>, <a href="https://kenney.nl/assets/series:Tiny">Tiny</a>, <a href="https://kenney.nl/assets/tag:1-bit">1-Bit</a>) wurden überdurchschnittlich häufig gewählt. Das kann aber auch daran liegen, daß diese in ein sehr kleines Raster (meistens 16x16 Pixel) passen und diese Größe ist für ein Browserspiel einfach am besten geeignet. Aber trotzdem ist es überraschend, was für unterschiedliche Spiele auf Basis dieser Asset-Packs geschaffen wurden. Vor der Kreativität der Einsenderinnen und Einsender kann ich nur den Hut ziehen.</p>



 ]]></description>
  <category>Spieleprogrammierung</category>
  <category>Tiles und Sprites</category>
  <guid>https://kantel.github.io/posts/2023080203_kenney_jam_auswertung/index.html</guid>
  <pubDate>Wed, 02 Aug 2023 16:20:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023080203_kenney_jam_auswertung/images/kenneyjamsubmissions.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Alice und Twine Reloaded: Neue Twine-Tutorials</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023080202_alice_twine_reloaded/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53087467098/"><img src="https://kantel.github.io/posts/2023080202_alice_twine_reloaded/images/alicetwine-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Inspiriert durch die wunderbaren, neuen <a href="https://www.youtube.com/playlist?list=PLlXuD3kyVEr6DmZy52pG7zYWbr6t93JC7">Tutorials zu Twine 2.6</a> (und Harlowe&nbsp;3.3) (bisher 26&nbsp;Videos, Reihe wird noch ständig aktualisiert – <a href="https://kantel.github.io/posts/2023071502_if_mit_twine_2_6/">ich berichtete</a>) von <em>Dan Cox</em> habe ich beschlossen, nicht nur meinen bisherigen <a href="http://blog.schockwellenreiter.de/2022/09/2022090601.html">drei Twine-Tutorials aus dem Wunderland-Kosmos</a> ebenfalls ein Update auf Twine 2.6 zu gönnen und sie ein wenig zu überarbeiten, sondern auch meine Arbeit an den lange brachliegenden <a href="http://blog.schockwellenreiter.de/2022/09/2022090601.html">Twine</a>-Tutorials wieder aufzunehmen und mit neuen Folgen zu ergänzen.</p>
<p>Dabei möchte ich auch dem neuen User-Interface von Twine 2.6 ein wenig mehr Aufmerksamkeit widmen (ich hatte schließlich auch ein wenig experimentieren müssen, bis ich da durchgestiegen war). Und ich möchte erst einmal mit dem Default-Story-Format <a href="https://twine2.neocities.org/">Harlowe&nbsp;3.3</a> beginnen, aber in späteren Folgen auch auf das <a href="https://klembot.github.io/chapbook/">Chapbook</a>-Format von Twine-Schöpfer <em>Chris Klimas</em> eingehen, da dieses Features aufweist, die zum einen eine sauberere Trennung zwischen Story-Text und Programm-Code erlauben, zum anderen aber auch für ein schnelles Prototyping von <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/renpy.html">Ren’Py</a>-Spielen geeignet sind (für <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/unity.html">Unity</a> sicher auch, aber da ist <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/inkle.html">Ink mit Inky</a> eher die bessere (und ebenfalls freie (MIT-Lizenz)) Alternative).</p>
<p>Auch dem Story-Format <a href="https://www.motoslave.net/sugarcube/2/">SugarCube</a> möchte ich ein paar Abschnitte widmen, da es – zu Recht – immer noch viele Freunde in der Twine-Community besitzt.</p>
<p>Als ersten Schritt habe ich das erste meiner Twine-Tutorials »Alice und Twine« überarbeitet. Ein Bericht wird hier im <em>Schockwellenreiter</em> in den nächsten Tagen folgen. Den <a href="https://github.com/kantel/twine-entdecken/tree/master/Twine/alicetwine">Quellcode</a> könnt Ihr in meinem GitHub-Repositorium finden (einfach die <code>index.html</code> in Eure Twine-App importieren und die <a href="https://github.com/kantel/twine-entdecken/tree/master/Twine/alicetwine/images">Bilder</a> irgendwo ablegen, wo Twine sie findet) und eine (im Browser) <a href="https://kantel.itch.io/alice-und-twine">spielbare Version</a> habe ich vorab auch schon einmal auf Itch.io hochgeladen. Es ist kein Spiel, sondern nur ein kurze Demo. Habt dennoch Spaß damit!</p>



 ]]></description>
  <category>Twine</category>
  <category>Interactive Fiction</category>
  <guid>https://kantel.github.io/posts/2023080202_alice_twine_reloaded/index.html</guid>
  <pubDate>Wed, 02 Aug 2023 14:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023080202_alice_twine_reloaded/images/alicetwine.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Mozilla veröffentlicht neue Firefox-Version</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023080201_firefox_update_116/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjQneTGl9grq2Iv6pSYqPqLBe2-v_neAxwJfhxoD7mRCOwBmN6wIA5T9mXMPNAM1VvsLUCDVJPgaINNHMNiMx3VqAGFtHo3Jm42N1haldla0zBK0KkdrB6-b4HkmUycmlAXTUU2jvjhopHaAFeW2H732AbMntrwXTSvCNvx_x1VG1OVAa_Nbj8AtAVD7-oK/s1684/june%2015%201910.jpg"><img src="https://kantel.github.io/posts/2023080201_firefox_update_116/images/powers1910-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Die Entwickler des Mozilla Firefox haben die neue Version 116.0 veröffentlicht und darin auch wieder <a href="https://www.mozilla.org/en-US/firefox/116.0/releasenotes/">Sicherheitslücken</a> behoben.</p>
<p>Firefox weist selbst auf dieses Update hin. Diese Prozedur kann aber auch wie immer über das Menü <code>Hilfe &gt; Über Firefox</code> angestoßen werden. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<p><em>(Bild: <a href="http://john-adcock.blogspot.com/2023/07/t-e-powers-two-obituaries.html">Thomas E. Powers</a> (1870-1939), Chicago Examiner, 15. Juni 1910)</em></p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2023080201_firefox_update_116/index.html</guid>
  <pubDate>Wed, 02 Aug 2023 13:05:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023080201_firefox_update_116/images/powers1910.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Auf ein Neues: Die Zahlen für den Monat Juli 2023</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023080101_mediadaten_2023_07/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53086767218/"><img src="https://kantel.github.io/posts/2023080101_mediadaten_2023_07/images/mediadaten202307-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Der in der zweiten Monatshälfte total verregnete Monat Juli hat sich verabschiedet, nicht ohne seinem Nachfolger August aufzutragen, mit dem regnerischen Wetter fortzufahren. Also ist es – Regen hin, Wetter her – mal wieder an der Zeit für ein paar Zahlen, die manches Mal hochtrabend auch <em>Mediadaten</em> genannt werden: Im Juli 2023 hatte der <em>Schockwellenreiter</em> laut seinem (hoffentlich!) <a href="https://de.wikipedia.org/wiki/Datenschutz-Grundverordnung">DSGVO</a>-konformen <del>Geißenpeter</del> <a href="https://kantel.github.io/posts/2022120702_goatcounter/">GoatCounter</a> <strong>4.821 Seitenaufrufe</strong>. Das ist seit <a href="https://kantel.github.io/posts/2022120602_schockwellenreiteronline/">meinem Neustart</a> im <a href="https://kantel.github.io/posts/2022120802_hello_quarto/">Dezember letzten Jahres</a> ein neuer Monatsrekord und sicher nicht nur damit zu erklären, daß sich auch der Geißenpeter langsam einen Backkatalog zugelegt hat. Es scheint mir, daß dieses <del>Blog</del> Kritzelheft eine beträchtliche Anzahl neuer Besucherinnen und Besucher hinzugewonnen hat. Und das finde ich schön.</p>
<p>Natürlich freue ich mich über jede und jeden (nicht nur neuen) Menschen, die oder der den Weg auf diese Seiten gefunden hat und bedanke mich bei allen meinen Leserinnen und Lesern.</p>
<p>🤓 &nbsp; <em>Bleibt mir gewogen!</em></p>
<p>Wie jeden Monat gibt es auch für den Juli 2023 eine <em>Top Five</em> der besuchten Seiten. Die sieht dieses Mal so aus:</p>
<ol type="1">
<li><a href="https://kantel.github.io/posts/2023072501_logseq_remainder/">Logseq: Mein funktionierendes, zweites Gehirn</a></li>
<li><a href="https://kantel.github.io/posts/2023071003_klein_bloggersdorf/">Eine kurze Geschichte von Klein-Bloggersdorf</a></li>
<li>Worknote: <a href="https://kantel.github.io/posts/2023071801_markdown_pandoc_vscode/">Markdown, Pandoc und Visual Studio Code</a></li>
<li><a href="https://kantel.github.io/posts/2023071202_haare_schoen/">Jetzt habe ich wieder die Haare schön, dank Coiffeure Marina &amp; Team</a> – das sich so viele für meinen neuen Haarschnitt interessierten, überraschte mich schon.&nbsp;💇‍♂️</li>
<li>Nachrichten aus Neukölln: <a href="https://kantel.github.io/posts/2023071101_neuer_alter_krug/">Neuer »Alter Krug«</a></li>
</ol>
<p>Die Mischung ist doch wieder ziemlich bunt, oder? Laßt Euch durch den Regen nicht verdrießen und kommt gut durch den neuen Monat!</p>



 ]]></description>
  <category>Interna</category>
  <guid>https://kantel.github.io/posts/2023080101_mediadaten_2023_07/index.html</guid>
  <pubDate>Tue, 01 Aug 2023 14:20:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023080101_mediadaten_2023_07/images/mediadaten202307.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Trinket kann Matplotlib – aber nur in der kostenlosen Version</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023073101_trinket_matplotlib/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53084263249/"><img src="https://kantel.github.io/posts/2023073101_trinket_matplotlib/images/matplotlibtrinket-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p><a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/trinket.html">Trinket</a> treibt mich noch in den Wahnsinn. Ich hatte bisher immer einen großen Bogen um die <em>Modes</em> von Trinket gemacht, die mit einem kleinen, grünen Schlüssel angezeigt wurden, weil sie – glaubte ich – nach einem der kostenpflichtigen »<a href="https://trinket.io/plans">Plans</a>« verlangten. Seit heute weiß ich, daß dies komplizierter und sehr ärgerlich ist:</p>
<p>Denn in <a href="https://medium.com/@6unpnp/draw-chart-in-python-using-trinket-c3c4ce1d4403">diesem Artikel</a> (Medium-Link, daher vermutlich leider hinter einer Bezahlschranke verborgen) zeigte <em>Sparisoma Viridi</em>, wie man in Trinket mit Hilfe des Modes »Python3« eine Applikation mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/numpy.html">Numpy</a> und der <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/matplotlib.html">Matplotlib</a> erstellen kann. Und wie die Screenshots zeigten, nutzte er dafür ganz offensichtlich den freien, kostenlosen »Trinket Code«-Plan, den ich bisher auch immer genutzt hatte. Das wollte ich natürlich auch sofort ausprobieren. Also Trinket aufgerufen und (trotz grünem Schlüssel) ein neues Python3-Trinket mit diesem Code erstellt:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-3"></span>
<span id="cb1-4">NUM_POINTS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb1-5">GRADIENT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span></span>
<span id="cb1-6"></span>
<span id="cb1-7">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(NUM_POINTS))</span>
<span id="cb1-8">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.randn(NUM_POINTS)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>GRADIENT</span>
<span id="cb1-9"></span>
<span id="cb1-10">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(figsize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb1-11"></span>
<span id="cb1-12">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.rand(NUM_POINTS)</span>
<span id="cb1-13">size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.random.rand(NUM_POINTS)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb1-14">ax.scatter(x, y, s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> size, c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> colors, alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb1-15">fig.suptitle(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Zufalls-Scatterplot"</span>)</span>
<span id="cb1-16"></span>
<span id="cb1-17">plt.show()</span>
<span id="cb1-18"></span>
<span id="cb1-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Leerzeile, damit der Plot nicht so am oberen Fensterrand klebt.</span></span>
<span id="cb1-20"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<p>Erstaunlicherweise funktionierte dies (wie auch der <a href="https://www.flickr.com/photos/schockwellenreiter/53084263249/">Screenshot</a> im Banner oben beweist) ohne Probleme. Lediglich an der <code>figsize</code> mußte ich ein wenig schrauben, damit der Plot vollständig in das Ausgabefenster paßte und nicht an der rechten Seite abgeschnitten wurde. Doch – und das war der Haken, mit dem die Nutzer auf eine kostenpflichtigen »Plan« gelockt werden sollten – der Code ließ sich nicht als Trinket abspeichern und online stellen. Verließ man die Seite, war alles wieder weg.</p>
<p>Zwar gibt es einen Notausgang: Der Code läßt sich herunterladen (und so ich habe ihn auch <a href="https://github.com/kantel/trinket/blob/main/matplotlibtest/main.py">in meinem GitHub-Repo abgespeichert</a>), so daß man ihn jederzeit neu hochladen und einpflegen kann. Doch schön ist anders. Also bin ich über meinen Schatten gesprungen und habe mir ein Update auf den »Plan Code+« geleistet. Die 3&nbsp;US-$/Monat (bei jährlicher Zahlung) schien mir der Spaß, nun mit Pythons <em>Scientific Stack</em> (und auch mit <a href="https://github.com/kantel/trinket/blob/main/matplotlibtest/main.py">Pygame</a>!) online auf Trinket spielen zu können, wert zu sein.</p>
<p>Das hätte ich lieber nicht tun sollen. Denn kaum war das Ugrade beim Trinket-Server akzeptiert, stieg das obige Skriptchen mit dieser Fehlermeldung aus:</p>
<blockquote class="blockquote">
<p>Matplotlib created a temporary config/cache directory at /tmp/matplotlib-zhreju7y because the default path (/home/trinket/.config/matplotlib) is not a writable directory; it is highly recommended to set the MPLCONFIGDIR environment variable to a writable directory, in particular to speed up the import of Matplotlib and to better support multiprocessing.</p>
</blockquote>
<p>So wie es aussieht, ist der Trinket-Server nicht korrekt für die Nutzung (genauer: Speicherung) von Matplotlib-Anwendungen konfiguriert. Solange nichts gespeichert wird (wie in dem kostenlosen »Plan«) ist alles gut, aber sobald Trinket versucht, das Skript zu speichern steigt die Matplotlib aus. Eine Fehlermeldung an Trinket habe ich abgesetzt, aber ob und wann dieser Fehler behoben wird, steht in den Sternen. Mein mit zuviel Optimismus gestartetes Upgrade habe ich auch wieder storniert, aber das habe ich jetzt erst einmal für ein Jahr an der Backe.</p>
<p>So bleibt mir nichts anderes übrig, als daß ich mir einen zweiten, kostenlosen Trinket-Account zulege, der dann – wenn auch eigeschränkt – mit der Matplotlib spielt. Das ist – wie ich oben schon schrieb – sehr ärgerlich und schön ist auch anders.</p>



 ]]></description>
  <category>Trinket</category>
  <category>Python</category>
  <category>Data Science</category>
  <category>Visualisierung</category>
  <guid>https://kantel.github.io/posts/2023073101_trinket_matplotlib/index.html</guid>
  <pubDate>Mon, 31 Jul 2023 17:25:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023073101_trinket_matplotlib/images/matplotlibtrinket.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Hallo Quarto! Hallo Visual Studio Code!</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023073001_hello_vscode/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53081746678/"><img src="https://kantel.github.io/posts/2023073001_hello_vscode/images/helloquarto-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Meine Experimente, <a href="http://cognitiones.kantel-chaos-team.de/produktivitaet/visualstudiocode.html">Visual Studio Code</a> zum zentralen Publikationswerkzeug zu etablieren und alles, was ich (in Markdown) geschrieben habe, via diesem Texteditor in die diversen Publikationsformate herauszuschreiben, machen weitere Fortschritte. Habe ich mich im <a href="https://kantel.github.io/posts/2023071801_markdown_pandoc_vscode/">ersten Teil</a> an die Installation von <a href="http://cognitiones.kantel-chaos-team.de/webworking/auszeichnungssprachen/pandoc.html">Pandoc</a> gewagt und im <a href="https://kantel.github.io/posts/2023072601_atlas_curiosa_init/">zweiten Teil</a> die <em>Live Prewiev</em> ein wenig aufgehübscht, geht es nun ans Eingemachte: Die Installation von <a href="http://cognitiones.kantel-chaos-team.de/webworking/staticsites/quarto.html">Quarto</a>:</p>
<p>Da ich dieses <del>Blog</del> Kritzelheft zwar mit Quarto erstelle, als Editor aber dafür momentan (noch?) <a href="http://cognitiones.kantel-chaos-team.de/mathematik/rstudio.html">RStudio</a> genutzt wird (das hat Quarto fest eingebaut), mußte ich erst einmal die aktuelle Version von Quarto <a href="https://quarto.org/docs/get-started/">herunterladen</a> und installieren. Danach benötigte Visual Studio Code (nur) noch die <a href="https://marketplace.visualstudio.com/items?itemName=quarto.quarto">Quarto VS Code Extension</a> und dann war alles schick.</p>
<p>Ich konnte das Beispiel aus dem <a href="https://quarto.org/docs/get-started/hello/vscode.html">»Get Started«-Tutorial</a> eingeben und herausrendern (siehe <a href="https://www.flickr.com/photos/schockwellenreiter/53081746678/">Screenshot</a>). Die Quarto Extension bringt eine eigene Preview mit und startet auch gleich einen lokalen Server, der auf <em>Port 6460</em> lauscht.</p>
<p>Das motiviert und ermuntert natürlich zu weiteren Versuchen. Erst einmal möchte ich ein oder zwei meiner Seiten-Projekte damit testen, um mich sattelfester in der Arbeit mit Quarto und VSCode zu machen. Doch wer weiß, vielleicht wird danach auch der <em>Schockwellenreiter</em> nicht mehr mit RStudio, sondern mit Visual Studio Code erstellt? Für Euch da draußen sollte sich nichts ändern, aber da ich mit RStudio zum einen nie so richtig warm geworden bin und zum anderen die aktuelle Version auch nicht mehr mit meinem betagten MacBook Pro spielen will&nbsp;… Die Arbeit mit Visual Studio Code hingegen bringt mir von Tag zu Tag mehr Spaß. Schaun wir mal, wohin die Reise noch gehen wird. <em>Still digging!</em></p>



 ]]></description>
  <category>Visual Studio Code</category>
  <category>Quarto</category>
  <category>Statische Seiten</category>
  <category>Markdown</category>
  <category>Zettelkasten</category>
  <guid>https://kantel.github.io/posts/2023073001_hello_vscode/index.html</guid>
  <pubDate>Sun, 30 Jul 2023 14:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023073001_hello_vscode/images/helloquarto.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Generative Art: Pythons Turtle-Graphik als EPS-Datei abspeichern</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023072901_save_turtle_as_eps/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53079603965/"><img src="https://kantel.github.io/posts/2023072901_save_turtle_as_eps/images/epsturtle-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Erinnert Ihr Euch noch an mein Projekt »<a href="http://blog.schockwellenreiter.de/2022/03/2022031101.html">Generative Art zwischen zwei Pappedeckel</a>«? Seit meinem <a href="http://blog.schockwellenreiter.de/2022/10/2022103001.html">Abschied von TigerJython</a> ist dies leider ein wenig eingeschlafen, denn <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/tigerjython.html">TigerJythons</a> Turtle-Bibliothek war eine Säule dieses Projekts (die andere war (und ist immer noch) <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/py5.html">Py5</a>)<sup>1</sup>.</p>
<p>Seitdem ich aber über das <a href="https://kantel.github.io/posts/2023072402_py5_update/">Py5-Update berichtet</a> hatte, fraß sich dieses Projekt wieder in meinen Gehirnwindungen fest. Das Problem war ja, daß <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/turtlepython.html">(C)Pythons Turtle</a> aus der Standard-Bibliothek keine Möglichkeit bot, die Ergebnisse hochaufgelöst abzuspeichern<sup>2</sup>. Doch ist das wirklich so? Meine leicht verschütteten Tkinter-Kenntnisse (Pythons Turtle-Modul setzt auf Tkinter auf) brachten mich dann auf diese Lösung:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1">Turtle.getscreen().getcanvas().postscript(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> file_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".eps"</span>, width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> WIDTH, height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> HEIGHT)</span></code></pre></div>
<p>Überraschenderweise funktionierte dies. Und wenn man – wie bei mir eigentlich Standard – der Turtle einen expliziten <code>Screen</code> spendiert, kann man den Monster-Aufruf sogar noch ein wenig herunterbrechen:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1">cv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Screen.getcanvas()</span>
<span id="cb2-2">cv.postscript(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> file_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".eps"</span>, width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> WIDTH, height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> HEIGHT)</span></code></pre></div>
<p>Bei einer Fenstergröße von <code>WIDTH = 640</code> und <code>HEIGHT = 480</code> ist die so erzeugte Postscript-Datei (und auch ein daraus erstelltes PDF) 1.335 Pixel weit und 1.005 Pixel hoch. Das entspricht einer Größe von etwa 22 x 17 Zentimetern und dürfte für nahezu jedes zwischen zwei Pappedeckel gepreßtes Druckerzeugnis ausreichend sein (lediglich für Poster und Plakate müßte man sich etwas anderes überlegen, doch dazu weiter unten mehr).</p>
<p>Will man nun aus seinem Kunstwerk eine PNG-Datei erzeugen, kann man den Umweg über den <em>Python Image Library</em> (PIL) Nachfolger <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/pillow.html">Pillow</a> nehmen. Dafür sind nur wenige weitere Zeilen im Quellcode notwendig:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image</span>
<span id="cb3-2"></span>
<span id="cb3-3">img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(file_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".eps"</span>)</span>
<span id="cb3-4">img.save(file_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".png"</span>)</span></code></pre></div>
<p>Diese Datei besitzt allerdings wieder nur die ursprüngliche Größe des Fensters, dafür aber einen weißen Hintergrund, den Ihr mit dem <a href="http://cognitiones.kantel-chaos-team.de/multimedia/computergraphik/gc.html">Graphikprogramm Eures Vertrauens</a> auch transparent setzen könnt.</p>
<p>Das verwendete Programm, das einen asymmetrieschen Pythagoras-Baum zeichnet, hatte ich <a href="http://blog.schockwellenreiter.de/2021/01/2021011401.html">hier als Turtle-Programm schon einmal vorgestellt</a>. Ich habe lediglich die Hintergrundfarbe verändert und eine <a href="http://cognitiones.kantel-chaos-team.de/multimedia/farbpaletten/malewitsch.html">andere Palette</a> verwendet. Denn kompletten Quellcode gibt es hier und in meinem <a href="https://github.com/kantel/turtlepy/blob/master/sources/pythagoras3.py">GitHub Repositorium</a>:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Asymmetrischer Pythagoras-Baum</span></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Wird als Postcript-File gespeichert und dann</span></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mittels PIL nach .jpg/.png konvertiert</span></span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> turtle <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> t</span>
<span id="cb4-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb4-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image</span>
<span id="cb4-8"></span>
<span id="cb4-9">WIDTH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">640</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 640</span></span>
<span id="cb4-10">HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 480</span></span>
<span id="cb4-11">REC_LEVEL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Rekursions-Tiefe</span></span>
<span id="cb4-12"></span>
<span id="cb4-13">palette <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">51</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">46</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">54</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>),</span>
<span id="cb4-14">           (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">105</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">180</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">144</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">55</span>),</span>
<span id="cb4-15">           (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">215</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">158</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">140</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">82</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">48</span>)]</span>
<span id="cb4-16"></span>
<span id="cb4-17">wn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> t.Screen()</span>
<span id="cb4-18">wn.colormode(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>)</span>
<span id="cb4-19">wn.bgcolor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">230</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">226</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">204</span>)</span>
<span id="cb4-20">wn.setup(width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> WIDTH, height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> HEIGHT)</span>
<span id="cb4-21">wn.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Asymmetrischer Pythagoras-Baum"</span>)</span>
<span id="cb4-22"></span>
<span id="cb4-23">p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> t.Turtle()</span>
<span id="cb4-24">p.speed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb4-25">p.color(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb4-26">p.setheading(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>)</span>
<span id="cb4-27"></span>
<span id="cb4-28"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> tree(s, level):</span>
<span id="cb4-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> level <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb4-30">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span></span>
<span id="cb4-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb4-32">        quadrat(s)</span>
<span id="cb4-33">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Linke Seite</span></span>
<span id="cb4-34">        ls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>math.sqrt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb4-35">        p.forward(s)</span>
<span id="cb4-36">        p.left(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>)</span>
<span id="cb4-37">        p.forward(s)</span>
<span id="cb4-38">        p.right(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>)</span>
<span id="cb4-39">        p.forward(ls)</span>
<span id="cb4-40">        p.left(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>)</span>
<span id="cb4-41">        tree(ls, level <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-42">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Rechte Seite</span></span>
<span id="cb4-43">        rs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb4-44">        p.right(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">180</span>)</span>
<span id="cb4-45">        p.forward(rs)</span>
<span id="cb4-46">        p.left(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>)</span>
<span id="cb4-47">        tree(rs, level <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-48">        p.left(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>)</span>
<span id="cb4-49">        p.back(s)</span>
<span id="cb4-50"></span>
<span id="cb4-51"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> quadrat(s):</span>
<span id="cb4-52">    p.color(palette[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(s)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(palette)], palette[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(s)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(palette)])</span>
<span id="cb4-53">    p.begin_fill()</span>
<span id="cb4-54">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>):</span>
<span id="cb4-55">        p.forward(s)</span>
<span id="cb4-56">        p.left(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>)</span>
<span id="cb4-57">    p.end_fill()</span>
<span id="cb4-58"></span>
<span id="cb4-59">p.penup()</span>
<span id="cb4-60">p.setpos(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>HEIGHT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>)</span>
<span id="cb4-61"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bildschirm-Refresh ausschalten</span></span>
<span id="cb4-62">wn.tracer(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb4-63">p.pendown()</span>
<span id="cb4-64"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Für eine Rekursionstiefe &gt; 14 braucht man schon sehr viel Geduld</span></span>
<span id="cb4-65">tree(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>, REC_LEVEL) </span>
<span id="cb4-66">p.hideturtle()</span>
<span id="cb4-67"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bildschirm-Refresh wieder einschalten</span></span>
<span id="cb4-68">wn.update()</span>
<span id="cb4-69"></span>
<span id="cb4-70">file_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pythagoras"</span></span>
<span id="cb4-71">cv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> wn.getcanvas()</span>
<span id="cb4-72">cv.postscript(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> file_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".eps"</span>, width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> WIDTH, height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> HEIGHT)</span>
<span id="cb4-73"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># p.getscreen().getcanvas().postscript(file = file_name + ".eps", width = WIDTH, height = HEIGHT)</span></span>
<span id="cb4-74"></span>
<span id="cb4-75">img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(file_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".eps"</span>)</span>
<span id="cb4-76">img.save(file_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".png"</span>)</span>
<span id="cb4-77"></span>
<span id="cb4-78"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I did it, Babe!"</span>)</span>
<span id="cb4-79"></span>
<span id="cb4-80">wn.mainloop()</span></code></pre></div>
<p>Auch wenn diese Lösung erst einmal ausreichend scheint, ein wirklich zufriedenstellendes Ergebnis (siehe die obige Anmerkung zu Postern und Plakaten) wäre nur mit einer auflösungsunabhängigen Speicherung als SVG zu erreichen. Es gibt da die Bibliothek <a href="https://donkirkby.github.io/svg-turtle/">SaVaGe Turtle</a> (aka svg-turte), die verspricht, dies zu können (<a href="https://github.com/donkirkby/svg-turtle">GitHub Repo</a>, <a href="https://pypi.org/project/svg-turtle/">PyPI-Seite</a>). Bei meinen ersten Tests zeigte sie sich jedoch ein wenig störrisch (sie scheint mit Hex-Color-Werten nicht zurechtzukommen). Hier muß ich wohl noch ein wenig experimentieren. <em>Still digging!</em></p>
<p><strong>War sonst noch was?</strong> Ach ja, beim <a href="http://blog.schockwellenreiter.de/2022/03/2022033101.html">Stöbern durch meine alten Seiten</a> wurde ich an <a href="http://cognitiones.kantel-chaos-team.de/webworking/staticsites/pelican.html">Pelican</a> erinnert, den in Python geschriebenen <em>Static Site Generator</em>. Mit seinem Template <a href="https://github.com/getpelican/pelican-themes/tree/master/photowall">Photowall</a> wäre das Teil doch auch ein möglicher Kandidat für mein <a href="https://kantel.github.io/posts/2023072001_wunderkammer/">Kunst- und Wunderkammer-Projekt</a>. Ich glaube, da muß ich auch noch einmal drüber nachdenken.</p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Fußnoten</h2>

<ol>
<li id="fn1"><p><a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/drawbot.html">DrawBot</a>, obwohl durchaus nicht ohne Charme, habe ich außen vorgelassen, da ich nicht schon wieder in die »Mac only« Falle tappen wollte.↩︎</p></li>
<li id="fn2"><p>Wie man dies in Py5 bewerkstelligt, <a href="http://blog.schockwellenreiter.de/2022/07/2022072201.html">hatte ich hier getestet und beschrieben</a>, eine Lösung für TigerJython ein paar Tage später <a href="http://blog.schockwellenreiter.de/2022/07/2022072301.html">hier vorgestellt</a>.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Python</category>
  <category>Turtle</category>
  <category>Generative Art</category>
  <guid>https://kantel.github.io/posts/2023072901_save_turtle_as_eps/index.html</guid>
  <pubDate>Sat, 29 Jul 2023 17:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023072901_save_turtle_as_eps/images/epsturtle.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Curiouser and Curiouser: Alice’s Adventures in Wonderland (1972)</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023072803_alice_wunderland_1972/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.youtube.com/watch?v=GsUNpHkDW0o"><img src="https://kantel.github.io/posts/2023072803_alice_wunderland_1972/images/alicewunderland1972-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p><strong>All about Alice</strong>: Statt der gewohnten, freitäglichen Video-Tutorials gibt es heute einen Musicalfilm im <em>Schockwellenreiter</em>: Der britische Film »<a href="https://de.wikipedia.org/wiki/Alice_im_Wunderland_(1972)">Alice’s Adventures in Wonderland</a>« (<a href="https://www.youtube.com/watch?v=GsUNpHkDW0o">YouTube-Link</a>) des Regisseurs <em>Willim Sterling</em> aus dem Jahre 1972 hält sich – obwohl er als Musical verwirklicht wurde – sehr eng an die Buchvorlage von <em>Lewis Caroll</em>, einige Textpassagen wurden sogar wörtlich übernommen. Dennoch wurde er von der zeitgenössischen Kritik zurückhaltend bewertet, wohl auch, weil die von der damals 16-jährigen <em>Fiona Fullerton</em> gespielten Alice wie auch die gesamte Anmutung des Films von der Disney-Ästhetik der berühmten und alles überstrahlenden Hollywood-Alice ziemlich weit abwich.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/GsUNpHkDW0o" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Dabei war der Film mit <em>Michael Crawford</em> (White Rabbit), <em>Dudley Moore</em> (Siebenschläfer), <em>Ralph Richardson</em> (Raupe), <em>Flora Robson</em> (Herzköniging) und <em>Peter Sellers</em> (Märzhase) prominent besetzt und mit <em>John Barry</em> und <em>Don Black</em> sorgten zwei erfolgreiche, britische Komponisten für die Songs und den Soundtrack. Immerhin erhielt er 1973 zwei Auszeichnungen beim <em>BAFTA Award</em> für die beste Kamera und das beste Kostümdesign. Und schon 1972 erschien in Belgien (wo denn sonst?) eine Comic-Version des Films in der Tageszeitung <em>Le Soir</em>.</p>
<p>Der Film ist nie mit einer deutschen Tonspur auf DVD erschienen und auch YouTube kennt nur diese leicht verrauschte, englische Fassung, der man das Alter anmerkt. Aber ich finde den Film charmant und <em>very british</em> und die Veröffentlichung hier im <del>Blog</del> Kritzelheft soll mich daran erinnern und dazu insprieren, meine <a href="http://blog.schockwellenreiter.de/2020/11/2020111502.html">eigenen Wunderland-Exkursionen</a> mit <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/twine2.html">Twine</a> wieder aufzunehmen (und diese eventuell mit Ausflügen nach <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/renpy.html">Ren’Py</a> zu ergänzen).</p>
<p>Das ist alles sehr kurios und noch viel kurioser. Doch bis dahin: Habt erst einmal viel Spaß mit dem Filmchen!</p>



 ]]></description>
  <category>Alice</category>
  <category>Kino</category>
  <category>Twine</category>
  <category>Interactive Fiction</category>
  <guid>https://kantel.github.io/posts/2023072803_alice_wunderland_1972/index.html</guid>
  <pubDate>Fri, 28 Jul 2023 18:55:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023072803_alice_wunderland_1972/images/alicewunderland1972.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Processing Version 4.3 freigegeben</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023072802_processing_4_3/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53076796102/"><img src="https://kantel.github.io/posts/2023072802_processing_4_3/images/processing43test-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Vor zwei Tagen wurde die <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processing.html">Processing (Java)</a>-Version 4.3 freigegeben. Das Update betrifft sowohl Processing selber (das darunterliegende Java wurde auf die Version 17.0.8+7 angehoben) wie auch die Processing-eigene IDE (<em>Processing Development Environement</em> (PDE) genannt). Neben einigen kleineren Bugfixes sind die <a href="https://github.com/processing/processing4/releases">Neuerungen</a> eher kosmetischer Natur: Das Dock-Icon wurde geändert, so daß es sich besser vom <a href="http://cognitiones.kantel-chaos-team.de/produktivitaet/visualstudiocode.html">Visual Studio Code</a>-Icon unterscheidet. Die Probleme möchte ich einmal haben …</p>
<p>Natürlich mußte ich mir die neue Version gleich herunterladen und mit einem <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processingpy.html">Processing.py</a>-Experiment testen. Die gute Nachricht: Processing.py läuft immer noch ohne Probleme. Die schlechte Nachricht: Processing.py gibt in der Processing-4.3-PDE immer noch keine aussagekräftigen Fehlermeldungen heraus – ein Feature, das in Processing 3 noch vorhanden war.</p>
<p>Ich finde das schade, denn bei allen Vorzügen, die <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/py5.html">Py5</a>, der Python3-Port von Processing, bietet, besitzt Processing.py den Vorzug der leichteren Installation und der besseren Integration in die Processing-Welt. Ich hoffe ja immer noch, daß sich irgendjemand erbarmt und Processing.py auf den Processing-4-Stand anhebt (mir fehlt leider das Know-How dafür).</p>
<p>Processing 4.3 kann <a href="https://processing.org/download">hier herungergeladen</a> werden.</p>



 ]]></description>
  <category>Processing</category>
  <category>Creative Coding</category>
  <category>Processing.py</category>
  <guid>https://kantel.github.io/posts/2023072802_processing_4_3/index.html</guid>
  <pubDate>Fri, 28 Jul 2023 17:25:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023072802_processing_4_3/images/processing43test.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
