<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Der Schockwellenreiter</title>
<link>https://kantel.github.io/</link>
<atom:link href="https://kantel.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description>Schockwellenreiter</description>
<generator>quarto-1.5.47</generator>
<lastBuildDate>Mon, 10 Feb 2025 15:30:00 GMT</lastBuildDate>
<item>
  <title>Ein Neustart mit der Python Arcade Bibliothek?</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025021001_arcade_neustart/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54316831851/"><img src="https://kantel.github.io/posts/2025021001_arcade_neustart/images/arcadeneustart-b.jpg" class="img-fluid"></a></p>
<p>Vor einigen Jahren hatte ich ja schon einmal mit der <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/arcade.html">Python Arcade Bibliothek</a> experimentiert. Damals (2021) waren meine Versuche eingeschlafen, weil das Teil für meinen Geschmack noch zu viele <em>Glitches</em> aufwies. Doch am Wochenende kam mir ein <a href="https://www.youtube.com/watch?v=qf47Zqs2xSw">erstes Video</a> einer geplanten <a href="https://www.youtube.com/playlist?list=PL1P11yPQAo7qgk8uk_A5UxiTrMt6obCc5">Tutorialreihe</a> unter, und das versprach, daß mit der brandneuen <a href="https://github.com/pythonarcade/arcade">Version&nbsp;3 von Arcade</a> – erschienen vor zwei Wochen – die Kinderkrankheiten endlich überwunden sein sollten. Das machte mich natürlich neugierig.</p>
<p><strong>Doch zuerst einmal zur Erinnerung</strong>: Was ist eigentlich Arcade? Arcade ist eine freie (MIT-Lizenz) Python-Bibliothek, die <em>Paul Vincent Craven</em> <a href="http://blog.schockwellenreiter.de/2018/05/2018051502.html">vor etwa sieben Jahren</a> aus Frust über den damaligen Stillstand und die dadurch nie gefixten Bugs von <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">PyGame</a> entwickelt hatte. Außerdem sollte sie für Anfänger einfach zu lernen (ohne Pygames großen <em>Boilerplate Overkill</em> – das hat die Arcade-Bibliothek mit <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygamezero.html">Pygame Zero</a> gemeinsam), aber dennoch leistungsfähig sein. Arcade setzt auf <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pyglet.html">Pyglet</a> (und damit auf OpenGL) auf und kann mit der Physik-Engine <a href="https://www.pymunk.org/en/latest/index.html">Pymunk</a> verkuppelt werden.</p>
<p>In der aktuellen Version&nbsp;3 von Arcade wurde die Bibliothek vollständig überarbeitet (was sich auch an einem <a href="https://github.com/pythonarcade/arcade">neuen GitHub-Repositorium</a> und einer <a href="https://api.arcade.academy/en/latest/">neu erstellten Dokumentation</a> festmachen lässt). Daher liefen <a href="http://blog.schockwellenreiter.de/2021/04/2021040701.html">meine alten Versuche</a> mit der neuen Version der Bibliothek nicht mehr, ich mußte also komplett neu beginnen.</p>
<p>Die Neuaufstellung hat aber der Arcade-Bibliothek gut getan, sie wurde einerseits schlanker und andererseits leistungsfähiger und offener. Ein minimales, aber dennoch lauffähiges Template kann zum Beispiel nun so aussehen:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> arcade</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> GameWorld(arcade.Window):</span>
<span id="cb1-4"></span>
<span id="cb1-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-6">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">640</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Arcade Herdplatte"</span>)</span>
<span id="cb1-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.background_color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>)</span>
<span id="cb1-8"></span>
<span id="cb1-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> setup(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span>
<span id="cb1-11"></span>
<span id="cb1-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> on_draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.clear()</span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> main():</span>
<span id="cb1-16">    window <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> GameWorld()</span>
<span id="cb1-17">    window.setup()</span>
<span id="cb1-18">    arcade.run()</span>
<span id="cb1-19"></span>
<span id="cb1-20"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<span id="cb1-21">    main()</span></code></pre></div>
<p>Das ist ein vollständiges Arcade-Programm und öffnet ein Fenster mit einem grauen Hintergrund. Es ist zwar noch nicht ganz der Minimalismus von Pygame Zero, aber gegenüber dem <em>Overhead</em>, den Pygame verlangt, doch schon eine Vereinfachung. Und nach einer ersten Durchsicht der Arcade-Dokumentation ist die Bibliothek bedeutend leistungsfähiger als Pygame Zero. Und Pygame Zero hat seit 2018 kein echtes Update mehr erfahren, während die Python Arcade Bbliothek aktuell 149 Kontributoren besitzt, die an der Weiterentwicklung arbeiten.</p>
<p>Das hat mich natürlich angefixt und ich mußte – in Anlehnung an das <a href="https://api.arcade.academy/en/latest/tutorials/platform_tutorial/index.html">»offizielle« Beginner-Tutorial</a> – mit Arcade spielen. Meine (noch nicht fertige – ich bin gestern bis <a href="https://api.arcade.academy/en/latest/tutorials/platform_tutorial/step_06.html">Step&nbsp;6</a> gekommen) Version sieht so aus (siehe <a href="https://www.flickr.com/photos/schockwellenreiter/54316831851/">Screenshot</a> im Bannerbild oben):</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">Simple Platformer Game with Arcade</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> arcade</span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Constants</span></span>
<span id="cb2-7">WINDOW_WIDTH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">840</span></span>
<span id="cb2-8">WINDOW_HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">360</span></span>
<span id="cb2-9">WINDOW_TITLE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Erste Schritte mit Arcade 3.0"</span></span>
<span id="cb2-10"></span>
<span id="cb2-11">TILE_SCALING <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span></span>
<span id="cb2-12">TILE_SIZE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb2-13"></span>
<span id="cb2-14">PLAYER_SPEED <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb2-15">GRAVITY <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-16">PLAYER_JUMP <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span></span>
<span id="cb2-17"></span>
<span id="cb2-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> GameWorld(arcade.Window):</span>
<span id="cb2-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb2-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Main application class.</span></span>
<span id="cb2-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb2-22"></span>
<span id="cb2-23">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-24"></span>
<span id="cb2-25">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Call the parent class to set up the window</span></span>
<span id="cb2-26">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(WINDOW_WIDTH, WINDOW_HEIGHT, WINDOW_TITLE)</span>
<span id="cb2-27">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Position of the window</span></span>
<span id="cb2-28">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.set_location(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1980</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb2-29">        </span>
<span id="cb2-30">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Variable to hold our texture for our player</span></span>
<span id="cb2-31">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player_texture <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb2-32">        </span>
<span id="cb2-33">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Separate variable that holds the player sprite</span></span>
<span id="cb2-34">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player_sprite <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb2-35">        </span>
<span id="cb2-36">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># SpriteList for our player</span></span>
<span id="cb2-37">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb2-38">        </span>
<span id="cb2-39">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># SpriteList for our boxes and ground</span></span>
<span id="cb2-40">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.wall_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb2-41"></span>
<span id="cb2-42">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> setup(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-43">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Set up the game here. Call this function to restart the game."""</span></span>
<span id="cb2-44">        </span>
<span id="cb2-45">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player_texture <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> arcade.load_texture(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data/gameboy_idle.png"</span>)</span>
<span id="cb2-46">        </span>
<span id="cb2-47">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player_sprite <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> arcade.Sprite(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player_texture, scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.65</span>)</span>
<span id="cb2-48">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player_sprite.center_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span></span>
<span id="cb2-49">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player_sprite.center_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> WINDOW_HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb2-50">        </span>
<span id="cb2-51">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># SpriteList for our player</span></span>
<span id="cb2-52">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> arcade.SpriteList()</span>
<span id="cb2-53">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player_list.append(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player_sprite)</span>
<span id="cb2-54">        </span>
<span id="cb2-55">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.wall_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> arcade.SpriteList(use_spatial_hash <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb2-56">        </span>
<span id="cb2-57">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the ground</span></span>
<span id="cb2-58">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This shows using a loop to place multiple sprites horizontally</span></span>
<span id="cb2-59">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, WINDOW_WIDTH, TILE_SIZE):</span>
<span id="cb2-60">            wall <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> arcade.Sprite(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data/grass001.png"</span>, scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TILE_SCALING)</span>
<span id="cb2-61">            wall.center_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x</span>
<span id="cb2-62">            wall.center_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TILE_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-63">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.wall_list.append(wall)</span>
<span id="cb2-64">        </span>
<span id="cb2-65">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Put some crates on the ground</span></span>
<span id="cb2-66">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This shows using a coordinate list to place sprites</span></span>
<span id="cb2-67">        coordinate_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">48</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">240</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">48</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">720</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">48</span>]]</span>
<span id="cb2-68">        </span>
<span id="cb2-69">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> coordinate <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> coordinate_list:</span>
<span id="cb2-70">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add a crate on the ground</span></span>
<span id="cb2-71">            wall <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> arcade.Sprite(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data/box01.png"</span>, scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TILE_SCALING)</span>
<span id="cb2-72">            wall.position <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> coordinate</span>
<span id="cb2-73">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.wall_list.append(wall)</span>
<span id="cb2-74">        </span>
<span id="cb2-75">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a Platformer Physics Engine.</span></span>
<span id="cb2-76">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This will handle moving our player as well as collisions between</span></span>
<span id="cb2-77">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the player sprite and whatever SpriteList we specify for the walls.</span></span>
<span id="cb2-78">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.physics_engine <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> arcade.PhysicsEnginePlatformer(</span>
<span id="cb2-79">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player_sprite, walls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.wall_list, gravity_constant<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>GRAVITY</span>
<span id="cb2-80">        )</span>
<span id="cb2-81"></span>
<span id="cb2-82">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.background_color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>)</span>
<span id="cb2-83"></span>
<span id="cb2-84">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> on_draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-85">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Render the screen."""</span></span>
<span id="cb2-86"></span>
<span id="cb2-87">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The clear method should always be called at the start of on_draw.</span></span>
<span id="cb2-88">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># It clears the whole screen to whatever the background color is</span></span>
<span id="cb2-89">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set to. This ensures that you have a clean slate for drawing each</span></span>
<span id="cb2-90">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># frame of the game.</span></span>
<span id="cb2-91">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.clear()</span>
<span id="cb2-92"></span>
<span id="cb2-93">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Code to draw other things will go here</span></span>
<span id="cb2-94">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.wall_list.draw()</span>
<span id="cb2-95">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player_list.draw()</span>
<span id="cb2-96">    </span>
<span id="cb2-97">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> on_update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, delta_time):</span>
<span id="cb2-98">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Movement and Game Logic"""</span></span>
<span id="cb2-99"></span>
<span id="cb2-100">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Move the player using our physics engine</span></span>
<span id="cb2-101">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.physics_engine.update()</span>
<span id="cb2-102">    </span>
<span id="cb2-103">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> on_key_press(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, key, modifiers):</span>
<span id="cb2-104">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Called whenever a key is pressed."""</span></span>
<span id="cb2-105">        </span>
<span id="cb2-106">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> arcade.key.ESCAPE:</span>
<span id="cb2-107">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.setup()</span>
<span id="cb2-108">        </span>
<span id="cb2-109">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> arcade.key.UP <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> arcade.key.W:</span>
<span id="cb2-110">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.physics_engine.can_jump():</span>
<span id="cb2-111">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player_sprite.change_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PLAYER_JUMP</span>
<span id="cb2-112"></span>
<span id="cb2-113">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> arcade.key.LEFT <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> arcade.key.A:</span>
<span id="cb2-114">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player_sprite.change_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>PLAYER_SPEED</span>
<span id="cb2-115">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> arcade.key.RIGHT <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> arcade.key.D:</span>
<span id="cb2-116">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player_sprite.change_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PLAYER_SPEED</span>
<span id="cb2-117"></span>
<span id="cb2-118">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> on_key_release(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, key, modifiers):</span>
<span id="cb2-119">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Called whenever a key is released."""</span></span>
<span id="cb2-120">        </span>
<span id="cb2-121">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> arcade.key.LEFT <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> arcade.key.A:</span>
<span id="cb2-122">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player_sprite.change_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-123">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> arcade.key.RIGHT <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> arcade.key.D:</span>
<span id="cb2-124">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player_sprite.change_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-125"></span>
<span id="cb2-126"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> main():</span>
<span id="cb2-127">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Main function"""</span></span>
<span id="cb2-128">    window <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> GameWorld()</span>
<span id="cb2-129">    window.setup()</span>
<span id="cb2-130">    arcade.run()</span>
<span id="cb2-131"></span>
<span id="cb2-132"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<span id="cb2-133">    main()</span></code></pre></div>
<p>Bei aller Lobhudelei habe ich zwei Dinge zu bemängeln. Erstens: Mein <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/thonny.html">Thonny</a> gibt eine seltsame und für mich unverständliche Meldung bei jedem Start eines Arcade-Skripts aus:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">2025-02-10</span> 17:05:47.825 Python<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">3168:94568</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> ApplePersistenceIgnoreState: Existing state will not be touched. New state will be written to /var/folders/bz/7v6zs8_x2rgb97_7tfb77x8h0000gp/T/org.python.python.savedState</span></code></pre></div>
<p>Das scheint zwar den Programmablauf nicht zu beeinflussen (und die Meldung klingt auch eigentlich harmlos), aber ich würde trotzdem gerne wissen, was sie bedeutet.</p>
<p>Der zweite Einwand ist gewichtiger: Im Gegensatz zu Pygame scheint es keine Möglichkeit zu geben, Arcade-Skripte webtauglich zu machem so daß die damit erstellten Spiele auch im Browser laufen. Zwar <a href="https://api.arcade.academy/en/latest/about/faq.html#can-arcade-run-on">verspricht die FAQ</a></p>
<blockquote class="blockquote">
<p>For the moment, the Arcade and <a href="https://pyglet.readthedocs.io/en/development/">pyglet</a> teams are eagerly watching ongoing developments in <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGPU_API">WebGPU</a> and its <a href="https://developer.mozilla.org/en-US/docs/WebAssembly">WASM</a> integrations</p>
</blockquote>
<p>aber in absehbarer Zeit rechne ich hier mit keinem Fortschritt.</p>
<p>Dennoch, im Gegensatz zu <a href="http://blog.schockwellenreiter.de/2021/04/2021040501.html">meinen</a> <a href="http://blog.schockwellenreiter.de/2021/04/2021040701.html">früheren</a> <a href="http://blog.schockwellenreiter.de/2021/04/2021040801.html">Versuchen</a> macht das Entwickeln mit Arcade mir mittlerweile richtig Spaß. Daher könnt Ihr mit Sicherheit in der nächsten Zeit weitere Arcade-Experimente in diesem <del>Blog</del> Kritzelheft erwarten. <em>Still digging!</em></p>



 ]]></description>
  <category>Spieleprogrammierung</category>
  <category>Python</category>
  <category>Arcade</category>
  <guid>https://kantel.github.io/posts/2025021001_arcade_neustart/</guid>
  <pubDate>Mon, 10 Feb 2025 15:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025021001_arcade_neustart/images/arcadeneustart.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Künstliche Intelligenz und Bildergeschichten: Video-Tutorials zum Wochenende</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025020701_ki_und_bildergeschichten/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54312222406/"><img src="https://kantel.github.io/posts/2025020701_ki_und_bildergeschichten/images/dachstv-b.jpg" class="img-fluid"></a></p>
<p>Da <a href="https://kantel.github.io/posts/2025013101_video_tutorials/">trotz der Anstrengung von letzter Woche</a> mein Feedreader immer noch überläuft, möchte ich Euch auch für dieses Wochenende noch ein paar Video-Tutorials empfehlen. Dieses Mal geht es zum einen um Tutorials zur bildgenerierenden gekünstelten Intelligenzia und zum anderen – da ich diese in der Hauptsache nutze, um Bilder für interaktive Geschichten zu generieren – um meine bevorzugen Engines dafür, um <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/twine2.html">Twine</a> und <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/renpy.html">Ren’Py</a><sup>1</sup>.</p>
<section id="scenario" class="level2">
<h2 class="anchored" data-anchor-id="scenario">Scenario</h2>
<p><a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/scenario.html">Scenario</a> gibt in unregelmäßigen Abständen und zu völlig unsortierten Themen immer wieder mal kürzere Video-Tutorials zur eigenen Engine heraus.</p>
<iframe class="if16_9" src="https://www.youtube.com/embed/GXdlhTPj6Lc?si=E0402l7zdNLci2u1" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p>Meben dem obigen »<a href="https://www.youtube.com/watch?v=GXdlhTPj6Lc">Manage and Optimize Your Custom AI Models in Scenario</a>« waren das in den letzten Wochen:</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=2zbjyTAqP1o&amp;list=WL">Introducing Skyboxes on Scenario</a>.</li>
<li><a href="https://www.youtube.com/watch?v=uztCBQzWI-E">Scenario Prompting Best Practices</a>.</li>
<li><a href="https://www.youtube.com/watch?v=WcYHKy6f_bs">Explore Dual Reference Image Mode on Scenario</a>.</li>
<li><a href="https://www.youtube.com/watch?v=MFkITxCaH30">Pixelate Your Images in Scenario</a>.</li>
<li>Generating Seamless Textures – <a href="https://www.youtube.com/watch?v=hsvWcT1n-YI">Part 1</a> and <a href="https://www.youtube.com/watch?v=MGzvS8-Pags">Part 2</a>.</li>
<li><a href="https://www.youtube.com/watch?v=rVLKjjwBIhI">Seamlessly Expand Your Images in Scenario</a>.</li>
<li><a href="https://www.youtube.com/watch?v=dX4ADlMY-8Q">Create Consistent Content with Image-to-Image Mode</a>.</li>
</ul>
</section>
<section id="openart.ai" class="level2">
<h2 class="anchored" data-anchor-id="openart.ai">OpenArt.ai</h2>
<iframe class="if16_9" src="https://www.youtube.com/embed/k4xlqrHWGmM?si=0EuBvyKKcaa2whTt" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p><em>Excelerator</em>: <a href="https://www.youtube.com/watch?v=k4xlqrHWGmM">Easily Train Your Own AI Image Model with Flux on OpenArt</a>.</p>
<p><em>OpenArt.ai</em> hat einen <a href="https://www.youtube.com/@openart_ai">eigenen YouTube-Kanal</a>. Dort findet Ihr viele Tutorials, zum Beispiel »<a href="https://www.youtube.com/watch?v=nuhJih8pRl0">4K Image Upscaler with 3 Modes (Creative, Refined, Precise)</a> - Ultimate Upscale Tutorial« oder »<a href="https://www.youtube.com/watch?v=SY28s_omVxw">How to use the Pose Editor for Characters on OpenArt</a>«. Für den Einstieg eignet sich die Playlist »<a href="https://www.youtube.com/playlist?list=PL8rr1SSHW3sm39rfmjiguKLUKhMcmB82N">OpenArt Tutorials</a>« mit aktuell 25 Videos (wird noch aktualisiert).</p>
<ul>
<li>OpenArt AI - <a href="https://www.youtube.com/watch?v=MjtDMKAvMN8">Tutorial and Complete Review</a> [COMPLETE].</li>
<li><a href="https://www.youtube.com/watch?v=o_jN3I4oIfE">I explore the Powerful AI IMAGE EDITING TOOLS in OpenArt.ai</a>.</li>
</ul>
</section>
<section id="leonardo-ai-und-sonstige-engines" class="level2">
<h2 class="anchored" data-anchor-id="leonardo-ai-und-sonstige-engines">Leonardo AI und sonstige Engines</h2>
<iframe class="if16_9" src="https://www.youtube.com/embed/Fyd2G7IP0GQ?si=JC-s87Mumwf9cIdl" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p><a href="https://www.youtube.com/watch?v=Fyd2G7IP0GQ">The ACTUAL Way to Create Consistent Characters with Leonardo Ai</a> – Easy Consistent Ai Characters!</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=6XEfvospqYo">Erstellen Sie einen konsistenten Charakter – Leonardo AI</a> 🔥🔥 Bisher einfachste Methode.</li>
<li><a href="https://www.youtube.com/watch?v=m0GcqbV5BV4">Creating Consistent Characters in Leonardo AI</a> (Made Simple, Free Plan).</li>
<li><a href="https://www.youtube.com/watch?v=HAQfks97cls">How to make NSFW images with Leonardo AI</a>.</li>
<li><a href="https://www.youtube.com/watch?v=89w8rfyWDec">How To Create Unlimited AI Images With AI | Text to image AI</a>.</li>
<li>LoRA Training Tutorial: <a href="https://www.youtube.com/watch?v=Fo_x6XUhECg">TensorArt Feature Update</a>.</li>
<li>Luma Dream Machine Update: <a href="https://www.youtube.com/watch?v=pZUelsi3D4M">No Prompt Engineering Needed</a>!</li>
</ul>
</section>
<section id="twine" class="level2">
<h2 class="anchored" data-anchor-id="twine">Twine</h2>
<iframe class="if16_9" src="https://www.youtube.com/embed/hmAvZnYAy5w?si=ELk_Rb8L4uCOXUbF" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p>Von <em>Let’s Make a Game!</em> gibt es ein neues Twine-Spiel »<a href="https://projectaon.org/">Project Aon</a>«. Er hat die Entstehungsgeschichte auf seinem YouTube-Kanal dokumentiert. In seiner Reihe sind neu erschienen: »<a href="https://www.youtube.com/watch?v=hmAvZnYAy5w">217: Project Aon</a>« und »<a href="https://www.youtube.com/watch?v=3ZfR08fQnNM">218: Using Fighting Fantasy rules in Twine games</a>. Davor hat er in seiner Reihe als Nummer 216 zu meiner Erbauung noch <a href="https://www.youtube.com/watch?v=ScYoESxSZCE">Archive.org’s Gamebook Collection</a> vorgestellt.</p>
<ul>
<li>Auch <em>Dan Cox</em> hat seine vor neun Monaten unterbrochene Tutorial-Reihe zu »Twine und SugarCube« vor vier Tagen wieder aufgenommen. Bisher sind die Videos »<a href="https://www.youtube.com/watch?v=VvjTZ5oOfhk">Button Macro</a>«, »<a href="https://www.youtube.com/watch?v=fA4MPGOib24">Checkbox Macro</a>«, »<a href="https://www.youtube.com/watch?v=DG2ivI4YdKU">Radiobutton Macro</a>« und »<a href="https://www.youtube.com/watch?v=Nj3XdZYqhik">Numberbox Macro</a>« erschienen.</li>
<li><em>Chay Collins</em>: »<a href="https://www.youtube.com/watch?v=ALSli4hzlKA">Transcending Time in Twine</a>«.</li>
<li>Von <em>Alejandro Quan-Madrid</em> gibt es eine siebenteilige Playlist »<a href="https://www.youtube.com/playlist?list=PLuPOIXwQwZKyMnFmv-bBTkg3vnEPOOpHr">Twine Tutorials</a>« mit eher kurzen Videos.</li>
<li><a href="https://www.youtube.com/watch?v=r3xNfIoYCyM">Adding 3D models to Twine passages with Three js</a> (Snowman Template) – <a href="https://www.youtube.com/watch?v=TIsGbC2QK00">Updated</a>.</li>
</ul>
<p>Und zum Schluß noch einen Ausflug zu der ebenfalls freien, Twine-ähnlichen Engine <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/inkle.html">Ink und ihrer IDE Inky</a>: »<a href="https://www.youtube.com/watch?v=WEu7MaasdEo">Create WEB COMICS and INTERACTIVE STORIES</a>«. Denn von <em>Inkle</em>, der Spieleschmiede, die hinter <em>Ink und Inky</em> steht, gibt es ein neues Spiel: »<a href="https://www.inklestudios.com/overboard/">Overboard</a>!« Der YouTuber <em>NeatPick</em> hat es <a href="https://www.youtube.com/watch?v=Y8F1G9GDyEs">in 45 Minuten durchgespielt</a>.</p>
</section>
<section id="renpy" class="level2">
<h2 class="anchored" data-anchor-id="renpy">Ren’Py</h2>
<iframe class="if16_9" src="https://www.youtube.com/embed/RmJpnAvcjrA?si=FRXucstFro6mIPZg" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p>Susan Shu Chang: »<em><a href="https://www.youtube.com/watch?v=RmJpnAvcjrA">Narrative-focused video games development with Ren’Py an open source engine</a></em>«, PyCon US von 2021.</p>
<iframe class="if16_9" src="https://www.youtube.com/embed/75NtGaBys-o?si=cV399TugpHdS9DmZ" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p>Von <em>Cosmo Cat</em> gibt es eine 18 Videos umfassende Reihe »<a href="https://www.youtube.com/playlist?list=PL9xdFa4m3yaVaZNCFPBvpJZBn24CiCoiP">Ren’Py for Beginners</a>«.</p>
<ul>
<li><em>Kia Azad</em>: <a href="https://www.youtube.com/watch?v=E5urehtQTNQ">DnD style roll for renpy choices</a>.</li>
<li><em>Discover with Mia</em>: <a href="https://www.youtube.com/watch?v=eOtjvoICkFE">Master the Ren’Py Multipage Inventory System with Python</a> (Step-by-Step).</li>
<li><em>Timitu</em>: <a href="https://www.youtube.com/watch?v=30BPMkTRnTY">A look at Ren’py Basic Credits</a>.</li>
<li><em>Mime Media AS</em>: Renpy Tutorial: <a href="https://www.youtube.com/watch?v=RN7oYhWyh2U">Advanced Transitions</a>.</li>
<li><em>Per K Grog</em>: <a href="https://www.youtube.com/watch?v=Crocyzt3Ivo">Walking in Ren’Py with Keys</a>.</li>
<li><em>Zeil Learnings</em>: RenPy Tutorial using Flags: <a href="https://www.youtube.com/watch?v=j0N_gSyJMHw">Deciding the ending in a Ren’Py Game</a>.</li>
<li>Auf <em>Ren’Py Start Tutorials</em> gibt es die derzeit 118 Videos umfassende Reihe »<a href="https://www.youtube.com/playlist?list=PL0WLCTtC1EYUibimxDGhkPQin7bo39PlV">Ren’Py Visual Novel Engine</a>«, die aktuell noch ständig aktualisiert wird. Ich habe den Kanal daher abonniert.</li>
</ul>
<p><strong>War sonst noch was?</strong> Ach ja, <em><a href="https://de.wikipedia.org/wiki/Boris_Eldagsen">Boris Eldagsen</a></em> zeigt in seinem »<a href="https://www.youtube.com/watch?v=0XB-omD8Pls">TRAUMA P0RN Artist Talk</a>« wie er in seiner gleichnamigen, experimentellen Installation aus Photographien, KI-generierten Bildern und Objekten, sich mit den Traumata als Langzeitfolgen des (2. Welt-) Krieges auseinandersetzt.</p>
<iframe class="if16_9" src="https://www.youtube.com/embed/JYZcHSqqxtg?si=obS70sJaaVIp3aXW" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p>Und dann gibt es noch das interessante Video »<a href="https://www.youtube.com/watch?v=JYZcHSqqxtg">How AI pioneer Doug Hofstadter wrote Gödel, Escher, Bach</a>« von <em>Game Thinking TV</em>. Das volle, fast vierzigminütige Interview »<a href="https://www.youtube.com/watch?v=R6e08RnJyxo">Gödel, Escher, Bach author Doug Hofstadter on the state of AI today</a>« findet Ihr ebenfalls auf diesem Kanal.</p>
<p>Zum krönenden Abschluß fragt der <em>Bayerische Rundfunk</em>: <a href="https://www.youtube.com/watch?v=kLexLoLq7uw">Kinderbücher mit KI: Ersetzt künstliche Intelligenz künftig Illustratoren</a>? Wenn ja – was wäre so schlimm daran? Schließlich hat die Photographie vor über 150 Jahren ja auch schon die (schlechten – die guten haben überlebt) Portraitmalerinnen und -maler ersetzt.</p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54312222406/">Dachs guckt TV</a></em>, erstellt mit <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/scenario.html">Scenario</a>. Prompt: »<em>A badger in a red dressing gown sits in a wing chair in a cave and watches television. Next to the chair, an old-fashioned floor lamp illuminates the scene. There are shelves with books on the walls. The moon shines through a window opening in the background. colored french comic style</em>«. Modell: Flux Composition, Style: Expressive Comic Characters.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Fußnoten</h2>

<ol>
<li id="fn1"><p>Natürlich gehört in meine Liste der bevorzugten Werkzeuge für interaktive Geschichten auch noch die <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/tuesdayjs.html">Tuesday JS Visual Novel Engine</a>, aber für diese scheint es zu meinem großen Bedauern kaum Tutorials auf YouTube zu geben.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Künstliche Intelligenz</category>
  <category>Bilder</category>
  <category>Scenario</category>
  <category>OpenArt.ai</category>
  <category>Flux.1</category>
  <category>Leonardo AI</category>
  <category>Interactive Fiction</category>
  <category>RenPy</category>
  <category>Python</category>
  <category>Twine</category>
  <guid>https://kantel.github.io/posts/2025020701_ki_und_bildergeschichten/</guid>
  <pubDate>Fri, 07 Feb 2025 13:10:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025020701_ki_und_bildergeschichten/images/dachstv.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Mozilla Thunderbird Version 135.0 freigegeben</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025020605_thunderbird_update/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54251805272/"><img src="https://kantel.github.io/posts/2025020605_thunderbird_update/images/thunderbird-b.jpg" class="img-fluid"></a></p>
<p>Und noch ein nachgeschobenes Update von gestern: Die Entwickler des <a href="http://www.mozillamessaging.com/">Mozilla Thunderbird</a> haben die Version 135.0 freigegeben und damit auch <a href="https://www.thunderbird.net/en-US/thunderbird/135.0/releasenotes/">Sicherheitslücken</a> behoben.</p>
<p>Thunderbird weist selbst auf dieses Update hin. Diese Prozedur kann aber auch wie immer über das Menü <code>Hilfe &gt; Über Thunderbird</code> angestoßen werden. <em>(Mein <a href="https://wwwuser.gwdguser.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54251805272/">Thunderbird hunts Firefox</a></em>, erstellt mit <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/scenario.html">Scenario</a>. Prompt: »<em>illustration of a majestic thunderbird with colored feathers soaring above a mountain range during a bright sunset, hunting a red firefox</em>«. Modell: Flux Composition, Style: Expressive Comic Characters.</p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2025020605_thunderbird_update/</guid>
  <pubDate>Thu, 06 Feb 2025 15:40:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025020605_thunderbird_update/images/thunderbird.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Google korrigiert wieder kritische Sicherheitslücken in Chrome</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025020604_chrome_update/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54254017866/"><img src="https://kantel.github.io/posts/2025020604_chrome_update/images/octopussy-b.jpg" class="img-fluid"></a></p>
<p>Ich weiß, in der Regel aktualisiert unser aller Datenkrake Mittwochs ihr Flaggschiff, aber gestern war ich beschäftigt und so kann ich die Meldung erst heute nachreichen: Google veröffentlicht das Update der Version 133 (133.0.6943.53/54) seines Browsers Chrome und schließt damit <a href="https://chromereleases.googleblog.com/2025/02/stable-channel-update-for-desktop.html">kritische Sicherheitslücken</a>.</p>
<p>Chrome aktualisiert sich (außer bei Linux) über die integrierte Update-Funktion, kann aber – wenn es pressiert – auch <a href="https://www.google.com/intl/de/chrome/browser/">hier geladen</a> werden. <em>(Mein <a href="https://wwwuser.gwdguser.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54254017866/">Octopussy</a></em>, erstellt mit <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/scenario.html">Scenario</a>. Prompt: »<em>A sexy female robot evades from a gigantic data octopus, colored french comic style</em>«. Modell: Flux Composition, Style: Expressive Comic Characters.</p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2025020604_chrome_update/</guid>
  <pubDate>Thu, 06 Feb 2025 15:20:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025020604_chrome_update/images/octopussy.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Apple veröffentlicht iOS 18.3 erneut für iPhone 11/pro/pro Max</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025020603_ios_update/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54060018331/"><img src="https://kantel.github.io/posts/2025020603_ios_update/images/madhatresses-b.jpg" class="img-fluid"></a></p>
<p>Irgendetwas ist wohl <a href="https://kantel.github.io/posts/2025012801_apple_patchday/">letzte Woche</a> schiefgelaufen, denn das letzte Woche verteilte Update auf iOS 18.3 wird für die Modelle iPhone 11/iPhone 11 Pro und iPhone 11 Pro Max erneut verteilt. Die neue Version erhält statt der Build-Nummer 22D63 nun mehr 22D64.</p>
<p>Das Update kann wie gewohnt auf über OTA (<em>Over the Air</em> - in <code>Einstellungen &gt; Allgemein &gt; Softwareaktualisierung</code>, an ausreichender Akku-Kapazität und freien Speicherplatz sollte gedacht werden) erfolgen. <em>(Mein <a href="https://wwwuser.gwdguser.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54060018331/">Mad Hatresses</a></em>, erstellt mit <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/scenario.html">Scenario</a>. Prompt: »<em>the mad hatter gives a sexy naked woman, with big boops, and a nice butt a apple in the summer enchanted forest colored french comic style</em>«. Modell: Flux.1.1 [pro], Style: None.</p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2025020603_ios_update/</guid>
  <pubDate>Thu, 06 Feb 2025 15:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025020603_ios_update/images/madhatresses.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Google schließt am »Februar-Patchday« wieder Sicherheitslücken in Android</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025020602_android_update/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54117923457/"><img src="https://kantel.github.io/posts/2025020602_android_update/images/androiddystopia-b.jpg" class="img-fluid"></a></p>
<p>Google hat mit seinem <a href="https://source.android.com/docs/security/bulletin/2025-02-01?hl=de">monatlichen Sicherheitsupdate für Android</a> (und damit auch auf seinen <a href="https://source.android.com/docs/security/bulletin/pixel/2025-02-01">Pixel-Geräten</a>) wieder Sicherheitslücken geschlossen.</p>
<p>Die Updates werden so nach und nach per OTA <em>(over the air)</em> auf Pixel 9, 9 pro, 9 pro XL, Pixel 8a, Pixel 8/8 pro, Pixel Tablet, Pixel Fold, Pixel 7a, Pixel 7/7 pro, Pixel 6a und Pixel 6/6 pro verteilt.</p>
<p>Die anderen Hersteller werden wie üblich in Bälde nachziehen, sofern sie überhaupt noch entsprechenden Support leisten. <em>(Mein <a href="https://wwwuser.gwdguser.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54117923457/">Android in Dystopia</a></em>, erstellt mit <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/scenario.html">Scenario</a>. Prompt: »<em>A small green robot looks at his mobile phone in his hand. He is standing on a street in a run-down dystopian city with some car wrecks</em>«. Modell: Modell: Flux LoRA, Style: Euro Comix.</p>



 ]]></description>
  <category>Android</category>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2025020602_android_update/</guid>
  <pubDate>Thu, 06 Feb 2025 14:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025020602_android_update/images/androiddystopia.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Neue P5.js-Soundbibliothek veröffentlicht</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025020601_p5js_sound/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54307017536/"><img src="https://kantel.github.io/posts/2025020601_p5js_sound/images/p5jssound-b.jpg" class="img-fluid"></a></p>
<p>Die Processing-Foundation verkündete schon im Dezember letzten Jahres stolz die <a href="https://medium.com/processing-foundation/announcing-the-new-p5-sound-js-library-42efc154bed0">Freigabe einer neuen Version der P5.js-Soundbibliothek</a>. Wer nicht mit dem <a href="https://editor.p5js.org/">P5.js-Webeditor</a> arbeitet, kann die neueste Version von <a href="https://github.com/processing/p5.sound.js">p5.sound.js</a> auf <a href="https://github.com/processing/p5.sound.js/releases">GitHub</a> herunterladen oder via <a href="https://www.jsdelivr.com/package/npm/p5.sound">jsdelivr</a> in seine Seiten einbinden.</p>
<p>Da die Bibliothek in Bildungseinrichtungen weit verbreitet ist, hatte die Foundation jedoch beschlossen, die Aktualisierung des p5.sound.js-Links im p5.js-Webeditor zu verschieben, um Störungen während des laufenden akademischen Semesters zu vermeiden. Der Bibliothekslink wurde daher erst Ende Dezember 2024 im p5.js-Webeditor ausgetauscht. Die vorherige p5.js-Sound-Bibliothek bleibt zugänglich, die <a href="https://archive.p5js.org/reference/#/libraries/p5.sound">Dokumentation ist auf der archivierten p5.js-Site</a> verfügbar. Sie wird jedoch nicht mehr aktiv gepflegt.</p>
<p>Ihr könnt mehr über das neue P5.sounds.js in der <a href="https://p5js.org/reference/p5.sound/">Referenzdokumentation</a> und im <a href="https://github.com/processing/p5.js-sound">GitHub-Repositorium</a> erfahren. Eine <a href="https://editor.p5js.org/thomasjohnmartinez/collections/Dp0zGclVL">Sammlung von Beispiel-Sketchen</a> findet Ihr hier.</p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54307017536/">Kreativer Dachs</a></em>, erstellt mit <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/scenario.html">Scenario</a>. Prompt: »<em>A badger in a red dressing gown in front of an easel listens to music on a portable radio in a creative room with many posters on the wall, colored french comic style</em>«. Modell: Flux Composition, Style: Expressive Comic Characters.</p>



 ]]></description>
  <category>P5.js</category>
  <category>Creative Coding</category>
  <guid>https://kantel.github.io/posts/2025020601_p5js_sound/</guid>
  <pubDate>Thu, 06 Feb 2025 13:40:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025020601_p5js_sound/images/p5jssound.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Mozilla veröffentlicht neue Firefox-Versionen</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025020302_firefox_updates/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54251674957/"><img src="https://kantel.github.io/posts/2025020302_firefox_updates/images/firefoxes-b.jpg" class="img-fluid"></a></p>
<p>Die Entwickler des Mozilla Firefox haben die neue <a href="https://www.mozilla.org/en-US/firefox/135.0/releasenotes/">Version 135</a> und die <a href="https://www.mozilla.org/en-US/firefox/128.7.0/releasenotes/">Version ESR&nbsp;128.7</a> veröffentlicht und darin auch wieder Sicherheitslücken behoben. Wie immer sind in diese Updates auch viele Veränderungen eingeflossen.</p>
<p>Firefox weist selbst auf dieses Update hin. Diese Prozedur kann aber auch über das Menü <code>Hilfe &gt; Über Firefox</code> angestoßen werden. <em>(Mein <a href="https://wwwuser.gwdguser.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54251674957/">Zwei rote Pandas</a></em>, erstellt mit <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/scenario.html">Scenario</a>. Prompt: »<em>Two red pandas in a snowy enchanted forest</em>«. Modell: Flux Composition, Style: Expressive Comic Characters.</p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2025020302_firefox_updates/</guid>
  <pubDate>Mon, 03 Feb 2025 16:05:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025020302_firefox_updates/images/firefoxes.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Capacities: Ein weiterer Kandidat für mein »Zweites Gehirn«?</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025020301_capacities/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54303592577/"><img src="https://kantel.github.io/posts/2025020301_capacities/images/capacities-b.jpg" class="img-fluid"></a></p>
<p>Beim wilden Surfen durch die Weiten des Netzes (und vor allen Dingen durch die vielen YouTube-Tutorials) fiel mir <strong><a href="https://capacities.io/">Capacities</a></strong> auf, eine weitere, <a href="http://cognitiones.kantel-chaos-team.de/produktivitaet/notion.html">Notion</a>-ähnliche Software für das Wissensmanagement. Ähnlich wie Notion, aber auch das <a href="https://kantel.github.io/posts/2024081201_anytype/">momentan als freie Alternative</a> von mir bevorzugte <a href="https://anytype.io/">Anytype</a>, sticht die Software vor allem dadurch hervor, daß sie auch etwas für das Auge bietet, denn das Auge arbeitet bekanntlich mit.</p>
<p>Das Alleinstellungsmerkmal von Capacities scheint zu sein, daß es nicht datenbankbasiert wie Notion oder auf eine Datei-/Ordner-Struktur wie Anytype beruht, sondern eine Objekt-Item-Struktur aufweist. Jeder Eintrag ist ein Objekt eines bestimmten Objekttyps. Das macht die Verlinkung der einzelnen Objekte erst einmal einfacher.</p>
<p>Außerdem – und das empfinde ich als einen Vorteil – ist für meinen Geschmack die Nutzerschnittstelle ausgereifter. Man muß nicht erst, wie bei Anytype oder Notion, mit <code>/</code> ein Submenü aufrufen, das einen durch die Unmengen von Auswahlmöglichkeiten erst einmal verwirrt, sondern man bekommt eine Auswahl der gängigsten Befehle direkt angezeigt. (Wenn das nicht reicht, kann man doch die <code>/</code>-Taste zu Hilfe nehmen).</p>
<p>Capacities sitzt – wie auch Anytype – in Europa (genauer im Saarland) und verspricht daher, DSGVO-konform zu sei. Ob es aber wie Anytype eine Ende-zu-Ende-Verschlüsselung bietet, habe ich bisher nicht herausbekommen. Und Capacities, Anytype und Notion bieten alle eine Synchronisationsmöglichkeit mit meinem (Android-) Smartphone an, dafür ziehen sie allerdings die Daten über ihren eigenen Server (daher meine Frage nach der Ende-zu-Ende-Verschlüsselung).</p>
<p>Der größte Nachteil ist aber, daß im Gegensatz zu Anytype, Capacities nicht Open Source, sondern eine proprietäre Software ist. Daher werde ich nach Abschluß meiner Tests vermutlich doch wieder zum freien <a href="http://cognitiones.kantel-chaos-team.de/webworking/staticsites/joplin.html">Joplin</a> und ebenfalls freien Anytype zurückkehren.</p>
<p>Capacities, Anytype wie auch Joplin haben den Nachteil, daß sie keine Exportmöglichkeit eines kompletten Vaults nach HTML bieten. Zwar können alle drei einzelne Einträge nach Markdown exportieren, doch um dann daraus einen <a href="https://kantel.github.io/posts/2024050701_digital_garden/">digitalen Garten</a> zu basteln, dafür ist mir der Aufwand dann doch zu hoch. Gerüchteweise soll das <a href="https://tana.inc/">Tana</a> können, eine weitere Notion-Alternative. Ich hatte mich dort auch zu einem Testaccount angemeldet, aber als ich ihn nach einer kurzen Wartezeit bekommen hatte, wollten die dort gleich meine Kreditkartennummer. Davor hatte ich dann aber erst einmal Abstand genommen.</p>
<p>Ich glaube, um einen digitalen Garten mit freier Software anzulegen, gibt es momentan zu <a href="http://cognitiones.kantel-chaos-team.de/webworking/auszeichnungssprachen/zettlr.html">Zettlr</a> keine Alternative. Das funzt zwar nicht auf meinem Smartphone, <a href="https://kantel.github.io/posts/2024112701_zetttlr_chromebook/">aber immerhin auf meinem Chromebook</a>. <em>Still digging!</em></p>



 ]]></description>
  <category>Capacities</category>
  <category>Zettelkasten</category>
  <guid>https://kantel.github.io/posts/2025020301_capacities/</guid>
  <pubDate>Mon, 03 Feb 2025 15:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025020301_capacities/images/capacities.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Kühe mit Knarren (und Helikopter-Hühner)</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025020202_cows_with_guns/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54302160381/"><img src="https://kantel.github.io/posts/2025020202_cows_with_guns/images/cowswithguns-b.jpg" class="img-fluid"></a></p>
<p>Der amerikanische Folksinger und Songwriter <em><a href="https://cowswithguns.com/">Dana Lyons</a></em> schrieb 1996 den Song »<a href="https://www.youtube.com/watch?v=cwBFkT_KZr8">Cows With Guns</a>«, der bald zum Kult avancierte und mit der Animation von <em>Bjorn-Magne Stuesol</em> eine der ersten Internet-Meme wurde.</p>
<iframe class="if16_9" src="https://www.youtube.com/embed/cwBFkT_KZr8?si=vJSJ7OZBlZvggEzd" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p>Worum es geht: Kühe mit Knarren zetteln unter ihrem charismatischen, Che Guevara lesenden Guru einen Freiheitsaufstand an. Als dieser schon fast verloren scheint und die Holzkohleroste von den Schlachtern für Burger und Whopper schon angeheizt werden, erhalten die armen Kühe unerwartet Hilfe von herbeieilenden Hühnern in Hubschraubern. Wahre Geschichten, die das Leben so schreibt.</p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54302160381/">Cows with Guns</a></em>, erstellt mit <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/scenario.html">Scenario</a>. Prompt: »<em>Human-like cows with guns shoot at farmers and butchers on a green meadow. In the background, a Mac Donalds branch is burning</em>«. Modell: Flux Composition, Style: 3D Cartoon Characters 2.0.</p>



 ]]></description>
  <category>Musik</category>
  <category>Comic</category>
  <guid>https://kantel.github.io/posts/2025020202_cows_with_guns/</guid>
  <pubDate>Sun, 02 Feb 2025 14:45:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025020202_cows_with_guns/images/cowswithguns.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Ein paar Zahlen</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025020201_mediadaten/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54209282812/"><img src="https://kantel.github.io/posts/2025020201_mediadaten/images/dachs-b.jpg" class="img-fluid"></a></p>
<p>Schon gestern hatte ein neuer Monat begonnen und daher ist es dringend Zeit für die Zahlen des Vormonats, die hochtrabend manches Mal auch <em>Mediadaten</em> genannt werden: Im Januar&nbsp;2024 hatte der <em>Schockwellenreiter</em> laut seinem nicht immer zuverlässigen, aber dafür (hoffentlich!) datenschutzkonformen <del>Geißenpeter</del> <a href="https://www.goatcounter.com/">Neugiertool</a> <strong>5.141&nbsp;Seitenaufrufe</strong>. Wie immer täuscht die Exaktheit der Ziffer eine Genauigkeit der Zahl nur vor, trotzdem freue ich mich über jede Besucherin und jeden Besucher und bedanke mich bei allen meinen Leserinnen und Lesern.</p>
<p>😎 &nbsp; Bleibt mir gewogen!</p>
<p>Die <em>Top Five</em> des Januars bieten keine Überraschungen:</p>
<ol type="1">
<li>Weiterhin unangeschlagen weit vorne liegt – wie schon seit Monaten – der Beitrag »<a href="https://kantel.github.io/posts/2024011002_ki_ohne_zensor/">Bildgeneratoren und Künstliche Intelligenz – ohne Zensoren</a>« vom 10.&nbsp;Januar&nbsp;2024.</li>
<li>Neu, aber ebenfalls sehr häufig aufgerufen, ist mein Abschied von den sozialen Medien: »<a href="https://kantel.github.io/posts/2025010601_bye_social_media/">Bye, bye Social Media</a>«.</li>
<li>Dann folgt – schon weit abgeschlagen – die Begrüßung des neuen Jahres 2025: »<a href="https://kantel.github.io/posts/2025010101_happy_new_year/">Happy New Year (und ein paar Zahlen</a>«,</li>
<li>dicht gefolgt von dem Rant »<a href="https://kantel.github.io/posts/2025010401_vodafone/">Vodafone tritt Esel</a>«.</li>
<li>Und zum Schluß noch ein weiterer Rant »<a href="https://kantel.github.io/posts/2023091002_typst_1st_steps/">Erste (und vermutlich letzte) Schritte mit Typst</a>«, wobei mir völlig schleierhaft ist, warum dieser uralte Beitrag vom 10.&nbsp;September&nbsp;2023 bis heute so populär ist.</li>
</ol>
<p>Das war es für den vergangenen Januar, schauen wir mal, was uns der Februar bringen wird. <em>Still digging!</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54209282812/">Der belesene und kreative Dachs</a></em>, erstellt mit <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/scenario.html">Scenario</a>. Prompt: »<em>A badger in a red dressing gown sits in a wing chair and reads a book. Next to him is another stack of thick books. In the background is a large easel with a colorful, unfinished picture. The badger lives in a cave; the spring sun shines through holes in the cave walls</em>«. Modell: Flux LoRA, Style: Luminous Depths.</p>



 ]]></description>
  <category>Mediadaten</category>
  <category>Interna</category>
  <guid>https://kantel.github.io/posts/2025020201_mediadaten/</guid>
  <pubDate>Sun, 02 Feb 2025 13:10:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025020201_mediadaten/images/dachs.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Creative Coding, Simulationen und Generative Art: Video-Tutorials zum Wochenende</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025013101_video_tutorials/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54298782259/"><img src="https://kantel.github.io/posts/2025013101_video_tutorials/images/oldman-b.jpg" class="img-fluid"></a></p>
<p>Zum Monatsende möchte ich meinen Feedreader und meine Notizen ein wenig aufräumen. Denn darin haben sich so viele interessante Video-Tutorials eingefunden, die ich Euch nicht vorenthalten möchte (auch wenn ich selber mir noch nicht alle anschauen konnte). Es sind Filme zu all den Themen, die in den letzten Wochen im <em>Schockwellenreiter</em> behandelt wurden oder behandelt werden sollten, aber meistens zu kurz kamen. Daher wundert Euch nicht über den Gemischtwarenladen, den ich Euch im Folgenden präsentieren werde:</p>
<section id="python-und-vpython" class="level2">
<h2 class="anchored" data-anchor-id="python-und-vpython">Python und VPython</h2>
<iframe class="if16_9" src="https://www.youtube.com/embed/7jCLj7JpjPA?si=Bl3EKBtvfiiAvMpN" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p><a href="https://www.youtube.com/playlist?list=PLD7NSlqW6HTEEO5slSyrG1pm3_sY5zbew">Python Pop</a> ist eine Reihe kurzer Videos, die verschiedene Funktionen und Befehle der Sprache Python erklären. Das obige Video »<a href="https://www.youtube.com/watch?v=7jCLj7JpjPA">Adding 2D Vectors and Visualizing</a>« ist aus dieser 27 Videos umfassenden Playlist.</p>
<iframe class="if16_9" src="https://www.youtube.com/embed/d5YQf8gs2_o?si=7B6ek4APSBR1RCPC" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p>Wenn es um Bildbearbeitung mit Python geht, ist <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/pillow.html">Pillow</a> das Werkzeug der Wahl. Es ist allerdings so mächtig, daß es oft schwierig ist, alle Möglichkeiten zu durchschauen, die diese Bibliothek bietet. Hier will die achtteilige Tutorialreihe »<a href="https://www.youtube.com/playlist?list=PLNmsVeXQZj7p6tJ5S5Yvbw3reoZcHdyfR">Pillow - Bildbearbeitung mit Python&nbsp;3</a>« helfen.</p>
<iframe class="if16_9" src="https://www.youtube.com/embed/a6Zs_Foxjjo?si=RxIM9OWQ5oJ81igf" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p>(<a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/glowwscript.html">Web</a>-) <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/vpython.html">VPython</a> ist eine 3D-Bibliothek für Python, die graphische Ausgaben für den Webbrowser erzeugt. Sie wird häufig für physikalische Simulationen verwendet. Das Besondere ist, daß sie entweder auf dem Desktop oder (via <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/glowwscript.html">Trinket</a>) auch online programmiert werden kann. <a href="https://www.youtube.com/playlist?list=PLdCdV2GBGyXMbpvOMdIbYi0LHljDLY5cp">Vpython for Physics 1</a> ist eine dreiteilige Playlist, die in die VPython-Programmierung via Trinket einführt. Der dazugehörende Kanal »<a href="https://www.youtube.com/@LetsCodePhysics/">Let’s Code Physics</a>« ist auch darüberhinaus eine echte Fundgrube.</p>
<p>Ein weiterer Kanal, der (Web-) VPython intensic nutzt, ist <a href="https://www.youtube.com/@DotPhysics">Dot Physics</a> von <em>Rhett Allain</em>. Seine Playlist »<a href="https://www.youtube.com/playlist?list=PLWFlMBumSLSbHWkQSHAZnkow1IbyNz2Of">Python Stuff</a>« umfasst mittlerweile 444 Videos und wird immer noch aktualisiert. Man kann sie sich nur häppchenweise reinziehen, aber jedes Häppchen ist gut.</p>
<p>Dann ist da noch die Playlist »<a href="https://www.youtube.com/playlist?list=PLGs0VKk2DiYzGCOzBrMNSWEdd2CIGC0kJ">Visual Python 3D Graphics and Animations</a>« von <em>Paul McWhorter</em>. Sie besteht aus 40 Videos, von denen die ersten 21 Videos Tutorials zu VPython sind.</p>
<p>Und zum Abschluß des Python-Teils völlig unsortiert folgende Python-Tutorials und Playlists, die mir noch untergekommen sind:</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=rT6_uBalljQ">Pymunk physics simulations in Python and Pyglet</a>.</li>
<li>Im Kanal »<a href="https://www.youtube.com/@DesignCodeDebugRepeat">DesignCodeDebugRepeat</a>« findet Ihr ebenfalls »Tonnen« von nützlichen Tutorials (meist, aber nicht nur) zu Python und Pygame. Die jüngsten sind »<a href="https://www.youtube.com/playlist?list=PLTwy92rWKPiGe-C3nIe8DuN76rpW4nLIP">Pygame Masks</a>« (5 Videos) und »<a href="https://www.youtube.com/playlist?list=PLTwy92rWKPiFktcnAR5lMi6GEAq8MKSt9">Programming Ideas</a>« (12 Videos). Im letzterer findet Ihr auch das durchaus nützliche Video »<a href="https://www.youtube.com/watch?v=McFfp3KSimA">How to make an executable of your pygame game for Windows using PyInstaller</a>« (<a href="https://pyinstaller.org/en/stable/index.html">PyInstaller</a> funktioniert auch mir anderen Betriebssystemen).</li>
<li><a href="https://www.youtube.com/watch?v=JjV9h042YaY">PyVisual - Ein neuer GUI-Builder für Python</a>.</li>
<li><a href="https://www.youtube.com/watch?v=VcPVfmmsfa4">Einführung in die Sphinx Python-Dokumentengenerierung</a>.</li>
<li><a href="https://www.youtube.com/watch?v=2voKwaCuhw4">Building accessible documentation sites</a> (PyCon DE &amp; PyData Berlin 2024).</li>
<li><a href="https://www.youtube.com/watch?v=MdT4FpQ8grE">Climate Crisis in Numbers</a> (PyCon DE &amp; PyData Berlin 2024).</li>
<li>Ultimate Beginner Introduction to NumPy and Matplotlib: <a href="https://www.youtube.com/watch?v=_8uFeTYjIRU">Master Vectors, Matrices, and 3D Plots</a>.</li>
<li><a href="https://www.youtube.com/watch?v=JFWqCQHg-Hs">Simple Lattice-Boltzmann Simulator in Python</a> – Computational Fluid Dynamics for Beginners.</li>
<li><a href="https://www.youtube.com/watch?v=cb9cn8jvOLE">Automatically Compute Jacobian matrices in Python and Generate Python Function-Scientific Computing</a>.</li>
<li><a href="https://www.youtube.com/watch?v=DN1-xCmqchI">Einführung in Matplotlib</a>.</li>
</ul>
<p>Und vom <em>Gravitar</em> gab es dann noch »<a href="https://www.youtube.com/watch?v=UsUOYnp3zBU">Kill Bill Pong</a>« und »<a href="https://www.youtube.com/watch?v=NRsc3AvdkLQ">Formen mit Kreisen füllen</a>«, beides mit <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a> programmiert.</p>
</section>
<section id="processing-und-p5.js" class="level2">
<h2 class="anchored" data-anchor-id="processing-und-p5.js">Processing und P5.js</h2>
<iframe class="if16_9" src="https://www.youtube.com/embed/OJSzIaRRxG8?si=pyilVqQ_3CMVWMY5" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p>Natürlich hat auch <em>Patt Vira</em> wieder viele Videos veröffentlicht. Hier sind die, die Ihr Euch meiner Meinung nach unbedingt anschauen solltet:</p>
<ul>
<li>p5.js Coding Tutorial: <a href="https://www.youtube.com/watch?v=OJSzIaRRxG8">Double Pendulum</a> und <a href="https://www.youtube.com/watch?v=_twl36uR2eQ">Double Pendulum Fractal</a>.</li>
<li>p5.js Coding Tutorial: <a href="https://www.youtube.com/watch?v=CicXI-WBgQ4">NileRed Logo (BZ Reaction)</a>.</li>
<li>p5.js Coding Tutorial: <a href="https://www.youtube.com/watch?v=9DU5WiNdu74">Truchet Tiles</a>.</li>
<li>p5.js Coding Tutorial: <a href="https://www.youtube.com/watch?v=YM_7YpV95V8">Lorenz Attractor</a>.</li>
<li>p5.js Coding Tutorial: <a href="https://www.youtube.com/watch?v=U2i5-hUhEpA">Animated Christmas Lights</a>. 🎄</li>
<li>p5.js Coding Tutorial: <a href="https://www.youtube.com/watch?v=88HToL9SwjI">Rose-shaped Spiral</a>. 🌹</li>
<li>p5.js Coding Tutorial: <a href="https://www.youtube.com/watch?v=e7B7VFzT-xQ">Snowflakes</a>.</li>
<li>p5.js Coding Tutorial: <a href="https://www.youtube.com/watch?v=NW6fw_8s_0Y">Sparkly Magic Wand</a>. ✨</li>
<li>p5.js Coding Tutorial: <a href="https://www.youtube.com/watch?v=gOtLcEC-4NM">Array of Bouncing Balls</a> (OOP / mousePressed).</li>
<li>p5.js Coding Tutorial: <a href="https://www.youtube.com/watch?v=mQ4Cst7o4Ek">Habit Tracker</a> (Data Visualization).</li>
<li>p5.js Coding Tutorial: <a href="https://www.youtube.com/watch?v=Fp7nkcKi5Dw">Falling Sand - Lunar New Year Edition</a> (with ml5.js).</li>
</ul>
<iframe class="if16_9" src="https://www.youtube.com/embed/waJAbX2BRsA?si=jZglMdS44GwGfl7N" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p>Und wenn <em>Patt Vira</em> im <em>Schockwellenreiter</em> auftaucht, kann auch <em>Daniel Shiffman</em> nicht weit sein. Hier ist er, <a href="https://www.youtube.com/watch?v=waJAbX2BRsA">interviewt</a> von <em>Tim Rodenbröker</em> zu seiner Neuauflage von »<a href="https://natureofcode.com/">The Nature of Code</a>«. Außerdem sind mir noch die folgenden zwei Videos von ihm untergekommen:</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=IF414I26_K8">3D Pose Estimation with ml5.js</a>.</li>
<li><a href="https://www.youtube.com/watch?v=5iSAvzU2WYY">Wave Function Collapse: Overlapping Model</a>.</li>
</ul>
<p>Und noch mehr aus der Processing- und P5.js-Community:</p>
<ul>
<li>Code &amp; Community 💜: <a href="https://www.youtube.com/watch?v=f4gq01JUsYw">Day 1 Presentations</a> und <a href="https://www.youtube.com/watch?v=AxV3lhJCh2k">Day 2 Presentations</a>.</li>
<li>Building Together: <a href="https://www.youtube.com/watch?v=cZ_IZK114Z4">Supporting Processing and p5.js</a>.</li>
<li><a href="https://www.youtube.com/watch?v=onemNhgAVg8">Sedimentary Groove</a>: Gen Art coding and project review in p5js.</li>
</ul>
<p>Den Abschluß für heute bilden die beiden Tutorials <a href="https://www.youtube.com/watch?v=QfOXY5UzPTU">Responsive Background with P5.js</a> und <a href="https://www.youtube.com/watch?v=xIA6L8wnz1g">Create Interactive Background for Your Website with P5.js</a>. Ich wünsche Euch allen da draußen ein schönes Wochenende und einen fröhlichen Start in den Februar.</p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54298782259/">AlterMann am Schreibtisch</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>colored french comic style, an old man, short white hair, clean-shaven, blue eyes, glasses, sits at a desk in front of two huge monitors, looking videos, there are a few open books on the desk, and there is a large mug of steaming coffee next to them, and a computer keyboard in front of the monitor, on the wall there are shelves with files and books, the autumn sun shines through a large window</em>«. Negative Prompt: »<em>lowres, error, cropped, worst quality, low quality, jpeg artifacts, out of frame, watermark, signature, ugly, beard, deformed, noisy, blurry, distorted, out of focus, bad anatomy, extra limbs, poorly drawn face, poorly drawn hands, missing fingers, tie</em>«. Modell: Stable Diffusion 3.5 Large Turbo, Style: None.</p>


</section>

 ]]></description>
  <category>Creative Coding</category>
  <category>Generative Art</category>
  <category>Simulation</category>
  <category>Python</category>
  <category>Pymunk</category>
  <category>Pygame</category>
  <category>Pyglet</category>
  <category>Pillow</category>
  <category>Sphinx</category>
  <category>Processing</category>
  <category>VPython</category>
  <category>Trinket</category>
  <category>Physik</category>
  <category>3D</category>
  <category>P5.js</category>
  <guid>https://kantel.github.io/posts/2025013101_video_tutorials/</guid>
  <pubDate>Fri, 31 Jan 2025 16:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025013101_video_tutorials/images/oldman.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Google korrigiert wieder kritische Sicherheitslücken in Chrome</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025012901_chrome_update/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53893492514/"><img src="https://kantel.github.io/posts/2025012901_chrome_update/images/octopussy-b.jpg" class="img-fluid"></a></p>
<p>Es ist wieder Mittwoch und wie jeden Mittwoch repariert unser aller Datenkrake ihr Flaggschiff: Google veröffentlicht das Update der Version 132 (132.0.6834.159/160) seines Browsers Chrome und schließt damit <a href="https://chromereleases.googleblog.com/2025/01/stable-channel-update-for-desktop_28.html">kritische Sicherheitslücken</a>.</p>
<p>Chrome aktualisiert sich (außer bei Linux) über die integrierte Update-Funktion, kann aber – wenn es pressiert – auch <a href="https://www.google.com/intl/de/chrome/browser/">hier geladen</a> werden. <em>(Mein <a href="https://wwwuser.gwdguser.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/53893492514/">Octopussy</a></em>, erstellt mit <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/scenario.html">Scenario</a>. Prompt: »<em>A sexy female robot flees from a gigantic data octopus, colored french comic style</em>«. Negative Prompt: »<em>ugly, deformed, noisy, blurry, distorted, out of focus, bad anatomy, extra limbs, poorly drawn face, poorly drawn hands, missing fingers, extra legs</em>«. Modell: Stable Diffusion XL, Style: Creepy Nordic + Belgian + Semi-Realistic.</p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2025012901_chrome_update/</guid>
  <pubDate>Wed, 29 Jan 2025 11:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025012901_chrome_update/images/octopussy.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>All of Me (Akkordeon, ein schöner Ton)</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025012802_all_of_me/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54292066522/"><img src="https://kantel.github.io/posts/2025012802_all_of_me/images/gypsyswing-b.jpg" class="img-fluid"></a></p>
<p>Neben dem Dudelsack ist wohl das Akkordeon eines der meistgehassten Instrumente. Das dies wirklich ungerecht ist und der Quetschkommode <em>(Squeeze Box)</em> durchaus swingende Melodien zu entlocken sind, beweist der schwedische Akkordeonist <em>Alf Hågedal</em>, der hier seinem so unterschätzten Instrument den Jazz-Standard »<a href="https://de.wikipedia.org/wiki/All_of_Me">All of Me</a>« entlockt:</p>
<iframe class="if16_9" src="https://www.youtube.com/embed/y3ZwoZU8rmg?si=seCLkUTPbvW4y2aq" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p>Dabei beginnt er den Song in der gewohnten, langsamen Geschwindigkeit, um dann bei der Improvisation Gas zu geben und das Tempo zu verdoppeln.</p>
<p>Begleitet wird <em>Alf Hågedal</em> von <em>Gabriel Karlsson</em> (Gitarre) und <em>Christian Karlsson</em> (Kontrabaß). Aufgenommen wurde das Stück 2016 von <em>Jan Olsson</em>.</p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54292066522/">Gypsy Swing</a></em>, erstellt mit <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/scenario.html">Scenario</a>. Prompt: »<em>An accordion player, a man on the double bass, and a man on a guitar are sitting on a stage in a nightclub, performing Swing Jazz to a cheerful audience, in a colorful French comic style</em>«. Modell: Flux Composition, Style: Expressive Comic Characters.</p>



 ]]></description>
  <category>Musik</category>
  <guid>https://kantel.github.io/posts/2025012802_all_of_me/</guid>
  <pubDate>Tue, 28 Jan 2025 14:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025012802_all_of_me/images/gypsyswing.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Apple Patchday</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025012801_apple_patchday/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54060264503/"><img src="https://kantel.github.io/posts/2025012801_apple_patchday/images/apple2-b.jpg" class="img-fluid"></a></p>
<p>Nach dem <a href="https://kantel.github.io/posts/2025010702_ios_update/">Notfall-Update Anfang Januar</a> für seine mobilen Geräte hat der Riese aus Cupertino mit dem angebissenen Apfel im Logo nun seinen regulären, monatlichen Flickentag herausgehauen. Und wie immer sind der Updates so viele, daß ich sie nur <em>en bloc</em> ankündigen kann:</p>
<section id="apple-veröffentlicht-macos-sequoia-15.3" class="level2">
<h2 class="anchored" data-anchor-id="apple-veröffentlicht-macos-sequoia-15.3">Apple veröffentlicht macOS Sequoia 15.3</h2>
<p>Apple hat das Update auf die neue Betriebssystemversion macOS Sequoia 15.3 freigegeben und korrigiert damit auch wieder <a href="https://support.apple.com/en-us/122068">Sicherheitsprobleme</a>.</p>
<p>Das Update steht über die Systemeinstellungen zur Verfügung.</p>
</section>
<section id="apple-veröffentlicht-sicherheitsupdate-für-macos-ventura-und-sonoma" class="level2">
<h2 class="anchored" data-anchor-id="apple-veröffentlicht-sicherheitsupdate-für-macos-ventura-und-sonoma">Apple veröffentlicht Sicherheitsupdate für macOS Ventura und Sonoma</h2>
<p>Apple hat auch das Sicherheitsupdate auf <a href="https://support.apple.com/en-us/122070">macOS Ventura 13.7.3</a> und <a href="https://support.apple.com/en-us/122069">macOS Sonoma 14.7.3</a> freigegeben.</p>
<p>Die Updates stehen wie üblich über die Softwareaktualisierung bereit.</p>
</section>
<section id="apple-veröffentlicht-ios-ipados-18.3" class="level2">
<h2 class="anchored" data-anchor-id="apple-veröffentlicht-ios-ipados-18.3">Apple veröffentlicht iOS / iPadOS 18.3</h2>
<p>Wie angekündigt hat Apple das Update auf iOS 18.3 und iPadOS 18.3 bereitgestellt. Die Updates bieten viele neue Funktionen und Fehlerbehebungen und korrigieren <a href="https://support.apple.com/en-us/122066">kritische Sićherheitslücken</a>.</p>
<p>Das Update auf auf iOS 18.3 und iPadOS 18.3 kann über OTA (<em>Over the Air</em> - in <code>Einstellungen &gt; Allgemein &gt; Softwareaktualisierung</code>, an ausreichender Akku-Kapazität und freien Speicherplatz sollte gedacht werden) erfolgen.</p>
<p>Eine vorherige Sicherung des Geräts ist wie immer sehr zu empfehlen.</p>
</section>
<section id="apple-veröffentlicht-ipados-17.7.4-für-ältere-systeme" class="level2">
<h2 class="anchored" data-anchor-id="apple-veröffentlicht-ipados-17.7.4-für-ältere-systeme">Apple veröffentlicht iPadOS 17.7.4 für ältere Systeme</h2>
<p>Apple hat nun das Update auf iPadOS 17.7.4 für ältere iPads und für die Anwender, die nicht auf iOS/iPadOS 18 updaten wollen, bereitgestellt. Das Update behebt <a href="https://support.apple.com/en-us/122067">kritische Sicherheitslücken</a>.</p>
<p>Das Update auf auf iPadOS 17.7.4 kann über OTA (<em>Over the Air</em> - in <code>Einstellungen &gt; Allgemein &gt; Softwareaktualisierung</code>, an ausreichender Akku-Kapazität und freien Speicherplatz sollte gedacht werden) erfolgen.</p>
<p>Eine vorherige Sicherung des Geräts ist wie immer sehr zu empfehlen.</p>
</section>
<section id="apple-veröffentlicht-watchos-11.3" class="level2">
<h2 class="anchored" data-anchor-id="apple-veröffentlicht-watchos-11.3">Apple veröffentlicht watchOS 11.3</h2>
<p>Und wie gewohnt zum Schluß die Uhr: Apple hat für die Apple Watch watchOS 11.3 bereitgestellt, bietet damit im wesentlichen Fehlerbehebungen und schließt <a href="https://support.apple.com/en-us/122071">Sicherheitslücken</a>.</p>
<p>Die Aktualisierung wird über die Apple-Watch-App auf dem iPhone gestartet unter <code>Allgemein &gt; Softwareupdate</code>. Dabei sollte sich die Uhr in Reichweite des iPhones befinden, mit dem Ladekabel verbunden und mindestens zu 50 Prozent geladen sein.</p>
<p><em>(Mein <a href="https://wwwuser.gwdguser.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54060264503/">Mad Hatter gives Apple to a sexy Woman</a></em>, erstellt mit <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/scenario.html">Scenario</a>. Prompt: »<em>the mad hatter gives a sexy naked woman, with big boops, and a nice butt a apple in the summer enchanted forest colored french comic style</em>«. Modell: Flux.1.1 [pro], Style: None.</p>


</section>

 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2025012801_apple_patchday/</guid>
  <pubDate>Tue, 28 Jan 2025 12:25:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025012801_apple_patchday/images/apple2.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Tuesday JS Version 52 erschienen</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025012302_tuesday_js_v52/</link>
  <description><![CDATA[ 




<p><a href="https://private-user-images.githubusercontent.com/13263198/384584356-847a7eba-af8a-4227-b8f7-d15c7b55cf9e.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3Mzc2NDM4NjIsIm5iZiI6MTczNzY0MzU2MiwicGF0aCI6Ii8xMzI2MzE5OC8zODQ1ODQzNTYtODQ3YTdlYmEtYWY4YS00MjI3LWI4ZjctZDE1YzdiNTVjZjllLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTAxMjMlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwMTIzVDE0NDYwMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTU2NTlhYTQzYjI0NjRhMWJkNzE3OTEwYWFhZGNkYTUzNzQ5N2EyMzMzZGRkZDgxMmEyNzkxMjU2YzliNGY2OTgmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.jB-FTbGgkLa8KtoyKIDqkxUt2upmzStVRa8_PRNDW64"><img src="https://kantel.github.io/posts/2025012302_tuesday_js_v52/images/tuesdayjs51-b.png" class="img-fluid"></a></p>
<p>Hatte ich zum Erscheinen der Version 50 von <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/tuesdayjs.html">Tuesday JS</a> im Oktober letzten Jahres <a href="https://kantel.github.io/posts/2024100403_tuesday_js_v50/">schon geklagt</a>, daß es offensichtlich mein Schicksal sei, die – zugegeben häufigen – Updates der netten kleinen Engine für interaktive Geschichten, Visual Novels und anderen Spielen oder Anwendungen, die mich mit ihrer graphischen Oberfläche immer ein wenig an <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/twine2.html">Twine</a> erinnert, zu übersehen, so hat nun dieses Schicksal erneut zugeschlagen:</p>
<p>Denn das Update auf die <a href="https://github.com/Kirilllive/tuesday-js/releases/tag/51.0.0">Version 51</a> vom 9.&nbsp;November&nbsp;2024 ist komplett unbemerkt an mir vorbeigerauscht und das Update auf die <a href="https://github.com/Kirilllive/tuesday-js/releases/tag/52.0.0">Version&nbsp;52</a> vom 14.&nbsp;Dezember letzten Jahres habe ich auch erst nach über einem Monat bemerkt.</p>
<p>Und das hat die nette kleine Engine eigentlich nicht verdient. Ich habe mir daher heute fest vorgenommen, möglichst bald mir ihr etwas anzustellen, am besten noch bevor ich von der Version&nbsp;53, die sicher schon mit den Hufen scharrt, wieder überrascht werde.</p>



 ]]></description>
  <category>Tuesday JS</category>
  <category>Interactive Fiction</category>
  <category>Spieleprogrammierung</category>
  <guid>https://kantel.github.io/posts/2025012302_tuesday_js_v52/</guid>
  <pubDate>Thu, 23 Jan 2025 14:55:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025012302_tuesday_js_v52/images/tuesdayjs51.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Google korrigiert wieder kritische Sicherheitslücken in Chrome</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025012301_chrome_update/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54254018891/"><img src="https://kantel.github.io/posts/2025012301_chrome_update/images/octopussy1-b.jpg" class="img-fluid"></a></p>
<p>Das Mittwochs-Update kommt gewiß, auch wenn es erst am Donnerstag ist: Google veröffentlicht das Update der Version 132 (132.0.6834.110/111) seines Browsers Chrome und schließt damit <a href="https://chromereleases.googleblog.com/2025/01/stable-channel-update-for-desktop_14.html">kritische Sicherheitslücken</a>.</p>
<p>Chrome aktualisiert sich (außer bei Linux) über die integrierte Update-Funktion, kann aber – wenn es pressiert – auch <a href="https://www.google.com/intl/de/chrome/browser/">hier geladen</a> werden. <em>(Mein <a href="https://wwwuser.gwdguser.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54254018891/">Octopussy</a></em>, erstellt mit <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/scenario.html">Scenario</a>. Prompt: »<em>A sexy female robot evades from a gigantic data octopus, colored french comic style</em>«. Modell: Flux Composition, Style: Expressive Comic Characters.</p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2025012301_chrome_update/</guid>
  <pubDate>Thu, 23 Jan 2025 13:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025012301_chrome_update/images/octopussy1.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Bouncing Faces mit Pygame und Pygbag</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025012101_bouncing_faces/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54279409693/"><img src="https://kantel.github.io/posts/2025012101_bouncing_faces/images/bouncingfaces-b.jpg" class="img-fluid"></a></p>
<p>Der <a href="https://kantel.github.io/posts/2025012001_pygbag_revisited/">großspurigen Ankündigung von gestern</a>, daß ich etwas mit <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame (CE)</a> und <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygbag.html">Pygbag</a> anstellen und die Ergebnisse auch auf diesen Seiten einbinden möchte, müssen ja auch Taten folgen. Daher habe ich mein <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/p5js.html">P5.js</a>-Experiment vom <a href="https://kantel.github.io/posts/2024051901_bouncing_faces/">Mai letzten Jahres</a> wieder ausgegraben und das Ganze nach Pygame portiert.</p>
<p>Auch wenn ich doch gemerkt hatte, daß ich, weil ich schon ewig nichts mehr mit Pygame angestellt hatte, etliches nachschlagen mußte, war es einfacher, als ich dachte. Und das Ergebnis könnt Ihr hier bewundern (falls es nicht von alleine startet, auf »Ready to start!« klicken):</p>
<iframe src="pygbag/web/index.html" class="if16_9" name="Bouncing Faces">
</iframe>
<p>Fünfzig Emojis mit zufällig ausgewählten Bildern und in unterschiedlichen Größen wuseln über den Bildschirm und prallen von den Bildschirmrändern wieder ab.</p>
<p>Zwar hat der Pygame-Quellcode wegen des notwendigen <em>Boilerplates</em> nicht die Kürze eines vergleichbaren Processing- oder P5.js-Sketches, dennoch ist er eigentlich vergleichsweise kurz und übersichtlich geraten:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bouncing Faces</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> asyncio</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pygame <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pg</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pygame.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">locals</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os, sys</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> randint</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Settings</span></span>
<span id="cb1-9">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">800</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">450</span></span>
<span id="cb1-10">TITLE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bouncing Faces"</span></span>
<span id="cb1-11">FPS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>                   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Frames per second</span></span>
<span id="cb1-12">N_FACES <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>               <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of Faces</span></span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Hier wird der Pfad zum Verzeichnis der Assets gesetzt</span></span>
<span id="cb1-15">DATAPATH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(os.path.dirname(os.path.abspath(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__file__</span>)), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>)</span>
<span id="cb1-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Array mit den Bildern</span></span>
<span id="cb1-17">face_images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"face01.png"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"face02.png"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"face03.png"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"face04.png"</span>,</span>
<span id="cb1-18">               <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"face05.png"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"face06.png"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"face07.png"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"face08.png"</span>,</span>
<span id="cb1-19">               <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"face09.png"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"face10.png"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"face11.png"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"face12.png"</span>]</span>
<span id="cb1-20"></span>
<span id="cb1-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Farben</span></span>
<span id="cb1-22">BG_COLOR <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#2b3e50"</span>)</span>
<span id="cb1-23"></span>
<span id="cb1-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Klassen</span></span>
<span id="cb1-25"></span>
<span id="cb1-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Class GameWorld</span></span>
<span id="cb1-27"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> GameWorld:</span>
<span id="cb1-28"></span>
<span id="cb1-29">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-30">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pygame und das Fenster initialisieren</span></span>
<span id="cb1-31">        pg.init()</span>
<span id="cb1-32">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.screen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.display.set_mode((WIDTH, HEIGHT))</span>
<span id="cb1-33">        pg.display.set_caption(TITLE)</span>
<span id="cb1-34"></span>
<span id="cb1-35">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.clock <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.time.Clock()</span>
<span id="cb1-36">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.keep_going <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb1-37"></span>
<span id="cb1-38">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> reset(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-39">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Neustart oder Status zurücksetzen</span></span>
<span id="cb1-40">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Hier werden alle Elemente der GameWorld initialisiert</span></span>
<span id="cb1-41">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.all_sprites <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.sprite.Group()</span>
<span id="cb1-42">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.faces <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb1-43">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(N_FACES):</span>
<span id="cb1-44">            face <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Face(face_images[randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(face_images) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)])</span>
<span id="cb1-45">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.faces.append(face)</span>
<span id="cb1-46">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.all_sprites.add(face)</span>
<span id="cb1-47">    </span>
<span id="cb1-48">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> events(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-49">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> event <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> pg.event.get():</span>
<span id="cb1-50">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> ((event.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pg.QUIT)</span>
<span id="cb1-51">                <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> (event.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pg.KEYDOWN</span>
<span id="cb1-52">                <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> event.key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pg.K_ESCAPE)):</span>
<span id="cb1-53">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.playing:</span>
<span id="cb1-54">                    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.playing <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb1-55">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.keep_going <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb1-56"> </span>
<span id="cb1-57">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-58">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># self.face.check_edges()</span></span>
<span id="cb1-59">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.all_sprites.update()</span>
<span id="cb1-60"></span>
<span id="cb1-61">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-62">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.screen.fill(BG_COLOR)</span>
<span id="cb1-63">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.all_sprites.draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.screen)</span>
<span id="cb1-64">        pg.display.flip()</span>
<span id="cb1-65"></span>
<span id="cb1-66">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> start_screen(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-67">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span>
<span id="cb1-68">    </span>
<span id="cb1-69">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> game_over_screen(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-70">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print("Game Over")</span></span>
<span id="cb1-71">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span>    </span>
<span id="cb1-72"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Ende Class GameWorld</span></span>
<span id="cb1-73">    </span>
<span id="cb1-74"></span>
<span id="cb1-75"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Class Face</span></span>
<span id="cb1-76"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Face(pg.sprite.Sprite):</span>
<span id="cb1-77"></span>
<span id="cb1-78">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, img):</span>
<span id="cb1-79">        pg.sprite.Sprite.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>)</span>
<span id="cb1-80">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load Image</span></span>
<span id="cb1-81">        img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.image.load(os.path.join(DATAPATH, img)).convert_alpha()</span>
<span id="cb1-82">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>)</span>
<span id="cb1-83">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.transform.scale(img, (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb1-84">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image.get_rect()</span>
<span id="cb1-85">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r, WIDTH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-86">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r, HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-87">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.center <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y)</span>
<span id="cb1-88">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.math.Vector2(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y)</span>
<span id="cb1-89">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.math.Vector2(randint(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), randint(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb1-90">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb1-91">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-92">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb1-93">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-94">    </span>
<span id="cb1-95">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-96">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.check_edges()</span>
<span id="cb1-97">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel</span>
<span id="cb1-98">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x</span>
<span id="cb1-99">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y</span>
<span id="cb1-100">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.center <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y)</span>
<span id="cb1-101">        </span>
<span id="cb1-102">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> check_edges(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-103">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r):</span>
<span id="cb1-104">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-105">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r)</span>
<span id="cb1-106">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r):</span>
<span id="cb1-107">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-108">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r</span>
<span id="cb1-109">            </span>
<span id="cb1-110">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> WIDTH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r):</span>
<span id="cb1-111">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-112">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (WIDTH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r)</span>
<span id="cb1-113">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r):</span>
<span id="cb1-114">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-115">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r</span>
<span id="cb1-116"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## End Class Face</span></span>
<span id="cb1-117"></span>
<span id="cb1-118"></span>
<span id="cb1-119"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># --------------------------- Hauptprgramm --------------------------- #</span></span>
<span id="cb1-120">world <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> GameWorld()</span>
<span id="cb1-121">world.start_screen()</span>
<span id="cb1-122"></span>
<span id="cb1-123"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Hauptschleife</span></span>
<span id="cb1-124"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">async</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> main():</span>
<span id="cb1-125">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> world.keep_going:</span>
<span id="cb1-126">        world.reset()</span>
<span id="cb1-127">        world.playing <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb1-128">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> world.playing:</span>
<span id="cb1-129">            world.clock.tick(FPS)</span>
<span id="cb1-130">            world.events()</span>
<span id="cb1-131">            world.update()</span>
<span id="cb1-132">            world.draw()</span>
<span id="cb1-133">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> asyncio.sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Very important, and keep it 0</span></span>
<span id="cb1-134">        world.game_over_screen()</span>
<span id="cb1-135">    pg.quit()</span>
<span id="cb1-136">    sys.exit()</span>
<span id="cb1-137"></span>
<span id="cb1-138">asyncio.run(main())</span></code></pre></div>
<p>Die Bildchen habe ich den <a href="https://kantel.github.io/posts/2024042902_openmoji/">hier schon einmal vorgestellten</a>, freien <a href="https://kantel.github.io/posts/2024042902_openmoji/">OpenMojis</a> entnommen, mit denen ich schon lange etwas anstellen wollte. Und den <a href="https://github.com/kantel/pygameprojects/tree/master/bouncingfaces">Quellcode mit allen Assets</a> findet Ihr natürlich auch wieder in meinem GitHub-Repositorium. Habt also Spaß damit!</p>
<p>In meinem Kopf brodeln schon wieder etliche Ideen, was ich mit Pygame und Pygbag noch anstellen könnte. Denn Pygame im Browser ist einfach geil. <em>Still digging!</em></p>



 ]]></description>
  <category>Pygame</category>
  <category>Pygbag</category>
  <category>Python</category>
  <category>Creative Coding</category>
  <guid>https://kantel.github.io/posts/2025012101_bouncing_faces/</guid>
  <pubDate>Tue, 21 Jan 2025 13:55:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025012101_bouncing_faces/images/bouncingfaces.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Pygame und Pygbag revisited</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025012001_pygbag_revisited/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54277764208/"><img src="https://kantel.github.io/posts/2025012001_pygbag_revisited/images/pygbag-b.jpg" class="img-fluid"></a></p>
<p>Auch für mich bringt das neue Jahr neue Herausforderungen. Ich habe mir nämlich <strong><a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygbag.html">Pygbag</a></strong> wieder <a href="https://kantel.github.io/posts/2023060501_pygame_im_browser/">vorgeknöpft</a>, den Übersetzer, der <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a>-Spiele, aber auch andere Python-Programme, nach WebAssembly (WASM) übersetzt und sie so im Browser spielbar macht. Und gegenüber meinem <a href="https://kantel.github.io/posts/2024042101_pygbag_standalone/">letzten Versuch vom April vergangenen Jahres</a> habe ich einige Unklarheiten ausräumen können.</p>
<p>Als Basis habe ich wieder mein <a href="https://kantel.github.io/posts/2023060804_pygbag_oop/">objektorientiertes Template</a> genommen, das sich an (m)ein an <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/greenfoot.html">Greenfoot</a> angelehntes <a href="https://kantel.github.io/posts/2023010701_pygame_oop/">Pygame Framework</a> orientiert. Und mittlerweile weiß ich, daß der Kommandozeilenbefehl</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pygbag</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>your.app.folder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
<p>der Befehl ist, der aus dem Python-Programm die webtaugliche Web-Applikation erstellt und diese im Verzeichnis <code>web/build</code> des Projekts ablegt. Er muß also jedesmal, bevor ein Projekt im Web publiziert werden soll, aufgerufen werden. Und auch für das Problem der Datenverzeichnisse habe ich eine Lösung gefunden. Statt mich an dem <code>current working directory</code> oder <code>cwd</code> zu orientieren, wo jede Entwicklungsumgebung eine andere Meinung hat, wo das <code>cwd</code> eigentlich liegt, orientiere ich mich mit</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1">DATAPATH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(os.path.dirname(os.path.abspath(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__file__</span>)), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>)</span></code></pre></div>
<p>an dem Pfad, in dem die Datei <code>main.py</code> liegt.</p>
<p>Während meiner Experimente war noch ein weiteres Problem aufgetaucht: Hat man einmal mit <code>pygbag</code> den lokalen Server gestartet, ist dieser belegt und daher lässt sich nach einer Änderung dieser auf dem gleichen Port (per default <code>8000</code>) nicht erneut aufrufen. Ich habe für dieses Problem bisher nur eine radikale Lösung gefunden. Mit</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> lsof <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-i:8000</span></span></code></pre></div>
<p>lasse ich mir im Terminal die <code>PID</code> des Prozesses ausgeben, der den Port 8000 blockiert, um diesen dann mit</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">kill</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$PID</span></span></code></pre></div>
<p>oder in hartnäckigen Fällen mit</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">kill</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-9</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$PID</span>  //to forcefully kill the port</span></code></pre></div>
<p>brutal abzuwürgen. Den Wert für die <code>$PID</code> gibt mir der erste Befehl aus.</p>
<p>Ich habe erst einmal zur Vorbereitung ein einfaches Boilerplate angelegt, das das im <a href="https://www.flickr.com/photos/schockwellenreiter/54277764208/">obigen Bannerbild</a> gezeigte Progrämmchen ausgibt. Der Quellcode ist dieser:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pygbag Boilerplate</span></span>
<span id="cb6-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> asyncio</span>
<span id="cb6-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pygame <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pg</span>
<span id="cb6-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pygame.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">locals</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb6-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os, sys</span>
<span id="cb6-6"></span>
<span id="cb6-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Settings</span></span>
<span id="cb6-8">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">800</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">450</span></span>
<span id="cb6-9">TITLE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pygbag Boilerplate"</span></span>
<span id="cb6-10">FPS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>                   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Frames per second</span></span>
<span id="cb6-11"></span>
<span id="cb6-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Hier wird der Pfad zum Verzeichnis der Assets gesetzt</span></span>
<span id="cb6-13">DATAPATH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(os.path.dirname(os.path.abspath(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__file__</span>)), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>)</span>
<span id="cb6-14"></span>
<span id="cb6-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Farben</span></span>
<span id="cb6-16">BG_COLOR <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dunkelgrau</span></span>
<span id="cb6-17"></span>
<span id="cb6-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Klassen</span></span>
<span id="cb6-19"></span>
<span id="cb6-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Class GameWorld</span></span>
<span id="cb6-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> GameWorld:</span>
<span id="cb6-22"></span>
<span id="cb6-23">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb6-24">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pygame und das Fenster initialisieren</span></span>
<span id="cb6-25">        pg.init()</span>
<span id="cb6-26">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.screen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.display.set_mode((WIDTH, HEIGHT))</span>
<span id="cb6-27">        pg.display.set_caption(TITLE)</span>
<span id="cb6-28"></span>
<span id="cb6-29">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.clock <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.time.Clock()</span>
<span id="cb6-30">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.keep_going <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb6-31"></span>
<span id="cb6-32">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> reset(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb6-33">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Neustart oder Status zurücksetzen</span></span>
<span id="cb6-34">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Hier werden alle Elemente der GameWorld initialisiert</span></span>
<span id="cb6-35">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.all_sprites <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.sprite.Group()</span>
<span id="cb6-36">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Player()</span>
<span id="cb6-37">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.all_sprites.add(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player)</span>
<span id="cb6-38">    </span>
<span id="cb6-39">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> run(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb6-40">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Game Loop</span></span>
<span id="cb6-41">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span>
<span id="cb6-42">  </span>
<span id="cb6-43">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> events(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb6-44">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> event <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> pg.event.get():</span>
<span id="cb6-45">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> ((event.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pg.QUIT)</span>
<span id="cb6-46">                <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> (event.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pg.KEYDOWN</span>
<span id="cb6-47">                <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> event.key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pg.K_ESCAPE)):</span>
<span id="cb6-48">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.playing:</span>
<span id="cb6-49">                    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.playing <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb6-50">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.keep_going <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb6-51"> </span>
<span id="cb6-52">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb6-53">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.all_sprites.update()</span>
<span id="cb6-54"></span>
<span id="cb6-55">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb6-56">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.screen.fill(BG_COLOR)</span>
<span id="cb6-57">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.all_sprites.draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.screen)</span>
<span id="cb6-58">        pg.display.flip()</span>
<span id="cb6-59"></span>
<span id="cb6-60">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> start_screen(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb6-61">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span>
<span id="cb6-62">    </span>
<span id="cb6-63">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> game_over_screen(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb6-64">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print("Game Over")</span></span>
<span id="cb6-65">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span>    </span>
<span id="cb6-66"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Ende Class GameWorld</span></span>
<span id="cb6-67">    </span>
<span id="cb6-68"></span>
<span id="cb6-69"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Class Player</span></span>
<span id="cb6-70"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Player(pg.sprite.Sprite):</span>
<span id="cb6-71"></span>
<span id="cb6-72">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb6-73">        pg.sprite.Sprite.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>)</span>
<span id="cb6-74">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load Image</span></span>
<span id="cb6-75">        img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pg.image.load(os.path.join(DATAPATH, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pygbag_logo.png"</span>)).convert_alpha()</span>
<span id="cb6-76">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img</span>
<span id="cb6-77">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image.get_rect()</span>
<span id="cb6-78">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> WIDTH<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, HEIGHT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb6-79">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.center <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y)</span>
<span id="cb6-80">    </span>
<span id="cb6-81">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb6-82">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span>
<span id="cb6-83"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## End Class Player</span></span>
<span id="cb6-84"></span>
<span id="cb6-85"></span>
<span id="cb6-86"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># --------------------------- Hauptprgramm --------------------------- #</span></span>
<span id="cb6-87">world <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> GameWorld()</span>
<span id="cb6-88">world.start_screen()</span>
<span id="cb6-89"></span>
<span id="cb6-90"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Hauptschleife</span></span>
<span id="cb6-91"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">async</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> main():</span>
<span id="cb6-92">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> world.keep_going:</span>
<span id="cb6-93">        world.reset()</span>
<span id="cb6-94">        world.playing <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb6-95">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> world.playing:</span>
<span id="cb6-96">            world.clock.tick(FPS)</span>
<span id="cb6-97">            world.events()</span>
<span id="cb6-98">            world.update()</span>
<span id="cb6-99">            world.draw()</span>
<span id="cb6-100">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> asyncio.sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Very important, and keep it 0</span></span>
<span id="cb6-101">        world.game_over_screen()</span>
<span id="cb6-102">    pg.quit()</span>
<span id="cb6-103">    sys.exit()</span>
<span id="cb6-104"></span>
<span id="cb6-105">asyncio.run(main())</span></code></pre></div>
<p>Dieser Boilerplate kann sowohl in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/thonny.html">Thonny</a> wie auch in jeder anderen IDE genutzt werden (ich habe dies auch mit <a href="http://cognitiones.kantel-chaos-team.de/produktivitaet/visualstudiocode.html">Visual Studio Code</a> getestet). Und da ich im Sommer ja schon <a href="https://kantel.github.io/posts/2024081502_pygame_ce/">feststellen mußte</a>, daß Pygbag nur noch die Pygame-Fork <a href="https://pyga.me/">Pygame-CE</a> <em>(Pygame Community Edition)</em> unterstützt, habe ich mir mit <code>conda</code> eine virtuelle Umgebung für Pygame-CE erstellt, in der ich meine Versuche mit Pygbag durchführen möchte. Und auch Thonny habe ich ein eigenes Pygame-CE spendiert. Da sich hier Pygame und Pygame-CE in die Quere kamen, habe ich in Thonny Pygame deinstallieren müssen.</p>
<p>Wer damit rumspielen will, das Pygbag-Boilerplate findet Ihr nicht nur auf dieser Seite, sondern auch (mit den Assets) in <a href="https://github.com/kantel/pygameprojects/tree/master/pygbag/pygbag_boilerplate">meinem GitHub-Repositorium</a>. Auch ich habe vor, in der nächsten Zeit einiges mit Pygame-CE und Pygbag anzustellen. Denn Pygame im Browser, das hat schon was. <em>Still digging!</em></p>



 ]]></description>
  <category>Pygame</category>
  <category>Pygbag</category>
  <category>Python</category>
  <category>Spieleprogrammierung</category>
  <category>OOP</category>
  <guid>https://kantel.github.io/posts/2025012001_pygbag_revisited/</guid>
  <pubDate>Mon, 20 Jan 2025 17:45:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025012001_pygbag_revisited/images/pygbag.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Neuanfänge: Videos zum Wochenende</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025011702_new_beginnings/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54151150373/"><img src="https://kantel.github.io/posts/2025011702_new_beginnings/images/kelleroffice-b.jpg" class="img-fluid"></a></p>
<p>Die Processing Foundation hat ein Förderprogramm unter dem Namen <a href="https://medium.com/@ProcessingOrg/new-beginnings-wrapping-up-the-first-pr05-developer-grant-program-71e82080032c">Processing Foundation Software Development Grant</a> (kurz: <em>pr05 Grant</em>, ausgesprochen »pros«) ins Leben gerufen. Diese neue Mentoring-Initiative soll das berufliche Wachstum von Softwareentwicklerinnen und -entwicklern durch praktische Beteiligung an Open-Source-Projekten unterstützen. In einer ersten Iteration des Programms haben sie fünf Entwicklerinnen mit Stipendien in Höhe von 10.000 US-Dollar und Mentoring durch erfahrene Open-Source-Mitwirkende unterstützt.</p>
<p>Das Thema des Programms dieses ersten Jahres war »Neuanfänge« und reagierte auf einen wichtigen Übergangsmoment für die Processing-Foundation-Projekte. <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processing.html">Processing</a> macht nach dem Ausscheiden seiner Gründer wieder Fortschritte und <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/p5js.html">P5.js</a> bereitet sich auf die Veröffentlichung von Version 2.0 vor. Gleichzeitig wird der p5.js-Editor einem umfassenden Upgrade unterzogen, bei dem eine neuere und leistungsfähigere Version der Softwarebibliothek integriert wird, die die Codebearbeitungsfunktionen unterstützt.</p>
<p>Die Initiative hat eine Liste von fünf Projekten zusammengestellt, um diese Übergänge zu unterstützen, und ihre Stipendiaten ermutigt, sich intensiv mit der Infrastruktur auseinanderzusetzen. Einige dieser Projekte konzentrierten sich auf die Wartung bestehender Systeme, andere drehten sich um den Bau von Prototypen, die die kritische Infrastruktur erweitern würden. Diese fünf Projekte sind:</p>
<section id="diya-solanki-erstellen-einer-processing-vscode-erweiterung" class="level3">
<h3 class="anchored" data-anchor-id="diya-solanki-erstellen-einer-processing-vscode-erweiterung">Diya Solanki: Erstellen einer Processing VSCode-Erweiterung</h3>
<iframe class="if16_9" src="https://www.youtube.com/embed/KsHP7RExNzM?si=ugEb1pGmFEHa7bun" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p><a href="https://medium.com/@diya.solanki.31/my-journey-with-pr05-processing-foundation-2e6c629d59da">Dieses Projekt</a> konzentrierte sich auf die Integration von Processing in <a href="http://cognitiones.kantel-chaos-team.de/produktivitaet/visualstudiocode.html">Visual Studio Code</a> und erstellte eine <em>Language Server Protocol</em> (LSP)-Erweiterung, um robuste IntelliSense-Funktionen für Processing-Skizzen (<code>.pde-Dateien</code>) bereitzustellen, wie Dokumentation beim Hovern, Codevervollständigung, Syntaxhervorhebung und Skizzenausführung innerhalb von VSCode. Es wurde unter der GPL-2.0-Lizenz auf <a href="https://github.com/diyaayay/processing-language-server-extension/">GitHub veröffentlicht</a> und kann vom Visual Studio Code Marketplace <a href="https://marketplace.visualstudio.com/items?itemName=DiyaSolanki.processing-language-server-extension">installiert werden</a>.</p>
</section>
<section id="miaoye-que-überarbeitung-des-friendly-error-system-fes-für-p5.js-2.0" class="level3">
<h3 class="anchored" data-anchor-id="miaoye-que-überarbeitung-des-friendly-error-system-fes-für-p5.js-2.0">Miaoye Que: Überarbeitung des Friendly Error System (FES) für p5.js 2.0</h3>
<iframe class="if16_9" src="https://www.youtube.com/embed/HjtJ7JESJqo?si=ZFI1U2sVEIkns1qO" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p>Das <a href="https://medium.com/@pure.chinese.honey/6f589b7a453b">Friendly Error System</a> (FES 🌸) soll neuen Programmierern helfen, indem es Fehlermeldungen in einfacher, benutzerfreundlicher Sprache bereitstellt. Eine <a href="https://github.com/processing/p5.js/blob/main/contributor_docs/friendly_error_system.md">Einführung</a> gibt es hier.</p>
</section>
<section id="dora-do-prototyp-eines-kollaborativen-desktop-editors-für-processing" class="level3">
<h3 class="anchored" data-anchor-id="dora-do-prototyp-eines-kollaborativen-desktop-editors-für-processing">Dora Do: Prototyp eines kollaborativen Desktop-Editors für Processing</h3>
<iframe class="if16_9" src="https://www.youtube.com/embed/woGZGg5tvxU?si=FJbOWqqYJepCbYER" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p>Dora entwickelte den <a href="https://doradocodes.github.io/processing-collab-editor/">Processing Collaborative Editor</a> (PCE), einen Prototypen einer Desktop-App für Mac und Windows, der um neue Möglichkeiten, mit Processing-Skizzen zu arbeiten, erweitert wurde. PCE legt den Schwerpunkt auf die Zusammenarbeit in Echtzeit und ermöglicht es mehreren Benutzern, gemeinsam an Skizzen zu arbeiten, wie sie es bei einem Google-Dokument tun können.</p>
<p>Das Projekt wurde <a href="https://medium.com/@doradocodes/prototype-a-collaborative-editor-for-processing-10a665063d7b">hier vorgestellt</a> und unter der GPL-3.0-Lizenz auf <a href="https://github.com/doradocodes/processing-collab-editor">GitHub veröffentlicht</a>. Eine <a href="https://github.com/processing/pr05-grant/blob/main/2024_NewBeginnings/final-reports/pr05_2024_Final_report_DoraDo.md">technische Zusammenfassung</a> gibt es hier.</p>
</section>
<section id="nahee-kim-upgrade-von-codemirror-auf-version-6-für-den-p5.js-editor" class="level3">
<h3 class="anchored" data-anchor-id="nahee-kim-upgrade-von-codemirror-auf-version-6-für-den-p5.js-editor">Nahee Kim: Upgrade von CodeMirror auf Version 6 für den p5.js-Editor</h3>
<iframe class="if16_9" src="https://www.youtube.com/embed/b0A5zQlPbf4?si=URomiWadqJo93CNa" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p>Nahee arbeitete an der Aktualisierung des p5.js-Webeditors auf CodeMirror 6. Obwohl das Projekt noch läuft, wird dieses Update den Editor dank der neuen Funktionen in CodeMirror 6 letztendlich zugänglicher und benutzerfreundlicher machen, insbesondere auf mobilen Geräten.</p>
</section>
<section id="claudine-chen-vereinfachung-des-workflows-für-processing-bibliotheken--tools-und--modi" class="level3">
<h3 class="anchored" data-anchor-id="claudine-chen-vereinfachung-des-workflows-für-processing-bibliotheken--tools-und--modi">Claudine Chen: Vereinfachung des Workflows für Processing-Bibliotheken, -Tools und -Modi</h3>
<iframe class="if16_9" src="https://www.youtube.com/embed/WmUl5xTQzpw?si=WqY2BQDGH7GmGb5O" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p>Claudine arbeitete an der Vereinfachung des Prozesses zum Erstellen und Verwalten von Processing-Bibliotheken. Sie <a href="https://medium.com/@cloudnine_95355/simplifying-the-workflow-for-processing-libraries-tools-and-modes-abcbe5c67c8b">verbesserte das Processing Library Template</a>, ein Tool, das Entwicklern beim Erstellen neuer Bibliotheken hilft, indem sie die Verwendung vereinfachte und neue Funktionen für die lokale Einrichtung und Automatisierung der Dokumentation hinzufügte. Sie aktualisierte auch die Art und Weise, wie neue Bibliotheken zu Processing hinzugefügt werden, und ersetzte einen komplizierten manuellen Prozess durch ein automatisiertes System, das schneller und zuverlässiger ist.</p>
<p>Das <a href="https://github.com/processing/processing-library-template/">Processing Library Template</a> wie auch die <a href="https://github.com/processing/processing-contributions/">Processing Contributions</a> sind ebenfalls unter einer GPL auf GitHub veröffentlicht.</p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54151150373/">Keller-Arbeitsplatz</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>colored french comic style, an old man, white hair, clean-shaven, no beard, blue eyes, glasses, smiling, sits at a desk in front of huge monitors, looking. videos, there are other open books on the desk, and there is a large mug of steaming coffee next to them, and a computer keyboard in front of the monitor, on the wall there are shelves with files and books, the autumn sun shines through a large window</em>«. Negative Prompt: »<em>lowres, error, cropped, worst quality, low quality, jpeg artifacts, out of frame, watermark, signature, ugly, beard, deformed, noisy, blurry, distorted, out of focus, bad anatomy, extra limbs, poorly drawn face, poorly drawn hands, missing fingers, tie</em>«. Modell: OpenArt SDXL, Style: None.</p>


</section>

 ]]></description>
  <category>Creative Coding</category>
  <category>Processing</category>
  <category>P5.js</category>
  <guid>https://kantel.github.io/posts/2025011702_new_beginnings/</guid>
  <pubDate>Fri, 17 Jan 2025 22:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025011702_new_beginnings/images/kelleroffice.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
