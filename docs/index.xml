<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Der Schockwellenreiter</title>
<link>https://kantel.github.io/</link>
<atom:link href="https://kantel.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description>Schockwellenreiter</description>
<generator>quarto-1.5.47</generator>
<lastBuildDate>Fri, 21 Mar 2025 17:20:00 GMT</lastBuildDate>
<item>
  <title>MicroStudio und Python: Bouncing Heads</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025032101_microstudio_bouncing_heads/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54401021036/"><img src="https://kantel.github.io/posts/2025032101_microstudio_bouncing_heads/images/jugglingpython-b.jpg" class="img-fluid"></a></p>
<p>Natürlich konnte ich meine <a href="https://kantel.github.io/posts/2025031901_microstudio_bouncing_balls/">verbesserte Version der kollidierend Bälle</a> von vorgestern nicht einfach so stehen lassen, ohne nicht noch ein paar Spielereien damit anzustellen. Also habe ich mir wieder das freie (<a href="https://kenney.nl/assets/animal-pack-redux">CC0</a>) <a href="https://kenney.nl/assets/animal-pack-redux">Animal Pack Redux</a> aus dem schier unerschöpflichen Fundus von Kenney geschnappt und statt der Bälle ein paar Tierköpfe sich gegenseitig die Schädel an- und wieder abstoßen lassen:</p>
<iframe src="bouncingheads/index.html" class="if16_9" name="Bouncing Heads">
</iframe>
<p>Als Entwicklungsumgebung habe ich wieder <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/microstudio.html">microStudio</a> mit Python/<a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/brython.html">Brython</a> benutzt und der Quellcode unterscheidet sich nur unwesentlich von der Version von Mittwoch: Zuerst die Klasse <code>Head</code>:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> randint, choice</span>
<span id="cb1-2"></span>
<span id="cb1-3">heads_im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bear"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"buffalo"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chick"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chicken"</span>,</span>
<span id="cb1-4">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cow"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"crocodile"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dog"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"duck"</span>,</span>
<span id="cb1-5">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"elephant"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"frog"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"giraffe"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"goat"</span>,</span>
<span id="cb1-6">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gorilla"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hippo"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"horse"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"monkey"</span>,</span>
<span id="cb1-7">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"moose"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"narwhal"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"owl"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"panda"</span>,</span>
<span id="cb1-8">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"parrot"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"penguin"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pig"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rabbit"</span>,</span>
<span id="cb1-9">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rhino"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sloth"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"snake"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"walrus"</span>,</span>
<span id="cb1-10">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"whale"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"zebra"</span>]</span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Head:</span>
<span id="cb1-13">  </span>
<span id="cb1-14">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-15">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb1-16">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb1-17">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d),</span>
<span id="cb1-18">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d))</span>
<span id="cb1-19">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb1-20">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PVector2(x, y)</span>
<span id="cb1-21">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PVector2(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-22">    dx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb1-23">    dy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-24">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PVector2(dx, dy)</span>
<span id="cb1-25">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gravity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span></span>
<span id="cb1-26">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> choice(heads_im)</span>
<span id="cb1-27">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.stroke <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(0, 0, 0)"</span></span>
<span id="cb1-28">    </span>
<span id="cb1-29">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-30">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gravity</span>
<span id="cb1-31">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.add(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel)</span>
<span id="cb1-32">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check border</span></span>
<span id="cb1-33">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>screen.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d:</span>
<span id="cb1-34">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>screen.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d</span>
<span id="cb1-35">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-36">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d:</span>
<span id="cb1-37">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d</span>
<span id="cb1-38">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-39">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d:</span>
<span id="cb1-40">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d</span>
<span id="cb1-41">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-42">    </span>
<span id="cb1-43">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-44">    screen.drawSprite(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h)</span>
<span id="cb1-45">    screen.drawRound(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.stroke)</span></code></pre></div>
<p>Hier wurden lediglich die Kreis der Vorgängerversion durch zufällig ausgewählte Sprites aus dem Kenney-Pack ersetzt. Und auch das Hauptprogramm unterscheidet sich ebenfalls nur dadurch, daß die Kreise durch Köpfe ausgetauscht wurden:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> randint, choice</span>
<span id="cb2-2"></span>
<span id="cb2-3">heads <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-4">NUM_HEADS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span></span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> init():</span>
<span id="cb2-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(NUM_HEADS):</span>
<span id="cb2-8">    heads.append(Head())</span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update():</span>
<span id="cb2-11">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> head <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> heads:</span>
<span id="cb2-12">    head.update()</span>
<span id="cb2-13">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(heads)):</span>
<span id="cb2-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(heads)):</span>
<span id="cb2-15">      impact_vector <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> heads[j].loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> heads[i].loc</span>
<span id="cb2-16">      d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> impact_vector.mag()</span>
<span id="cb2-17">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> is_circle_collision(heads[i], heads[j]):</span>
<span id="cb2-18">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make sure that the balls don't overlap</span></span>
<span id="cb2-19">        overlap <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (heads[i].d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> heads[j].d))</span>
<span id="cb2-20">        diff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> impact_vector</span>
<span id="cb2-21">        diff.limit(overlap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb2-22">        heads[i].loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> diff </span>
<span id="cb2-23">        heads[j].loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> diff </span>
<span id="cb2-24">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Swap the velocity of the colliding balls</span></span>
<span id="cb2-25">        heads[i].vel.x, heads[j].vel.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> heads[j].vel.x, heads[i].vel.x</span>
<span id="cb2-26">        heads[i].vel.y, heads[j].vel.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> heads[j].vel.y, heads[i].vel.y</span>
<span id="cb2-27">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> check_input(keyboard.press, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SPACE"</span>):</span>
<span id="cb2-28">    heads.clear()</span>
<span id="cb2-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print("RESTART")</span></span>
<span id="cb2-30">    init()</span>
<span id="cb2-31"></span>
<span id="cb2-32"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw():</span>
<span id="cb2-33">  screen.clear(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(234, 218, 184)"</span>)</span>
<span id="cb2-34">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> head <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> heads:</span>
<span id="cb2-35">    head.draw()</span></code></pre></div>
<p>Dazu muß natürlich auch noch meine <a href="https://github.com/kantel/learningarcade/blob/master/noc/pvector.py">PVector2</a>-Bibliothek eingebunden werden (dich hier hier – um Platz zu sparen – nicht noch einmal abdrucke) und der Reiter <code>util</code> mit den zwei Hilfsfunktionen <code>check_input(obj, val)</code> und <code>is_circle_collision(obj1, obj2)</code>:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> check_input(obj, val):</span>
<span id="cb3-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">hasattr</span>(obj, val):</span>
<span id="cb3-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> obj[val] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> is_circle_collision(obj1, obj2):</span>
<span id="cb3-7">  distance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> math.dist([obj1.loc.x, obj1.loc.y], [obj2.loc.x, obj2.loc.y])</span>
<span id="cb3-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> distance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> obj1.d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> obj2.d:</span>
<span id="cb3-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb3-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span></code></pre></div>
<p>Das <a href="https://microstudio.io/i/kantel/bouncingheads/">komplette Skript inklusive aller verwendeten Sprites</a> auf meinem microStudio-Account finden. Meine kleine »microStudio mit Python/Brython«-Reihe ist damit auf 15&nbsp;Beiträge angewachsen:</p>
<ul>
<li>MicroStudio und Python (Teil 1): <a href="https://kantel.github.io/posts/2024032201_microstudio_python_1/">Hallo Brython</a>!</li>
<li>MicroStudio und Python (Teil 2): <a href="https://kantel.github.io/posts/2024032401_microstudio_python_2/">Zombie Apokalypse</a></li>
<li>MicroStudio und Python (Teil 3): <a href="https://kantel.github.io/posts/2024032502_microstudio_python_3/">Dancing Crab</a></li>
<li>MicroStudio und Python (Teil 4): <a href="https://kantel.github.io/posts/2024032703_flying_badger_python/">Flying Badger</a></li>
<li>MicroStudio und Python (Teil 5): <a href="https://kantel.github.io/posts/2024032801_microstudio_noc_1/">PVector2 und »The Nature of Code«</a></li>
<li>MicroStudio und Python (Teil 6): <a href="https://kantel.github.io/posts/2024033102_bouncing_balls_microstudio/">Bouncing Balls</a></li>
<li>MicroStudio und Python (Teil 7): <a href="https://kantel.github.io/posts/2024040201_collision_detection_1/">Kollisionserkennung mit Kreisen</a></li>
<li>MicroStudio und Python (Teil 8): <a href="https://kantel.github.io/posts/2024040401_bouncing_birds/">Bouncing Birds</a></li>
<li>MicroStudio und Python (Teil 9): <a href="https://kantel.github.io/posts/2024040701_rect_collision/">Kollisionserkennung mit Rechtecken</a></li>
<li>MicroStudio und Python (Teil 10): <a href="https://kantel.github.io/posts/2024042301_bubbling_emojis/">Bubbly Emojis</a></li>
<li>MicroStudio und Python (Teil 11): <a href="https://kantel.github.io/posts/2024042702_microstudio_partikel/">Ein Partikelsystem</a></li>
<li>MicroStudio und Python (Teil 12): <a href="https://kantel.github.io/posts/2024042801_microstudio_particle2/">Ein Partikelsystem (2)</a></li>
<li>MicroStudio und Python (Teil 13): <a href="https://kantel.github.io/posts/2025031601_microstudio_nature_of_code/">Bouncing Duck</a> (mit Vektoren)</li>
<li>MicroStudio und Python (Teil 14): <a href="https://kantel.github.io/posts/2025031901_microstudio_bouncing_balls/">Bouncing Balls</a> (ohne Überlappungen)</li>
<li>MicroStudio und Python (Teil 15): Bouncing Heads</li>
</ul>
<p>Und ich habe immer noch neue Ideen, was ich mit microStudio alles so anstellen könnte. <em>Still digging!</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54401021036/">Juggling Python</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>Colored DC Comic Style. A python with horn-rimmed glasses juggles a few balls with painted animal heads in a circus tent in front of an animal audience</em>«. Modell: Flux (Pro), Style: None.</p>



 ]]></description>
  <category>microStudio</category>
  <category>Python</category>
  <category>Brython</category>
  <category>Nature of Code</category>
  <category>Creative Coding</category>
  <guid>https://kantel.github.io/posts/2025032101_microstudio_bouncing_heads/</guid>
  <pubDate>Fri, 21 Mar 2025 17:20:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025032101_microstudio_bouncing_heads/images/jugglingpython.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Google korrigiert wieder kritische Sicherheitslücken in Chrome</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025032001_chrome_update/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54370060323/"><img src="https://kantel.github.io/posts/2025032001_chrome_update/images/octopussy-b.jpg" class="img-fluid"></a></p>
<p>Das Mittwochs-Update kommt gewiss, auch wenn es erst am Donnerstag ist: Unser aller Datenkrake veröffentlichte eine Aktualisierung ihres Flaggschiffs Chrome in der Version 134 (134.0.6998.117/118) und schloss damit <a href="https://chromereleases.googleblog.com/2025/03/stable-channel-update-for-desktop_19.html">kritische Sicherheitslücken</a>.</p>
<p>Chrome aktualisiert sich (außer bei Linux) über die integrierte Update-Funktion, kann aber – wenn es pressiert – auch <a href="https://www.google.com/intl/de/chrome/browser/">hier geladen</a> werden. <em>(Mein <a href="https://wwwuser.gwdguser.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54370060323/">Octopussy</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>Colored french comic style, a sexy female robot evades from a gigantic data octopus</em>«. Modell: Flux (Pro), Style: None.</p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2025032001_chrome_update/</guid>
  <pubDate>Thu, 20 Mar 2025 15:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025032001_chrome_update/images/octopussy.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>MicroStudio und Python: Bouncing Balls (ohne Überlappungen)</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025031901_microstudio_bouncing_balls/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54397295180/"><img src="https://kantel.github.io/posts/2025031901_microstudio_bouncing_balls/images/bouncingballs-b.jpg" class="img-fluid"></a></p>
<p>Mein Abenteuer <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/microstudio.html">»microStudio</a> mit Python/<a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/brython.html">Brython</a>« geht weiter. Heute habe ich mich einem Problem gewidmet, das mich spätestens seit dem Beitrag »<a href="https://kantel.github.io/posts/2024040401_bouncing_birds/">Bouncing Birds</a>« verfolgt hat: Wenn ich eine Kollisionserkennung implementiert hatte, kam es in einigen Fällen vor, daß sich die Kreise überlappten und nur schwer wieder zu trennen waren. Das lag daran, daß – bedingt durch die Euler-Integration und die Framerate von 60&nbsp;FPS – bei einer Kollision sich die Kreise so weit überschnitten, daß sie auch beim nächsten (oder über- (über-)) nächsten Schritt immer noch kollidierten.</p>
<p>Die Lösung ist aus der Spieleprogrammierung eigentlich bekannt: Bei einer Kollision setzt man die Akteure (die Kreise oder auch die Sprites) soweit auf die Position zurück, daß sie sich zwar gerade noch berühren, aber nicht mehr überlappen. <em>Daniel Shiffman</em> hat das in seiner 184.&nbsp;Coding Challenge »<a href="https://www.youtube.com/watch?v=dJNFPv9Mj-Y">Collisions Without a Physics Library!</a>« wunderbar erklärt. In microStudio/Brython sieht dann die Lösung so aus:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check for collision between balls</span></span>
<span id="cb1-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(balls)):</span>
<span id="cb1-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(balls)):</span>
<span id="cb1-4">      impact_vector <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> balls[j].loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> balls[i].loc</span>
<span id="cb1-5">      d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> impact_vector.mag()</span>
<span id="cb1-6">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> is_circle_collision(balls[i], balls[j]):</span>
<span id="cb1-7">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make sure that the balls don't overlap</span></span>
<span id="cb1-8">        overlap <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (balls[i].d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> balls[j].d))</span>
<span id="cb1-9">        diff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> impact_vector</span>
<span id="cb1-10">        diff.limit(overlap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb1-11">        balls[i].loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> diff </span>
<span id="cb1-12">        balls[j].loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> diff </span>
<span id="cb1-13">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Swap the velocity of the colliding balls</span></span>
<span id="cb1-14">        balls[i].vel.x, balls[j].vel.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> balls[j].vel.x, balls[i].vel.x</span>
<span id="cb1-15">        balls[i].vel.y, balls[j].vel.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> balls[j].vel.y, balls[i].vel.y</span></code></pre></div>
<p>Wenn sich zwei Kreise überlappen, berechnet man zuerst den Abstand <code>d</code> und zieht davon die beiden Radii ab. Dann addiert man jeweils die Hälfte dieser Differenz <code>diff</code> auf die Position des einen Vektors und zieht beim zweiten Vektor die zweite Hälfte der Differenz ab. Dadurch werden beide Kreise auf eine Position gesetzt, die sich zwar gerade noch schneiden, aber nicht mehr überlappen. Als Kollisionsergebnis habe ich eine Reaktion gewählt, die von diesem Video »<a href="https://www.youtube.com/watch?v=Pl_w9qSgMGY">Python Bouncing Ball Simulator 5</a>« von <em>Christian Thompson</em> (aka <em>TokyoEdtech</em> – Ihr wisst schon, der Mann, der Unglaubliches mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/turtlepython.html">Pythons Turtle</a> anstellt) inspiriert wurde: Bei einer Kollision wird einfach die Velocity der beiden beteiligten Kreise getauscht. Das ist zwar nicht wirklich eine exakte (ideale) elastische Kollision, kommt Ihr aber relativ nahe<sup>1</sup>.</p>
<p>Das Ergebnis sieht dann so aus:</p>
<iframe src="bouncingballsimulator/index.html" class="if16_9" name="Bouncing Ball Simulator">
</iframe>
<p>Für die Kollisionserkennung habe ich die Funktion <code>is_circle_collision()</code> wiederverwendet, die ich hier schon einmal <a href="https://kantel.github.io/posts/2024040201_collision_detection_1/">eingeführt hatte</a> und im Reiter <code>util</code> untergebracht:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> is_circle_collision(obj1, obj2):</span>
<span id="cb2-2">  distance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> math.dist([obj1.loc.x, obj1.loc.y], [obj2.loc.x, obj2.loc.y])</span>
<span id="cb2-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> distance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> obj1.d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> obj2.d:</span>
<span id="cb2-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb2-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span></code></pre></div>
<p>Wenn man mal von der Kollisionsbehandlung absieht, wird die meiste Arbeit in der Klasse <code>Ball</code> erledigt, die so aussieht:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> randint, choice</span>
<span id="cb3-2"></span>
<span id="cb3-3">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgba(230, 96, 55, 200)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgba(17, 42, 106, 200)"</span>,</span>
<span id="cb3-4">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgba(183, 116, 64, 200)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgba(212, 251, 69, 200)"</span>,</span>
<span id="cb3-5">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgba(252, 75, 200, 200)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgba(159, 53, 233, 200)"</span>,</span>
<span id="cb3-6">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgba(57, 218, 56, 200)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgba(67, 253, 133, 200)"</span>,</span>
<span id="cb3-7">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgba(78, 148, 42, 200)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgba(67, 254, 211, 200)"</span>,</span>
<span id="cb3-8">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgba(74, 143, 186, 200)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgba(52, 99, 234, 200)"</span>]</span>
<span id="cb3-9">          </span>
<span id="cb3-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Ball:</span>
<span id="cb3-11">  </span>
<span id="cb3-12">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-13">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># randint(4, 10)</span></span>
<span id="cb3-14">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb3-15">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d),</span>
<span id="cb3-16">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d))</span>
<span id="cb3-17">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb3-18">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PVector2(x, y)</span>
<span id="cb3-19">    dx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb3-20">    dy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-21">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PVector2(dx, dy)</span>
<span id="cb3-22">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gravity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span></span>
<span id="cb3-23">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> choice(colors)</span>
<span id="cb3-24">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.stroke <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(0, 0, 0)"</span></span>
<span id="cb3-25"></span>
<span id="cb3-26">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-27">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gravity</span>
<span id="cb3-28">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.add(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel)</span>
<span id="cb3-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check border</span></span>
<span id="cb3-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>screen.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d:</span>
<span id="cb3-31">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>screen.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d</span>
<span id="cb3-32">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-33">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d:</span>
<span id="cb3-34">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d</span>
<span id="cb3-35">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-36">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d:</span>
<span id="cb3-37">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d</span>
<span id="cb3-38">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-39">      </span>
<span id="cb3-40">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-41">    screen.fillRound(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c)</span>
<span id="cb3-42">    screen.drawRound(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.stroke)</span></code></pre></div>
<p>Die Bewegung der Kreise wird vertikal (in y-Richtung) von einer Gravitationskraft <code>gravity</code> beeinflusst, die von der Velocity abgezogen wird. Kollidiert der Kreis mit dem unteren Fensterrand, wird das Vorzeichen umgekehrt, der Kreis steigt wieder nach oben, bis wieder soviel zum negativen Wert hinzuaddiert ist, daß die Velocity wieder positiv wird und sie wieder nach unten fällt. Die horizontale Richtung (x-Achse) wird von einer Konstanten gesteuert, die per Zufallszahlengenerator zwischen <code>-3</code> und <code>3</code> erzeugt wird. Ihr seid eingeladen, mit diesen Werten zu spielen.</p>
<p>Aber auch bei der Behandlung der Ränder (Boden, Seitenwände) bin ich dieses Mal genauer. Wenn der Wert kleiner oder gleich der Position des Bodens oder der Seitenwände ist, wird er exakt auf die Position des Bodens oder der Seitenwände gesetzt<sup>2</sup>.</p>
<p>Die Hauptroutine ist – bis auf die Zeilen zur Kollisionserkennung, die ich aber auch in die Klasse <code>Ball</code> hätte auslagern können – wieder recht kompakt geraten:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb4-2">NUM_BALLS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span></span>
<span id="cb4-3">balls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> init():</span>
<span id="cb4-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(NUM_BALLS):</span>
<span id="cb4-7">    balls.append(Ball())</span>
<span id="cb4-8"></span>
<span id="cb4-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update():</span>
<span id="cb4-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ball <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> balls:</span>
<span id="cb4-11">    ball.update()</span>
<span id="cb4-12">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check for collision between balls</span></span>
<span id="cb4-13">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(balls)):</span>
<span id="cb4-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(balls)):</span>
<span id="cb4-15">      impact_vector <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> balls[j].loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> balls[i].loc</span>
<span id="cb4-16">      d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> impact_vector.mag()</span>
<span id="cb4-17">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> is_circle_collision(balls[i], balls[j]):</span>
<span id="cb4-18">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make sure that the balls don't overlap</span></span>
<span id="cb4-19">        overlap <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (balls[i].d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> balls[j].d))</span>
<span id="cb4-20">        diff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> impact_vector</span>
<span id="cb4-21">        diff.limit(overlap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb4-22">        balls[i].loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> diff </span>
<span id="cb4-23">        balls[j].loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> diff </span>
<span id="cb4-24">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Swap the velocity of the colliding balls</span></span>
<span id="cb4-25">        balls[i].vel.x, balls[j].vel.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> balls[j].vel.x, balls[i].vel.x</span>
<span id="cb4-26">        balls[i].vel.y, balls[j].vel.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> balls[j].vel.y, balls[i].vel.y</span>
<span id="cb4-27">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> check_input(keyboard.press, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SPACE"</span>):</span>
<span id="cb4-28">    balls.clear()</span>
<span id="cb4-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print("RESTART")</span></span>
<span id="cb4-30">    init()</span>
<span id="cb4-31"></span>
<span id="cb4-32"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw():</span>
<span id="cb4-33">  screen.clear(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(234, 218, 184)"</span>)</span>
<span id="cb4-34">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ball <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> balls:</span>
<span id="cb4-35">    ball.draw()</span></code></pre></div>
<p>Ihr habt hoffentlich bemerkt, daß durch die Einführung der Liste <code>balls[]</code> und der Klasse <code>Ball</code> die von mir nicht geliebte Deklaration von <code>ball</code> als <code>global</code> weggefallen ist.</p>
<p>Wie immer habe ich auch dieses Skript auf meinen microStudio-Account <a href="https://microstudio.io/i/kantel/bouncingballsimulator/">hochgeladen</a>. Macht damit, was Ihr wollt.</p>
<section id="literatur" class="level3">
<h3 class="anchored" data-anchor-id="literatur">Literatur</h3>
<p>Bei der Programmierung und zur Vertiefung des Beitrags haben mir folgende Texte und Videos geholfen:</p>
<ol type="1">
<li>Daniel Shiffman: <em><a href="https://www.youtube.com/watch?v=dJNFPv9Mj-Y">Collisions Without a Physics Library!</a></em> (Coding Challenge 184) vom 13.&nbsp;Juli&nbsp;2024</li>
<li>Christan Thompson (aka <em>TokyoEdtech</em>): <em><a href="https://www.youtube.com/playlist?list=PLlEgNdBJEO-mRsbxRND_Cu805SCrXoOZB">Bouncing Ball Simulator</a></em>, Playlist mit fünf Videos, zuletzt aktualisiert am 3.&nbsp;November&nbsp;2020</li>
<li>Reducible: <em><a href="https://www.youtube.com/watch?v=eED4bSkYCB8">Building Collision Simulations: An Introduction to Computer Graphics</a></em>, Video-Tutorial vom 19.&nbsp;Januar&nbsp;2021</li>
<li>Wikipedia-Artikel: <em><a href="https://de.wikipedia.org/wiki/Sto%C3%9F_(Physik)">Stoß (Physik)</a></em>, zuletzt besucht am 19.&nbsp;März&nbsp;2025</li>
<li>Chad Berchek: <em><a href="https://www.vobarian.com/collisions/2dcollisions2.pdf">2-Dimensional Elastic Collisions without Trigonometry</a></em> (PDF), 3.&nbsp;August&nbsp;2009</li>
</ol>
</section>
<section id="alle-bisherigen-beiträge-zu-microstudio-und-pythonbrython-im-schockwellenreiter" class="level3">
<h3 class="anchored" data-anchor-id="alle-bisherigen-beiträge-zu-microstudio-und-pythonbrython-im-schockwellenreiter">Alle bisherigen Beiträge zu Microstudio und Python/Brython im <em>Schockwellenreiter</em></h3>
<ul>
<li>MicroStudio und Python (Teil 1): <a href="https://kantel.github.io/posts/2024032201_microstudio_python_1/">Hallo Brython</a>!</li>
<li>MicroStudio und Python (Teil 2): <a href="https://kantel.github.io/posts/2024032401_microstudio_python_2/">Zombie Apokalypse</a></li>
<li>MicroStudio und Python (Teil 3): <a href="https://kantel.github.io/posts/2024032502_microstudio_python_3/">Dancing Crab</a></li>
<li>MicroStudio und Python (Teil 4): <a href="https://kantel.github.io/posts/2024032703_flying_badger_python/">Flying Badger</a></li>
<li>MicroStudio und Python (Teil 5): <a href="https://kantel.github.io/posts/2024032801_microstudio_noc_1/">PVector2 und »The Nature of Code«</a></li>
<li>MicroStudio und Python (Teil 6): <a href="https://kantel.github.io/posts/2024033102_bouncing_balls_microstudio/">Bouncing Balls</a></li>
<li>MicroStudio und Python (Teil 7): <a href="https://kantel.github.io/posts/2024040201_collision_detection_1/">Kollisionserkennung mit Kreisen</a></li>
<li>MicroStudio und Python (Teil 8): <a href="https://kantel.github.io/posts/2024040401_bouncing_birds/">Bouncing Birds</a></li>
<li>MicroStudio und Python (Teil 9): <a href="https://kantel.github.io/posts/2024040701_rect_collision/">Kollisionserkennung mit Rechtecken</a></li>
<li>MicroStudio und Python (Teil 10): <a href="https://kantel.github.io/posts/2024042301_bubbling_emojis/">Bubbly Emojis</a></li>
<li>MicroStudio und Python (Teil 11): <a href="https://kantel.github.io/posts/2024042702_microstudio_partikel/">Ein Partikelsystem</a></li>
<li>MicroStudio und Python (Teil 12): <a href="https://kantel.github.io/posts/2024042801_microstudio_particle2/">Ein Partikelsystem (2)</a></li>
<li>MicroStudio und Python (Teil 13): <a href="https://kantel.github.io/posts/2025031601_microstudio_nature_of_code/">Bouncing Duck</a> (mit Vektoren)</li>
<li>MicroStudio und Python (Teil 14): Bouncing Balls (ohne Überlappungen)</li>
</ul>
<p>Mit der (Wieder-) Entdeckung von microStudio mit Python/Brython hatte ich bisher viel Spaß. Schauen wir mal, was die Zukunft mir noch bringen wird. <em>Still digging!</em></p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Fußnoten</h2>

<ol>
<li id="fn1"><p>Wer eine genauere Simulation einer elastischen Kollision (eines (in diesem Falle zweidimensionalen) elastischen Stoß) implementieren will, kann sich ja an <em>Shiffmans</em> Implementierung orientieren. Oder sie oder er greifen gleich zu einer Physik Engine (microStudio will ja auch in Brython mit <a href="https://brm.io/matter-js/">Matter.js</a> zusammenspielen).↩︎</p></li>
<li id="fn2"><p>Dadurch werden auch hier mögliche Glitches beseitigt, die von der Euler-Integration und der Framerate von (maximal) 60&nbsp;FPS hervorgerufen werden könnten.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>microStudio</category>
  <category>Python</category>
  <category>Brython</category>
  <category>Nature of Code</category>
  <category>Creative Coding</category>
  <guid>https://kantel.github.io/posts/2025031901_microstudio_bouncing_balls/</guid>
  <pubDate>Wed, 19 Mar 2025 15:35:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025031901_microstudio_bouncing_balls/images/bouncingballs.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>MicroStudio und Python: Bouncing Duck (mit Vektoren)</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025031601_microstudio_nature_of_code/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54390641943/"><img src="https://kantel.github.io/posts/2025031601_microstudio_nature_of_code/images/bouncingduck-b.jpg" class="img-fluid"></a></p>
<p>Die bedauerliche Tatsache, daß es Apple auch mit dem <a href="https://kantel.github.io/posts/2025031201_apple_updates/">letzten Update von Sequoia</a> immer noch nicht gelungen ist, den <a href="https://kantel.github.io/posts/2025022501_noc_python/">ärgerlichen Fehler</a> zu beheben, der mich daran hindert, meine <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a>-Skripte mit Hilfe von <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygbag.html">Pygbag</a> webtauglich zu machen, hat mich bei <a href="https://kantel.github.io/posts/2025021701_vectory_pygame/">meinem Vorhaben</a> ziemlich ausgebremst, wenigstens die ersten Kapitel aus <em>Daniel Shiffmans</em> neuer, verbesserter und erweiterter Auflage von »<a href="https://natureofcode.com/">The Nature of Code</a>« von <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/p5js.html">P5.js</a> nach <a href="https://pyga.me/">Pygame CE</a> zu portieren. Denn das, was <em>Daniel Shiffman</em> in der Online-Version seines Buches mit den Skripten angestellt hat, möchte ich auch mit Python anstellen können: Skripte präsentieren, die im Browser laufen – denn statische Screenshots sind langweilig.</p>
<p>Daher hatte ich die letzten Tage mit der Suche nach Alternativen verplempert. Als erstes fiel mir <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/trinket.html">Trinket</a> ein. Denn dies besitzt neben der Turtle-Bibliothek auch eine Art <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processingpy.html">Processing.py</a>-Mode. Allerdings ist die <a href="https://kantel.github.io/posts/2023042502_malewitsch_trinket/">Impementierung ziemlich picky</a> und ich konnte einfach nicht herausbekommen, welcher Transpiler (Python nach JavaScript) hinter den Kulissen werkelt.</p>
<p>Dann fiel mir ein, daß ich vor fast genau einem Jahr schon einmal ein <a href="https://kantel.github.io/posts/2024032801_microstudio_noc_1/">ähnliches Projekt</a> mit <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/microstudio.html">microStudio</a> in Angriff genommen hatte, das ich aber damals wegen <a href="https://kantel.github.io/posts/2024041901_rip_gabi/">Gabis Tod</a> aus den Augen verloren hatte. Die Python-Implementierung in microStudio beruht auf <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/brython.html">Brython</a>, das ist zumindest <a href="https://brython.info/static_doc/3.13/en/intro.html">gut dokumentiert</a>, wird aktuell noch weitergepflegt (das <a href="https://github.com/brython-dev/brython/releases">letzte Release</a> ist vom Januar dieses Jahres) und steht mit <a href="https://github.com/brython-dev/brython/graphs/contributors">über 100 Kontributoren</a> auf einer breiten Basis. Ein wichtiger Wermutstropfen ist allerdings, daß mit Brython kein Zugriff auf Pythons <em>Scientific Stack</em> (das betrifft in diesem Zusammenhang vor allen Dingen <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/numpy.html">NumPy</a> und <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/scipy.html">SciPy</a>) möglich ist. Auf der positiven Seite steht dagegen, daß auch Brython in microStudio Zugriff auf die Physik Engine <a href="https://brm.io/matter-js/">Matter.js</a> besitzt, auf die auch <em>Shiffman</em> im sechsten Kapitel von »The Nature of Code« zugreift.</p>
<p>Auch wenn ich mir immer noch nicht sicher bin, ob ich dies bereuen werde, habe ich meine <a href="https://kantel.github.io/posts/2025021701_vectory_pygame/">bisherigen</a> <a href="https://kantel.github.io/posts/2025021802_vectory_pygame_2/">Pygame</a>-<a href="https://kantel.github.io/posts/2025022501_noc_python/">Versuche</a> testweise nach micoStudio/Brython portiert. Als Vektoren-Bibliothek habe ich dafür wieder meine eigene <a href="https://github.com/kantel/learningarcade/blob/master/noc/pvector.py">PVector.py</a>-Klasse verwendet (hier geringfügig modifiziert als <code>pvector2.py</code>). Doch zuerst einmal die Version »<a href="https://microstudio.dev/i/kantel/bouncingballwithnovectors/">Bouncing Ball ohne Vektoren</a>«.</p>
<p>Alle microStudio/Brython-Skripte benötigen – um eventuelle Glitches bei der Tastatur- oder Mausabfrage auszuschließen – eine Funktion <code>check_input(obj, val)</code> die ich im Reiter <code>util</code> abgelegt habe:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> check_input(obj, val):</span>
<span id="cb1-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">hasattr</span>(obj, val):</span>
<span id="cb1-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> obj[val] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span></code></pre></div>
<p>Dann folgt die Klasse des Actors, die ich in Anlehnung an <em>Shiffman</em> <code>Mover</code> genannt und im Reiter <code>mover</code> untergebracht habe:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> randint</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Mover:</span>
<span id="cb2-4">  </span>
<span id="cb2-5">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-6">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb2-7">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-8">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>)</span>
<span id="cb2-9">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb2-10">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_speed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span></span>
<span id="cb2-11">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y_speed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-12">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgba(17, 42, 106, 200)"</span></span>
<span id="cb2-13">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.stroke <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(0, 0, 0)"</span></span>
<span id="cb2-14">    </span>
<span id="cb2-15">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-16">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_speed</span>
<span id="cb2-17">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y_speed</span>
<span id="cb2-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check borders</span></span>
<span id="cb2-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d:</span>
<span id="cb2-20">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_speed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>screen.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> screen.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d:</span>
<span id="cb2-22">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y_speed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-23">      </span>
<span id="cb2-24">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-25">    screen.fillRound(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c)</span>
<span id="cb2-26">    screen.setLineWidth(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb2-27">    screen.drawRound(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.stroke)</span>
<span id="cb2-28">    screen.setLineWidth(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<p>Da in dieser Klasse eigentlich alles abgehandelt wird, ist das Hauptprogramm <code>main</code> erfrischend kurz geraten:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bouncing Ball with No Vectors</span></span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> init():</span>
<span id="cb3-4">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">global</span> mover</span>
<span id="cb3-5">  mover <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Mover()</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update():</span>
<span id="cb3-8">  mover.update()</span>
<span id="cb3-9">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Restart</span></span>
<span id="cb3-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> check_input(keyboard.press, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SPACE"</span>):</span>
<span id="cb3-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RESTART"</span>)</span>
<span id="cb3-12">    init()</span>
<span id="cb3-13"></span>
<span id="cb3-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw():</span>
<span id="cb3-15">  screen.clear(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(234, 218, 184)"</span>)</span>
<span id="cb3-16">  mover.draw()</span></code></pre></div>
<p>Die Version »<a href="https://microstudio.dev/i/kantel/bouncingballwithvectors/">Bouncing Ball mit Vektoren</a>« benötigt natürlich meine PVector2-Implementierung, die ich hier der Vollständigkeit halber noch einmal abdrucke:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> PVector2():</span>
<span id="cb4-5">    </span>
<span id="cb4-6">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x, y):</span>
<span id="cb4-7">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x</span>
<span id="cb4-8">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y</span>
<span id="cb4-9"></span>
<span id="cb4-10">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, v):</span>
<span id="cb4-11">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> v.x</span>
<span id="cb4-12">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> v.y</span>
<span id="cb4-13">    </span>
<span id="cb4-14">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-15">    v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PVector2(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y)</span>
<span id="cb4-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> v</span>
<span id="cb4-17"></span>
<span id="cb4-18">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> add(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, v):</span>
<span id="cb4-19">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> v.x</span>
<span id="cb4-20">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> v.y</span>
<span id="cb4-21">        </span>
<span id="cb4-22">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> sub(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, v):</span>
<span id="cb4-23">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> v.x</span>
<span id="cb4-24">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> v.y</span>
<span id="cb4-25">    </span>
<span id="cb4-26">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Multiplikation mit einem Skalar</span></span>
<span id="cb4-27">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> mult(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, n):</span>
<span id="cb4-28">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> n</span>
<span id="cb4-29">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> n</span>
<span id="cb4-30">    </span>
<span id="cb4-31">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Division durch einen Skalar</span></span>
<span id="cb4-32">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> div(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, n):</span>
<span id="cb4-33">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/=</span> n</span>
<span id="cb4-34">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/=</span> n</span>
<span id="cb4-35"></span>
<span id="cb4-36">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Elementweise Multiplikation eines Vektor mit einem anderen Vektor</span></span>
<span id="cb4-37">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> mult2(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, v):</span>
<span id="cb4-38">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> v.x</span>
<span id="cb4-39">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> v.y</span>
<span id="cb4-40"></span>
<span id="cb4-41">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Elementweise Division eines Vektor mit einem anderen Vektor</span></span>
<span id="cb4-42">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> div2(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, v):</span>
<span id="cb4-43">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/=</span> v.x</span>
<span id="cb4-44">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/=</span> v.y</span>
<span id="cb4-45"></span>
<span id="cb4-46">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Magnitude</span></span>
<span id="cb4-47">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> mag(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-48">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> math.sqrt(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y)</span>
<span id="cb4-49">    </span>
<span id="cb4-50">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Normalisierung</span></span>
<span id="cb4-51">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> normalize(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-52">    m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mag()</span>
<span id="cb4-53">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb4-54">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.div(m)</span>
<span id="cb4-55"></span>
<span id="cb4-56"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Berechnung der euklidischen Distanz zwischen zwei Vektoren</span></span>
<span id="cb4-57">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> dist(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, v):</span>
<span id="cb4-58">    dx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> v.x</span>
<span id="cb4-59">    dy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> v.y</span>
<span id="cb4-60">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> math.sqrt(dx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>dx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>dy)</span>
<span id="cb4-61">    </span>
<span id="cb4-62">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Berechnung des Skalarprodukts (inneren Produkts) eines Vektors</span></span>
<span id="cb4-63">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> dot(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, v):</span>
<span id="cb4-64">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>v.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>v.y</span>
<span id="cb4-65">    </span>
<span id="cb4-66">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Begrenzt die Magnitude eines Vektors auf max</span></span>
<span id="cb4-67">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> limit(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>):</span>
<span id="cb4-68">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mag() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>:</span>
<span id="cb4-69">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.normalize()</span>
<span id="cb4-70">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mult(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>)</span>
<span id="cb4-71">    </span>
<span id="cb4-72">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Berechnet den Winkel der Rotation eines Vektors</span></span>
<span id="cb4-73">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> heading(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-74">    angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> math.atan2(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x)</span>
<span id="cb4-75">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>angle</span>
<span id="cb4-76"></span>
<span id="cb4-77">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__add__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, other):</span>
<span id="cb4-78">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> other.x</span>
<span id="cb4-79">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> other.y</span>
<span id="cb4-80">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PVector2(x, y)</span>
<span id="cb4-81">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> result</span>
<span id="cb4-82">    </span>
<span id="cb4-83">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__sub__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, other):</span>
<span id="cb4-84">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> other.x</span>
<span id="cb4-85">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> other.y</span>
<span id="cb4-86">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PVector2(x, y)</span>
<span id="cb4-87">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> result</span>
<span id="cb4-88">    </span>
<span id="cb4-89">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__str__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-90">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"["</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"]"</span></span>
<span id="cb4-91">        </span>
<span id="cb4-92">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@classmethod</span></span>
<span id="cb4-93">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> random2D(cls):</span>
<span id="cb4-94">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.uniform(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-95">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.uniform(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-96">    v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cls(x, y)</span>
<span id="cb4-97">    v.normalize()</span>
<span id="cb4-98">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> v</span>
<span id="cb4-99"></span>
<span id="cb4-100">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Klassenmethoden: Skalare Multiplikation und Division</span></span>
<span id="cb4-101">    </span>
<span id="cb4-102">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Multiplikation mit einem Skalar</span></span>
<span id="cb4-103">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> smult(v, n):</span>
<span id="cb4-104">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> v.x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>n</span>
<span id="cb4-105">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> v.y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>n</span>
<span id="cb4-106">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PVector2(x, y)</span>
<span id="cb4-107">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> result</span>
<span id="cb4-108"></span>
<span id="cb4-109">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Division mit einem Skalar</span></span>
<span id="cb4-110">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> sdiv(v, n):</span>
<span id="cb4-111">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb4-112">      x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> v.x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>n</span>
<span id="cb4-113">      y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> v.y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>n</span>
<span id="cb4-114">      result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PVector2(x, y)</span>
<span id="cb4-115">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> result</span>
<span id="cb4-116">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb4-117">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Error. Divison durch Null!"</span>)</span></code></pre></div>
<p>Ansonsten unterscheidet sich nur die Klasse <code>Mover</code> von der ersten, naiven Implemetierung:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> randint</span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Mover:</span>
<span id="cb5-4">  </span>
<span id="cb5-5">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb5-6">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb5-7">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb5-8">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>)</span>
<span id="cb5-9">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb5-10">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PVector2(x, y)</span>
<span id="cb5-11">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PVector2(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb5-12">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgba(230, 96, 55, 200)"</span></span>
<span id="cb5-13">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.stroke <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(0, 0, 0)"</span></span>
<span id="cb5-14">    </span>
<span id="cb5-15">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb5-16">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.add(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel)</span>
<span id="cb5-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check border</span></span>
<span id="cb5-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d</span>
<span id="cb5-19">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d):</span>
<span id="cb5-20">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb5-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>screen.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span></span>
<span id="cb5-22">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> screen.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d):</span>
<span id="cb5-23">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb5-24">      </span>
<span id="cb5-25">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb5-26">    screen.fillRound(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c)</span>
<span id="cb5-27">    screen.setLineWidth(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb5-28">    screen.drawRound(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.stroke)</span>
<span id="cb5-29">    screen.setLineWidth(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<p>Die beiden anderen Programmteile <code>util</code> und <code>main</code> sind identisch.</p>
<p>Natürlich wollte ich auch in microStudio auf meine Zugabe nicht verzichten. Während in der <a href="https://kantel.github.io/posts/2025021601_arcade_tut_3/">Arcade</a>- und in der <a href="https://kantel.github.io/posts/2025021701_vectory_pygame/">Pygame-Version</a> (<a href="https://kantel.github.io/posts/2025021802_vectory_pygame_2/">Nachschlag</a>) ein Küken über den Bildschirm schwebt und von den Wänden abprallt, habe ich dieses Mal eine Ente dafür auserkoren (das Bild stammt ebenfalls wieder aus der freien (<a href="https://creativecommons.org/publicdomain/zero/1.0/">CC0</a>) <a href="https://kenney.nl/assets/animal-pack-redux">Animal Pack Redux</a> von Kenney). Der <a href="https://microstudio.dev/i/kantel/bouncingduckwithvectors/">Quellcode</a> ist ebenfalls auf meinem microStudio-Account zu finden.</p>
<iframe src="bouncingduckwithvectors/index.html" class="if16_9" name="Bouncing Duck">
</iframe>
<p>Auch in diesem Skript liegen die eigentlichen Unterschiede zu den beiden Skripten oben nur in der Klasse <code>Duck</code>,</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> randint</span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Duck:</span>
<span id="cb6-4">  </span>
<span id="cb6-5">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb6-6">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb6-7">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb6-8">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>)</span>
<span id="cb6-9">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb6-10">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PVector2(x, y)</span>
<span id="cb6-11">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PVector2(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb6-12">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"duck"</span></span>
<span id="cb6-13">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.stroke <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(0, 0, 0)"</span></span>
<span id="cb6-14">    </span>
<span id="cb6-15">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb6-16">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.add(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel)</span>
<span id="cb6-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check border</span></span>
<span id="cb6-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d</span>
<span id="cb6-19">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d):</span>
<span id="cb6-20">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb6-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>screen.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span></span>
<span id="cb6-22">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> screen.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d):</span>
<span id="cb6-23">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb6-24">    </span>
<span id="cb6-25">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb6-26">    screen.drawSprite(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h)</span>
<span id="cb6-27">    screen.drawRound(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.stroke)</span></code></pre></div>
<p>während im Hauptprogramm <code>main</code> der Unterschied nur darin besteht, daß ich die Instanz der Klasse <code>Duck()</code> aus naheliegenden Gründen <code>donald</code> genannt habe:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bouncing Duck</span></span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> init():</span>
<span id="cb7-4">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">global</span> donald</span>
<span id="cb7-5">  donald <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Duck()</span>
<span id="cb7-6"></span>
<span id="cb7-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update():</span>
<span id="cb7-8">  donald.update()</span>
<span id="cb7-9">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Restart</span></span>
<span id="cb7-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> check_input(keyboard.press, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SPACE"</span>):</span>
<span id="cb7-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RESTART"</span>)</span>
<span id="cb7-12">    init()</span>
<span id="cb7-13"></span>
<span id="cb7-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw():</span>
<span id="cb7-15">  screen.clear(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(234, 218, 184)"</span>)</span>
<span id="cb7-16">  donald.draw()</span></code></pre></div>
<p>Nun bin ich hin- und hergerissen. Soll ich mit microStudio weitermachen? Wie schon vor eonem Jahr hatte ich heute viel Spaß damit und Skripte, die im Browser laufen, sind einfach geiler als statische Screenshots. Und die in diese Seiten eingebetteten microStudio-Apps laufen auch noch viel geschmeidiger als die Pygbag-Skripte. Ich werde daher erst einmal weitermachen und hoffe, daß ich mich damit nicht in eine Sackgasse manövriere.</p>
<p>Um den Überblick zu behalten hier – wie schon bei den Beispielen aus dem letzten Jahr – eine Auflistung aller bisher im <em>Schockwellenreiter</em> erschienenen microScript/Brython-Tutorials:</p>
<ul>
<li>MicroStudio und Python (Teil 1): <a href="https://kantel.github.io/posts/2024032201_microstudio_python_1/">Hallo Brython</a>!</li>
<li>MicroStudio und Python (Teil 2): <a href="https://kantel.github.io/posts/2024032401_microstudio_python_2/">Zombie Apokalypse</a></li>
<li>MicroStudio und Python (Teil 3): <a href="https://kantel.github.io/posts/2024032502_microstudio_python_3/">Dancing Crab</a></li>
<li>MicroStudio und Python (Teil 4): <a href="https://kantel.github.io/posts/2024032703_flying_badger_python/">Flying Badger</a></li>
<li>MicroStudio und Python (Teil 5): <a href="https://kantel.github.io/posts/2024032801_microstudio_noc_1/">PVector2 und »The Nature of Code«</a></li>
<li>MicroStudio und Python (Teil 6): <a href="https://kantel.github.io/posts/2024033102_bouncing_balls_microstudio/">Bouncing Balls</a></li>
<li>MicroStudio und Python (Teil 7): <a href="https://kantel.github.io/posts/2024040201_collision_detection_1/">Kollisionserkennung mit Kreisen</a></li>
<li>MicroStudio und Python (Teil 8): <a href="https://kantel.github.io/posts/2024040401_bouncing_birds/">Bouncing Birds</a></li>
<li>MicroStudio und Python (Teil 9): <a href="https://kantel.github.io/posts/2024040701_rect_collision/">Kollisionserkennung mit Rechtecken</a></li>
<li>MicroStudio und Python (Teil 10): <a href="https://kantel.github.io/posts/2024042301_bubbling_emojis/">Bubbly Emojis</a></li>
<li>MicroStudio und Python (Teil 11): <a href="https://kantel.github.io/posts/2024042702_microstudio_partikel/">Ein Partikelsystem</a></li>
<li>MicroStudio und Python (Teil 12): <a href="https://kantel.github.io/posts/2024042801_microstudio_particle2/">Ein Partikelsystem (2)</a></li>
<li>MicroStudio und Python (Teil 13): Bouncing Duck (mit Vektoren)</li>
</ul>
<p>Wenn ich das mal überblicke, ist da eigentlich schon eine ganze Menge zusammengekommen. Daraus muß sich doch etwas machen lassen. <em>Still digging!</em></p>



 ]]></description>
  <category>microStudio</category>
  <category>Python</category>
  <category>Brython</category>
  <category>Nature of Code</category>
  <category>Creative Coding</category>
  <guid>https://kantel.github.io/posts/2025031601_microstudio_nature_of_code/</guid>
  <pubDate>Sun, 16 Mar 2025 16:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025031601_microstudio_nature_of_code/images/bouncingduck.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Happy Pi-Day: Python’s π-zza Party</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025031401_pi-day_python/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54386582845/"><img src="https://kantel.github.io/posts/2025031401_pi-day_python/images/piday-b.jpg" class="img-fluid"></a></p>
<p>Heute ist der 14. März. Wegen der seltsamen Datumsdarstellung der US-Amerikaner, den Monat <strong>vor</strong> den Tag zu stellen, wird er dort auch <strong>3/14</strong> geschrieben. Da dies die ersten 3 Ziffern der Kreiszahl π sind, wird dieser Tag seit 1988 zuerst in den USA und mittlerweile weltweit als <a href="https://de.wikipedia.org/wiki/Pi-Tag">Pi-Tag</a> gefeiert (seit 2009 in den USA sogar offiziell durch Kongress-Beschluß). Besonders pedantische Anhänger feiern um 13:59:26 Uhr und erreichen die Kreiszahl damit bis zur siebten Nachkommastelle (3/14 1:59:26 pm).</p>
<p>Auch an YouTube geht dieser Pi-Tag natürlich nicht spurlos vorbei. Und so möchte ich Euch heute einige Videos vorstellen, die auf ihre Art den Pi-Tag zelebrieren, in vielen Fällen mit kleinen Python-Programmen.</p>
<iframe class="if16_9" src="https://www.youtube.com/embed/vlUTlbZT4ig?si=VLsfOWAiSLbgLjhG" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p><a href="https://www.youtube.com/watch?v=vlUTlbZT4ig">Aber zuerst ein Film</a>, der ganz ohne Python auskommt und aus Handarbeit besteht. Er zeigt, wie man π approximieren kann, in dem man eine kleine und eine große Kiste von einer Wand abprallen und die beiden dann π-x kollidieren lässt. Die Idee beruht auf 3Blue1Browns genialen Video »<a href="https://www.youtube.com/watch?v=6dTyOl1fmDo">There’s more to those colliding blocks that compute pi</a>« und wurde auch von <em>Daniel Shiffman</em> vor sechs Jahren <a href="https://www.youtube.com/watch?v=PoW8g67XNxA">schon einmal aufgegriffen</a> (ich <a href="http://blog.schockwellenreiter.de/2019/03/2019031401.html">berichtete</a>).</p>
<iframe class="if16_9" src="https://www.youtube.com/embed/bqs50GjWkcM?si=DBzQ8tTEHTolP9iW" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p>Jetzt aber endlich Python: <em>Rhett Allain</em> zeigt auf seinem Kanal <em>Dot Physics</em> in dem Video »<a href="https://www.youtube.com/watch?v=bqs50GjWkcM">Pi Day Python: So erstellen Sie diese irrationale Pi-Animation</a>« auf coole Weise (und mit Hilfe von <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/vpython.html">VPython</a>), daß Pi <a href="https://de.wikipedia.org/wiki/Irrationale_Zahl">irrational</a> ist. Als Konsequenz daraus schiebt der gleich noch das Video »<a href="https://www.youtube.com/watch?v=21ybF6nMaVE">Die beste Bruchdarstellung von Pi finden</a>« hinterher.</p>
<iframe class="if16_9" src="https://www.youtube.com/embed/koXuKlPTzng?si=TdL3iK-eGpOzSl7k" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p>Doch auch <em>Margaret Burke</em> enttäuscht uns am Pi-Tag nicht: In ihrem Video »<a href="https://www.youtube.com/watch?v=koXuKlPTzng">Let’s look at some pi approximations with Python and pygame for pi day!</a>« zeigt sie zum einen, wie man Pi mit Hilfe einer Monte-Carlo-Methode annähernd berechnen kann und zum zweiten, wie man Pi mit Hilfe eines eingeschriebenen Vielecks approximiert. <a href="https://de.wikipedia.org/wiki/Archimedischer_Algorithmus">Diese Methode</a> geht schon auf den antiken Mathematiker <em><a href="https://de.wikipedia.org/wiki/Archimedes">Archimedes von Syrakus</a></em> (* um 287 vor unserer Zeitrechnung - †&nbsp;vermutlich 212 vor unserer Zeitrechnung). <em>Margaret Burke</em> verwendet <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a> für Ihre Pi-Programme.</p>
<p><strong>War sonst noch was?</strong> Ach ja, »<a href="https://www.derstandard.de/story/3000000260802/verrueckt-nach-pi-illustriert-die-suche-nach-einer-faszinierenden-zahl">Verrückt nach Pi</a>« ist ein auch für Kinder geeigneter Comic von dem Mathematiker (und Magier) <em>Jean-Baptiste Aubin</em>, der Historikerin <em>Anita Lehmann</em> und dem Zeichner <em>Joonas Sildre</em>, der sich ganz und gar der Kreiszahl widmet. Und da der 14.&nbsp;März auch der Geburtstag <em>Albert Einsteins</em> und der Todestag <em>Stephen Hawkings</em> ist, ist dieser Tag seit 2020 auch der <a href="https://de.wikipedia.org/wiki/Internationaler_Tag_der_Mathematik">Internationale Tag der Mathematik</a>.</p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54386582845/">Python’s π-zza Party</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>Colored DC Comics Style. A python wearing horn-rimmed glasses pushes a large and a small box against a wall. In the background, a poster with a large π</em>«. Modell: Flux (Pro), Style: None.</p>



 ]]></description>
  <category>Mathematik</category>
  <category>Python</category>
  <category>Creative Coding</category>
  <category>VPython</category>
  <category>Pygame</category>
  <guid>https://kantel.github.io/posts/2025031401_pi-day_python/</guid>
  <pubDate>Fri, 14 Mar 2025 15:10:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025031401_pi-day_python/images/piday.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Voilà et Voici – Jupyter Notebooks im Web</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025031301_voila_voici/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54384293866/"><img src="https://kantel.github.io/posts/2025031301_voila_voici/images/voilavoici-b.jpg" class="img-fluid"></a></p>
<p>Nicht nur das Publizieren von mit Python entwickelten Spielen (sei es mit <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a> (-<a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygamezero.html">Zero</a>) oder <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/arcade.html">Arcade</a>), sondern auch das Teilen von Juypter Notebooks im Web ist meistens eine Qual, zumindest wenn der Empfänger kein Python installiert hat und/oder nicht weiß, wie man ein Python-Skript startet. Um dem abzuhelfen, wurde Voilà entwickelt:</p>
<p><strong><a href="https://voila.readthedocs.io/en/stable/">Voilà</a></strong> ist eine (freie) Anwendung (<a href="https://github.com/voila-dashboards/voila">Quellcode</a> auf GitHub), um <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/jupyter.html">Jupyter</a> Notebooks in Standalone-Webapplikationen zu konvertieren. Aus einem Jupyter Notebook lassen sich beispielsweise Slideshows oder interaktive Dashboards erzeugen. Die Voilà-Webapplikationen vereinfachen das Teilen mit nicht-technischen Zielgruppen und verhindern, daß Anwender beliebigen Code ausführen. Voilà ist ein Unterprojekt des Jupyter-Projekts. Die <a href="https://voila-gallery.org/">Voilà Gallery</a> stellt ist eine Sammlung von frei zugänglichen Beispielen zur Verfügung.</p>
<p>Doch das ist nicht alles, wenn Ihr Euer Voilá-Dashboard als statische Webseite veröffentlichen wollt, bietet das <a href="https://jupyterlite.readthedocs.io/">JupyterLite</a>-Projekt auch noch Voici an:</p>
<p><strong><a href="https://voici.readthedocs.io/en/latest/">Voici</a></strong> ist ein Tool zum Generieren statischer Dashboards aus Jupyter Notebooks. Es kann als direkter Ersatz für Voilà verwendet werden, verfügt über dieselben Befehle und unterstützt die meisten Konfigurationsoptionen von Voila.</p>
<p>Im Gegensatz zu Voila, das interaktive Dashboards serverseitig herausschreibt, verwendet Voici einen <a href="https://developer.mozilla.org/en-US/docs/WebAssembly">WebAssembly</a> (WASM)-Kernel, um Notebooks im Browser zu rendern. Dadurch ist das resultierende Dashboard vollständig eigenständig und ohne serverseitige Abängigkeiten verteilbar.</p>
<p>Auch von Voici gibt es eine <a href="https://voila-dashboards.github.io/voici-gallery/">Galerie mit Beispielprojekten</a> und der <a href="https://github.com/voila-dashboards/voici">Quellcode</a> ist ebenfalls auf GitHub zu finden.</p>
<section id="literatur" class="level2">
<h2 class="anchored" data-anchor-id="literatur">Literatur</h2>
<ul>
<li>Maika Möbus: <em><a href="https://entwickler.de/programmierung/voila-live-dashboards-aus-jupyter-notebooks-sind-da">Voilà – Live-Dashboards aus Jupyter Notebooks sind da</a></em>, Entwickler.de vom 12. Juli 2019</li>
<li>Stefan Luber/Nico Litzel: <em><a href="https://www.bigdata-insider.de/was-ist-voila-a-997206/">Was ist Voilà</a>?</em> BigData Insider vom 12. Februar 2021</li>
<li>Duc Trung Le: <em><a href="https://blog.jupyter.org/and-voici-e02367197ba2">And Voici! Scaling Jupyter dashboards up to the millions</a></em>, Jupyter Blog vom 6. Dezember 2023</li>
</ul>
<p>Voilà und Voici unterstützen nicht nur den Python-Kernel, sondern auch Julia und R (und auch Java und C(++)). Daher sollte ich unbedingt einmal testen, ob nicht auch <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/py5.html">Py5</a>-Skripte damit ins Netz gestellt werden können. <em>Still digging!</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54384293866/">Voilà et Voici</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>Colored French Comic Style. Two pretty young ladies, one blonde with blue eyes, the other with long red hair and green eyes, both with wide necklines, are sitting on a cafe terrace in front of a laptop with data visualizations. It’s spring, the sun is shining, and the Eiffel Tower is visible in the background</em>«. Modell: Flux (Pro), Style: None.</p>


</section>

 ]]></description>
  <category>Jupyter</category>
  <category>JupyterLite</category>
  <category>WASM</category>
  <category>Python</category>
  <category>Py5</category>
  <guid>https://kantel.github.io/posts/2025031301_voila_voici/</guid>
  <pubDate>Thu, 13 Mar 2025 16:20:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025031301_voila_voici/images/voilavoici.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Apples monatlicher Flickentag</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025031201_apple_updates/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54320672611/"><img src="https://kantel.github.io/posts/2025031201_apple_updates/images/apple-b.jpg" class="img-fluid"></a></p>
<p>Zwar hat diesen Monat der IT-Riese aus Cupertino mit dem angebissenen Apfel im Logo für nicht alle seine Produkte eine Aktualisierung herausgehauen, dennoch sind es so viele Updates, daß ich sie wieder <em>en bloc</em> behandeln kann. Doch der Reihe nach:</p>
<section id="apple-veröffentlicht-macos-sequoia-15.3.2" class="level3">
<h3 class="anchored" data-anchor-id="apple-veröffentlicht-macos-sequoia-15.3.2">Apple veröffentlicht macOS Sequoia 15.3.2</h3>
<p>Apple hat das Update auf die neue Betriebssystemversion macOS Sequoia 15.3.2 freigegeben und korrigiert damit auch wieder <a href="https://support.apple.com/en-us/122283">Sicherheitsprobleme</a>.</p>
<p>Das Update steht über die Systemeinstellungen zur Verfügung.</p>
<p>Leider hat auch dieses Update immer noch nicht die <a href="https://kantel.github.io/posts/2025022501_noc_python/">hier angesprochenen Probleme</a> behoben (ich bekomme immer noch Fehlermeldungen, die irgendetwas von <code>IMKClient</code> und <code>IMKInputSession</code> faseln). Hier sollte Apple <del>irgend wann einmal</del> möglichst schnell in die Puschen kommen.</p>
</section>
<section id="apple-veröffentlicht-sicherheitsupdate-für-macos-ventura-und-sonoma" class="level3">
<h3 class="anchored" data-anchor-id="apple-veröffentlicht-sicherheitsupdate-für-macos-ventura-und-sonoma">Apple veröffentlicht Sicherheitsupdate für macOS Ventura und Sonoma</h3>
<p>Apple hat auch das <a href="https://support.apple.com/en-us/122285">Sicherheitsupdate für macOS Ventura und macOS Sonoma</a> (Safari 18.3.1) freigegeben.</p>
<p>Die Updates stehen wie üblich über die Softwareaktualisierung bereit.</p>
</section>
<section id="apple-veröffentlicht-ios-ipados-18.3.2" class="level3">
<h3 class="anchored" data-anchor-id="apple-veröffentlicht-ios-ipados-18.3.2">Apple veröffentlicht iOS / iPadOS 18.3.2</h3>
<p>Apple hat das Update auf iOS 18.3.2 und iPadOS 18.3.2 bereitgestellt. Die Updates korrigieren <a href="https://support.apple.com/en-us/122281">kritische Sicherheitslücken</a>.</p>
<p>Das Update auf auf iOS 18.3.2 und iPadOS 18.3.2 kann über OTA (<em>Over the Air</em> - in <code>Einstellungen &gt; Allgemein &gt; Softwareaktualisierung</code>, an ausreichender Akku-Kapazität und freien Speicherplatz sollte gedacht werden) erfolgen.</p>
<p>Eine vorherige Sicherung des Geräts ist wie immer sehr zu empfehlen.</p>
<p><em>(Mein <a href="https://wwwuser.gwdguser.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54320672611/">Zauberapfel im Zauberwald</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>the mad hatter gives a sexy naked woman, with big boops, and a nice butt a apple in the summer enchanted forest colored french comic style</em>«, Negative Prompt: »<em>lowres, error, cropped, worst quality, low quality, jpeg artifacts, out of frame, watermark, signature, ugly, beard, deformed, noisy, blurry, distorted, out of focus, bad anatomy, extra limbs, poorly drawn face, poorly drawn hands, missing fingers</em>«. Modell: Stable Diffusion 3.5 Large Turbo, Style: None.</p>


</section>

 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2025031201_apple_updates/</guid>
  <pubDate>Wed, 12 Mar 2025 11:25:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025031201_apple_updates/images/apple.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Google korrigiert wieder kritische Sicherheitslücken in Chrome</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025031101_chrome_update/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54369842706/"><img src="https://kantel.github.io/posts/2025031101_chrome_update/images/octopussy-b.jpg" class="img-fluid"></a></p>
<p>Daß die wöchentliche Aktualisierung des Flaggschiffs unser aller Datenkrake statt am Mittwoch schon heute freigegeben wurde, lässt auf eine gewisse Dringlichkeit schließen: Google veröffentlicht das Update der Version 134 (134.0.6998.88/89) seines Browsers Chrome und schließt damit <a href="https://chromereleases.googleblog.com/2025/03/stable-channel-update-for-desktop_10.html">kritische Sicherheitslücken</a>.</p>
<p>Chrome aktualisiert sich (außer bei Linux) über die integrierte Update-Funktion, kann aber – wenn es pressiert – auch <a href="https://www.google.com/intl/de/chrome/browser/">hier geladen</a> werden. <em>(Mein <a href="https://wwwuser.gwdguser.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54369842706/">Octopussy</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>Colored french comic style, a sexy female robot evades from a gigantic data octopus</em>«. Modell: Flux (Pro), Style: None.</p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2025031101_chrome_update/</guid>
  <pubDate>Tue, 11 Mar 2025 14:10:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025031101_chrome_update/images/octopussy.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Marimo – ein neuer Stern am (Python-) Notebook-Himmel?</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025030901_marimo/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53827214472/"><img src="https://kantel.github.io/posts/2025030901_marimo/images/marimo-b.jpg" class="img-fluid"></a></p>
<p>Regelmäßige Leser dieses <del>Blogs</del> Kritzelheftes <a href="http://blog.schockwellenreiter.de/2018/08/2018082801.html">wissen</a>, daß ich meine Probleme mit (<a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/jupyter.html">Jupyter</a>-) Notebooks habe. Ich teile meine Bedenken mit <em><a href="https://joelgrus.com/">Joel Grus</a></em>, der sie in seinem legendären Rant »<a href="https://docs.google.com/presentation/d/1n2RlMdmv1p25Xy5thJUhkKGvjtV-dkAIsUXP-AL4ffI/edit#slide=id.g362da58057_0_1">I don’t like Notebooks</a>« ausformulierte und auf der JuypterCon&nbsp;2018 – also in der Höhle des Löwen – vortrug. Nun ist mit <a href="https://docs.marimo.io/">Marimo</a> eine freie (Apache-2.0-Lizenz) Jupyter-Alternative erschienen, die nicht nur verspricht, die »<a href="https://marimo.io/">Zukunft der Python-Notebooks</a>« zu sein, sondern auch all die <a href="https://docs.marimo.io/faq/">Fehler beheben will</a>, die <em>Joel Grus</em> in seinem Rant adressiert hatte.</p>
<p>Denn statt auf eine feste Ausführungsreihenfolge setzt Marimo auf ein Abhängigkeitsmanagement und liegt abgespeichert als reiner Python-Code vor. Es ist somit – im Gegensatz zu Juypter – <a href="https://www.pcmasters.de/forum/threads/marimo-ein-neues-open-source-reactive-notebook-f%C3%BCr-python-wie-z-b-auch-jupyter-notebook.152205/">reproduzierbar und Git-freundlich</a>, und sowohl als Skript ausführbar, wie auch als <a href="https://www.reddit.com/r/Python/comments/1awvskr/marimowasm_a_reactive_python_notebook_in_the/?tl=de&amp;rdt=52999">App</a> (via WASM und <a href="https://blog.pyodide.org/posts/marimo/">Pyodide</a>) gemeinsam im Browser nutzbar. Marimo ist auf <a href="https://github.com/marimo-team/marimo">GitHub zu finden</a> und kann via <a href="https://docs.astral.sh/uv/"><code>uv</code></a> und/oder <code>pip</code> <a href="https://docs.marimo.io/getting_started/installation/">installiert</a> werden.</p>
<p>Obwohl noch recht jung (der <code>initial commit</code> ist vom 14. August 2023), hat Marimo in der Community schon einige Wellen geschlagen. Neben den Beiträgen im <a href="https://marimo.io/blog">hauseigenen Blog</a> habe ich diese zwei interessanten Beiträge (Auswahl mehr oder weniger zufällig) gefunden:</p>
<ul>
<li>Sam Minot: <em><a href="https://towardsdatascience.com/publish-interactive-data-visualizations-for-free-with-python-and-marimo/">Publish Interactive Data Visualizations for Free with Python and Marimo</a></em> toward data science vom 14. Februar 2025</li>
<li>Yonatan Nathan: <em><a href="https://medium.com/@flyingjony/can-marimo-replace-jupyter-notebooks-fb8c7210ad35">Can Marimo replace Jupyter notebooks?</a></em>, Medium.com vom 17. Januar 2024</li>
</ul>
<p>Außerdem sind die Seiten der <a href="https://marimo.sites.stanford.edu/">Standord University zu Marimo</a> eine große Hilfe für alle, die sich auf ein Abenteuer mit dieser Notebook-Alternative einlassen wollen. Und auch wenn es noch teilweise als <em>experimentell</em> bezeichnet wird, gibt es auch schon im <em>Visual Studio Marketplace</em> eine <a href="https://marketplace.visualstudio.com/items?itemName=marimo-team.vscode-marimo">Erweiterung für Marimo</a>.</p>
<p>Für mich ist es außerdem wichtig zu wissen, ob und wie sich Marimo mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/py5.html">Py5</a> schlägt, denn Py5 im Browser, das wäre schon geil. Ich habe also mal wieder zu tun. <em>Still digging!</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/53827214472/">Python with Glasses (working on a Notebook)</a></em>, erstellt mit <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/scenario.html">Scenario</a>. Prompt: »<em>A python with glasses+ and a pointer in front of a chart with diagrams in an office. Shelves with books on the walls. It’s a sunny morning</em>«. Modell: Stable Diffusion XL, Style: Stylized Fantasy + Whimsical Storybook.</p>



 ]]></description>
  <category>Python</category>
  <category>Marimo</category>
  <guid>https://kantel.github.io/posts/2025030901_marimo/</guid>
  <pubDate>Sun, 09 Mar 2025 15:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025030901_marimo/images/marimo.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Mozilla Thunderbird Version 136.0 freigegeben</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025030602_thunderbird_update/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54252702901/"><img src="https://kantel.github.io/posts/2025030602_thunderbird_update/images/thunderbird-b.jpg" class="img-fluid"></a></p>
<p>Noch eine verspätete Update-Meldung von gestern: Die Entwickler des <a href="http://www.mozillamessaging.com/">Mozilla Thunderbird</a> haben die Aktualisierung auf die Version 136.0 freigegeben und damit auch <a href="https://www.thunderbird.net/en-US/thunderbird/136.0/releasenotes/">Sicherheitslücken</a> behoben.</p>
<p>Thunderbird weist selbst auf dieses Update hin. Diese Prozedur kann aber auch wie immer über das Menü <code>Hilfe &gt; Über Thunderbird</code> angestoßen werden. <em>(Mein <a href="https://wwwuser.gwdguser.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54252702901/">Thunderbird hunts Firefox</a></em>, erstellt mit <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/scenario.html">Scenario</a>. Prompt: »<em>illustration of a majestic thunderbird with colored feathers soaring above a mountain range during a bright sunset, hunting a red firefox</em>«. Modell: Modell: Flux Composition, Style: Expressive Comic Characters.</p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2025030602_thunderbird_update/</guid>
  <pubDate>Thu, 06 Mar 2025 17:25:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025030602_thunderbird_update/images/thunderbird.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Google korrigiert wieder kritische Sicherheitslücken in Chrome</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025030601_chrome_update/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54254244493/"><img src="https://kantel.github.io/posts/2025030601_chrome_update/images/octopussy-b.jpg" class="img-fluid"></a></p>
<p>Da ich gestern wieder den ganzen Tag auf Achse war, kommt die Meldung vom Mittwoch über die wöchentliche Aktualisierung des Flaggschiffs unser aller Datenkrake erst am heutigen Donnerstag: Google veröffentlicht das Update der Version 134 (134.0.6998.35/36) beziehungsweise 134.0.6998.44/45 (MAC) seines Browsers Chrome und schließt damit <a href="https://chromereleases.googleblog.com/2025/03/stable-channel-update-for-desktop.html">kritische Sicherheitslücken</a>.</p>
<p>Chrome aktualisiert sich (außer bei Linux) über die integrierte Update-Funktion, kann aber – wenn es pressiert – auch <a href="https://www.google.com/intl/de/chrome/browser/">hier geladen</a> werden. <em>(Mein <a href="https://wwwuser.gwdguser.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54254244493/">Octopussy</a></em>, erstellt mit <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/scenario.html">Scenario</a>. Prompt: »<em>A sexy female robot evades from a gigantic data octopus, colored french comic style</em>«. Modell: Modell: Flux Composition, Style: Expressive Comic Characters.</p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2025030601_chrome_update/</guid>
  <pubDate>Thu, 06 Mar 2025 17:05:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025030601_chrome_update/images/octopussy.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Google schließt am »März-Patchday« wieder Sicherheitslücken in Android</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025030401_android_update/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54118783066/"><img src="https://kantel.github.io/posts/2025030401_android_update/images/android-b.jpg" class="img-fluid"></a></p>
<p>Google hat mit seinem monatlichen Sicherheitsupdate für Android (und damit auch auf seinen Pixel-Geräten) wieder <a href="https://source.android.com/docs/security/bulletin/2025-03-01?hl=de">Sicherheitslücken geschlossen</a>. Einige davon werden offenbar bereits ausgenutzt, so daß ein Update dringend empfehlenswert ist.</p>
<p>Die Updates werden so nach und nach per OTA <em>(over the air)</em> auf Pixel 9, 9 pro, 9 pro XL, Pixel 8a, Pixel 8/8 pro, Pixel Tablet, Pixel Fold, Pixel 7a, Pixel 7/7 pro, Pixel 6a und Pixel 6/6 pro verteilt.</p>
<p>Die anderen Hersteller werden wie üblich in Bälde nachziehen, sofern sie überhaupt noch entsprechenden Support leisten. <em>(Mein <a href="https://wwwuser.gwdguser.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54118783066/">Android in Dystopia</a></em>, erstellt mit <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/scenario.html">Scenario</a>. Prompt: »<em>A small green robot looks at his mobile phone in his hand. He is standing on a street in a run-down dystopian city with some car wrecks</em>«. Modell: Flux LoRA, Style: Euro Comix.</p>



 ]]></description>
  <category>Android</category>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2025030401_android_update/</guid>
  <pubDate>Tue, 04 Mar 2025 14:40:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025030401_android_update/images/android.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Ein neuer Monat, zwei neue Feuerfüchse</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025030302_firefox_updates/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54362955991/"><img src="https://kantel.github.io/posts/2025030302_firefox_updates/images/pandas-b.jpg" class="img-fluid"></a></p>
<p>Die Entwickler des Mozilla Firefox haben die neue <a href="https://www.mozilla.org/en-US/firefox/136.0/releasenotes/">Version 136</a> und die <a href="https://www.mozilla.org/en-US/firefox/128.8.0/releasenotes/">Version ESR 128.8.0</a> veröffentlicht und darin auch wieder Sicherheitslücken behoben. Wie immer sind in diese Updates auch viele Veränderungen eingeflossen.</p>
<p>Firefox weist selbst auf diese Updates hin. Diese Prozedur kann aber auch über das Menü <code>Hilfe &gt; Über Firefox</code> angestoßen werden. <em>(Mein <a href="https://wwwuser.gwdguser.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54362955991/">Zwei Feuerfüchse</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>Colored french comic style, two red pandas in a spring enchanted forest</em>«. Modell: Flux (Pro), Style: None.</p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2025030302_firefox_updates/</guid>
  <pubDate>Mon, 03 Mar 2025 16:20:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025030302_firefox_updates/images/pandas.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Die Mediadaten zum Ende des Winters</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025030301_mediadaten/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54363135575/"><img src="https://kantel.github.io/posts/2025030301_mediadaten/images/badgerspring-b.jpg" class="img-fluid"></a></p>
<p>Mit dem ersten März beginnt nicht nur ein neuer Monat, sondern – <a href="https://de.wikipedia.org/wiki/Fr%C3%BChlingsanfang">zumindest meteorologisch</a> – auch der Frühing. Und das (zugegeben leicht kitschige) <a href="https://www.flickr.com/photos/schockwellenreiter/54363135575">Bannerbild oben</a> soll deutlich machen, wie ich den Frühling in den letzten Wochen vermisst habe. Aber Sonnabend war auch der Beginn eines neuen Monats und daher ist es Zeit für die Zahlen, die hochtrabend manches Mal auch <em>Mediadaten</em> genannt werden: Im Februar 2025 hatte der <em>Schockwellenreiter</em> laut seinem nicht immer zuverlässigen, aber dafür (hoffentlich!) datenschutzkonformen <del>Geißenpeter</del> <a href="https://www.goatcounter.com/">Neugiertool</a> exakt <strong>6.179 Seitenaufrufe</strong>. Wie immer täuscht diese Exaktheit der Ziffer eine Genauigkeit der Zahl nur vor, trotzdem freue ich mich über jede Besucherin und jeden Besucher und bedanke mich bei allen meinen Leserinnen und Lesern.</p>
<p>😎 &nbsp; <em>Bleibt mir gewogen!</em></p>
<p>Schließlich noch der Blick auf die <em>Top Five</em> des Vormonats, der auch dieses Mal wenig Überraschungen aufweist:</p>
<ol type="1">
<li>Immer noch unangefochten an der Spitze liegt – wie schon seit Monaten – mein Beitrag »<a href="https://kantel.github.io/posts/2024011002_ki_ohne_zensor/index.html">Bildgeneratoren und Künstliche Intelligenz – ohne Zensoren</a>« vom 10.&nbsp;Januar&nbsp;2024.</li>
<li>Darauf folgt, allerdings schon weit abgeschlagen, das thematisch ähnliche »<a href="https://kantel.github.io/posts/2025020701_ki_und_bildergeschichten/">Künstliche Intelligenz und Bildergeschichten: Video-Tutorials zum Wochenende</a>« aus der ersten Februarwoche&nbsp;2025.</li>
<li>Dann meine Entdeckung von Capacities »<a href="https://kantel.github.io/posts/2025020301_capacities/">Ein weiterer Kandidat für mein »Zweites Gehirn«?</a>«</li>
<li>Und danach wieder ein fast ein Jahr alter Dauerbrenner: »<a href="https://kantel.github.io/posts/2024031501_atom_wird_pulsar/">Der Atom-Editor lebt – und heißt jetzt Pulsar</a>« vom 15.&nbsp;März&nbsp;2024.</li>
<li>Und den Abschluß macht eine weitere Vorstellung von Video-Tutorals zum Wochenende: »<a href="https://kantel.github.io/posts/2025013101_video_tutorials/">Creative Coding, Simulationen und Generative Art</a>«.</li>
</ol>
<p>Puh, damit bin ich gerade noch an dem Eindruck vorbeigeschlittert, ein monothematisches <del>Weblog</del> Kritzelheft zu führen. Schauen wir mal, was der März uns bringen wird. <em>Still digging!</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54363135575/">Ein Biber im Frühling</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>Colored french comic style, a beaver in a red dressing gown sits on a bench in the garden with a laptop on his lap, next to him a small table with a steaming cup of coffee. It is spring, many flowering plants and many small birds can be seen, the warm spring sun is bathing the scenery</em>«. Modell: Flux (Pro), Style: None.</p>



 ]]></description>
  <category>Mediadaten</category>
  <category>Interna</category>
  <guid>https://kantel.github.io/posts/2025030301_mediadaten/</guid>
  <pubDate>Mon, 03 Mar 2025 15:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025030301_mediadaten/images/badgerspring.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Neue Version 24.8.5 von LibreOffice</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025022801_libre_office_update/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54355486897/"><img src="https://kantel.github.io/posts/2025022801_libre_office_update/images/owoman-b.jpg" class="img-fluid"></a></p>
<p>Es muß nicht immer Microsoft sein, denn in der <a href="https://www.libreoffice.org/about-us/security/advisories/cve-2025-0514/">neuen Version 24.8.5 des quelloffenen Officepaketes LibreOffice</a> wurden zahlreiche neue Funktionen bereitgestellt und zudem wurden Sicherheitslücken behoben.</p>
<p>Die korrigierte Version kann <a href="https://de.libreoffice.org/download/download/">hier heruntergeladen</a> werden. <em>(Mein <a href="https://wwwuser.gwdguser.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54355486897/">(Libre-) Office Woman</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>Colored French Comic Style. A sexy young woman with long red hair, green eyes and red lipstick is sitting in an office at a desk in front of a monitor and a keyboard. She is wearing a white, open blouse with a low neckline and a rust-colored vest. She has a pencil in one hand. On the desk is an open notepad, a cup with writing utensils and a stack of books. There are shelves on the walls with many more books and files. The spring sun is shining through a window in the background</em>«. Modell: Flux (Pro), Style: None.</p>



 ]]></description>
  <category>LibreOffice</category>
  <category>Produktivität</category>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2025022801_libre_office_update/</guid>
  <pubDate>Fri, 28 Feb 2025 17:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025022801_libre_office_update/images/owoman.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Google korrigiert wieder kritische Sicherheitslücken in Chrome</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025022601_chrome_update/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54254439705/"><img src="https://kantel.github.io/posts/2025022601_chrome_update/images/octopussy-b.jpg" class="img-fluid"></a></p>
<p>Heute ist wieder Mittwoch, unser aller Datenkrake bringt pünktlich die wöchentliche Aktualisierung ihres Flaggschiffs unters Volk und daher möchte ich an Pünktlichkeit nicht nachstehen: Google veröffentlicht das Update der Version 133 (133.0.6943.141/142) seines Browsers Chrome und schließt damit <a href="https://chromereleases.googleblog.com/2025/02/stable-channel-update-for-desktop_25.html">kritische Sicherheitslücken</a>.</p>
<p>Chrome aktualisiert sich (außer bei Linux) über die integrierte Update-Funktion, kann aber – wenn es pressiert – auch <a href="https://www.google.com/intl/de/chrome/browser/">hier geladen</a> werden. <em>(Mein <a href="https://wwwuser.gwdguser.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54254439705/">Octopussy</a></em>, erstellt mit <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/scenario.html">Scenario</a>. Prompt: »<em>A sexy female robot evades from a gigantic data octopus, colored french comic style</em>«. Modell: Flux Composition, Style: Expressive Comic Characters.</p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2025022601_chrome_update/</guid>
  <pubDate>Wed, 26 Feb 2025 12:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025022601_chrome_update/images/octopussy.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Die rasende Schlange: Vektoren in Pygame</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025022501_noc_python/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54349010602/"><img src="https://kantel.github.io/posts/2025022501_noc_python/images/rasendepython-b.jpg" class="img-fluid"></a></p>
<blockquote class="blockquote">
<p><strong>Vorbemerkung</strong>: Leider hatte ich gestern auf meinem Mac Mini ein Betriebssystem-Update gewagt (von <em>Sonoma</em> auf <em>Sequoia</em>). Seitdem gibt Python seltsame Fehlermeldungen heraus (die irgendetwas von <code>IMKClient</code> und <code>IMKInputSession</code> faseln). Laut den allwissenden Gurus von <em>Stack Overflow</em> ist das ein Bug in macOS Sequoia, der nicht nur in Python, sondern auch in anderen Programmiersprachen, die Fenster benutzen, auftritt. Apple war wohl bisher nicht in der Lage, diesen Bug zu fixen, obwohl mein Sequoia schon die beeindruckende Versionsnummer 15.3.1 aufweist. Wie auch immer, meine Python/<a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a>- und <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/arcade.html">Arcade</a>-Skripte laufen unbeeindruckt von diesen Fehlermeldungen auf meinem Rechner weiter, nur <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygbag.html">Pygbag</a> macht Probleme und kann keine im Browser lauffähigen Pygame-Skripte mehr erzeugen. Daher müsst Ihr heute mit trockenem Quellcode und langweiligen Screenshots vorliebnehmen.</p>
</blockquote>
<p>Über das Wochenende hatte ich mich hingesetzt und an meinem <a href="https://kantel.github.io/posts/2025021701_vectory_pygame/">vor wenigen Tagen angekündigten Vorhaben</a> gearbeitet, wenigstens die Vektorkapitel&nbsp;1 und 2 aus <em>Daniel Shiffmans</em> »<a href="https://natureofcode.com/">The Nature of Code</a>« nach Python/<a href="https://pyga.me/">Pygame (CE)</a> zu portieren. Und zumindest das erste Kapitel habe ich fast abgeschlossen. Als erstes hatte ich mir das »<a href="https://natureofcode.com/vectors/#example-17-motion-101-velocity">Example 1.7: Motion 101 (Velocity)</a>« vorgeknöpft. Das war recht einfach, da es im Wesentlichen meinem »<a href="https://kantel.github.io/posts/2025021701_vectory_pygame/">Bouncing Chicken</a>« entsprach (ich habe das <em>Bouncing</em>) daher auch in diesem Skript (<a href="https://github.com/kantel/pythoncuriosa/blob/main/noc/motion101b.py">motion101.py</a>) statt des <em>Wrappings</em> von <em>Shiffman</em> beibehalten:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Motion 101 (Velocity)</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pygame</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> randint</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sys</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Einige nützliche Konstanten</span></span>
<span id="cb1-7">WIDTH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">800</span></span>
<span id="cb1-8">HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">450</span></span>
<span id="cb1-9">TITLE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Motion 101 (Velocity)"</span></span>
<span id="cb1-10">FPS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Framerate</span></span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Farben</span></span>
<span id="cb1-13">BG_COLOR <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">59</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">122</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">87</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Billardtisch-Grün</span></span>
<span id="cb1-14"></span>
<span id="cb1-15">vec2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pygame.Vector2</span>
<span id="cb1-16"></span>
<span id="cb1-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Klassen</span></span>
<span id="cb1-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ---------------------------------------------------------------------- #</span></span>
<span id="cb1-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Class GameWorld</span></span>
<span id="cb1-20"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> GameWorld:</span>
<span id="cb1-21"></span>
<span id="cb1-22">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-23">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pygame und das Fenster initialisieren</span></span>
<span id="cb1-24">        pygame.init()</span>
<span id="cb1-25">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.screen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pygame.display.set_mode((WIDTH, HEIGHT))</span>
<span id="cb1-26">        pygame.display.set_caption(TITLE)</span>
<span id="cb1-27"></span>
<span id="cb1-28">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.clock <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pygame.time.Clock()</span>
<span id="cb1-29">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.keep_going <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb1-30"></span>
<span id="cb1-31">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> reset(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-32">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Neustart oder Status zurücksetzen</span></span>
<span id="cb1-33">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Hier werden alle Elemente der GameWorld initialisiert</span></span>
<span id="cb1-34">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mover <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Mover(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>)</span>
<span id="cb1-35"></span>
<span id="cb1-36">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> events(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-37">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Poll for events</span></span>
<span id="cb1-38">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> event <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> pygame.event.get():</span>
<span id="cb1-39">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> ((event.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pygame.QUIT) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span></span>
<span id="cb1-40">                (event.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pygame.KEYDOWN <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> event.key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pygame.K_ESCAPE)):</span>
<span id="cb1-41">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.keep_going <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb1-42"></span>
<span id="cb1-43">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-44">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mover.update()</span>
<span id="cb1-45"></span>
<span id="cb1-46">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-47">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.screen.fill(BG_COLOR)</span>
<span id="cb1-48">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Game drawings go here</span></span>
<span id="cb1-49">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mover.draw()</span>
<span id="cb1-50"></span>
<span id="cb1-51">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Alle Änderungen auf den Bildschirm</span></span>
<span id="cb1-52">        pygame.display.flip()</span>
<span id="cb1-53"></span>
<span id="cb1-54"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ---------------------------------------------------------------------- #</span></span>
<span id="cb1-55"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Mover():</span>
<span id="cb1-56"></span>
<span id="cb1-57">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, _world):</span>
<span id="cb1-58">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.world <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _world</span>
<span id="cb1-59">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.position <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vec2((randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, WIDTH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>), randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span> )))</span>
<span id="cb1-60">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.velocity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vec2((randint(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), randint(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)))</span>
<span id="cb1-61">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.radius <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span></span>
<span id="cb1-62"></span>
<span id="cb1-63">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-64">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.position <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.velocity</span>
<span id="cb1-65">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.position.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> WIDTH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.radius <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.position.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.radius:</span>
<span id="cb1-66">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.velocity.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-67">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.position.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.radius <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.position.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.radius:</span>
<span id="cb1-68">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.velocity.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-69"></span>
<span id="cb1-70">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-71">        pygame.draw.aacircle(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.world.screen, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">191</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.position, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.radius)</span>
<span id="cb1-72">        pygame.draw.aacircle(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.world.screen, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.position, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.radius, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-73"></span>
<span id="cb1-74"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ---------------------------------------------------------------------- #</span></span>
<span id="cb1-75"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ## Hauptprogramm</span></span>
<span id="cb1-76">world <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> GameWorld()</span>
<span id="cb1-77">world.reset()</span>
<span id="cb1-78"></span>
<span id="cb1-79"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Hauptschleife</span></span>
<span id="cb1-80"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> world.keep_going:</span>
<span id="cb1-81">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Framerate festsetzen</span></span>
<span id="cb1-82">    world.clock.tick(FPS)</span>
<span id="cb1-83"></span>
<span id="cb1-84">    world.events()</span>
<span id="cb1-85">    world.update()</span>
<span id="cb1-86">    world.draw()</span>
<span id="cb1-87"></span>
<span id="cb1-88">pygame.quit()</span>
<span id="cb1-89">sys.exit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<p>Lediglich bei der Behandlung des Kreises gab es eine Änderung. Pygames Shapes haben keinen Rand, daher habe ich erst einen gelbgefüllten Kreis zeichnen lassen und danach eine Kreis, der nur aus einem schwarzen Rand besteht. Und ich habe Anti-Aliasing-Version <a href="https://pyga.me/docs/ref/draw.html#pygame.draw.aacircle"><code>aacircle()</code></a> gewählt, die sieht einfach besser aus.</p>
<p>Und Shapes sind keine Sprites. Ich habe jedenfalls in der Dokumentation keinen Hinweis gefunden, daß auch Shapes ein umschließendes <code>Rect</code> besitzen. Daher mußte ich beim <em>Bouncen</em> doch wieder den Radius einbauen.</p>
<p><a href="https://www.flickr.com/photos/schockwellenreiter/54349307862/"><img src="https://kantel.github.io/posts/2025022501_noc_python/images/constacc.jpg" class="img-fluid"></a></p>
<p>Als nächstes stand dann das »<a href="https://natureofcode.com/vectors/#example-18-motion-101-velocity-and-constant-acceleration">Example 1.8: Motion 101 (Velocity and Constant Acceleration)</a>« an. Da mußte ich erst einmal ein wenig in der Pygame-Dokumentation stöbern, da <a href="https://pyga.me/docs/ref/math.html">Pygames Vektorklassen</a> nicht die Methode <code>limit()</code> besitzen. Aber mit <a href="https://pyga.me/docs/ref/math.html#pygame.math.Vector2.clamp_magnitude_ip"><code>Vector2.clamp_magnitude_ip()</code></a> hatte ich eine Methode gefunden, die – wenn auch nicht numerisch ein exakt gleiches – ein ähnliches Verhalten erzeugt:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Motion 101 (Velocity and Constant Acceleration)</span></span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pygame</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sys</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Einige nützliche Konstanten</span></span>
<span id="cb2-6">WIDTH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">800</span></span>
<span id="cb2-7">HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">450</span></span>
<span id="cb2-8">TITLE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Motion 101 (Velocity and Constant Acceleration)"</span></span>
<span id="cb2-9">FPS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Framerate</span></span>
<span id="cb2-10"></span>
<span id="cb2-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Farben</span></span>
<span id="cb2-12">BG_COLOR <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">59</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">122</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">87</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Billardtisch-Grün</span></span>
<span id="cb2-13"></span>
<span id="cb2-14">vec2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pygame.Vector2</span>
<span id="cb2-15"></span>
<span id="cb2-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Klassen</span></span>
<span id="cb2-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ---------------------------------------------------------------------- #</span></span>
<span id="cb2-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Class GameWorld</span></span>
<span id="cb2-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> GameWorld:</span>
<span id="cb2-20"></span>
<span id="cb2-21">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-22">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pygame und das Fenster initialisieren</span></span>
<span id="cb2-23">        pygame.init()</span>
<span id="cb2-24">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.screen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pygame.display.set_mode((WIDTH, HEIGHT))</span>
<span id="cb2-25">        pygame.display.set_caption(TITLE)</span>
<span id="cb2-26"></span>
<span id="cb2-27">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.clock <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pygame.time.Clock()</span>
<span id="cb2-28">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.keep_going <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb2-29"></span>
<span id="cb2-30">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> reset(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-31">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Neustart oder Status zurücksetzen</span></span>
<span id="cb2-32">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Hier werden alle Elemente der GameWorld initialisiert</span></span>
<span id="cb2-33">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mover <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Mover(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>)</span>
<span id="cb2-34"></span>
<span id="cb2-35">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> events(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-36">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Poll for events</span></span>
<span id="cb2-37">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> event <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> pygame.event.get():</span>
<span id="cb2-38">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> ((event.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pygame.QUIT) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span></span>
<span id="cb2-39">                (event.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pygame.KEYDOWN <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> event.key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pygame.K_ESCAPE)):</span>
<span id="cb2-40">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.keep_going <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb2-41"></span>
<span id="cb2-42">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-43">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mover.update()</span>
<span id="cb2-44">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mover.check_borders()</span>
<span id="cb2-45"></span>
<span id="cb2-46">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-47">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.screen.fill(BG_COLOR)</span>
<span id="cb2-48">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Game drawings go here</span></span>
<span id="cb2-49">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mover.draw()</span>
<span id="cb2-50"></span>
<span id="cb2-51">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Alle Änderungen auf den Bildschirm</span></span>
<span id="cb2-52">        pygame.display.flip()</span>
<span id="cb2-53"></span>
<span id="cb2-54"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ---------------------------------------------------------------------- #</span></span>
<span id="cb2-55"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Mover():</span>
<span id="cb2-56"></span>
<span id="cb2-57">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, _world):</span>
<span id="cb2-58">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.world <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _world</span>
<span id="cb2-59">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.position <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vec2(WIDTH<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, HEIGHT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb2-60">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.velocity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vec2(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb2-61">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.acceleration <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vec2(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>)</span>
<span id="cb2-62">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.radius <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span></span>
<span id="cb2-63">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.limit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb2-64"></span>
<span id="cb2-65">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-66">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.velocity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.acceleration</span>
<span id="cb2-67">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.velocity.clamp_magnitude_ip(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.limit)</span>
<span id="cb2-68">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.position <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.velocity</span>
<span id="cb2-69"></span>
<span id="cb2-70">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> check_borders(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-71">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check borders</span></span>
<span id="cb2-72">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.position.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> WIDTH:</span>
<span id="cb2-73">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.position.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-74">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.position.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb2-75">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.position.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> WIDTH</span>
<span id="cb2-76">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.position.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> HEIGHT:</span>
<span id="cb2-77">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.position.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-78">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.position.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb2-79">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.position.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> HEIGHT</span>
<span id="cb2-80"></span>
<span id="cb2-81">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-82">        pygame.draw.aacircle(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.world.screen, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">191</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.position, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.radius)</span>
<span id="cb2-83">        pygame.draw.aacircle(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.world.screen, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.position, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.radius, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-84"></span>
<span id="cb2-85">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.font <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pygame.font.SysFont(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"American Typewriter"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb2-86">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel_txt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.font.render(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.velocity.magnitude()), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb2-87">                                        (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>))</span>
<span id="cb2-88">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.world.screen.blit(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel_txt, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>))</span>
<span id="cb2-89"></span>
<span id="cb2-90"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ---------------------------------------------------------------------- #</span></span>
<span id="cb2-91"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ## Hauptprogramm</span></span>
<span id="cb2-92">world <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> GameWorld()</span>
<span id="cb2-93">world.reset()</span>
<span id="cb2-94"></span>
<span id="cb2-95"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Hauptschleife</span></span>
<span id="cb2-96"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> world.keep_going:</span>
<span id="cb2-97">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Framerate festsetzen</span></span>
<span id="cb2-98">    world.clock.tick(FPS)</span>
<span id="cb2-99"></span>
<span id="cb2-100">    world.events()</span>
<span id="cb2-101">    world.update()</span>
<span id="cb2-102">    world.draw()</span>
<span id="cb2-103"></span>
<span id="cb2-104">pygame.quit()</span>
<span id="cb2-105">sys.exit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<p>Zusätzlich habe ich noch eine Textausgabe implementiert, die die Magnitude des Vektors ausgibt. Auch den Quellcode dieses Skriptes (<a href="https://github.com/kantel/pythoncuriosa/blob/main/noc/motion101b.py">motion101b.py</a>) könnt Ihr auf GitHub finden.</p>
<p><a href="https://www.flickr.com/photos/schockwellenreiter/54348964715/"><img src="https://kantel.github.io/posts/2025022501_noc_python/images/randacc.jpg" class="img-fluid"></a></p>
<p>Als letztes stand dann noch das »<a href="https://natureofcode.com/vectors/#example-19-motion-101-velocity-and-random-acceleration">Example 1.9: Motion 101 (Velocity and Random Acceleration)</a>« auf meinem Programm. Hier dachte ich eigentlich, daß das Fehlen der Methode <code>random2D()</code> mir etwas Kopfschmerzen verursachen würde, aber Pythons Methode <code>Random.uniform()</code> zusammen mit <a href="https://pyga.me/docs/ref/math.html#pygame.math.Vector2.update"><code>Vector2.update()</code></a> und <a href="https://pyga.me/docs/ref/math.html#pygame.math.Vector2.normalize_ip"><code>Vector2.normalize_ip()</code></a> ließen mich schnell eine Lösung finden.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Motion 101 (Velocity and Constant Acceleration)</span></span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pygame</span>
<span id="cb3-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random, uniform</span>
<span id="cb3-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sys</span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Einige nützliche Konstanten</span></span>
<span id="cb3-7">WIDTH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">800</span></span>
<span id="cb3-8">HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">450</span></span>
<span id="cb3-9">TITLE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Motion 101 (Velocity and Random Acceleration)"</span></span>
<span id="cb3-10">FPS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Framerate</span></span>
<span id="cb3-11"></span>
<span id="cb3-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Farben</span></span>
<span id="cb3-13">BG_COLOR <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">59</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">122</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">87</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Billardtisch-Grün</span></span>
<span id="cb3-14"></span>
<span id="cb3-15">vec2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pygame.Vector2</span>
<span id="cb3-16"></span>
<span id="cb3-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Klassen</span></span>
<span id="cb3-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ---------------------------------------------------------------------- #</span></span>
<span id="cb3-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Class GameWorld</span></span>
<span id="cb3-20"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> GameWorld:</span>
<span id="cb3-21"></span>
<span id="cb3-22">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-23">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pygame und das Fenster initialisieren</span></span>
<span id="cb3-24">        pygame.init()</span>
<span id="cb3-25">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.screen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pygame.display.set_mode((WIDTH, HEIGHT))</span>
<span id="cb3-26">        pygame.display.set_caption(TITLE)</span>
<span id="cb3-27"></span>
<span id="cb3-28">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.clock <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pygame.time.Clock()</span>
<span id="cb3-29">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.keep_going <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb3-30"></span>
<span id="cb3-31">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> reset(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-32">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Neustart oder Status zurücksetzen</span></span>
<span id="cb3-33">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Hier werden alle Elemente der GameWorld initialisiert</span></span>
<span id="cb3-34">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mover <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Mover(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>)</span>
<span id="cb3-35"></span>
<span id="cb3-36">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> events(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-37">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Poll for events</span></span>
<span id="cb3-38">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> event <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> pygame.event.get():</span>
<span id="cb3-39">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> ((event.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pygame.QUIT) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span></span>
<span id="cb3-40">                (event.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pygame.KEYDOWN <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> event.key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pygame.K_ESCAPE)):</span>
<span id="cb3-41">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.keep_going <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb3-42"></span>
<span id="cb3-43">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-44">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mover.update()</span>
<span id="cb3-45">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mover.check_borders()</span>
<span id="cb3-46"></span>
<span id="cb3-47">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-48">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.screen.fill(BG_COLOR)</span>
<span id="cb3-49">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Game drawings go here</span></span>
<span id="cb3-50">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mover.draw()</span>
<span id="cb3-51"></span>
<span id="cb3-52">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Alle Änderungen auf den Bildschirm</span></span>
<span id="cb3-53">        pygame.display.flip()</span>
<span id="cb3-54"></span>
<span id="cb3-55"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ---------------------------------------------------------------------- #</span></span>
<span id="cb3-56"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Mover():</span>
<span id="cb3-57"></span>
<span id="cb3-58">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, _world):</span>
<span id="cb3-59">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.world <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _world</span>
<span id="cb3-60">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.position <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vec2(WIDTH<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, HEIGHT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb3-61">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.velocity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vec2(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb3-62">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.acceleration <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vec2(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb3-63">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.radius <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span></span>
<span id="cb3-64">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.limit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb3-65"></span>
<span id="cb3-66">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-67">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> uniform(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-68">        y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> uniform(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-69">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.acceleration.update(x, y)</span>
<span id="cb3-70">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.acceleration.normalize_ip()</span>
<span id="cb3-71">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.acceleration <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> random()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb3-72">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.velocity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.acceleration</span>
<span id="cb3-73">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.velocity.clamp_magnitude_ip(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.limit)</span>
<span id="cb3-74">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.position <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.velocity</span>
<span id="cb3-75"></span>
<span id="cb3-76">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> check_borders(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-77">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check borders</span></span>
<span id="cb3-78">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.position.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> WIDTH:</span>
<span id="cb3-79">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.position.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-80">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.position.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb3-81">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.position.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> WIDTH</span>
<span id="cb3-82">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.position.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> HEIGHT:</span>
<span id="cb3-83">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.position.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-84">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.position.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb3-85">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.position.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> HEIGHT</span>
<span id="cb3-86"></span>
<span id="cb3-87">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-88">        pygame.draw.aacircle(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.world.screen, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">191</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.position, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.radius)</span>
<span id="cb3-89">        pygame.draw.aacircle(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.world.screen, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.position, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.radius, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-90"></span>
<span id="cb3-91">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.font <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pygame.font.SysFont(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"American Typewriter"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb3-92">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel_txt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.font.render(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.velocity.magnitude()), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb3-93">                                        (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>))</span>
<span id="cb3-94">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.world.screen.blit(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel_txt, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>))</span>
<span id="cb3-95"></span>
<span id="cb3-96"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ---------------------------------------------------------------------- #</span></span>
<span id="cb3-97"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ## Hauptprogramm</span></span>
<span id="cb3-98">world <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> GameWorld()</span>
<span id="cb3-99">world.reset()</span>
<span id="cb3-100"></span>
<span id="cb3-101"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Hauptschleife</span></span>
<span id="cb3-102"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> world.keep_going:</span>
<span id="cb3-103">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Framerate festsetzen</span></span>
<span id="cb3-104">    world.clock.tick(FPS)</span>
<span id="cb3-105"></span>
<span id="cb3-106">    world.events()</span>
<span id="cb3-107">    world.update()</span>
<span id="cb3-108">    world.draw()</span>
<span id="cb3-109"></span>
<span id="cb3-110">pygame.quit()</span>
<span id="cb3-111">sys.exit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<p>Das Programm heißt (Überraschung!) <a href="https://github.com/kantel/pythoncuriosa/blob/main/noc/motion101c.py">motion101c.py</a> und ist natürlich ebenfalls auf meinem GitHub-Account zu finden.</p>
<p>Jetzt fehlen mir »nur« noch Beispiele zur Interaktivität und Ideen für ein paar Skripte, mit denen ich das Gelernte noch ein wenig aufhübschen kann. Dafür hätte ich aber gerne, das Pygbag wieder mit meinem Mac spielt, denn eigentlich machen Beispiele nur Spaß, wenn man sie auch im Browser vorführen kann.</p>
<p>Denn ich habe mich nur auf Pygame (CE) eingelassen, weil ich – inspiriert durch die Online-Präsentation von »The Nature of Code« – meine Ports und Skripte auch online präsentieren wollte. Denn sonst hätte ich für das Projekt »Python-Port von Nature of Code« ja auch bei Arcade (gefällt mir sogar mittlerweile ein wenig besser als Pygame) oder bei <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/py5.html">Py5</a> bleiben können. Und wer weiß, vielleicht ist <em>James Schmitz</em> mit seinen Bemühungen, Py5 via <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/pyscript.html">PyScript</a> webtauglich zu machen, ja schneller. Das wäre dann ein echter <em>Game Changer</em>. <em>Still digging!</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54349010602/">Die rasende Python</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>colored french comic style, a python with horn-rimmed glasses sits at the wheel of an open sports car and races at high speed through a dystopian city with crumbling skyscrapers, junk cars standing on the side of the road</em>«. Modell: Flux (Pro), Style: None.</p>



 ]]></description>
  <category>Creative Coding</category>
  <category>Python</category>
  <category>Pygame</category>
  <category>Nature of Code</category>
  <category>Pygbag</category>
  <guid>https://kantel.github.io/posts/2025022501_noc_python/</guid>
  <pubDate>Tue, 25 Feb 2025 12:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025022501_noc_python/images/rasendepython.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Schlangenfraß: Video-Tutorials zum Wochenende</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025022101_python_video_tutorials/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54341544016/"><img src="https://kantel.github.io/posts/2025022101_python_video_tutorials/images/pythontv-b.jpg" class="img-fluid"></a></p>
<p>Da mein Programm für die nächsten Wochen oder gar Monate darin besteht, mindestens die ersten drei Kapitel aus <em>Daniel Shiffmans</em> »<a href="https://natureofcode.com/">The Nature of Code</a>« nach Python und <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a> zu portieren und um eigene Beispiele zu erweitern, habe ich mir zur Vorbereitung erst einmal ein paar Video-Tutorials herausgesucht, die ich Euch nicht vorenthalten möchte:</p>
<section id="pymunk" class="level2">
<h2 class="anchored" data-anchor-id="pymunk">Pymunk</h2>
<iframe class="if16_9" src="https://www.youtube.com/embed/tLsi2DeUsak?si=gU63EyKNNaVcjWET" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p><strong><a href="https://www.pymunk.org/en/latest/">Pymunk</a></strong>, die nach eigenen Angaben leicht zu erlernende, freie (MIT-Lizenz) Physik-Bibliothek (<a href="https://github.com/viblo/pymunk">Quellcode</a> auf GitHub) steht zwar frühestens erst dann auf meinder Liste, wenn ich mich auch an das Kapitel&nbsp;6 über Physik-Bibliotheken heranwage. Aber da ich schon lange mal etwas mit Pymunk anstellen wollte, habe ich mir das <a href="https://www.youtube.com/watch?v=tLsi2DeUsak">obige Video</a> vorab schon einmal reingezogen.</p>
</section>
<section id="vpython" class="level2">
<h2 class="anchored" data-anchor-id="vpython">VPython</h2>
<iframe class="if16_9" src="https://www.youtube.com/embed/LmNBp0TKmjI?si=42cj_tJy5vxJldI9" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p>Anders sieht es mit dem Kanal »<a href="https://www.youtube.com/@DotPhysics">Dot Physics</a>« von <em>Rhett Allain</em> aus. Der überaus fleißge Physik-Professor und YouTuber deckt viele der Themen (und noch weit mehr) ab, die auch in <em>The Nature of Code</em> behandelt werden. Das fängt mit seinen beiden Videos über <a href="https://www.youtube.com/watch?v=dYtAq3vZXiY">ein</a>- und <a href="https://www.youtube.com/watch?v=LmNBp0TKmjI">zweidimensionale</a> <em>Random Walks</em> an (die bei <em>Shiffman</em> im Kapitel&nbsp;0 behandelt werden) und setzt sich in vielen weiteren physikalischen Themen fort. <em>Rhett Allain</em>, der auch ein fleißger Autor auf <a href="https://www.wired.com/author/rhett-allain/">Wired</a> und auf <a href="https://rjallain.medium.com/">Medium.com</a> ist, nutzt für seine Skripte <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/vpython.html">VPython</a>, eine Bibliothek, mit der man in Python einfach zwei- und dreidimensionale physikalische Probleme lösen kann (und zwar in der Online-<a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/glowwscript.html">Trinket</a>-Version). Ich hatte ihn <a href="https://kantel.github.io/posts/2025013101_video_tutorials/">Ende Januar</a> schon einmal kurz auf dem Schirm, aber wegen meiner aktuellen Interessen möchte ich noch einmal ausführlicher auf ihn eingehen:</p>
<ul>
<li>Die Playlist »<a href="https://www.youtube.com/playlist?list=PLWFlMBumSLSaqgYlK2wD7XSPRQ2p-_Tl4">Physics Python Tutorials</a>« besteht aus 35 im Schnitt etwa zwanzigminütigen Videos. Danach dürften in Bezug auf VPython keine Fragen mehr offen sein.</li>
<li>Die kurze Liste »<a href="https://www.youtube.com/playlist?list=PLWFlMBumSLSZNZ71I6J3NW1t4M9HlWhwp">Pi</a>« (vier Videos) ist etwas für den <a href="https://de.wikipedia.org/wiki/Pi-Tag">Pi Day</a>.</li>
<li>Die aus drei Videos bestehende Liste »<a href="https://www.youtube.com/playlist?list=PLWFlMBumSLSYBuPnVT16kL-q0IRfSsxqt">Double Pendulum</a>« behandelt einen Bereich, der ein beliebtes Physik-Problem mit Bezug zur Chaos-Theorie und dynamischen Systemen ist.</li>
<li>Wieder Bezug auf Kapitel&nbsp;0 (und weit darüber hinaus) hat die Liste »<a href="https://www.youtube.com/playlist?list=PLWFlMBumSLSbNNqXI_bhwAHXIc5yYFqRi">Monte Carlo</a>« die aus 11 Videos (mit ein paar Überschneidungen zur Liste »Physics Python Tutorials« siehe oben) besteht.</li>
<li>Ganz aktuell sind die Listen »<a href="https://www.youtube.com/playlist?list=PLWFlMBumSLSaI4LTqDsjwFiIeXoeNUoAd">Introduction to Astrophysics</a>« und »<a href="https://www.youtube.com/playlist?list=PLWFlMBumSLSbc1ZSMIC7Ey9kpVywnpBks">Classical Mechanics 2 - Spring 2025</a>«. Sie bestehen zur Zeit aus je vier etwa halbstündigen Videos, werden aber noch ständig aktualisiert.</li>
</ul>
</section>
<section id="pygame" class="level2">
<h2 class="anchored" data-anchor-id="pygame">Pygame</h2>
<iframe class="if16_9" src="https://www.youtube.com/embed/8o0bGX_PYCs?si=Sxql_7ShGJCRlwYI" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p><em>J. Brandon George</em> (aka <em>GameElementGuy</em>) hat ein How To geschrieben: »<a href="https://darth-data410.medium.com/how-to-easily-implement-sprite-sheets-in-your-pygames-120ce5ea9780">Easily Implement Sprite Sheets In Your PyGames</a>«, aus dem auch das <a href="https://www.youtube.com/watch?v=8o0bGX_PYCs">obige Video</a> stammt. Inspiriert wurde er unter anderem von dem siebeneinhalbstündigen (sic!) Tutorial »<a href="https://www.youtube.com/watch?v=QU1pPzEGrqw">Creating a Zelda style game in Python [with some Dark Souls elements]</a>«, das man sich nur häppchenweise reinziehen kann.</p>
<p>Zum Thema »Spritesheets in Pygame« gibt es auch von <em>Coding wiith Russ</em> die zwei Tutorials »<a href="https://www.youtube.com/watch?v=M6e3_8LHc7A">Pygame Sprite Sheets</a>« und »<a href="https://www.youtube.com/watch?v=nXOVcOBqFwM">Pygame Sprite Animation</a>«, die unbedingt auch in dieser Reihenfolge konsumiert werden sollten.</p>
<p>Daneben gibt es auf diesen Kanal eine Reihe weiterer Playlisten, die jeweils die Programmierung eines Spieles in Pygame zeigen. Meine Favoriten sind:</p>
<ul>
<li>»<a href="https://www.youtube.com/playlist?list=PLjcN1EyupaQm20hlUE11y9y8EY2aXLpnv">PyGame - Shooter Game</a>« (13 Videos).</li>
<li>»<a href="https://www.youtube.com/playlist?list=PLjcN1EyupaQnjjBvXn4Ew1a9Ms-9QzVub">PyGame - Castle Defender</a>« (10 Videos).</li>
</ul>
<p>Dann sind mir noch (völlig unsortiert und ungeprüft) diese Playlisten aus diversen Kanälen untergekommen:</p>
<ul>
<li>»<a href="https://www.youtube.com/playlist?list=PL4U0724Jn5ZxvILgwV1A786Aqg92wHSEQ">2D Game Development | Pygame</a>«, Playlist mit 9 etwa fünfminütigen Videos.</li>
<li>»<a href="https://www.youtube.com/playlist?list=PLn8cgfOA2qzeXxXe7DBWxX1UR5fJ4MDTb">Pygame - Adventure Game</a>«, Playlist mit 20 Videos.</li>
<li>»<a href="https://www.youtube.com/playlist?list=PLTwy92rWKPiHTwXoyygjW0ZQ1WfkEwhqV">Game programming</a>«, Playlist mit 73 Videos.</li>
<li>»<a href="https://www.youtube.com/playlist?list=PLjcN1EyupaQmZw8C-q6a4Zekidxf8SUj3">PyGame - Misc Tutorials</a>«, Playlist mit 28 Videos.</li>
<li>»<a href="https://www.youtube.com/playlist?list=PL8ui5HK3oSiHnIdi0XIAVXHAeulNmBrLy">Pygame Fundamentals</a>«, Playlist mit 11 Videos.</li>
<li>»<a href="https://www.youtube.com/playlist?list=PLLdd2IQ6qKU7OAOpVdaK304D_BGSOw3iW">Pygame ARPG Tutorial Series</a>«, Playlist mit 9 Videos.</li>
<li>»<a href="https://www.youtube.com/playlist?list=PLwUc9C-upZIo4uF9z6jXybDgRAa41YAMr">Pygame Tutorials</a>«, Playlist mit 4 Videos.</li>
<li>»<a href="https://www.youtube.com/playlist?list=PLsFyHm8kJsx1g191CspASSTHuLDEXZRH9">Python Pygame tutorials! Build video games with python!!</a>«, Playlist mit 63 Videos.</li>
</ul>
<p>Das schafft natürlich niemand, das kann man sich bestenfalls nur sehr selektiv reinziehen.</p>
<iframe class="if16_9" src="https://www.youtube.com/embed/OLXNAn7SvRY?si=9qRz3Fnqu_aTNKAt" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p><strong>War sonst noch was?</strong> Ach ja, der User <em><a href="https://www.youtube.com/@masendor">Leaflet</a></em> hat eine von <a href="https://de.wikipedia.org/wiki/Elden_Ring">Elden Ring</a>« inspirierte interaktive Geschichte oder <em>Visual Novel</em> in Pygame realisiert. Dazu gibt es auch noch eine andere Geschichte »<a href="https://www.youtube.com/watch?v=ar8TsS8spMU">Royal Ordains</a>« auf YouTube und den <a href="https://github.com/remance/Masendor">Quellcode</a> für seine Elden Ring Variante (MIT-Lizenz) auf GitHub.</p>
<iframe class="if16_9" src="https://www.youtube.com/embed/ar8TsS8spMU?si=qbP3MglGVRXuY7iC" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p>Mir ist nicht ganz klar, ob und wie die Geschichten zusammengehören, fertiggestellt scheinen sie beide auch noch nicht zu sein. Aber es ist eine interessante Frage, warum der Autor für seine (Pseudo-) Mittelalter-Fantasy-Geschichten Pygame und nicht <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/renpy.html">Ren’Py</a> verwendet. Weil es geht&nbsp;…? Auf jeden Fall ist es interessantes und inspirierendes Projekt (und auch den <a href="https://github.com/remance/Royal-Ordains">Quellcode</a> für Rocal Ordains (GPL) gibt es auf GitHub).</p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54341544016/">Python sits on a sofa and watches TV</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>colored french comic style, a large python with horn-rimmed glasses sits on a sofa in a living room in the evening and watches television, next to the sofa an old-fashioned floor lamp is lit, on the walls there are shelves with many books, the moon shines through a window</em>«. Modell: Flux (Pro), Style: None.</p>


</section>

 ]]></description>
  <category>Spieleprogrammierung</category>
  <category>Python</category>
  <category>Pygame</category>
  <category>Pymunk</category>
  <category>VPython</category>
  <category>Trinket</category>
  <category>Nature of Code</category>
  <guid>https://kantel.github.io/posts/2025022101_python_video_tutorials/</guid>
  <pubDate>Fri, 21 Feb 2025 17:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025022101_python_video_tutorials/images/pythontv.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Google korrigiert wieder kritische Sicherheitslücken in Chrome</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025022001_chrome_update/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54254242918/"><img src="https://kantel.github.io/posts/2025022001_chrome_update/images/octopussy-b.jpg" class="img-fluid"></a></p>
<p>Nein, diese Woche hat sich die Aktualisierung des Flaggschiffs unser aller Datenkrake <a href="https://kantel.github.io/posts/2025021301_chrome_update/">nicht verspätet</a>, aber ich war gestern den ganzen Tag unterweges, daher kann ich die Mittwochsmeldung erst am Donnerstag bringen: Google veröffentlicht das Update der Version 133 (133.0.6943.126/127) seines Browsers Chrome und schließt damit <a href="https://chromereleases.googleblog.com/2025/02/stable-channel-update-for-desktop_18.html">kritische Sicherheitslücken</a>.</p>
<p>Chrome aktualisiert sich (außer bei Linux) über die integrierte Update-Funktion, kann aber – wenn es pressiert – auch <a href="https://www.google.com/intl/de/chrome/browser/">hier geladen</a> werden. <em>(Mein <a href="https://wwwuser.gwdguser.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54254242918/">Octopussy</a></em>, erstellt mit <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/scenario.html">Scenario</a>. Prompt: »<em>A sexy female robot evades from a gigantic data octopus, colored french comic style</em>«. Modell: Flux Composition, Style: Expressive Comic Characters.</p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2025022001_chrome_update/</guid>
  <pubDate>Thu, 20 Feb 2025 14:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025022001_chrome_update/images/octopussy.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Wo ist unser Vektor, Viktor? Nachschlag zu Teil 2</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025021802_vectory_pygame_2/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54335639209/"><img src="https://kantel.github.io/posts/2025021802_vectory_pygame_2/images/bchicken2-b.jpg" class="img-fluid"></a></p>
<p>Zu meinem <a href="https://kantel.github.io/posts/2025021701_vectory_pygame/">gestrigen Versuch</a>, ein von der Hühnerhauswand abprallendes Küken mithilfe von <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a> (<a href="https://pyga.me/">CE</a>) und <a href="https://pyga.me/docs/ref/math.html">Pygames Vektorklasse</a> zu programmieren, hatte der <em>Gravitar</em> in <a href="https://github.com/kantel/kantel.github.io/discussions/241#discussioncomment-12235025">meinen Kommentaren</a> noch ein paar äußerst hilfreiche Anmerkungen, die ich <em>stante pede</em> in meinem Programm (<a href="https://github.com/kantel/pythoncuriosa/blob/main/noc/bouncingball_vectors.py">bouncingball_vectors.py</a>) umgesetzt habe:</p>
<p>So sei der separate import von <code>pygame.math</code> nicht mehr notwendig, weil Pygame die Bibliothek gleich mitimportiere. Außerdem könne man den Aufruf der Methode noch mehr verkürzen, wenn man zum Beispiel zu Beginn des Programms</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1">vec2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pygame.Vector2</span></code></pre></div>
<p>vereinbare. Denn da könne man die initiale Zuweisung mit</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.position <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vec2(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb2-2"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.velocity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vec2(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<p>erledigen. Außerdem könne man bei <code>self.rect.topleft</code>(oder <em>center</em>, <em>bottom</em>, <em>midbottom</em> etc.) eine Zuweisung mit einem Vektor vornehmen, zum Beispiel:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.topleft <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.position</span>
<span id="cb3-2">...</span>
<span id="cb3-3"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.topleft <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.velocity</span></code></pre></div>
<p>Und <em>last but not least</em> wies er darauf hin, daß ich mir mit <code>self.rect.right</code> (oder <em>left</em> oder <em>top</em> oder <em>bottom</em>) die Addition (oder Subtraktion) des Radius sparen könne:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.right <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> WIDTH  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb4-2">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.velocity.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb4-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.bottom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> HEIGHT <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.top <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb4-4">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.velocity.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
<p>Der Vollständigkeit halber hier noch einmal das gesamte Programm mit den vorgeschlagenen Änderungen:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bouncing Chicken with Vectors</span></span>
<span id="cb5-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> asyncio</span>
<span id="cb5-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pygame</span>
<span id="cb5-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os, sys</span>
<span id="cb5-5"></span>
<span id="cb5-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Hier wird der Pfad zum Verzeichnis der Assets gesetzt</span></span>
<span id="cb5-7">DATAPATH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(os.path.dirname(os.path.abspath(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__file__</span>)), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>)</span>
<span id="cb5-8"></span>
<span id="cb5-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Einige nützliche Konstanten</span></span>
<span id="cb5-10">WIDTH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">800</span></span>
<span id="cb5-11">HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">450</span></span>
<span id="cb5-12">CHICKEN_SIZE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">48</span></span>
<span id="cb5-13">TITLE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bouncing Chicken with Vectors (Pygame Version)"</span></span>
<span id="cb5-14">FPS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Framerate</span></span>
<span id="cb5-15"></span>
<span id="cb5-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Farben</span></span>
<span id="cb5-17">BG_COLOR <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">59</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">122</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">87</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Billardtisch-Grün</span></span>
<span id="cb5-18"></span>
<span id="cb5-19">vec2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pygame.Vector2</span>
<span id="cb5-20"></span>
<span id="cb5-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Klassen</span></span>
<span id="cb5-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ---------------------------------------------------------------------- #</span></span>
<span id="cb5-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Class GameWorld</span></span>
<span id="cb5-24"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> GameWorld:</span>
<span id="cb5-25"></span>
<span id="cb5-26">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb5-27">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pygame und das Fenster initialisieren</span></span>
<span id="cb5-28">        pygame.init()</span>
<span id="cb5-29">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.screen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pygame.display.set_mode((WIDTH, HEIGHT))</span>
<span id="cb5-30">        pygame.display.set_caption(TITLE)</span>
<span id="cb5-31"></span>
<span id="cb5-32">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.clock <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pygame.time.Clock()</span>
<span id="cb5-33">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.keep_going <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb5-34"></span>
<span id="cb5-35">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> reset(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb5-36">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Neustart oder Status zurücksetzen</span></span>
<span id="cb5-37">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Hier werden alle Elemente der GameWorld initialisiert</span></span>
<span id="cb5-38">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.all_sprites <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pygame.sprite.Group()</span>
<span id="cb5-39">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load Assets</span></span>
<span id="cb5-40">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.chicken_im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pygame.image.load(os.path.join(DATAPATH, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chick.png"</span>)).convert_alpha()</span>
<span id="cb5-41">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.chicken_im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pygame.transform.scale(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.chicken_im, (CHICKEN_SIZE, CHICKEN_SIZE))</span>
<span id="cb5-42">        chicken <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Chicken(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>)</span>
<span id="cb5-43">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.all_sprites.add(chicken)</span>
<span id="cb5-44"></span>
<span id="cb5-45">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> events(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb5-46">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Poll for events</span></span>
<span id="cb5-47">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> event <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> pygame.event.get():</span>
<span id="cb5-48">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> ((event.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pygame.QUIT) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span></span>
<span id="cb5-49">                (event.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pygame.KEYDOWN <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> event.key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> pygame.K_ESCAPE)):</span>
<span id="cb5-50">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.keep_going <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb5-51"></span>
<span id="cb5-52">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb5-53">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.all_sprites.update()</span>
<span id="cb5-54"></span>
<span id="cb5-55">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb5-56">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.screen.fill(BG_COLOR)</span>
<span id="cb5-57">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Game drawings go here</span></span>
<span id="cb5-58">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.all_sprites.draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.screen)</span>
<span id="cb5-59">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Alle Änderungen auf den Bildschirm</span></span>
<span id="cb5-60">        pygame.display.flip()</span>
<span id="cb5-61"></span>
<span id="cb5-62"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ---------------------------------------------------------------------- #</span></span>
<span id="cb5-63"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Class Chicken</span></span>
<span id="cb5-64"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Chicken(pygame.sprite.Sprite):</span>
<span id="cb5-65"></span>
<span id="cb5-66">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, _world):</span>
<span id="cb5-67">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb5-68">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.game_world <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _world</span>
<span id="cb5-69">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.game_world.chicken_im</span>
<span id="cb5-70">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.image.get_rect()</span>
<span id="cb5-71">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.position <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vec2(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb5-72">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.topleft <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.position</span>
<span id="cb5-73">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.velocity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vec2(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb5-74"></span>
<span id="cb5-75">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb5-76">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.topleft <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.velocity</span>
<span id="cb5-77">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.right <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> WIDTH  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb5-78">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.velocity.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb5-79">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.bottom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> HEIGHT <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rect.top <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb5-80">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.velocity.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb5-81"></span>
<span id="cb5-82"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ---------------------------------------------------------------------- #</span></span>
<span id="cb5-83"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ## Hauptprogramm</span></span>
<span id="cb5-84">world <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> GameWorld()</span>
<span id="cb5-85">world.reset()</span>
<span id="cb5-86"></span>
<span id="cb5-87"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Hauptschleife</span></span>
<span id="cb5-88"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">async</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> main():</span>
<span id="cb5-89">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> world.keep_going:</span>
<span id="cb5-90">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Framerate festsetzen</span></span>
<span id="cb5-91">        world.clock.tick(FPS)</span>
<span id="cb5-92"></span>
<span id="cb5-93">        world.events()</span>
<span id="cb5-94">        world.update()</span>
<span id="cb5-95">        world.draw()</span>
<span id="cb5-96">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> asyncio.sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Very important, and keep it 0</span></span>
<span id="cb5-97"></span>
<span id="cb5-98">    pygame.quit()</span>
<span id="cb5-99">    sys.exit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb5-100"></span>
<span id="cb5-101">asyncio.run(main())</span></code></pre></div>
<p>Jetzt habe ich aber Blut geleckt. Ich werde zumindest die Beispiele aus dem Vektoren-Kapitel <em>(Chapter&nbsp;1)</em> und aus dem Kapitel über Kraft <em>(Chapter&nbsp;2)</em> aus <em>Daniel Shiffmans</em> »<a href="https://natureofcode.com/">The Nature of Code</a>« nach Pygame portieren und um einige eigene Beispiele ergänzen. Und dann lacht mich das Kapitel über Physik-Bibliotheken <em>(Chapter&nbsp;6)</em> an. Was spricht dagegen, <a href="https://brm.io/matter-js/">Matter.js</a> durch <a href="https://www.pymunk.org/en/latest/">Pymunk</a> zu ersetzen? Zumal ich schon lange mal etwas mit dieser Python-Physik-Engine anstellen wollte.</p>
<p>Ich habe in den nächsten Tagen (oder Wochen… oder Monaten…&nbsp;?) also wieder einiges zu tun und ich freue mich darauf. <em>Still digging!</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54335639209/">Bouncing Chicken</a></em>, erstellt mit <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/scenario.html">Scenario</a>. Prompt: »<em>A yellow chick flutters against a green painted wall in the henhouse</em>«. Modell: Flux Composition, Style: Expressive Comic Characters.</p>



 ]]></description>
  <category>Spieleprogrammierung</category>
  <category>Pygame</category>
  <category>Python</category>
  <category>Nature of Code</category>
  <guid>https://kantel.github.io/posts/2025021802_vectory_pygame_2/</guid>
  <pubDate>Tue, 18 Feb 2025 12:40:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025021802_vectory_pygame_2/images/bchicken2.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
