<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Der Schockwellenreiter</title>
<link>https://kantel.github.io/</link>
<atom:link href="https://kantel.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description>Schockwellenreiter</description>
<generator>quarto-1.5.47</generator>
<lastBuildDate>Sat, 19 Apr 2025 12:05:00 GMT</lastBuildDate>
<item>
  <title>Pyxel-Tutorial Stage 5: Alles zappelt</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025041901_pyxel_tut_5/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54459564922/"><img src="https://kantel.github.io/posts/2025041901_pyxel_tut_5/images/pyxel5-b.jpg" class="img-fluid"></a></p>
<p>Wieder bin ich bei meiner Entdeckungsreise durch <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pyxel.html">Pyxel</a>, der kleinen (Python3-) Retrogame-Engine oder Fantasy-Konsole, ein gutes Stück weitergekommen: Nach ein paar Versuchen habe ich es geschafft, die kleinen Sprites zum Zappeln zu bewegen. Denn was taugt ein Spiel ohne animierte Sprites?</p>
<iframe src="animtest.html" class="if16_9" name="Pyxel Tutorial Stage 5">
</iframe>
<p>Im Grunde muß man, um Animationen zu erzeugen, in Pyxel genau nach dem gleichen Schema vorgehen, wie zum Beispiel in <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a> oder der <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/arcade.html">Python Arcade Bibliothek</a>: Man erzeugt einen Timer (hier: <code>animation_counter</code>), der bei jedem Durchlauf (in jedem Frame) hochgezählt wird. Wird ein festgesetzter Schwellwert (hier: <code>animation_speed</code>), der die Animationsgeschwindigkeit regelt, überschritten, wird das nächste Bild der Animation gezeigt und der Timer wieder auf Null zurückgesetzt (<code>animation_counter = 0</code>).</p>
<p>Ich habe die Koordinaten der einzelnen Bilder in einer Liste (<code>PLAYER_WALK_CYCLE = [(0, 0), (8, 0), (0, 0), (16, 0)]</code>) festgehalten und damit diese nicht wegen eines Index-Fehlers aussteigt, wird die Animation modulo der Länge dieser Liste erzeugt:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.frame_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.frame_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(PLAYER_WALK_CYCLE)</span></code></pre></div>
<p>Die einzige Schwierigkeit war, herauszubekommen, wie die Koordinaten der einzelnen Bilder bestimmt werden: Es sind tatsächlich die Pixel-Werte im Image-Editor (jeweils die linke, obere Ecke): Bei meinen <img src="https://latex.codecogs.com/png.latex?8x8"> Pixel großen Bildchen, die alle in der ersten Reihe lagen, waren das folglich die Koordinaten <code>(0, 0), (8, 0), (16, 0)</code> (x, y). Gäbe es Bildchen in der zweiten Reihe, hätten diese die Koordinaten <code>(0, 8), (8, 8), (16, 8)</code> und so weiter.</p>
<p>Nachdem ich dieses herausgefunden hatte, war die Zuordung der einzelnen Bilder der Sprite-Animation recht einfach:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.u, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PLAYER_WALK_CYCLE[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.frame_index]</span></code></pre></div>
<p>Dabei sind <code>u</code> und <code>v</code> die Pixel-Koordinaten des gewünschten Bildes in der entsprechenden Image-Bank.</p>
<p>Nun aber wieder das vollständige Skript meiner kleinen Beispiel-Applikation:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyxel</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ein paar nützliche Konstanten</span></span>
<span id="cb3-4">TS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tilesize</span></span>
<span id="cb3-5">COLKEY <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Color Key</span></span>
<span id="cb3-6">PLAYER_WALK_CYCLE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)]</span>
<span id="cb3-7">WALLS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)]</span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_tile(tile_x, tile_y):</span>
<span id="cb3-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pyxel.tilemaps() gibt ein Tupel mit den x- und y-Koordinaten</span></span>
<span id="cb3-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># aus der Tilemap des mit pget() identifizierten Tiles zurück</span></span>
<span id="cb3-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> pyxel.tilemaps[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].pget(tile_x, tile_y)</span>
<span id="cb3-13"></span>
<span id="cb3-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Player:</span>
<span id="cb3-15"></span>
<span id="cb3-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, _x, _y):</span>
<span id="cb3-17">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>TS</span>
<span id="cb3-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>TS</span>
<span id="cb3-19">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TS</span>
<span id="cb3-20">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.u, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PLAYER_WALK_CYCLE[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb3-21">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.imagebank <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-22">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.speed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb3-23">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.frame_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Current frame in the sprite sheet</span></span>
<span id="cb3-24">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.animation_speed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Lower = faster animation</span></span>
<span id="cb3-25">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.animation_counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tracks frame updates</span></span>
<span id="cb3-26"></span>
<span id="cb3-27">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-28">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.animation_counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-29">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.animation_counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.animation_speed:</span>
<span id="cb3-30">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.frame_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.frame_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(PLAYER_WALK_CYCLE)</span>
<span id="cb3-31">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.u, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PLAYER_WALK_CYCLE[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.frame_index]</span>
<span id="cb3-32">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.animation_counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-33"></span>
<span id="cb3-34">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> move(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-35">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (pyxel.btnp(pyxel.KEY_LEFT)</span>
<span id="cb3-36">                <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> get_tile((<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.speed)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>TS, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>TS) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> WALLS):</span>
<span id="cb3-37">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.speed</span>
<span id="cb3-38">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> (pyxel.btnp(pyxel.KEY_RIGHT)</span>
<span id="cb3-39">                <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> get_tile((<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> TS)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>TS, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>TS) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> WALLS):</span>
<span id="cb3-40">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.speed</span>
<span id="cb3-41">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> (pyxel.btnp(pyxel.KEY_UP)</span>
<span id="cb3-42">                <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> get_tile(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>TS, (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.speed)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>TS) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> WALLS):</span>
<span id="cb3-43">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.speed</span>
<span id="cb3-44">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> (pyxel.btnp(pyxel.KEY_DOWN)</span>
<span id="cb3-45">                <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> get_tile(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>TS, (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> TS)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>TS) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> WALLS):</span>
<span id="cb3-46">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.speed</span>
<span id="cb3-47"></span>
<span id="cb3-48"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> App:</span>
<span id="cb3-49"></span>
<span id="cb3-50">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-51">        pyxel.init(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>TS, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>TS, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pyxel Tutorial Stage 5"</span>, display_scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb3-52">        pyxel.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data/res.pyxres"</span>)</span>
<span id="cb3-53">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialisiere den Spieler</span></span>
<span id="cb3-54">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Position in Map-Koordinaten</span></span>
<span id="cb3-55">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Player(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb3-56"></span>
<span id="cb3-57">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> run(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-58">        pyxel.run(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.update, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.draw)</span>
<span id="cb3-59"></span>
<span id="cb3-60">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-61">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player.update()</span>
<span id="cb3-62">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player.move()</span>
<span id="cb3-63"></span>
<span id="cb3-64">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-65">        pyxel.cls(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb3-66">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Zeichen die Map</span></span>
<span id="cb3-67">        pyxel.bltm(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TS, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TS, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb3-68">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Zeichne den Player</span></span>
<span id="cb3-69">        pyxel.blt(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player.imagebank,</span>
<span id="cb3-70">                  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player.u, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player.v, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player.h,</span>
<span id="cb3-71">                  COLKEY)</span>
<span id="cb3-72"></span>
<span id="cb3-73">App().run()</span></code></pre></div>
<p>Den <a href="https://github.com/kantel/pyxel/tree/main/animtest">vollständigen Quelltext inklusive der Ressourcen- und Palettendatei</a> (ich hatte dieses Mal die <a href="http://cognitiones.kantel-chaos-team.de/multimedia/farbpaletten/pico8.html">Pico-8 Farbpalette</a> genutzt) findet Ihr wieder in meinem GitHub-Repositorium, damit Ihr ebenfalls damit experimentieren könnt.</p>
<p>Bei den Bildern für die Sprites und für die Map habe ich mich von Kenneys freiem (<a href="https://creativecommons.org/publicdomain/zero/1.0/">CC0</a>) Tileset <a href="https://kenney.nl/assets/pico-8-city">Pico-8 City</a> inspirieren lassen. Ich habe sie aber nicht einfach importiert (obwohl das auch geht), sondern sie Pixel für Pixel in Pyxels Ressourcen-Editor nachgezeichnet. Die Arbeit mit dem Teil macht nämlich ebenfalls Spaß. Aus mir wird zwar mit Sicherheit kein großer Pixel-Artist mehr werden, aber die Arbeit mit 8x8 Pixel großen Bildchen kriege ich gerade noch hin.</p>



 ]]></description>
  <category>Pyxel</category>
  <category>Python</category>
  <category>Retrogaming</category>
  <category>Spieleprogrammierung</category>
  <guid>https://kantel.github.io/posts/2025041901_pyxel_tut_5/</guid>
  <pubDate>Sat, 19 Apr 2025 12:05:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025041901_pyxel_tut_5/images/pyxel5.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Security Alert: Apple Updates</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025041801_apple_updates/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54424037355/"><img src="https://kantel.github.io/posts/2025041801_apple_updates/images/apple-b.jpg" class="img-fluid"></a></p>
<p>Nachdem die regulären monatlichen Updates für den April <a href="https://kantel.github.io/posts/2025040102_apple_updates/">schon sehr früh freigegeben</a> wurden, scheint der <a href="https://kantel.github.io/posts/2024091601_apple_zensuriert/">prüde IT-Riese aus Cupertino</a> mit dem angebissenen Apfel im Logo nun eine Notfall-Aktualisierung für seine aktuellen Betriebssysteme nachschieben zu müssen:</p>
<section id="apple-veröffentlicht-macos-sequoia-15.4.1" class="level2">
<h2 class="anchored" data-anchor-id="apple-veröffentlicht-macos-sequoia-15.4.1">Apple veröffentlicht macOS Sequoia 15.4.1</h2>
<p>Apple hat das Update auf die neue Betriebssystemversion <a href="https://support.apple.com/en-us/122400">macOS Sequoia 15.4.1 freigegeben</a> und korrigiert damit auch wieder <a href="https://www.macwelt.de/article/2689310/macos-sequoia-15-4-1.html">Sicherheitsprobleme</a>.</p>
<p>Das Update steht über die Systemeinstellungen zur Verfügung.</p>
</section>
<section id="apple-veröffentlicht-ios-ipados-18.4.1" class="level2">
<h2 class="anchored" data-anchor-id="apple-veröffentlicht-ios-ipados-18.4.1">Apple veröffentlicht iOS / iPadOS 18.4.1</h2>
<p>Apple hat das Update auf iOS 18.4.1 und iPadOS 18.4.1 bereitgestellt. <a href="https://support.apple.com/en-us/122282">Die Updates bieten Fehlerbehebungen und korrigieren Sićherheitslücken</a>.</p>
<p>Das Update auf auf iOS 18.4.1 und iPadOS 18.4.1 kann über OTA (<em>Over the Air</em> - in <code>Einstellungen &gt; Allgemein &gt; Softwareaktualisierung</code>, an ausreichender Akku-Kapazität und freien Speicherplatz sollte gedacht werden) erfolgen.</p>
<p>Eine vorherige Sicherung des Geräts ist wie immer sehr zu empfehlen.</p>
<p><em>(Mein <a href="https://wwwuser.gwdguser.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54424037355/">Zauberapfel im Zauberwald</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>Colored DC Comic style, a mad hatter gives a sexy naked woman, with big boops, and a nice butt an apple in the summer enchanted forest</em>«. Modell: Flux.1 (Dev), Style: PixelWave.</p>


</section>

 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2025041801_apple_updates/</guid>
  <pubDate>Fri, 18 Apr 2025 13:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025041801_apple_updates/images/apple.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Pyxel und Paletten: Pyxel-Tutorial Stage 4</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025041701_pyxel_und_paletten/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54458255734/"><img src="https://kantel.github.io/posts/2025041701_pyxel_und_paletten/images/paltest-b.jpg" class="img-fluid"></a></p>
<p>Auf meiner Entdeckungsreise durch <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pyxel.html">Pyxel</a>, der kleinen (Python3-) Retrogame-Engine, bin ich wieder ein Stück vorangekommen: Mir ist es gelungen, dem Teil andere als die Default-Farbpalette unterzujubeln.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/54458218190/"><img src="https://kantel.github.io/posts/2025041701_pyxel_und_paletten/images/defaultpal.jpg" class="img-fluid figure-img" alt="Pyxel Default-Farbpalette"></a></p>
<figcaption>Pyxel Default-Farbpalette</figcaption>
</figure>
</div>
<p>Pyxel benutzt von Haus aus eine eher aus <a href="http://cognitiones.kantel-chaos-team.de/multimedia/farbpaletten/pyxelpal.html">16 gedeckten Farben bestehende Palette</a>, die zwar einen guten Kompromis bildet, aber maches Mal möchte man doch auch andere Farben benutzen können. Dazu besitzt der Pyxel-Editor einen recht einfachen Mechanismus: Wenn in dem Verzeichnis, in dem die Ressourcendatei (<code>.pyxres</code>) liegt, eine gleichnamige Datei mit einer Farbpalette (<code>.pyxpal</code>) abgelegt wird, wird diese von der Ressourcendatei gelesen und die (16!) Farben aus dieser Datei werden übernommen. Diese Palettendatei enthält hexadezimale Einträge für die Anzeigefarben (zum Beispiel <code>1100ff</code>), getrennt durch Zeilenumbrüche.</p>
<p>Ich habe in einem ersten Versuch die Standard-Farbpalette der Retro-Fantasy-Konsole <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/tic80.html">TIC-80</a>, die den schönen Namen <a href="http://cognitiones.kantel-chaos-team.de/multimedia/farbpaletten/sweetie16.html">Sweety&nbsp;16</a> trägt, übernommen, da sie mehr Grüntöne für eine Wald- und Wiesenlandschaft (zum Beispiel für ein Zelda-ähnliches Spiel (in der frühen Fassung)) besitzt.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/54458045304/"><img src="https://kantel.github.io/posts/2025041701_pyxel_und_paletten/images/tic80pal.jpg" class="img-fluid figure-img" alt="TIC-80-Farbpalette (Sweety 16)"></a></p>
<figcaption>TIC-80-Farbpalette (Sweety 16)</figcaption>
</figure>
</div>
<p>Man sieht die Farben in der Leiste unten links. Werden sie beim ersten Aufruf des Editors nicht angzeigt, einfach den Editor noch einmal laden.</p>
<p>Zum Schluß habe ich dann auch noch die Default-Farbpalette für die (proprietäre) Fantasykonsole <a href="https://de.wikipedia.org/wiki/Pico-8">Pico-8</a> installiert, die kräftigere, leuchtende Farben aufweist.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/54458114843/"><img src="https://kantel.github.io/posts/2025041701_pyxel_und_paletten/images/pico8pal.jpg" class="img-fluid figure-img" alt="Pico-8-Farbpalette"></a></p>
<figcaption>Pico-8-Farbpalette</figcaption>
</figure>
</div>
<p>Natürlich habe ich dann auch noch ein kleines Spiel programmiert, mit dem ich die Paletten testen konnte (einfach in der Zeile <code>pyxel.load("assets/res.pyxres")</code> die entsprechende Ressourcen-Datei laden):</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyxel</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ein paar nützliche Konstanten</span></span>
<span id="cb1-4">TS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tilesize</span></span>
<span id="cb1-5">COLKEY <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Color Key</span></span>
<span id="cb1-6">WALLS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)]</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_tile(tile_x, tile_y):</span>
<span id="cb1-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pyxel.tilemaps() gibt ein Tupel mit den x- und y-Koordinaten</span></span>
<span id="cb1-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># aus der Tilemap des mit pget() identifizierten Tiles zurück</span></span>
<span id="cb1-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> pyxel.tilemaps[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].pget(tile_x, tile_y)</span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Player:</span>
<span id="cb1-14"></span>
<span id="cb1-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, _x, _y):</span>
<span id="cb1-16">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TS</span>
<span id="cb1-17">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TS</span>
<span id="cb1-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TS</span>
<span id="cb1-19">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.u <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Die x-Position des Sprites in der Imagebank</span></span>
<span id="cb1-20">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Die y-Position des Sprites in der Imagebank</span></span>
<span id="cb1-21">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.imagebank <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-22">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dir</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"right"</span></span>
<span id="cb1-23"></span>
<span id="cb1-24">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> move(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-25">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (pyxel.btnp(pyxel.KEY_LEFT)</span>
<span id="cb1-26">                <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> get_tile((<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> TS)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>TS, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>TS) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> WALLS):</span>
<span id="cb1-27">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dir</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span></span>
<span id="cb1-28">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> TS</span>
<span id="cb1-29">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> (pyxel.btnp(pyxel.KEY_RIGHT)</span>
<span id="cb1-30">                <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> get_tile((<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> TS)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>TS, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>TS) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> WALLS):</span>
<span id="cb1-31">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dir</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"right"</span></span>
<span id="cb1-32">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> TS</span>
<span id="cb1-33">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dir</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span>:</span>
<span id="cb1-34">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>TS</span>
<span id="cb1-35">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-36">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TS</span>
<span id="cb1-37"></span>
<span id="cb1-38"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> App:</span>
<span id="cb1-39"></span>
<span id="cb1-40">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-41">        pyxel.init(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TS, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TS, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pyxel Tutorial Stage 4"</span>, display_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb1-42">        pyxel.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"assets/res.pyxres"</span>)</span>
<span id="cb1-43"></span>
<span id="cb1-44">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialisiere den Spieler</span></span>
<span id="cb1-45">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Position in Map-Koordinaten</span></span>
<span id="cb1-46">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Player(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb1-47"></span>
<span id="cb1-48">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> run(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-49">        pyxel.run(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.update, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.draw)</span>
<span id="cb1-50"></span>
<span id="cb1-51">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-52">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player.move()</span>
<span id="cb1-53"></span>
<span id="cb1-54">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-55">        pyxel.cls(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-56"></span>
<span id="cb1-57">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Zeichen die Map</span></span>
<span id="cb1-58">        pyxel.bltm(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TS, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TS, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-59"></span>
<span id="cb1-60">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Zeichne den Player</span></span>
<span id="cb1-61">        pyxel.blt(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player.imagebank,</span>
<span id="cb1-62">                  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player.u, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player.v, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player.h,</span>
<span id="cb1-63">                  COLKEY)</span>
<span id="cb1-64"></span>
<span id="cb1-65">App().run()</span></code></pre></div>
<p>Es passiert (noch) nicht viel neues, lediglich daß der Avatar beim Richtungswechsel auch gespiegelt wird (in die »richtige« Richtung schaut):</p>
<iframe src="restest3.html" class="if16_9" name="Pyxel Tutorial Stage 4">
</iframe>
<p>Wer weiß, vielleicht wage ich mich bei meinen nächsten Versuchen dann auch an ein »Zelda-style Dungeon« in Pyxel, wie es in <a href="https://www.youtube.com/playlist?list=PL5o_boFdYiCrjyC5lKano6R5qA-Zzswcz">dieser YouTube-Playlist</a> der User <em>Radical Slice</em> für die Konsole Pico-8 vorgestellt hat. <em>Still digging!</em></p>



 ]]></description>
  <category>Pyxel</category>
  <category>Python</category>
  <category>Retrogaming</category>
  <category>Spieleprogrammierung</category>
  <guid>https://kantel.github.io/posts/2025041701_pyxel_und_paletten/</guid>
  <pubDate>Thu, 17 Apr 2025 15:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025041701_pyxel_und_paletten/images/paltest.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Mozilla Thunderbird Version 137.0.2 freigegeben</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025041602_thunderbird_update/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54426911034/"><img src="https://kantel.github.io/posts/2025041602_thunderbird_update/images/donnervogel-b.jpg" class="img-fluid"></a></p>
<p>Der Donnervogel <a href="https://kantel.github.io/posts/2025040202_thunderbird_update/">jagt wieder</a> den Feuerfuchs: Die Entwickler des <a href="http://www.mozillamessaging.com/">Mozilla Thunderbird</a> haben das Update auf die Version 137.0.2 freigegeben und damit auch <a href="https://www.thunderbird.net/en-US/thunderbird/137.0.2/releasenotes/">Sicherheitslücken behoben</a>.</p>
<p>Thunderbird weist selbst auf dieses Update hin. Diese Prozedur kann aber auch wie immer über das Menü <code>Hilfe &gt; Über Thunderbird</code> angestoßen werden. <em>(Mein <a href="https://wwwuser.gwdguser.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54426911034/">Thunderbird hunts Firefox</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>Colored DC Comic style, illustration of a majestic thunderbird with colored feathers soaring above a mountain range during a bright sunset, hunting a red firefox</em>«. Modell: Flux.1 (Dev), Style: PixelWave.</p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2025041602_thunderbird_update/</guid>
  <pubDate>Wed, 16 Apr 2025 12:40:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025041602_thunderbird_update/images/donnervogel.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Google korrigiert wieder kritische Sicherheitslücken in Chrome</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025041601_chrome_update/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54369834656/"><img src="https://kantel.github.io/posts/2025041601_chrome_update/images/octopussy-b.jpg" class="img-fluid"></a></p>
<p>Auch in der Karwoche aktualisiert unser aller Datenkrake ihr Flaggschiff: Google veröffentlicht das <a href="https://chromereleases.googleblog.com/2025/04/stable-channel-update-for-desktop_15.html">Update der Version 135 (135.0.7049.95/96) seines Browsers Chrome</a> und schließt damit Sicherheitslücken. Wie immer hält sich Google mit Details zu den geschlossenen Lücken zurück, damit Angreifer die Informationen nicht für Exploits missbrauchen können, aber mindestens <a href="https://stadt-bremerhaven.de/chrome-135-schliesst-kritische-sicherheitsluecke/">zwei Schwachstellen werden als kritisch</a> eingestuft.</p>
<p>Chrome aktualisiert sich (außer bei Linux) über die integrierte Update-Funktion, kann aber – wenn es pressiert – auch <a href="https://www.google.com/intl/de/chrome/browser/">hier geladen</a> werden. <em>(Mein <a href="https://wwwuser.gwdguser.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54369834656/">Octopussy</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>Colored french comic style, a sexy female robot evades from a gigantic data octopus</em>«. Modell: Flux (Pro), Style: None.</p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2025041601_chrome_update/</guid>
  <pubDate>Wed, 16 Apr 2025 12:10:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025041601_chrome_update/images/octopussy.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Oster-Ereignisse werfen ihre Schatten voraus</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025041502_osterhasi/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54453176176/"><img src="https://kantel.github.io/posts/2025041502_osterhasi/images/osterhasi-b.jpg" class="img-fluid"></a></p>
<p>Gestern auf dem <a href="https://www.berlin.de/events/2991117-2229501-britzer-baumbluete.html">Britzer Baumblütenfest</a>: Der Osterhasi!</p>
<hr>
<p>Photo (<a href="http://creativecommons.org/licenses/by-nc-nd/2.0/">cc</a>) 2025: <em><a href="http://cognitiones.kantel-chaos-team.de/cv.html">Jörg Kantel</a></em></p>



 ]]></description>
  <category>Neukölln</category>
  <category>Neuköllner Bilderbogen</category>
  <category>Photographie</category>
  <guid>https://kantel.github.io/posts/2025041502_osterhasi/</guid>
  <pubDate>Tue, 15 Apr 2025 15:34:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025041502_osterhasi/images/osterhasi.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Mozilla veröffentlicht neue Firefox-Versionen</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025041501_firefox_updates/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54417838560/"><img src="https://kantel.github.io/posts/2025041501_firefox_updates/images/firefoxes-b.jpg" class="img-fluid"></a></p>
<p>Die Entwickler des Mozilla Firefox haben die neue <a href="https://www.mozilla.org/en-US/firefox/137.0.2/releasenotes/">Version 137.0.2</a> und die <a href="https://www.mozilla.org/en-US/firefox/128.9.0/releasenotes/">Version ESR 128.9.0</a> veröffentlicht und darin auch wieder Sicherheitslücken behoben. Wie immer sind in diese Updates auch viele Veränderungen eingeflossen.</p>
<p>Firefox weist selbst auf diese Updates hin. Diese Prozedur kann aber auch über das Menü <code>Hilfe &gt; Über Firefox</code> angestoßen werden. <em>(Mein <a href="https://wwwuser.gwdguser.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54417838560/">Der alte Mann und sein Zettelkasten</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>Colored DC comic style, two red pandas in a spring enchanted forest</em>«. Modell: Flux (Dev), Style: PixelWave.</p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2025041501_firefox_updates/</guid>
  <pubDate>Tue, 15 Apr 2025 15:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025041501_firefox_updates/images/firefoxes.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Die Notion-Alternative Anytype im Trend</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025041203_anytype_im_trend/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54035332486/"><img src="https://kantel.github.io/posts/2025041203_anytype_im_trend/images/anytype-b.jpg" class="img-fluid"></a></p>
<p>Seit gestern trendet in meinem <del>Geißenpeter</del> <a href="https://www.goatcounter.com/">Neugiertool</a> und in diesem <del>Weblog</del> Kritzelheft der Beitrag »<a href="https://kantel.github.io/posts/2024081201_anytype/">All about Anytype – meine neue, digitale Rumpelkammer?</a>« vom August letzten Jahres, in dem ich erstmals <a href="https://anytype.io/">Anytype</a> als freie (<a href="https://blog.anytype.io/our-open-philosophy/">Open Source</a>) Alternative zu dem proprietären <a href="http://cognitiones.kantel-chaos-team.de/produktivitaet/notion.html">Notion</a> und als meine (eventuell) zukünftige digitale Rumpelkammer vorgestellt hatte.</p>
<p>Mittlerweile hat das Thema Fahrt aufgenommen, da bedingt durch die jüngste politische Entwicklung in den Vereinigten Staaten von vielen verstärkt nach einer europäischen (und damit DSGVO-konformen) Alternative zu US-amerikanischer Software gesucht wird. Und da Anytpye im Gegensatz zu Notion eine echte Ende-zu-Ende-Verschlüsselung bietet und die Hersteller in der Schweiz sitzen (die EU-konforme Datenschutzrichtlinien erfüllt) ist es ziemlich sicher, anzunehmen, daß die Software keine Hintertürchen für die NSA oder andere (nicht nur) amerikanische Geheimdienste eingebaut hat.</p>
<iframe class="if16_9" src="https://www.youtube.com/embed/MKvDdsa6oyY?si=UjYvFY4NkAC8-86Q" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p>Das dachte sich wohl auch Tante Heise, die unter dem Titel »<a href="https://www.youtube.com/watch?v=MKvDdsa6oyY">Endlich Leben im Griff 🤓 – Anytype</a>« gestern ein Video über diesen digitalen Zettelkasten produziert hat (und wer will, kann den <a href="https://www.heise.de/news/Notion-Alternative-Anytype-Schoener-sicherer-offline-first-10349463.html">Text des Videos auch hier nachlesen</a>). Ich vermute mal, daß dieses Video den Run auf meine Seite verursachte.</p>
<p>Ich persönlich kann Anytype nur empfehlen. Das Fragezeichen in oben erwähntem Beitrag ist schon längst einem Ausrufezeichen gewichen, spätestens seitdem Anytype die letzte Lücke zu Notion geschlossen hat und <a href="https://kantel.github.io/posts/2025021401_anytype_web/">nun auch Web kann</a>. Und alle Leserinnen und Leser, die bei ihrer Suche nach Beiträgen zu Anytype auf diese Seiten gestoßen sind, heiße ich herzlich willkommen.</p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54035332486/">Der alte Mann und sein Zettelkasten</a></em>, erstellt mit <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/scenario.html">Scenario</a>. Prompt: »<em>An old man, white hair, clean-shaven, no beard, blue eyes, glasses, sits at a desk in front of huge monitors with lots of colorful diagrams, there are other open books on the desk, and there is a large mug of steaming coffee next to them, and a computer keyboard in front of the monitor, on the wall there are shelves with files and books, the autumn sun shines through a large window, colored french comic style</em>«, Negative Prompt: »<em>ugly, beard, deformed, noisy, blurry, distorted, out of focus, bad anatomy, extra limbs, poorly drawn face, poorly drawn hands, missing fingers, tie</em>«. Modell: Stable Diffusion XL, Style: Scifi Magic + Belgian School.</p>



 ]]></description>
  <category>Anytype</category>
  <category>Zettelkasten</category>
  <guid>https://kantel.github.io/posts/2025041203_anytype_im_trend/</guid>
  <pubDate>Sat, 12 Apr 2025 17:45:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025041203_anytype_im_trend/images/anytype.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Pyxel: Video-Tutorials am Wochenende</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025041202_pyxel_tuts/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54446849301/"><img src="https://kantel.github.io/posts/2025041202_pyxel_tuts/images/pyxelpycharm-b.jpg" class="img-fluid"></a></p>
<p>Wenn sie oder er – angefixt durch <a href="https://kantel.github.io/#category=Pyxel">meine (Wieder-) Entdeckung</a> der minimalistischen (Python3-) Retrogame-Engine <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pyxel.html">Pyxel</a> – ebenfalls etwas mit dieser Fantasykonsole anfangen will, sie oder er sei gewarnt: Die Anzahl der Tutorials zu Pyxel, die auf YouTube zu finden sind, ist nicht gerade üppig (das hat Pyxel übrigens mit <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/microstudio.html">microStudio</a> gemein).</p>
<p>Daher habe ich heute eine Liste aller Tutorials zusammengestellt, die mir bisher untergekommen sind (und von vorneherein nicht absoluter Schrott waren). Einige davon hatte ich schon einmal auf diesen Seiten verlinkt, aber so sind sie alle an einem Ort versammelt.</p>
<section id="caffeinatedtech" class="level2">
<h2 class="anchored" data-anchor-id="caffeinatedtech">CaffeinatedTech</h2>
<iframe class="if16_9" src="https://www.youtube.com/embed/Qg16VhEo2Qs?si=SMHbNxiJRAVi1bmS" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p>Den Anfang macht der User <em>CaffeinatedTech</em>, auf seinem Kanal sind zwei sehr ausführliche Tutorials zu finden (beide jeweils etwas über zwei Stunden Spieldauer). Auf dem ersten, dem obigen »<a href="https://www.youtube.com/watch?v=Qg16VhEo2Qs">Python Retro Game Tutorial</a>«, wird eine Variante des klassischen <em>Snake Game</em> entwickelt, das zweite, »<a href="https://www.youtube.com/watch?v=8Glx88BVMLs">Create a Retro Game with Pyxel in Python</a>«, zeigt eine Breakout-Version. Das erste Video ist schon etwa vier Jahre alt und daher nicht mehr unbedingt <em>up to date</em>, hier lohnt im Zweifelsfall ein Blick in die <a href="https://github.com/kitao/pyxel">Pyxel-Doku auf GitHub</a>, das zweite ist aus dem letzten Jahr und daher ziemlich aktuell. Ich habe aus beiden Videos fast alles gelernt, was ich bisher über Pyxel weiß, die insgesamt mehr als vier Stunden sind daher keine vergeudete Zeit.</p>
</section>
<section id="testing-coder" class="level2">
<h2 class="anchored" data-anchor-id="testing-coder">Testing Coder</h2>
<iframe class="if16_9" src="https://www.youtube.com/embed/gXpe9HZ3Au8?si=-4HcatsJ-oYwlC0g" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p>Wer es etwas kompakter mag, dem empfehle ich die achtteilige Playlist »<a href="https://www.youtube.com/playlist?list=PLp_k-oh2bNHairxWQK_SYL5Me_OBJYJs8">Pyxel Tutorial</a>« von <em>Testing Coder</em>. Die Videos haben jeweils etwa eine Spieldauer zwischen fünf und zehn Minuten und sind daher manchmal doch recht knapp. Aber man kann die Wiedergabe ja anhalten und das Gesehene ein wenig sacken lassen.</p>
</section>
<section id="r3ap3rpy" class="level2">
<h2 class="anchored" data-anchor-id="r3ap3rpy">R3ap3rPy</h2>
<iframe class="if16_9" src="https://www.youtube.com/embed/m7msykl-P9I?si=7b5R2cb0_LJC0Jvf" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p>Vom User <em>R3ap3rPy</em> gibt es ebenfalls zwei Videos zu Pyxel: Einmal das obige »<a href="https://www.youtube.com/watch?v=m7msykl-P9I&amp;">Making of a spaceship game!</a>« und dann noch »<a href="https://www.youtube.com/watch?v=WewNYTXS_Rc">Starry Sky</a>« (Jetzt wißt Ihr, woher ich die Idee für <a href="https://kantel.github.io/posts/2025041103_pyxel_tut_3/">meinen Sternen-Hintergrund</a> habe). Auch hier gilt: Die Tutorials sind beide vor sechs Jahren hochgeladen worden, also gelegentlich mit der Dokumentation abgleichen.</p>
</section>
<section id="gamedevtricks" class="level2">
<h2 class="anchored" data-anchor-id="gamedevtricks">Gamedevtricks</h2>
<iframe class="if16_9" src="https://www.youtube.com/embed/uuR6fdW4dSo?si=UokEkwpaM0ALdydl" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p><em>Last but not least</em> gibt es noch den Kanal <em>Gamedevtricks</em>, in dessen Videos Euch das gleiche Gesicht entgegenschaut, wie beim Kanal <em>R3ap3rPy</em> oben. Allerdings sind die Tutorials jünger (vor etwa zwei Jahren entstanden) und daher recht aktuell. Leider gibt es auch hier keine Playlist, so daß ich die mühsam zusammengeklaubten Videos einzeln auflisten muß:</p>
<ol type="1">
<li>Pyxel: <a href="https://www.youtube.com/watch?v=uuR6fdW4dSo">A Retro Game Engine coding guide for starters</a> (das Video oben, etwa sieben Minuten Spieldauer).</li>
<li>Retro Gaming in Python: <a href="https://www.youtube.com/watch?v=Xt00RWDUJJY">Writing a Class-Based Game in Pyxel</a> (sechseinhalb Minuten).</li>
<li><a href="https://www.youtube.com/watch?v=z_7nynTSPJ4">How to install examples in Pyxel game engine</a> (anderthalb Minuten).</li>
<li><a href="https://www.youtube.com/watch?v=yJpGx4kgPps">How to draw shapes and objects in Pyxel</a> (zweieinhalb Minuten).</li>
<li><a href="https://www.youtube.com/watch?v=QFojR2MzNG8">How to write code in Pyxel to move objects around</a>. (vier Minuten).</li>
<li><a href="https://www.youtube.com/watch?v=NfcUoHyAEvg">How to move objects around in Pyxel Game Engine</a> (full coding tutorial, fünf Minuten).</li>
<li><a href="https://www.youtube.com/watch?v=v4SkqDb_4lQ">Collison Detection in Pyxel Game Engine</a> (complete coding guide, acht Minuten).</li>
<li><a href="https://www.youtube.com/watch?v=87bCFqzhHDU">How To Add Music in Pyxel Game Project</a> (full coding lesson, zweieinhalb Minuten).</li>
</ol>
<p>Trotz oder vielleicht auch gerade wegen ihrer Kürze fand ich diese Tutorials sehr hifreich, auch wenn der Macher den Ressourcen-Editor scheut, wie der Teufel das Weihwasser.&nbsp;🤓</p>


</section>

 ]]></description>
  <category>Pyxel</category>
  <category>Python</category>
  <category>Retrogaming</category>
  <category>Spieleprogrammierung</category>
  <guid>https://kantel.github.io/posts/2025041202_pyxel_tuts/</guid>
  <pubDate>Sat, 12 Apr 2025 16:05:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025041202_pyxel_tuts/images/pyxelpycharm.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Wohnsitz Neukölln: Freies Sofa Juliusstraße</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025041201_wohnsitz_juliusstrasse/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54406995192/"><img src="https://kantel.github.io/posts/2025041201_wohnsitz_juliusstrasse/images/juliusstrasse-b.jpg" class="img-fluid"></a></p>
<p>Neues aus der Nachbarschaft: Dieses exquisite Ensemble aus entlaufenem Sofa und begleitender Matratze habe ich am 24.&nbsp;März&nbsp;2025 in der Neuköllner Juliusstraße aufgenommen. Wieder ein wunderschönes Fundstück für meine stetig wachsende Sammlung »<a href="https://www.flickr.com/photos/schockwellenreiter/albums/1244272/">Wohnsitz Neukölln</a>« (aktuell 1.870 Photos).</p>
<hr>
<p><strong>Photo</strong> (<a href="http://creativecommons.org/licenses/by-nc-nd/2.0/">cc</a>) 2025: <em><a href="http://cognitiones.kantel-chaos-team.de/cv.html">Jörg Kantel</a></em></p>



 ]]></description>
  <category>Neukölln</category>
  <category>Neuköllner Bilderbogen</category>
  <category>Wohnsitz Neukölln</category>
  <category>Photographie</category>
  <guid>https://kantel.github.io/posts/2025041201_wohnsitz_juliusstrasse/</guid>
  <pubDate>Sat, 12 Apr 2025 15:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025041201_wohnsitz_juliusstrasse/images/juliusstrasse.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Retrogaming mit Python: Pyxel-Tutorial Stage 3</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025041103_pyxel_tut_3/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54441501429/"><img src="https://kantel.github.io/posts/2025041103_pyxel_tut_3/images/pyxel3-b.jpg" class="img-fluid"></a></p>
<p>Nachdem ich in der letzten Zeit ausgiebig mit <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/microstudio.html">microStudio</a> (mit Python/<a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/brython.html">Brython</a> als Programmiersprache) <a href="https://kantel.github.io/#category=microStudio">herumgespielt</a> hatte, kam mit in den Sinn, auch meine im <a href="https://kantel.github.io/posts/2024081002_pyxel_tut_2/">August letzten Jahres unterbrochenen Versuche</a> mit der (Python3-) Retrogame-Engine <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pyxel.html">Pyxel</a> wieder aufzunehmen.</p>
<p>Denn Pyxel exportiert (unter anderem) ebenfalls nach HTML, basiert aber auf <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/pyodide.html">Pyodide</a> und kann daher fast den gesamten <em>Scientific Stack</em> (und mehr) von Python&nbsp;3 nutzen (also zumindest <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/numpy.html">Numpy</a> und <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/scipy.html">SciPy</a>) und das ist schon etwas mehr als die Brython-Implementierung von microStudio kann. Dafür unterliegt allerdings Pyxel einigen (gewollten) Einschränkungen (es will halt eine Retro-Fantasy-Spielekonsole sein), die microStudio nicht besitzt.</p>
<p>Ziel war es, eine Pyxel-Version <a href="https://kantel.github.io/posts/2024080703_smallmaze1_tic80/">dieses Mini-Games</a> zu erstellen, das ich ebenfalls im August letzten Jahres mit der Retrokonsole <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/tic80.html">TIC-80</a> in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/lua.html">Lua</a> programmiert hatte. Und dies ist das Ergebnis:</p>
<iframe src="pyxel/index.html" class="if16_9" name="Pyxel Maze Game Stage 3">
</iframe>
<p><em>Mit den Pfeiltasten könnt Ihr das Pixelmännchen durch das Spielfeld steuern.</em></p>
<p>Der Quellcode unterscheidet sich kaum von dem des <a href="https://kantel.github.io/posts/2024081002_pyxel_tut_2/">vorherigen Pyxel-Tutorials</a>, lediglich die Fensterbreite habe ich verdoppelt:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyxel</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ein paar nützliche Konstanten</span></span>
<span id="cb1-4">TS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tilesize</span></span>
<span id="cb1-5">COLKEY <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Color Key</span></span>
<span id="cb1-6">WALLS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)]</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_tile(tile_x, tile_y):</span>
<span id="cb1-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pyxel.tilemaps() gibt ein Tupel mit den x- und y-Koordinaten</span></span>
<span id="cb1-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># aus der Tilemap des mit pget() identifizierten Tiles zurück</span></span>
<span id="cb1-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> pyxel.tilemaps[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].pget(tile_x, tile_y)</span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Player:</span>
<span id="cb1-14">    </span>
<span id="cb1-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, _x, _y):</span>
<span id="cb1-16">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>TS</span>
<span id="cb1-17">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>TS</span>
<span id="cb1-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TS</span>
<span id="cb1-19">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.u <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Die x-Position des Sprites in der Imagebank</span></span>
<span id="cb1-20">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Die y-Position des Sprites in der Imagebank</span></span>
<span id="cb1-21">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.imagebank <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-22">        </span>
<span id="cb1-23">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> move(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (pyxel.btnp(pyxel.KEY_LEFT) </span>
<span id="cb1-25">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> get_tile((<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> TS)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>TS, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>TS) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> WALLS):            </span>
<span id="cb1-26">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> TS</span>
<span id="cb1-27">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> (pyxel.btnp(pyxel.KEY_RIGHT)</span>
<span id="cb1-28">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> get_tile((<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> TS)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>TS, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>TS) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> WALLS):</span>
<span id="cb1-29">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> TS</span>
<span id="cb1-30">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> (pyxel.btnp(pyxel.KEY_UP)</span>
<span id="cb1-31">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> get_tile(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>TS, (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> TS)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>TS) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> WALLS):</span>
<span id="cb1-32">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> TS</span>
<span id="cb1-33">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> (pyxel.btnp(pyxel.KEY_DOWN)</span>
<span id="cb1-34">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> get_tile(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>TS, (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> TS)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>TS) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> WALLS):</span>
<span id="cb1-35">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> TS</span>
<span id="cb1-36"></span>
<span id="cb1-37"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> App:</span>
<span id="cb1-38">    </span>
<span id="cb1-39">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-40">        pyxel.init(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>TS, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>TS, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pyxel Tutorial Stage 3"</span>, display_scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb1-41">        pyxel.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"assets/ressources.pyxres"</span>)</span>
<span id="cb1-42">        </span>
<span id="cb1-43">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialisiere den Spieler</span></span>
<span id="cb1-44">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Position in Map-Koordinaten</span></span>
<span id="cb1-45">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Player(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-46">        </span>
<span id="cb1-47">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> run(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-48">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(get_tile(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<span id="cb1-49">        pyxel.run(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.update, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.draw)</span>
<span id="cb1-50">        </span>
<span id="cb1-51">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-52">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player.move()</span>
<span id="cb1-53">    </span>
<span id="cb1-54">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-55">        pyxel.cls(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-56">        </span>
<span id="cb1-57">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Zeichen die Map</span></span>
<span id="cb1-58">        pyxel.bltm(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>TS, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>TS, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-59">        </span>
<span id="cb1-60">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Zeichne den Player</span></span>
<span id="cb1-61">        pyxel.blt(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player.imagebank,</span>
<span id="cb1-62">                  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player.u, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player.v, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.player.h,</span>
<span id="cb1-63">                  COLKEY)</span>
<span id="cb1-64">        </span>
<span id="cb1-65">App().run()</span></code></pre></div>
<p>Und da ich dieses Mal unterschiedliche Tiles für die Hindernisse genutzt habe, habe ich ihre Koordinaten aus der Ressourcendatei in der Liste <code>WALLS[]</code> abgelegt (bei mir sind daher auch Bäume »Mauern«). Die erste Position des Tupels ist die Spalte des entsprechenden Tiles und die zweite Position die Reihe:</p>
<p><a href="https://www.flickr.com/photos/schockwellenreiter/54445386720/"><img src="https://kantel.github.io/posts/2025041103_pyxel_tut_3/images/pyxeleditor.jpg" class="img-fluid"></a></p>
<p>Wie Ihr dem Screenshot entnehmen könnt, hat daher die grüne Hintergrundkachel (<strong>kein</strong> Hindernis) die Position <img src="https://latex.codecogs.com/png.latex?(0,%200)"> (erste Kachel in der ersten Reihe) und das Wasser (Hindernis) die Position <img src="https://latex.codecogs.com/png.latex?(3,%200)"> (vierte Kachel in der ersten Reihe), der Baum (ebenfalls ein Hindernis) hingegen die Position <img src="https://latex.codecogs.com/png.latex?(3,%201)"> (vierte Kachel in der zweiten Reihe) – die Zählung beginnt jeweils bei Null. Die gewünschte Position wird abgefragt und der Player darf sich nur dahin bewegen, wenn das Teil <strong>kein</strong> Hindernis (<code>not in WALLS</code>) ist. Die Pixelkoordinaten werden mit Hilfe der Division durch die Kachelgröße (<code>(pixel_x//TS), (pixel_y//TS)</code>) in die Map-Koordinaten umgerechnet.</p>
<p>Da ich durch mühsame Experimente nun herausgefunden habe, wie bei Pyxel die Umrechnung von Map-Koordinaten in Pixel-Koordinaten funktioniert, hoffe ich, daß ich nun auch in microStudio herausfinde, wie die Map-Koordinaten in Pixel-Koordinaten umgerechnet werden (hier schwimme ich leider immer noch, aber es scheint auch um einiges komplizierter zu sein).</p>
<p>Das Einbinden der HTML-Version in diese Seiten habe ich ebenfalls mit einer neuen Methode bewerkstelligt (die ich <a href="https://github.com/kitao/pyxel/blob/main/docs/pyxel-web-en.md">hier gefunden</a> hatte): Zuerst habe ich im Terminal mit</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pyxel</span> package APP_DIR STARTUP_SCRIPT_FILE</span></code></pre></div>
<p>eine Pyxel-Standalone-App erzeugt, die mit</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pyxel</span> play PYXEL_APP_FILE</span></code></pre></div>
<p>aufgerufen werden kann und diese dann mit</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pyxel</span> app2html your_app.pyxapp</span></code></pre></div>
<p>in eine HTML-Datei gewandelt. Das Ergebnis ist zwar erstaunlich kompakt (trotz BASE64-Codierung), ruft aber leider immer noch die Webversion von Pyxel über ein CDN auf.</p>
<p>Mit</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pyxel</span> app2exe your_app.pyxapp</span></code></pre></div>
<p>kann übrigens auch eine Standalone-Runtime Eures Betriebssystems aus der Pyxel-Python-Datei erteugt werden.</p>
<p>Den <a href="https://github.com/kantel/pyxel/tree/main/nightinpark">Quellcode und alle Assets</a> inklusive der <code>.pixapp</code> und der daraus erzeugten HTML-Datei findet Ihr in meinem GitHub-Repositorium, damit Ihr ebenfalls damit experimentieren könnt.</p>
<p>Jetzt bin ich hin- und hergerissen: Soll ich mit Pyxel erst einmal weiter experimentieren oder soll ich zu microStudio zurückkehren? Das Spielen mit Pyxel macht mir Spaß und speziell mit dem Ressourceneditor möchte ich noch einiges anstellen (so gefällt mir die <a href="http://cognitiones.kantel-chaos-team.de/multimedia/farbpaletten/pyxelpal.html">Default-Farbpalette</a> nicht, ich würde sie gerne entweder durch die <a href="http://cognitiones.kantel-chaos-team.de/multimedia/farbpaletten/pico8.html">Pico-8 Farbpalette</a> oder die <a href="http://cognitiones.kantel-chaos-team.de/multimedia/farbpaletten/sweetie16.html">TIC-80 Farbpalette</a> ersetzen). Ich habe auch schon testweise dem Player-Sprite eine Animation verpasst.</p>
<p>Außerdem gefällt mir, daß Pyxel einerseits so retromäßig eingeschränkt daherkommt (denn wie ich in diesem Zusammenhang <a href="http://blog.schockwellenreiter.de/2018/08/2018080802.html">schon 2018 schrieb</a>: In der Beschränkung liegt die Kraft!), aber auf der anderen Seite fast das vollständige Python&nbsp;3-Ökosystem genutzt werden kann. Ich muß daher noch ein wenig nachdenken und vermutlich auch experimentieren. <em>Still digging!</em></p>



 ]]></description>
  <category>Pyxel</category>
  <category>Python</category>
  <category>Retrogaming</category>
  <category>Spieleprogrammierung</category>
  <guid>https://kantel.github.io/posts/2025041103_pyxel_tut_3/</guid>
  <pubDate>Fri, 11 Apr 2025 15:45:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025041103_pyxel_tut_3/images/pyxel3.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Microsoft veröffentlicht Update 16.95.4 für Office for Mac</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025041102_loffice_update/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54356571833/"><img src="https://kantel.github.io/posts/2025041102_loffice_update/images/officelady-b.jpg" class="img-fluid"></a></p>
<p>Microsoft liefert mit dem <a href="https://docs.microsoft.com/en-us/officeupdates/release-notes-office-for-mac">Update auf 16.95.4 für Office 365, 2021 und 2024 for Mac</a> natürlich auch wieder aktuelle Sicherheitskorrekturen.</p>
<p>Sofern Office nicht schon von sich aus darauf hinweist, erhält man die Korrekturen am einfachsten über Microsofts AutoUpdate – in einem beliebigen Office-Programm über Menü: <code>Hilfe &gt; Auf Updates überprüfen</code>.</p>
<p><strong>Wichtig zu beachten</strong>: Microsoft Office unterstützt stets nur die drei Hauptversionen von macOS. <a href="https://support.microsoft.com/de-de/office/aktualisieren-sie-macos-um-weiterhin-microsoft-365-und-office-f%C3%BCr-mac-updates-zu-erhalten-16b8414f-08ec-4b24-8c91-10a918f649f8">Momentan sind dies Sequoia, Sonoma und Ventura</a>. <em>(Mein <a href="https://wwwuser.gwdguser.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54356571833/">Office Woman</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>Colored French Comic Style. A sexy young woman with long red hair, green eyes and red lipstick is sitting in an office at a desk in front of a monitor and a keyboard. She is wearing a white, open blouse with a low neckline and a rust-colored vest. She has a pencil in one hand. On the desk is an open notepad, a cup with writing utensils and a stack of books. There are shelves on the walls with many more books and files. The spring sun is shining through a window in the background</em>«. Modell: Flux (Pro), Style: None.</p>



 ]]></description>
  <category>Produktivität</category>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2025041102_loffice_update/</guid>
  <pubDate>Fri, 11 Apr 2025 14:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025041102_loffice_update/images/officelady.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Auf der Suche nach dem Frühling</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025041101_fruehling/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54443919900/"><img src="https://kantel.github.io/posts/2025041101_fruehling/images/fruehling-b.jpg" class="img-fluid"></a></p>
<p>Gestern auf dem Neuköllner <a href="https://evfbs.de/start/friedhoefe/region-sued/einzeldarstellung/emmaus/kurzportraet">Emmaus-Friedhof</a> an der Hermannstraße.</p>
<hr>
<p><strong>Photo</strong> (<a href="http://creativecommons.org/licenses/by-nc-nd/2.0/">cc</a>) 2025: <em><a href="http://cognitiones.kantel-chaos-team.de/cv.html">Jörg Kantel</a></em></p>



 ]]></description>
  <category>Neukölln</category>
  <category>Neuköllner Bilderbogen</category>
  <category>Parks und Gärten</category>
  <category>Photographie</category>
  <guid>https://kantel.github.io/posts/2025041101_fruehling/</guid>
  <pubDate>Fri, 11 Apr 2025 14:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025041101_fruehling/images/fruehling.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Cute Planet mit microStudio</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025040901_cute_planet/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54440578971/"><img src="https://kantel.github.io/posts/2025040901_cute_planet/images/octopussy-b.jpg" class="img-fluid"></a></p>
<p>Ich scheine besessen von den scheinbar endlos scrollenden Hintergründen in Spielen zu sein. So besessen, daß ich mit <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/microstudio.html">microStudio</a> (und Python/<a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/brython.html">Brython</a> als Programmiersprache) noch ein neues Experiment gestartet habe – dieses Mal mit einem »echten« endlos scrollenden Hintergrund.</p>
<p>Denn dieses Mal lasse ich den Hintergrund (einen Sternenhimmel) ebenfalls von microStudio erzeugen und der Zufallszahlengenerator setzt die Sterne jedesmal an eine andere Position, so daß es keine Wiederholungen gibt.</p>
<p>Doch zuerst einmal braucht jedes Spiel eine Geschichte: Octopussy hat auf einer entlegenen Raumstation monatelang Forschungsarbeiten betrieben und ist nun auf dem Rückflug nach Hause. Leider hat Ihr Raumschiff einen Defekt (der Motor stottert) und lässt sich nur noch schwer steuern. Das haben die bösen Space-Beetles und Rocket-Boys mitbekommen und wollen Octopussys Raumkrake zerstören. Octopussy muß also auf ihrem Heimflug den feindlichen Raumschiffen ausweichen.</p>
<iframe src="cuteplanet/index.html" class="if16_9" name="Cute Planet (v1)">
</iframe>
<p><em>Mit der [SPACE]-Taste kann das Rumschiff »gesteuert« werden.</em></p>
<p>Das ist die Geschichte, nun der Code für den endlos scrollenden Sternenhimmel, mit dem alles angefangen hat. Dafür habe ich die Klasse <code>Star</code> geschrieben:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> randint</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Star:</span>
<span id="cb1-4">  </span>
<span id="cb1-5">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-6">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb1-7">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(screen.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(screen.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb1-8">    size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb1-9">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> size, size</span>
<span id="cb1-10">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span></span>
<span id="cb1-11">    </span>
<span id="cb1-12">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> reset(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-13">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w</span>
<span id="cb1-14">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(screen.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(screen.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb1-15">    </span>
<span id="cb1-16">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-17">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dx</span>
<span id="cb1-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w:</span>
<span id="cb1-19">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.reset()</span>
<span id="cb1-20">  </span>
<span id="cb1-21">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-22">    screen.fillRound(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(255, 239, 0)"</span>)</span></code></pre></div>
<p>Jeder Stern wird mit einer zufälligen Größe an eine zufällig ausgewählte Position innerhalb des Fensters gesetzt und bewegt sich langsam nach links. Hat er links das Fenster wieder verlassen, wird er rechts außerhalb des Fensters erneut positioniert. Dabei wird seine vertikale Position wieder neu vom Zufallszahlengenerator gesetzt, so daß keine Wiederholung erkennbar ist.</p>
<p>Etwas seltsam ist das Casting auf <code>int()</code> innerhalb des Constructors. Denn eigentlich sollte die Integer-Division (<code>//</code>) einen Integerwert herausschreiben, aber in microStudio ergibt <code>screen.width//2</code> den Float-Wert <img src="https://latex.codecogs.com/png.latex?178.0"> und damit kommt <code>randint()</code> natürlich nicht klar. <code>screen.height//2</code> gibt mir hingegen ein korrektes <img src="https://latex.codecogs.com/png.latex?100"> heraus, aber sicherheitshalber habe ich auch dieses mit <code>int()</code> gecastet.</p>
<p>Ansonsten ist das Spiel dem <a href="https://kantel.github.io/posts/2025033102_pizzaplane_v1_microstudio/">Pizza-Flieger</a> sehr ähnlich, nur daß Octopussys Raumkrake einer <a href="https://de.wikipedia.org/wiki/Flappy_Bird">Flappy Bird</a> ähnlichen Mechanik folgt: Die Raumkrake schwebt aufgrund ihres Defektes langsam nach unten und nur wenn der Spieler die [SPACE]-Taste drückt, hüpft sie wieder ein wenig nach oben. Dies wird in der Klasse <code>Octopussy</code> realisiert:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Octopussy:</span>
<span id="cb2-2">  </span>
<span id="cb2-3">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-4">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">140</span></span>
<span id="cb2-5">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span></span>
<span id="cb2-6">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span> </span>
<span id="cb2-7">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"octopussy"</span></span>
<span id="cb2-8">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.velocity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-9">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gravity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span></span>
<span id="cb2-10">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lift <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span></span>
<span id="cb2-11"></span>
<span id="cb2-12">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-13">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.velocity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gravity</span>
<span id="cb2-14">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.velocity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.85</span></span>
<span id="cb2-15">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.velocity</span>
<span id="cb2-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> check_input(keyboard.press, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SPACE"</span>):</span>
<span id="cb2-17">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.velocity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lift</span>
<span id="cb2-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check border</span></span>
<span id="cb2-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> screen.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:</span>
<span id="cb2-20">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> screen.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>screen.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:</span>
<span id="cb2-22">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>screen.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-23"></span>
<span id="cb2-24">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-25">    screen.drawSprite(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h)</span>
<span id="cb2-26">    </span>
<span id="cb2-27"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> check_input(obj, val):</span>
<span id="cb2-28">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">hasattr</span>(obj, val):</span>
<span id="cb2-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> obj[val] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-30">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span></code></pre></div>
<p>Die Kraft, die die Raumkrake nach unten zieht, habe ich <code>gravity</code> genannt<sup>1</sup>. Und damit das Schiff, wenn es durch die Betätigung der [SPACE]-Taste nach oben geschleudert wird, nicht im Nirwana verschwindet, wird die <em>velocity</em> durch die Multiplikation mit einem Reibungsfaktor (in meinem Fall <img src="https://latex.codecogs.com/png.latex?0.85"><sup>2</sup>) abgebremst, bis sie die Raumkrake wieder nach unten zieht.</p>
<p>Die Klasse <code>Spaceship</code> für die bösen Buben ist nahezu identisch mit der Klasse <code>Enemy</code> (für die gefährlichen Pizzen) des <a href="https://kantel.github.io/posts/2025033102_pizzaplane_v1_microstudio/">Pizza-Fliegers</a>:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> uniform, randint, choice</span>
<span id="cb3-2"></span>
<span id="cb3-3">ship_images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"beetleship"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"beetleship"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rocketship"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"planet"</span>]</span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Spaceship():</span>
<span id="cb3-6">  </span>
<span id="cb3-7">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-8">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span></span>
<span id="cb3-9">    </span>
<span id="cb3-10">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.reset()</span>
<span id="cb3-11">    </span>
<span id="cb3-12">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> reset(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-13">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>)</span>
<span id="cb3-14">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb3-15">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> choice(ship_images)</span>
<span id="cb3-16">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.speed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> uniform(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>)</span>
<span id="cb3-17">    </span>
<span id="cb3-18">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-19">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.speed</span>
<span id="cb3-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check Border</span></span>
<span id="cb3-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w:</span>
<span id="cb3-22">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.reset()</span>
<span id="cb3-23">      </span>
<span id="cb3-24">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-25">    screen.drawSprite(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h)</span></code></pre></div>
<p>Nur, daß mit <code>random.choice()</code> unterschiedliche Gegner aus der Liste <code>ship_images[]</code> ausgewählt werden<sup>3</sup>. Daß <code>beetleship</code> zweimal in der Liste auftaucht, ist kein Fehler – ich wollte dadurch erreichen, daß der Marienkäfer-Bubbi häufiger im Spiel erscheint, als die anderen Figuren.</p>
<p>Das Hauptprogramm ist durch die Nutzung von Klassen wieder erfreulich kurz geraten:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1">NUM_STARS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb4-2">NUM_ENEMIES <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb4-3"></span>
<span id="cb4-4">stars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb4-5">spaceships <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> init():</span>
<span id="cb4-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(NUM_STARS):</span>
<span id="cb4-9">    stars.append(Star())</span>
<span id="cb4-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(NUM_ENEMIES):</span>
<span id="cb4-11">    spaceships.append(Spaceship())</span>
<span id="cb4-12">  octopussy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Octopussy()</span>
<span id="cb4-13">  spaceships.append(octopussy)</span>
<span id="cb4-14">  </span>
<span id="cb4-15"></span>
<span id="cb4-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update():</span>
<span id="cb4-17">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> star <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> stars:</span>
<span id="cb4-18">    star.update()</span>
<span id="cb4-19">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ship <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> spaceships:</span>
<span id="cb4-20">    ship.update()</span>
<span id="cb4-21"></span>
<span id="cb4-22"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw():</span>
<span id="cb4-23">  screen.clear(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(0, 80, 125"</span>)</span>
<span id="cb4-24">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> star <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> stars:</span>
<span id="cb4-25">    star.draw()</span>
<span id="cb4-26">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ship <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> spaceships:</span>
<span id="cb4-27">    ship.draw()</span></code></pre></div>
<p>Dadurch, daß ich <code>octopussy</code> auch mit in die Liste <code>spaceships[]</code> aufgenommen habe, konnte ich vermeiden, die Variable <code>octopussy</code> als <code>global</code> deklarieren zu müssen.</p>
<p>Die verwendeten Sprites sind nicht von mir (mir wurde leider kein Zeichenstift mit in die Wiege gelegt), sondern stammen aus der Sammlung »<a href="https://lostgarden.com/2007/04/07/spacecute-first-round-of-prototypes-and-new-graphics/">Space Cute</a>« von <em><a href="https://lostgarden.home.blog/">Daniel Cook</a></em>, die er unter einer <em>Creative Commons Licence</em> (<a href="https://creativecommons.org/licenses/by/3.0/us/">CC BY 3.0 US</a>) freigegeben hat. <a href="https://lostgarden.com/2007/03/15/lost-garden-license/">Diese Lizenz</a> (und der Anstand) verlangen die Namensnennung des Urhebers. Dem bin ich hiermit nachgekommen.</p>
<p>Wie immer habe ich auch dieses Skript auf den <a href="https://microstudio.io/i/kantel/cuteplanet/">Seiten von microStudio veröffentlicht</a>, damit Ihr es klonen, erweitern oder einfach nur damit herumspielen könnt.</p>
<p>Und unter <a href="https://kantel.github.io/#category=microStudio">diesem</a> Link könnt Ihr Euch alle bisher im <em>Schockwellenreiter</em> erschienenen Beiträge zu microStudio anzeigen lassen.</p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Fußnoten</h2>

<ol>
<li id="fn1"><p>Ja, ich weiß, daß es im Weltall keine Gravitation gibt, aber hey, das ist mein Spiel und da bestimme ich die Regeln!↩︎</p></li>
<li id="fn2"><p>Mit diesem Wert, genau wie mit den Werten für <code>gravity</code> und <code>lift</code>, könnt Ihr spielen.↩︎</p></li>
<li id="fn3"><p>Der kleine grüne Planet ist eigentlich kein Gegner. In einer späteren Version des Spieles soll er als <em>Power Up</em> fungieren, der Octopussy wieder neue Lebenspunkte gibt.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>microStudio</category>
  <category>Python</category>
  <category>Brython</category>
  <category>Spieleprogrammierung</category>
  <guid>https://kantel.github.io/posts/2025040901_cute_planet/</guid>
  <pubDate>Wed, 09 Apr 2025 11:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025040901_cute_planet/images/octopussy.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Google korrigiert wieder kritische Sicherheitslücken in Chrome</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025040802_chrome_update/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54370075273/"><img src="https://kantel.github.io/posts/2025040802_chrome_update/images/octopussy-b.jpg" class="img-fluid"></a></p>
<p>Das Mittwochs-Update kommt gewiß, auch wenn es schon am Dienstag ist: Unser aller Datenkrake Google veröffentlichte das Update der Version 135 (135.0.7049.84/85) seines Browsers Chrome und schloss damit <a href="https://chromereleases.googleblog.com/2025/04/stable-channel-update-for-desktop_8.html">kritische Sicherheitslücken</a>.</p>
<p>Chrome aktualisiert sich (außer bei Linux) über die integrierte Update-Funktion, kann aber – wenn es pressiert – auch <a href="https://www.google.com/intl/de/chrome/browser/">hier geladen</a> werden. <em>(Mein <a href="https://wwwuser.gwdguser.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54370075273/">Octopussy</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>Colored french comic style, a sexy female robot evades from a gigantic data octopus</em>«. Modell: Flux (Pro), Style: None.</p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2025040802_chrome_update/</guid>
  <pubDate>Tue, 08 Apr 2025 19:05:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025040802_chrome_update/images/octopussy.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Google schließt am »April-Patchday« wieder Sicherheitslücken in Android</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025040801_android_update/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54438121257/"><img src="https://kantel.github.io/posts/2025040801_android_update/images/robot-b.jpg" class="img-fluid"></a></p>
<p>Google hat mit seinem monatlichen <a href="https://source.android.com/docs/security/bulletin/2025-04-01">Sicherheitsupdate für Android</a> (und damit auch auf seinen <a href="https://source.android.com/docs/security/bulletin/pixel/2025-04-01">Pixel-Geräten</a>) wieder Sicherheitslücken geschlossen. Einige davon werden offenbar bereits ausgenutzt, so daß ein Update dringend empfehlenswert ist.</p>
<p>Die Updates werden so nach und nach per OTA <em>(over the air)</em> auf Pixel 9, 9 pro, 9 pro XL, Pixel 8a, Pixel 8/8 pro, Pixel Tablet, Pixel Fold, Pixel 7a, Pixel 7/7 pro, Pixel 6a und Pixel 6/6 pro verteilt.</p>
<p>Die anderen Hersteller werden wie üblich in Bälde nachziehen, sofern sie überhaupt noch entsprechenden Support leisten. <em>(Mein <a href="https://wwwuser.gwdguser.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54438121257/">A Robot in Dystopia</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>Colored french comic style. Illustration of a small green robot looking at his mobile phone in his hand. He is standing on a street in a run-down dystopian city with some car wrecks, the sun is shining</em>«. Modell: Flux.1 (Dev), Style: PixelWave.</p>



 ]]></description>
  <category>Android</category>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2025040801_android_update/</guid>
  <pubDate>Tue, 08 Apr 2025 16:40:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025040801_android_update/images/robot.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Frauen am Kontrabaß: Die Kim-Sisters haben Fieber</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025040701_kim_sisters/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54437153250/"><img src="https://kantel.github.io/posts/2025040701_kim_sisters/images/kimsisters-b.jpg" class="img-fluid"></a></p>
<p>Die <a href="https://en.wikipedia.org/wiki/The_Kim_Sisters">Kim Sisters</a> waren eine weibliche Gesangsgruppe aus Südkorea, die in den 1950er und 1960er Jahren in den Vereinigten Staaten einige Erfolge feierten. Sie begannen ihre Karriere im Jahre 1953 schon als Kinder, als sie im Koreakrieg zur Unterhaltung US-Amerikanischer Soldaten auftraten. Ihre Eltern waren <em>Lee Nan-young</em>, eine berühmte koreanische Sängerin und <em>Kim Hae-song</em>, ein populärer Dirigent, der im Koreakrieg starb.</p>
<p>Sie erhielten schon früh eine musikalische Ausbildung, um mit ihren Aufgtrtitten vor den Soldaten zum Familienunterhalt beizutragen. Sie waren nicht nur Sängerinnen und Tänzerinnen, sondern auch Multi-Instrumentalistinnen, von denen mindestens eine auch den Kontrabaß virtuos beherrschte, wie das Video unten zeigt, in dem sie den durch <a href="https://zeitlupe.ch/panorama/kultur/musik/fever-von-peggy-lee/"><em>Peggy Lee</em> bekanntgewordenen Klassiker »Fever«</a> hinreissend interpretieren:</p>
<iframe class="if16_9" src="https://www.youtube.com/embed/qE8vPoq8AfY?si=mRY7obdDwfSj9sOQ" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p>Der <a href="https://www.youtube.com/watch?v=qE8vPoq8AfY">Videomitschnitt</a> stammt aus der <em>Ed Sullivan Show</em> vom 10. Januar 1965, daher entschuldigt bitte die bescheidene Bildqualität.</p>
<p>Das Trio bestand aus Sook-ja »Sue«, Ai-ja »Aija« und Min-ja »Mia« Kim, das nicht nur als eine der ersten Girl-Groups gilt, sondern auch als Vorreiter des <a href="https://de.wikipedia.org/wiki/K-Pop">K-Pop</a>, wie es <em>Melody Knox</em> in ihrem informativen Video »<a href="https://www.youtube.com/watch?v=buhXGuBLnho">How The Kim Sisters Brought K-Pop to America</a>« erläutert:</p>
<iframe class="if16_9" src="https://www.youtube.com/embed/buhXGuBLnho?si=vHwqSmOCYxLuuJ6B" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p>Sie geht darin auch auf den Rassismus ein, unter dem nicht nur die Musikerinnen, sondern viele Amerikanerinnen und Amerikaner asiatischer Herkunft leiden mussten. Und – leider meistens eine Ausnahme bei YouTube-Videos – sie benennt im Begleittext ihre Quellen. Daher habe ich den <a href="https://www.youtube.com/@melodyknoxyt">Kanal von ihr</a> auch gleich abonniert.</p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54437153250/">The Kim Sisters</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>Colored french comic style. A girl band of three young Korean women on a show stage sing a hit song. They play double bass, saxophone, and electric guitar. They are wearing a Korean hanbok</em>«. Modell: Flux (Pro), Style: None.</p>



 ]]></description>
  <category>Musik</category>
  <guid>https://kantel.github.io/posts/2025040701_kim_sisters/</guid>
  <pubDate>Mon, 07 Apr 2025 17:35:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025040701_kim_sisters/images/kimsisters.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Google korrigiert wieder kritische Sicherheitslücken in Chrome</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025040203_chrome_update/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54369803956/"><img src="https://kantel.github.io/posts/2025040203_chrome_update/images/octopussy-b.jpg" class="img-fluid"></a></p>
<p>Zwar ist es schon spät, aber es ist immer noch Mittwoch, und Mittwochs aktualisiert (in der Regel) unser aller Datenkrake ihr Flaggschiff: Google veröffentlicht das Update der <a href="https://stadt-bremerhaven.de/chrome-135-ist-da-und-bringt-sicherheitsupdates-mit/">Version 135 (135.0.7049.41/42/52) seines Browsers Chrome</a> und schließt damit wieder <a href="https://chromereleases.googleblog.com/2025/04/stable-channel-update-for-desktop.html">kritische Sicherheitslücken</a>.</p>
<p>Chrome aktualisiert sich (außer bei Linux) über die integrierte Update-Funktion, kann aber – wenn es pressiert – auch <a href="https://www.google.com/intl/de/chrome/browser/">hier geladen</a> werden. <em>(Mein <a href="https://wwwuser.gwdguser.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54369803956/">Octopussy</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>Colored french comic style, a sexy female robot evades from a gigantic data octopus</em>«. Modell: Flux.1 (Pro), Style: None.</p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2025040203_chrome_update/</guid>
  <pubDate>Wed, 02 Apr 2025 19:55:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025040203_chrome_update/images/octopussy.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Mozilla Thunderbird Version 137.0 freigegeben</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025040202_thunderbird_update/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54426720921/"><img src="https://kantel.github.io/posts/2025040202_thunderbird_update/images/thunderbird-b.jpg" class="img-fluid"></a></p>
<p>Dieses Mal hat sich der Donnervogel <a href="https://kantel.github.io/posts/2025033101_firefox_update/">zwei Tage Zeit gelassen</a>, bevor er den Feuerfuchs jagte: Die Entwickler des <a href="http://www.mozillamessaging.com/">Mozilla Thunderbird</a> haben das Update auf die Version 137.0 freigegeben und damit auch <a href="https://www.thunderbird.net/en-US/thunderbird/137.0/releasenotes/">Sicherheitslücken behoben</a>.</p>
<p>Thunderbird weist selbst auf dieses Update hin. Diese Prozedur kann aber auch wie immer über das Menü <code>Hilfe &gt; Über Thunderbird</code> angestoßen werden. <em>(Mein <a href="https://wwwuser.gwdguser.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54426720921/">Thunderbird hunts Firefox</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>Colored DC Comic style, illustration of a majestic thunderbird with colored feathers soaring above a mountain range during a bright sunset, hunting a red firefox</em>«. Modell: Flux.1 (Dev), Style: PixelWave.</p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2025040202_thunderbird_update/</guid>
  <pubDate>Wed, 02 Apr 2025 19:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025040202_thunderbird_update/images/thunderbird.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Apple veröffentlicht watchOS 11.4</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2025040201_apple_update_nachschlag/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/54424039170/"><img src="https://kantel.github.io/posts/2025040201_apple_update_nachschlag/images/applewatch-b.jpg" class="img-fluid"></a></p>
<p>Der IT-Riese aus Cupertino hat die beim <a href="https://kantel.github.io/posts/2025040102_apple_updates/">gestrigen Flickentag</a> fehlende Aktualisierung seiner Uhr heute nachgeliefert: Apple hat für die Apple Watch nun auch <a href="https://support.apple.com/en-us/122376">watchOS 11.4 bereitgestellt</a> und bietet damit im wesentlichen Fehlerbehebungen.</p>
<p>Die Aktualisierung wird über die Apple-Watch-App auf dem iPhone gestartet unter <code>Allgemein &gt; Softwareupdate</code>. Dabei sollte sich die Uhr in Reichweite des iPhones befinden, mit dem Ladekabel verbunden und mindestens zu 50 Prozent geladen sein. <em>(Mein <a href="https://wwwuser.gwdguser.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/54424038415/">Zauberapfel im Zauberwald</a></em>, erstellt mit <a href="https://openart.ai/home">OpenArt.ai</a>. Prompt: »<em>Colored DC Comic style, a mad hatter gives a sexy naked woman, with big boops, and a nice butt an apple in the summer enchanted forest</em>«. Modell: Flux.1 (Dev), Style: PixelWave.</p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2025040201_apple_update_nachschlag/</guid>
  <pubDate>Wed, 02 Apr 2025 18:55:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2025040201_apple_update_nachschlag/images/applewatch.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
