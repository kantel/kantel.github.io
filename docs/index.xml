<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Der Schockwellenreiter</title>
<link>https://kantel.github.io/index.html</link>
<atom:link href="https://kantel.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description>Schockwellenreiter</description>
<generator>quarto-1.2.269</generator>
<lastBuildDate>Fri, 13 Jan 2023 16:30:00 GMT</lastBuildDate>
<item>
  <title>Twine, Ren’py or Treat: Video-Tutorials am Freitag</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023011301_twine_renpy_or_treat/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://americanliterature.com/author/lewis-carroll/book/through-the-looking-glass/summary"><img src="https://kantel.github.io/posts/2023011301_twine_renpy_or_treat/images/humptydumptypeternewell-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Auch wenn ich an diesem Wochenende noch die objektorientierte Version <a href="https://kantel.github.io/posts/2023011001_pizzaplane_trailer/">meines kleinen Pizzafliegers</a> in <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a> fertigstellen möchte<sup>1</sup>, ist heute Freitag. Und Freitags gibt es nun einmal Video-Tutorials im <em>Schockwellenreiter</em>, damit Ihr über das Wochenende beschäftigt seid und Euch nicht etwa die Langeweile – was Gott behüten möge – in die Kirchen treibt.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/37IT-8GQNpM" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Wenn ich mit diesem Pizzaflieger fertig bin, möchte ich als erstes – wie schon <a href="https://kantel.github.io/posts/2023010601_twine_und_statische_seiten/">letzte Woche angekündigt</a> – wieder an meinem <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/twine2.html">Twine</a>-Universum basteln und mit Alice <a href="http://blog.schockwellenreiter.de/2022/09/2022090601.html">Ausflüge ins Wunderland</a> unternehmen. Dafür habe ich mir mit <a href="https://www.youtube.com/playlist?list=PLujRcYYssj76Q_seiXpXnXxzpj1fULa0s">Twine or Treat</a> eine weitere Playlist mit neun etwa zehnminütigen Videos (und einem Intro) zu Twine 2.3 und SugarCube 2.3.4. herausgesucht.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/uA1tEBUjrkg" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Neben Twine scharrt ja auch noch <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/renpy.html">Ren’Py</a> schon lange mit den Hufen und wartet darauf, daß ich mit <a href="https://kantel.github.io/posts/20221222201_renpy_app/">meiner kleinen Räuberpistole</a> weitermache. Dazu hat der regelmäßigen Lesern des <em>Schockwellenreiters</em> hinlänglich bekannte YouTube-Kanal <em>Game Developer Training</em> eine neue <a href="https://www.youtube.com/playlist?list=PLKdE0Vv4UA59nK0yYR1ryGrT3AtgdGYg5">Playlist zu Ren’Py und Python</a> gestartet. Bisher enthält sie gerade einmal zwei Videos, aber der letzte Upload ist erst wenige Tage alt. Das letztjährige <a href="https://www.youtube.com/playlist?list=PLKdE0Vv4UA59rd1g9ipzIlAklvfmH5cjE">Let’s Code 4</a> endete mit zwanzig Videos, daher erwarte ich Updates in etwa der gleichen Anzahl.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/gYodPl_wvzY" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Und <em>last but not least</em> hat der umtriebige <em>Len Pelletier</em> die Physik-Engine <a href="http://www.ricardmarxer.com/fisica/">Fisica</a> entdeckt, einen Wrapper um JBox2D, den <em>Ricard Marxer</em> für Processing entwickelt hat. In einer <a href="https://www.youtube.com/playlist?list=PL__Tph-7Dyp0d4_iUA_RBb5AwsRJxJv2u">zweiteiligen Playlist »Fisica Volleyball«</a> gibt er eine kurze Einführung in die Bibliothek um dann in »<a href="https://www.youtube.com/playlist?list=PL__Tph-7Dyp0yifP3b3-GZBz9TRW128xa">Making a Platformer in Processing with Fisica</a>« so richtig loszulegen. Bisher besteht diese Playlist aus neun Videos, aber auch hier ist das letzte Update erst wenige Tage alt, also mit weiteren Fortsetzungen zu rechnen<sup>2</sup>.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/WcIczCxcH2g" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p><strong>War sonst noch was?</strong> Ach ja, die <a href="https://www.youtube.com/playlist?list=PLGVZCDnMOq0p6o_fjjdNPqy1rps49z2S0">PyData Tel Aviv 2022</a> hat vorgestern ihre Playlist mit zwanzig hochinteressanten Vorträgen hochgeladen. Natürlich darf die in diesen Zeiten obligatorische <a href="https://www.youtube.com/watch?v=WcIczCxcH2g">Pandemie-Simulation</a> nicht fehlen.</p>
<p>Übrigens: Die <a href="https://2023.pycon.de/">PyCon DE &amp; PyData Berlin 2023</a> findet vom 17. bis 23. April im Berliner Congress Center am Alexanderplatz statt. <em>Save the Date!</em></p>
<p>Das Bannerbild oben stammt von <em><a href="https://de.wikipedia.org/wiki/Peter_Sheaf_Hersey_Newell">Peter Newell</a></em>, einem US-amerikanischer Kinderbuchautor, Illustrator und Comiczeichner. Er lebte von 1862 bis 1924 (ist also hinreichend lange tot, so daß seine Werke gemeinfrei sind) und war unter anderem einer der ersten, der eine amerikanische Ausgabe von <em>Alice im Wunderland</em> und <em><a href="https://commons.wikimedia.org/wiki/Category:Peter_Newell%27s_illustrations_of_Through_the_Looking-Glass_and_What_Alice_Found_There">Alice hinter den Spiegeln</a></em> illustrierte. Seine Zeichnungen sind ziemich schräg, er ist eine wunderbare Entdeckung und eine Bereicherung für meinen Wunderland-Kosmos<sup>3</sup>.</p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Fußnoten</h2>

<ol>
<li id="fn1"><p>Die Fassung, die ich gerade in Arbeit habe, komplettiert die Spiele-Mechanik, danach folgt – hoffentlich bald – »nur« noch der Feinschliff.↩︎</p></li>
<li id="fn2"><p>Notiz an mich: Testen, ob <em>fisica</em> auch mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/py5.html">Py5</a> spielt.↩︎</p></li>
<li id="fn3"><p>Daher wird <em>Peter Newell</em> im Feburar 2023 auch der »Künstler des Monats« in diesem <del>Blog</del> Kritzelheft werden.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Twine</category>
  <category>RenPy</category>
  <category>Processing</category>
  <category>Spieleprogrammierung</category>
  <category>Interactive Fiction</category>
  <guid>https://kantel.github.io/posts/2023011301_twine_renpy_or_treat/index.html</guid>
  <pubDate>Fri, 13 Jan 2023 16:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023011301_twine_renpy_or_treat/images/humptydumptypeternewell.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Wahlwiederholung 2023 – Die PARTEI</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023011201_briefwahl_2023/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52623142744/"><img src="https://kantel.github.io/posts/2023011201_briefwahl_2023/images/briefwahl2023-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Heute bin ich meiner staatsbürgerlichen Pflicht (so hieß das während meiner Schulzeit in den frühen 1960er Jahren im »Gemeinschaftskunde«-Unterricht in NRW) nachgekommen und habe die Chaos-Wahl vom letzten Jahr wiederholt. Die Briefwahlunterlagen kamen überraschend schnell: Montag lag die Wahlbenachrichtigung in unserem Briefkasten, noch am gleichen Tag haben wir per Email die Briefwahlunterlagen beim Neuköllner Bezirksamt angefordert und schon gestern, also am Mittwoch, kamem diese nach nur einem Tag bei uns an. Na bitte, wenn man sich nicht schon wieder zum Gespött der Leute machen will, dann geht es doch!</p>
<p>Blieb nur die Frage, wohin mit den Kreuzchen? Die Marktwirtschaftsterroristen von Rechts (also F.D.P. und CDU) sind für mich genauso unwählbar, wie die braune Kacke von der AfD. Und bei der SPD will eine Frau, die sich einen Doktortitel erschummelt hat, schamlos wieder Regierende Bürgermeisterin werden, statt sich in eine Ecke zu stellen und sich zu schämen. Und der damalige Innensenator, der die Wahl versemmelt hat, klebt auch noch an seinem Sessel und wird von seiner SPD dabei unterstützt.</p>
<p>Die Kriegstreiber von der grüntetünchten F.D.P. sind noch weniger wählbar als das Original. Martialische Ostlandritte, um die Ukraine »heim <del>ins Reich</del> in die EU zu holen, das können die Bellizisten von CDU und F.D.P. besser als die bündnisgrünen Kirchentagstanten mit ihrer mehr als eigenwilligen Interpretation des fünften Gebots.</p>
<p>Und die Linke? Nun, zumindest in Neukölln hat sie beschlossen, lieber Religioten und Salafisten in den Arsch zu kriechen (das hält sie nämlich für rassismusfreie Politik), als sich um die Interessen der arbeitenden Bevölkerung zu kümmern. So schnell kann der olle Marx gar nicht in seinem Grab rotieren, wie sie durch Shisha-Pfeifen das »Opium des Volkes« in sich reinzieht. Dafür hat sie zwar jüngst ein großes Lob von einer bekannten Neuköllner Clangröße bekommen, aber meine Stimme verloren.</p>
<p>Nein, da bleibt nur noch die PARTEI, denn sie hat nicht nur versprochen, keine Versprechen zu machen, sondern sich konsequent selbst an dieses Versprechen nicht zu halten. Von ihr ist also nichts zu erwarten, daher kann sie mich auch nicht enttäuschen. Und wenn viele andere von Euch mir bei dieser Wahlempfehlung folgen, dann sind vielleicht in der nächsten Legislaturperiode die Sitzungen im Abgeordnetenhaus und in den Bezirksparlamenten nicht mehr so stinklangweilig. Denn: Die PARTEI, die PARTEI, die hat immer Recht!</p>
<p><b style="color:red">[Upadate]</b>: Mein Lob für das Neuköllner Bezirksamt kam zu früh, wie der RBB gerade berichtet, gibt es eine neue Panne bei der Wiederholungswahl: <a href="https://www.rbb24.de/politik/wahl/abgeordnetenhaus/agh-2023/beitraege/wahlpanne-fdp-neukoelln-stimmzettel-kandidat-weggezogen.html">Auf Wahlzetteln in Berlin-Neukölln steht ein nicht wählbarer FDP-Kandidat</a>. Wer will, darf die Briefwahl wiederholen und sich dabei als F.D.P.-Wähler outen.</p>
<p><em>(Photo (<a href="http://creativecommons.org/licenses/by-nc-nd/2.0/">cc</a>): Jörg Kantel)</em></p>



 ]]></description>
  <category>Neukölln</category>
  <category>Failed State Berlin</category>
  <guid>https://kantel.github.io/posts/2023011201_briefwahl_2023/index.html</guid>
  <pubDate>Thu, 12 Jan 2023 16:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023011201_briefwahl_2023/images/briefwahl2023.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Sicherheitsupdate für Adobe Reader und Acrobat</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023011102_neues_jahr_neues_update_2/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://upload.wikimedia.org/wikipedia/commons/thumb/8/80/Happy_Hooligan_1906_New_Year_postcard.jpg/1024px-Happy_Hooligan_1906_New_Year_postcard.jpg"><img src="https://kantel.github.io/posts/2023011102_neues_jahr_neues_update_2/images/happyhooligan1906-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Adobe liefert wieder Korrekturen für Sicherheitslücken im Reader und in Acrobat (unter Windows und Mac). <a href="https://helpx.adobe.com/security/products/acrobat/apsb23-01.html">Näheres dazu</a> findet sich auch hier.</p>
<p>Das Update gelingt am einfachsten über den internen Update-Mechanismus. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<p><em>(Bildquelle: <a href="https://commons.wikimedia.org/wiki/File:Happy_Hooligan_1906_New_Year_postcard.jpg">Wikimedia Commons</a>)</em></p>



 ]]></description>
  <category>News</category>
  <guid>https://kantel.github.io/posts/2023011102_neues_jahr_neues_update_2/index.html</guid>
  <pubDate>Wed, 11 Jan 2023 17:10:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023011102_neues_jahr_neues_update_2/images/happyhooligan1906.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Google korrigiert wieder Sicherheitslücken in Chrome</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023011101_neues_jahr_neue_update/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://upload.wikimedia.org/wikipedia/commons/thumb/4/4b/Caricatures_of_William_Randolph_Hearst_detail%2C_from-_Friend_of_the_Comic_People_1906_%28cropped%29.jpg/1188px-Caricatures_of_William_Randolph_Hearst_detail%2C_from-_Friend_of_the_Comic_People_1906_%28cropped%29.jpg"><img src="https://kantel.github.io/posts/2023011101_neues_jahr_neue_update/images/friendofcomics-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Google veröffentlicht ein neues Update der Version 109 (109.0.5414.74/75/87) seines Browsers Chrome und schließt erneut kritische <a href="https://chromereleases.googleblog.com/2023/01/stable-channel-update-for-desktop.html">Sicherheitslücken</a>.</p>
<p>Chrome aktualisiert sich (außer bei Linux) über die integrierte Update-Funktion, kann aber – wenn es pressiert – auch <a href="https://www.google.com/intl/de/chrome/browser/">hier geladen</a> werden. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<p><em>(Bildquelle: <a href="https://commons.wikimedia.org/wiki/File:Caricatures_of_William_Randolph_Hearst_detail,_from-_Friend_of_the_Comic_People_1906_(cropped).jpg">Wikimedia Commons</a>)</em></p>



 ]]></description>
  <category>News</category>
  <guid>https://kantel.github.io/posts/2023011101_neues_jahr_neue_update/index.html</guid>
  <pubDate>Wed, 11 Jan 2023 16:50:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023011101_neues_jahr_neue_update/images/friendofcomics.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Pizza Plane Trailer</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023011001_pizzaplane_trailer/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52619367586/"><img src="https://kantel.github.io/posts/2023011001_pizzaplane_trailer/images/pizzaplanetrailer-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Die Erprobung <a href="https://kantel.github.io/posts/2023010701_pygame_oop/">meines OOP-Konzepts</a> für ein <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a>-Framework geht in die erste Runde. Als Praxistest habe ich meinem <a href="https://kantel.github.io/posts/2023010102_pizzaplane4/">tapferen Pizza-Flieger</a> einen Startscreen/Trailer verpaßt, der nach diesem OOP-Framework zusammengeschraubt wurde.</p>
<p>Den dafür verwendeten Flieger habe ich aus dem <a href="https://www.openpixelproject.com/">Open Pixel Projekt</a> (OPP) übernommen und dabei das »O« aus OPP durch eine Pizza ersetzt. Und schon sieht es nach dem Pizza-Flieger aus, der gegen die pösen Pizzas und Pepperonis der noch pöseren <a href="https://de.wikipedia.org/wiki/Giorgia_Meloni">Meloni</a> (wer weiß, vielleicht tausche ich die Pizza in dem Banner noch gegen eine Melone aus) in den Kampf zieht.</p>
<p>Der Wechsel von einem prozeduralen nach einem objektorientierten Programmierstil verlief eigentlich ohne Probleme. Damit Ihr das alles nachvollziehen könnt, hier der vollständige Quellcode:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> pygame</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">from</span> pygame.<span class="bu" style="color: null;">locals</span> <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> os, sys</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">from</span> random <span class="im" style="color: #00769E;">import</span> randint</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;"># Hier wird der Pfad zum Verzeichnis der Assets gesetzt</span></span>
<span id="cb1-7">DATAPATH <span class="op" style="color: #5E5E5E;">=</span> os.path.join(os.path.dirname(os.path.abspath(<span class="va" style="color: #111111;">__file__</span>)),</span>
<span id="cb1-8">                                        <span class="st" style="color: #20794D;">"data"</span>)</span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;"># Konstanten deklarieren</span></span>
<span id="cb1-11">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">640</span>, <span class="dv" style="color: #AD0000;">480</span></span>
<span id="cb1-12">TITLE <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"Pizzaplane Startscreen / Trailer"</span></span>
<span id="cb1-13">BG_WIDTH <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1664</span></span>
<span id="cb1-14">FPS <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">60</span></span>
<span id="cb1-15"></span>
<span id="cb1-16"><span class="co" style="color: #5E5E5E;"># Farben</span></span>
<span id="cb1-17">BG_COLOR <span class="op" style="color: #5E5E5E;">=</span> (<span class="dv" style="color: #AD0000;">231</span>, <span class="dv" style="color: #AD0000;">229</span>, <span class="dv" style="color: #AD0000;">226</span>)    <span class="co" style="color: #5E5E5E;"># Wüstenhimmel</span></span>
<span id="cb1-18"></span>
<span id="cb1-19"><span class="kw" style="color: #003B4F;">class</span> Background(pygame.sprite.Sprite):</span>
<span id="cb1-20">    </span>
<span id="cb1-21">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, _x, _y):</span>
<span id="cb1-22">        pygame.sprite.Sprite.<span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>)</span>
<span id="cb1-23">        <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">=</span> _x</span>
<span id="cb1-24">        <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">=</span> _y</span>
<span id="cb1-25">        <span class="va" style="color: #111111;">self</span>.start_x <span class="op" style="color: #5E5E5E;">=</span> _x</span>
<span id="cb1-26">        <span class="va" style="color: #111111;">self</span>.image <span class="op" style="color: #5E5E5E;">=</span> pygame.image.load(os.path.join(DATAPATH,</span>
<span id="cb1-27">                            <span class="st" style="color: #20794D;">"desert.png"</span>)).convert_alpha()</span>
<span id="cb1-28">        <span class="va" style="color: #111111;">self</span>.rect <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.image.get_rect()</span>
<span id="cb1-29">        <span class="va" style="color: #111111;">self</span>.bg_width <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1664</span></span>
<span id="cb1-30">        </span>
<span id="cb1-31">    <span class="kw" style="color: #003B4F;">def</span> update(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-32">        <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">-=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb1-33">        <span class="co" style="color: #5E5E5E;"># print(self.x)</span></span>
<span id="cb1-34">        <span class="va" style="color: #111111;">self</span>.rect.x <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.x</span>
<span id="cb1-35">        <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="op" style="color: #5E5E5E;">-</span><span class="va" style="color: #111111;">self</span>.bg_width:</span>
<span id="cb1-36">            <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.bg_width</span>
<span id="cb1-37"></span>
<span id="cb1-38"></span>
<span id="cb1-39"><span class="kw" style="color: #003B4F;">class</span> Player(pygame.sprite.Sprite):</span>
<span id="cb1-40">    </span>
<span id="cb1-41">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-42">        pygame.sprite.Sprite.<span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>)</span>
<span id="cb1-43">        <span class="co" style="color: #5E5E5E;"># Load Images</span></span>
<span id="cb1-44">        <span class="va" style="color: #111111;">self</span>.image <span class="op" style="color: #5E5E5E;">=</span> pygame.image.load(os.path.join(DATAPATH,</span>
<span id="cb1-45">                            <span class="st" style="color: #20794D;">"pizzaplane_banner.png"</span>)).convert_alpha()</span>
<span id="cb1-46">        <span class="va" style="color: #111111;">self</span>.rect <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.image.get_rect()</span>
<span id="cb1-47">        <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">60</span></span>
<span id="cb1-48">        <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">=</span> HEIGHT<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb1-49">        <span class="va" style="color: #111111;">self</span>.rect.x <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.x</span>
<span id="cb1-50">        <span class="va" style="color: #111111;">self</span>.rect.y <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.y</span>
<span id="cb1-51"></span>
<span id="cb1-52">    <span class="kw" style="color: #003B4F;">def</span> update(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-53">        <span class="va" style="color: #111111;">self</span>.rect.x <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.x</span>
<span id="cb1-54">        <span class="va" style="color: #111111;">self</span>.rect.y <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.y</span>
<span id="cb1-55"></span>
<span id="cb1-56"><span class="kw" style="color: #003B4F;">class</span> GameWorld:</span>
<span id="cb1-57">    </span>
<span id="cb1-58">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span> (<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-59">        <span class="co" style="color: #5E5E5E;"># Initialisiert die Spielewelt</span></span>
<span id="cb1-60">        pygame.init()</span>
<span id="cb1-61">        <span class="co" style="color: #5E5E5E;"># Ein übler Hack, um die Position des Fensters auf meinen</span></span>
<span id="cb1-62">        <span class="co" style="color: #5E5E5E;"># zweiten Bildschirm zu setzen</span></span>
<span id="cb1-63">        os.environ[<span class="st" style="color: #20794D;">'SDL_VIDEO_WINDOW_POS'</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">%d</span><span class="st" style="color: #20794D;">,</span><span class="sc" style="color: #5E5E5E;">%d</span><span class="st" style="color: #20794D;">"</span> <span class="op" style="color: #5E5E5E;">%</span> (<span class="dv" style="color: #AD0000;">1320</span>, <span class="dv" style="color: #AD0000;">60</span>)</span>
<span id="cb1-64">        <span class="va" style="color: #111111;">self</span>.screen <span class="op" style="color: #5E5E5E;">=</span> pygame.display.set_mode((WIDTH, HEIGHT))</span>
<span id="cb1-65">        pygame.display.set_caption(TITLE)</span>
<span id="cb1-66">        <span class="va" style="color: #111111;">self</span>.clock <span class="op" style="color: #5E5E5E;">=</span> pygame.time.Clock()</span>
<span id="cb1-67">        <span class="va" style="color: #111111;">self</span>.keep_going <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">True</span></span>
<span id="cb1-68">        </span>
<span id="cb1-69">    <span class="kw" style="color: #003B4F;">def</span> reset(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-70">        <span class="co" style="color: #5E5E5E;"># Neustart oder Status zurücksetzen</span></span>
<span id="cb1-71">        <span class="co" style="color: #5E5E5E;"># Hier werden alle Elemente der GameWorld initialisiert</span></span>
<span id="cb1-72">        <span class="va" style="color: #111111;">self</span>.backs       <span class="op" style="color: #5E5E5E;">=</span> pygame.sprite.Group()</span>
<span id="cb1-73">        back1 <span class="op" style="color: #5E5E5E;">=</span> Background(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb1-74">        back2 <span class="op" style="color: #5E5E5E;">=</span> Background(BG_WIDTH, <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb1-75">        <span class="va" style="color: #111111;">self</span>.backs.add(back1)</span>
<span id="cb1-76">        <span class="va" style="color: #111111;">self</span>.backs.add(back2)</span>
<span id="cb1-77">        <span class="va" style="color: #111111;">self</span>.all_sprites <span class="op" style="color: #5E5E5E;">=</span> pygame.sprite.Group()</span>
<span id="cb1-78">        <span class="va" style="color: #111111;">self</span>.player <span class="op" style="color: #5E5E5E;">=</span> Player()</span>
<span id="cb1-79">        <span class="va" style="color: #111111;">self</span>.all_sprites.add(<span class="va" style="color: #111111;">self</span>.player)</span>
<span id="cb1-80">        <span class="va" style="color: #111111;">self</span>.run()</span>
<span id="cb1-81"></span>
<span id="cb1-82">    <span class="kw" style="color: #003B4F;">def</span> run(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-83">        <span class="co" style="color: #5E5E5E;"># Hauptschleife des Spiels</span></span>
<span id="cb1-84">        <span class="cf" style="color: #003B4F;">while</span> <span class="va" style="color: #111111;">self</span>.keep_going:</span>
<span id="cb1-85">            <span class="va" style="color: #111111;">self</span>.clock.tick(FPS)</span>
<span id="cb1-86">            <span class="va" style="color: #111111;">self</span>.events()</span>
<span id="cb1-87">            <span class="va" style="color: #111111;">self</span>.update()</span>
<span id="cb1-88">            <span class="va" style="color: #111111;">self</span>.draw()</span>
<span id="cb1-89"></span>
<span id="cb1-90">    <span class="kw" style="color: #003B4F;">def</span> events(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-91">        <span class="cf" style="color: #003B4F;">for</span> event <span class="kw" style="color: #003B4F;">in</span> pygame.event.get():</span>
<span id="cb1-92">            <span class="cf" style="color: #003B4F;">if</span> ((event.<span class="bu" style="color: null;">type</span> <span class="op" style="color: #5E5E5E;">==</span> pygame.QUIT)</span>
<span id="cb1-93">                <span class="kw" style="color: #003B4F;">or</span> (event.<span class="bu" style="color: null;">type</span> <span class="op" style="color: #5E5E5E;">==</span> pygame.KEYDOWN</span>
<span id="cb1-94">                <span class="kw" style="color: #003B4F;">and</span> event.key <span class="op" style="color: #5E5E5E;">==</span> pygame.K_ESCAPE)):</span>
<span id="cb1-95">                keep_going <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">False</span></span>
<span id="cb1-96">                <span class="va" style="color: #111111;">self</span>.game_over()</span>
<span id="cb1-97"></span>
<span id="cb1-98">    <span class="kw" style="color: #003B4F;">def</span> update(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-99">        <span class="va" style="color: #111111;">self</span>.backs.update()</span>
<span id="cb1-100">        <span class="va" style="color: #111111;">self</span>.all_sprites.update()</span>
<span id="cb1-101">    </span>
<span id="cb1-102">    <span class="kw" style="color: #003B4F;">def</span> draw(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-103">        <span class="va" style="color: #111111;">self</span>.screen.fill(BG_COLOR)</span>
<span id="cb1-104">        <span class="va" style="color: #111111;">self</span>.backs.draw(<span class="va" style="color: #111111;">self</span>.screen)</span>
<span id="cb1-105">        <span class="va" style="color: #111111;">self</span>.all_sprites.draw(<span class="va" style="color: #111111;">self</span>.screen)</span>
<span id="cb1-106">        pygame.display.flip()</span>
<span id="cb1-107"></span>
<span id="cb1-108">    <span class="kw" style="color: #003B4F;">def</span> start_screen(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-109">        <span class="cf" style="color: #003B4F;">pass</span></span>
<span id="cb1-110">    </span>
<span id="cb1-111">    <span class="kw" style="color: #003B4F;">def</span> win_screen(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-112">        <span class="cf" style="color: #003B4F;">pass</span></span>
<span id="cb1-113">    </span>
<span id="cb1-114">    <span class="kw" style="color: #003B4F;">def</span> loose_screen(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-115">        <span class="cf" style="color: #003B4F;">pass</span></span>
<span id="cb1-116">    </span>
<span id="cb1-117">    <span class="kw" style="color: #003B4F;">def</span> game_over(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-118">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Bye, Bye, Baby!"</span>)</span>
<span id="cb1-119">        pygame.quit()</span>
<span id="cb1-120">        sys.exit()</span>
<span id="cb1-121"></span>
<span id="cb1-122"><span class="co" style="color: #5E5E5E;"># Hauptprogramm</span></span>
<span id="cb1-123">w <span class="op" style="color: #5E5E5E;">=</span> GameWorld()</span>
<span id="cb1-124">w.start_screen()</span>
<span id="cb1-125">w.reset()</span>
<span id="cb1-126">w.run()</span></code></pre></div>
<p><strong>Zwei Anmerkungen</strong>: Erstens: Gemäß den Empfehlungen der <a href="https://www.pygame.org/docs/ref/surface.html?highlight=convert_alpha#pygame.Surface.convert_alpha">Pygame-Dokumentation</a> habe ich dem Ladevorgang der Bilder noch ein <code>convert_alpha()</code> spendiert. Dies ist zwar nicht unbedingt (mehr?) erforderlich, soll jedoch die Bearbeitung der Bilder immer noch erheblich beschleunigen. Und zweitens weiß ich nicht, ob der separate Import von <code>pygame.locals</code> (immer noch?) erforderlich ist. Eigentlich müßte – folgt man auch hier der <a href="https://www.pygame.org/docs/ref/locals.html">Dokumentation</a> – der »normale« Pygame-Import die <code>locals</code> mitimportieren. Ich kann mich jedoch erinnern, daß ich mal Schwierigkeiten hatte, weil ich den separaten Import</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;">from</span> pygame.<span class="bu" style="color: null;">locals</span> <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span></code></pre></div>
<p>weggelassen hatte. Also habe ich ihn beibehalten. Er kostet ja nichts.</p>
<p>Den <a href="https://github.com/kantel/pygameprojects/blob/master/pizzaplane/pizzaplanestartscreen.py">Quellcode</a> und das <a href="https://github.com/kantel/pygameprojects/tree/master/pizzaplane/data">Bildchen</a> gibt es wie immer in meinem GitHub-Repositorium. Und für die Buchhaltung hier alle bisher erschienenen Beiträge zu Pizzaplane und Pygame:</p>
<ol type="1">
<li>Auf ein neues: <a href="https://kantel.github.io/posts/20221222501_pizzaplane1_pygame/">Pizzaplane in Pygame</a> (Stage 1)</li>
<li><a href="https://kantel.github.io/posts/20221222601_pizzaplane2_pygame/">Jetzt mit Killer-Pizzas: Pizzaplane in Pygame</a> (Stage 2)</li>
<li><a href="https://kantel.github.io/posts/2022123101_pizzaplane3/">Pizzaplane Stage 3: Jetzt mit Punktestand!</a></li>
<li><a href="https://kantel.github.io/posts/2023010102_pizzaplane4/">Pizzaplane Stage 4 – jetzt mit grünem Spieler</a></li>
<li>Exkurs 1: <a href="https://kantel.github.io/posts/2023010701_pygame_oop/">Pygame objektorientiert</a></li>
<li>Exkurs 2: Pizza Plane Trailer – ebenfalls objektorientiert</li>
</ol>
<p>Ich habe schon ein wenig vorgearbeitet. Die nächsten Folgen werden also nicht mehr lange auf sich warten lassen. <em>Still digging!</em></p>



 ]]></description>
  <category>Pygame</category>
  <category>Spieleprogrammierung</category>
  <guid>https://kantel.github.io/posts/2023011001_pizzaplane_trailer/index.html</guid>
  <pubDate>Tue, 10 Jan 2023 17:50:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023011001_pizzaplane_trailer/images/pizzaplanetrailer.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>»Kunst« mit Pythons Schildkröte</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023010901_code_art_with_turtle/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.youtube.com/watch?v=_W4xlQn4yuk"><img src="https://kantel.github.io/posts/2023010901_code_art_with_turtle/images/kunstturtle-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p><em><a href="https://www.mindjoy.com/">Mindjoy</a></em> ist ein relativ junges, ambitioniertes Team, das Künstliche Intelligenz mit einer Lernplattform (für Kinder) verbinden will. Ihr erstes Projekt wurde kürzlich auf YouTube hochgeladen und heißt »Code Art with Python Turtle Graphics«. Die Idee ist eigentlich gut, aber für meinen Geschmack sind die Videos etwas zu einfach und zu naiv gehalten, aber das ist wohl der (Anfänger-) Zielgruppe geschuldet. Dennoch sind sie inspirierend, doch Achtung, die <a href="https://www.youtube.com/playlist?list=PLP4KEb557GDhga08BgeYtHy1uyC9XyzUR">gleichnamige Playlist</a> ist nicht vollständig (und in der Reihenfolge völlig durcheinander), der Kanal selber enthält noch mehr »Projekte«. Daher führe ich sie hier noch einmal einzeln und in der vermutlich beabsichtigten Reihenfolge auf:</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=zYAsIAtTQaM">Intro to Code Art with Python Turtle Graphics</a> (41 Sekunden)</li>
<li><a href="https://www.youtube.com/watch?v=8Gew1d3ZFVA">Intro to Code Art: Project 0 - Meet the Turtle 🐢</a> (12:57)</li>
<li><a href="https://www.youtube.com/watch?v=mkuEOXimYFs">Intro to Code Art:Project 1 (Catch The Bugs)</a> (13:18)</li>
<li><a href="https://www.youtube.com/watch?v=gyZChDaq3AU">Intro to Code Art: Project 2: Navigating the Stars 🧭</a> (19:50)</li>
<li><a href="https://www.youtube.com/watch?v=wqJMJU6bReE">Intro to Code Art: Project 3 - Looping &amp; Curving ⭕️</a> (9:40)</li>
<li><a href="https://www.youtube.com/watch?v=JyJ-YeLaolY">Intro to Code Art: Project 4 - Your Name in the Stars 🌌</a> (13:02)</li>
<li><a href="https://www.youtube.com/watch?v=oRwi8KjRFx8">Intro to Code Art: Project 5 - How RGB Colors Work 🔴 🔵 🟢</a> (10:13)</li>
<li><a href="https://www.youtube.com/watch?v=9J-QKvutwkM">Intro to Code Art: Project 6 - Looping Shapes 🌀</a> (12:09)</li>
<li><a href="https://www.youtube.com/watch?v=_W4xlQn4yuk">Intro to Code Art: Project 7 - Code an Artwork 🖼</a> (5:45)</li>
</ul>
<p>Das Team nutzt <a href="http://cognitiones.kantel-chaos-team.de/programmierung/ides/replit.html">Replit</a> als Plattform, was ich nicht nur aufgrund meiner <a href="https://kantel.github.io/posts/20221222802_processingpy_replit/">jüngsten Erfahrungen</a> – vorsichtig ausgedrückt – für etwas ungeschickt halte: Man legt sich damit auf einen Anbieter fest und ist danach auf Gedeih und Verderb an ihn gebunden. Doch die Replits Turtle scheint <a href="https://docs.python.org/3/library/turtle.html">Pythons Stadard-Turtle</a> zu sein, daher bekomme ich doch Lust, auch mal wieder etwas mit der Schildkröte anzustellen. <em>Still digging!</em></p>
<p>Ob das Projekt noch fortgeführt wird, weiß ich nicht, aber ich habe <a href="https://www.youtube.com/@teammindjoy">den Kanal abonniert</a>, damit ich es gegebenenfalls nicht verpasse.</p>



 ]]></description>
  <category>Python</category>
  <category>Turtle</category>
  <category>Creative Coding</category>
  <guid>https://kantel.github.io/posts/2023010901_code_art_with_turtle/index.html</guid>
  <pubDate>Mon, 09 Jan 2023 17:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023010901_code_art_with_turtle/images/kunstturtle.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Python, Code-Editoren und das Current Working Directory</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023010801_python_und_cwd/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52614766847/"><img src="https://kantel.github.io/posts/2023010801_python_und_cwd/images/pygamevscode-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Manchmal stellen einen die Code-Editoren (und IDEs) an Stellen Beine, wo man gar nicht damit gerechnet hat. So hatte ich zum Beispiel geglaubt, daß ich mit</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1">DATAPATH <span class="op" style="color: #5E5E5E;">=</span> os.path.join(os.getcwd(), <span class="st" style="color: #20794D;">"data"</span>)</span></code></pre></div>
<p>eine saubere Lösung gefunden hätte, auch den störrischsten Editor und die störriste IDE darauf hinzuweisen, wo in Dreiteufelsnamen der Ordner mit den Assets zu suchen sei. Bei dem – bis heute – einzigen, von mir genutzten Python-Editor <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/thonny.html">Thonny</a> funktionierte das auch hervorragend, doch dann kam ich auf die Idee, in den sauren Apfel zu beißen und es mit <a href="http://cognitiones.kantel-chaos-team.de/produktivitaet/visualstudiocode.html">Visual Studio Code</a> zu probieren.</p>
<p>Und was soll ich sagen: Nichts ging mehr! Die Wurzel des Problems lag darin, daß Thonny das <code>cwd</code>, das <em>current working directory</em>, in dem Verzeichnis verortet, wo die ausführbare Python-Datei liegt, Visual Studio Code aber im Projektverzeichnis. Und das ist bei mir zum Beispiel bei meinem Pizzaflieger das Verzeichnis <code>pygameprojects</code>. Und so liegt für VS Code das <code>data</code>-Ordner in <code>pygameprojects -&gt; pizzaplane -&gt; data</code>, dagegen für Thonny schlicht und ergreifend in <code>pizzaplane -&gt; data</code>.</p>
<p>Okay, das Problem lies sich relativ leicht beheben, denn Pythons <code>os</code>-Modul liefert mit <code>os.path.dirname(os.path.abspath(__file__))</code> einen zwar geschwätzigen, aber funktionierenden Befehl, mit dem man das Verzeichnis der aufrufenden Datei ermitteln kann. Also flugs den Datenpfad in</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1">DATAPATH <span class="op" style="color: #5E5E5E;">=</span> os.path.join(os.path.dirname(os.path.abspath(<span class="va" style="color: #111111;">__file__</span>)),</span>
<span id="cb2-2">                       <span class="st" style="color: #20794D;">"data"</span>)</span></code></pre></div>
<p>geändert, und schon ist alles wieder schick.</p>
<p>Die Frage ist nur, wo der nächste Knüppel lauert, den mir die Entwicklungsumgebungen zwischen die Beine stecken wollen?</p>



 ]]></description>
  <category>Python</category>
  <guid>https://kantel.github.io/posts/2023010801_python_und_cwd/index.html</guid>
  <pubDate>Sun, 08 Jan 2023 19:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023010801_python_und_cwd/images/pygamevscode.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Pygame objektorientiert</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023010701_pygame_oop/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.flickr.com/photos/schockwellenreiter/52613076234/"><img src="https://kantel.github.io/posts/2023010701_pygame_oop/images/pizzaplaneworldoop-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Entgegen meiner ursprünglichen Absicht – ich wollte ja eigentlich mit <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/twine2.html">Twine</a> in mein <a href="http://blog.schockwellenreiter.de/2022/09/2022090601.html">Wunderland</a> abtauchen – habe ich mich heute doch noch einmal hingesetzt und mit <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a> gespielt. Denn letzte Nacht im Halbschlaf erinnerte ich mich daran, daß es ja meine ursprüngliche Absicht war, den Pizzaflieger in und mit einem sauberen, objektorientierten Framework zu implementieren und das war in der Begeisterung über das <a href="https://kantel.github.io/posts/2023010102_pizzaplane4/">bisher erreichte</a> völlig untergegangen.</p>
<p>Die Inspiration für diese Idee lieferte <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/greenfoot.html">Greenfoot</a>, eine ausbildungsorientierte Spiele-Entwicklungsumgebung, die durch eine konsequente Objektorientierung hervorsticht<sup>1</sup>. So in etwa sollte dann auch mein Pygame-Framework aussehen.</p>
<p>Dazu habe ich erst einmal ein auf das Wesentliche reduzierte Pygame-Grundgerüst entwickelt:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> pygame</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">from</span> pygame.<span class="bu" style="color: null;">locals</span> <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> os, sys</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">from</span> random <span class="im" style="color: #00769E;">import</span> randint</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;"># Hier wird der Pfad zum Verzeichnis der Assets gesetzt</span></span>
<span id="cb1-7">DATAPATH <span class="op" style="color: #5E5E5E;">=</span> os.path.join(os.getcwd(), <span class="st" style="color: #20794D;">"data"</span>)</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;"># Konstanten deklarieren</span></span>
<span id="cb1-10">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">640</span>, <span class="dv" style="color: #AD0000;">480</span></span>
<span id="cb1-11">TITLE <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"🐍 Pygame Boilerplate 🐍"</span></span>
<span id="cb1-12">FPS <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">60</span></span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;"># Farben</span></span>
<span id="cb1-15">BG_COLOR <span class="op" style="color: #5E5E5E;">=</span> (<span class="dv" style="color: #AD0000;">231</span>, <span class="dv" style="color: #AD0000;">229</span>, <span class="dv" style="color: #AD0000;">226</span>) <span class="co" style="color: #5E5E5E;"># Sandgrau</span></span>
<span id="cb1-16">           </span>
<span id="cb1-17"><span class="co" style="color: #5E5E5E;"># Pygame und das Fenster initialisieren</span></span>
<span id="cb1-18">clock <span class="op" style="color: #5E5E5E;">=</span> pygame.time.Clock()</span>
<span id="cb1-19">pygame.init()</span>
<span id="cb1-20"><span class="co" style="color: #5E5E5E;"># Ein übler Hack, um die Position des Fensters</span></span>
<span id="cb1-21"><span class="co" style="color: #5E5E5E;"># auf meinen zweiten Bildschirm zu setzen</span></span>
<span id="cb1-22">os.environ[<span class="st" style="color: #20794D;">'SDL_VIDEO_WINDOW_POS'</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">%d</span><span class="st" style="color: #20794D;">,</span><span class="sc" style="color: #5E5E5E;">%d</span><span class="st" style="color: #20794D;">"</span> <span class="op" style="color: #5E5E5E;">%</span> (<span class="dv" style="color: #AD0000;">1320</span>, <span class="dv" style="color: #AD0000;">60</span>)</span>
<span id="cb1-23">screen <span class="op" style="color: #5E5E5E;">=</span> pygame.display.set_mode((WIDTH, HEIGHT))</span>
<span id="cb1-24">pygame.display.set_caption(TITLE)</span>
<span id="cb1-25"></span>
<span id="cb1-26"></span>
<span id="cb1-27"><span class="co" style="color: #5E5E5E;"># Hauptschleife</span></span>
<span id="cb1-28">keep_going <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">True</span></span>
<span id="cb1-29"><span class="cf" style="color: #003B4F;">while</span> keep_going:</span>
<span id="cb1-30">    </span>
<span id="cb1-31">    clock.tick(FPS)</span>
<span id="cb1-32">    <span class="cf" style="color: #003B4F;">for</span> event <span class="kw" style="color: #003B4F;">in</span> pygame.event.get():</span>
<span id="cb1-33">        <span class="cf" style="color: #003B4F;">if</span> ((event.<span class="bu" style="color: null;">type</span> <span class="op" style="color: #5E5E5E;">==</span> pygame.QUIT)</span>
<span id="cb1-34">            <span class="kw" style="color: #003B4F;">or</span> (event.<span class="bu" style="color: null;">type</span> <span class="op" style="color: #5E5E5E;">==</span> pygame.KEYDOWN</span>
<span id="cb1-35">            <span class="kw" style="color: #003B4F;">and</span> event.key <span class="op" style="color: #5E5E5E;">==</span> pygame.K_ESCAPE)):</span>
<span id="cb1-36">            keep_going <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">False</span></span>
<span id="cb1-37">            <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Bye, Bye, Baby!"</span>)</span>
<span id="cb1-38">            pygame.quit()</span>
<span id="cb1-39">            sys.exit()</span>
<span id="cb1-40">                           </span>
<span id="cb1-41">    screen.fill(BG_COLOR)</span>
<span id="cb1-42">    pygame.display.flip()</span></code></pre></div>
<p>Das ist zwar lauffähig (und war bisher auch meine Vorlage), aber von der gewünschten Objektorientierung noch weit entfernt. Mir schwebte da so etwas wie in diesem Diagramm vor:</p>
<p><img src="https://kantel.github.io/posts/2023010701_pygame_oop/images/gameworld.jpg" class="img-fluid"></p>
<p>Von Pygame abgeleitet wird die Spielewelt (<code>class GameWorld()</code>) und in dieser leben die Objekte, wie zum Beispiel der <code>Player()</code>. Diese Objekte sind wiederum Unterklassen der <code>class Sprite()</code>, die wiederum zu Pygame als Oberklasse gehört.</p>
<p>Also habe ich erst einmal die <code>GameWorld()</code> impementiert:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;">class</span> GameWorld:</span>
<span id="cb2-2">    </span>
<span id="cb2-3">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span> (<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb2-4">        <span class="co" style="color: #5E5E5E;"># Initialisiert die Spielewelt</span></span>
<span id="cb2-5">        pygame.init()</span>
<span id="cb2-6">        <span class="co" style="color: #5E5E5E;"># Ein übler Hack, um die Position des Fensters</span></span>
<span id="cb2-7">        <span class="co" style="color: #5E5E5E;"># auf meinen zweiten Bildschirm zu setzen</span></span>
<span id="cb2-8">        os.environ[<span class="st" style="color: #20794D;">'SDL_VIDEO_WINDOW_POS'</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">%d</span><span class="st" style="color: #20794D;">,</span><span class="sc" style="color: #5E5E5E;">%d</span><span class="st" style="color: #20794D;">"</span> <span class="op" style="color: #5E5E5E;">%</span> (<span class="dv" style="color: #AD0000;">1320</span>, <span class="dv" style="color: #AD0000;">60</span>)</span>
<span id="cb2-9">        <span class="va" style="color: #111111;">self</span>.screen <span class="op" style="color: #5E5E5E;">=</span> pygame.display.set_mode((WIDTH, HEIGHT))</span>
<span id="cb2-10">        pygame.display.set_caption(TITLE)</span>
<span id="cb2-11">        <span class="va" style="color: #111111;">self</span>.clock <span class="op" style="color: #5E5E5E;">=</span> pygame.time.Clock()</span>
<span id="cb2-12">        <span class="va" style="color: #111111;">self</span>.keep_going <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">True</span></span>
<span id="cb2-13">        </span>
<span id="cb2-14">    <span class="kw" style="color: #003B4F;">def</span> reset(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb2-15">        <span class="co" style="color: #5E5E5E;"># Neustart oder Status zurücksetzen</span></span>
<span id="cb2-16">        <span class="co" style="color: #5E5E5E;"># Hier werden alle Elemente der GameWorld initialisiert</span></span>
<span id="cb2-17">        <span class="va" style="color: #111111;">self</span>.all_sprites <span class="op" style="color: #5E5E5E;">=</span> pygame.sprite.Group()</span>
<span id="cb2-18">        <span class="va" style="color: #111111;">self</span>.player <span class="op" style="color: #5E5E5E;">=</span> Player()</span>
<span id="cb2-19">        <span class="va" style="color: #111111;">self</span>.all_sprites.add(<span class="va" style="color: #111111;">self</span>.player)</span>
<span id="cb2-20">        <span class="va" style="color: #111111;">self</span>.run()</span>
<span id="cb2-21"></span>
<span id="cb2-22">    <span class="kw" style="color: #003B4F;">def</span> run(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb2-23">        <span class="co" style="color: #5E5E5E;"># Hauptschleife des Spiels</span></span>
<span id="cb2-24">        <span class="cf" style="color: #003B4F;">while</span> <span class="va" style="color: #111111;">self</span>.keep_going:</span>
<span id="cb2-25">            <span class="va" style="color: #111111;">self</span>.clock.tick(FPS)</span>
<span id="cb2-26">            <span class="va" style="color: #111111;">self</span>.events()</span>
<span id="cb2-27">            <span class="va" style="color: #111111;">self</span>.update()</span>
<span id="cb2-28">            <span class="va" style="color: #111111;">self</span>.draw()</span>
<span id="cb2-29"></span>
<span id="cb2-30">    <span class="kw" style="color: #003B4F;">def</span> events(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb2-31">        <span class="cf" style="color: #003B4F;">for</span> event <span class="kw" style="color: #003B4F;">in</span> pygame.event.get():</span>
<span id="cb2-32">            <span class="cf" style="color: #003B4F;">if</span> ((event.<span class="bu" style="color: null;">type</span> <span class="op" style="color: #5E5E5E;">==</span> pygame.QUIT)</span>
<span id="cb2-33">                <span class="kw" style="color: #003B4F;">or</span> (event.<span class="bu" style="color: null;">type</span> <span class="op" style="color: #5E5E5E;">==</span> pygame.KEYDOWN</span>
<span id="cb2-34">                <span class="kw" style="color: #003B4F;">and</span> event.key <span class="op" style="color: #5E5E5E;">==</span> pygame.K_ESCAPE)):</span>
<span id="cb2-35">                keep_going <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">False</span></span>
<span id="cb2-36">                <span class="va" style="color: #111111;">self</span>.game_over()</span>
<span id="cb2-37"></span>
<span id="cb2-38">    <span class="kw" style="color: #003B4F;">def</span> update(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb2-39">        <span class="va" style="color: #111111;">self</span>.all_sprites.update()</span>
<span id="cb2-40">    </span>
<span id="cb2-41">    <span class="kw" style="color: #003B4F;">def</span> draw(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb2-42">        <span class="va" style="color: #111111;">self</span>.screen.fill(BG_COLOR)</span>
<span id="cb2-43">        <span class="va" style="color: #111111;">self</span>.all_sprites.draw(<span class="va" style="color: #111111;">self</span>.screen)</span>
<span id="cb2-44">        pygame.display.flip()</span>
<span id="cb2-45"></span>
<span id="cb2-46">    <span class="kw" style="color: #003B4F;">def</span> start_screen(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb2-47">        <span class="cf" style="color: #003B4F;">pass</span></span>
<span id="cb2-48">    </span>
<span id="cb2-49">    <span class="kw" style="color: #003B4F;">def</span> win_screen(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb2-50">        <span class="cf" style="color: #003B4F;">pass</span></span>
<span id="cb2-51">    </span>
<span id="cb2-52">    <span class="kw" style="color: #003B4F;">def</span> loose_screen(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb2-53">        <span class="cf" style="color: #003B4F;">pass</span></span>
<span id="cb2-54">    </span>
<span id="cb2-55">    <span class="kw" style="color: #003B4F;">def</span> game_over(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb2-56">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Bye, Bye, Baby!"</span>)</span>
<span id="cb2-57">        pygame.quit()</span>
<span id="cb2-58">        sys.exit()</span></code></pre></div>
<p>Die gesamte Initialisierung von Pygame wird jetzt im Konstruktor der <code>GameWorld()</code> vorgenommen und ist vom Rest des Programms isoliert. Auch die Eventbehandlung habe ich in die einzelnen Klassen verlagert, das Hauptprogramm weiß nichts mehr davon.</p>
<p>Die Befehle der Methode <code>reset()</code> könnten theoretisch auch im Konstruktor stehen. Ich habe sie jedoch separiert, da sie unter Umständen bei einem Neustart des Spieles (ohne daß das Spiel beendet wird) noch einmal aufgerufen werden müssen. Und die <code>run()</code>-Methode faßt einfach nur die Methoden <code>events()</code>, <code>update()</code> und <code>draw()</code> in einem Aufruf zusammen.</p>
<p>Auch die Aufrufe in <code>game_over()</code> sind in eine eigene Methode ausgelagert, da sie – wenn ein Spiel an mehreren Stellen beendet werden kann – ebenfalls mehrmals benötigt werden könnten.</p>
<p>Die Methoden <code>start_screen()</code>, <code>win_screen()</code> und <code>loose_screen()</code> habe ich leergelassen. Sie können bei Bedarf implementiert werden.</p>
<p>Um das alles mit Leben zu füllen, habe ich als minimale, aber notwendige Ergänzung die Klasse <code>Player()</code> implementiert (denn was ist ein Spiel ohne Spieler?):</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;">class</span> Player(pygame.sprite.Sprite):</span>
<span id="cb3-2">    </span>
<span id="cb3-3">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb3-4">        pygame.sprite.Sprite.<span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>)</span>
<span id="cb3-5">        <span class="co" style="color: #5E5E5E;"># Load Images</span></span>
<span id="cb3-6">        <span class="va" style="color: #111111;">self</span>.images <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb3-7">        <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span> (<span class="dv" style="color: #AD0000;">2</span>):</span>
<span id="cb3-8">            img <span class="op" style="color: #5E5E5E;">=</span> pygame.image.load(os.path.join(DATAPATH,</span>
<span id="cb3-9">                         <span class="st" style="color: #20794D;">"planegreen_"</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="bu" style="color: null;">str</span>(i) <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">".png"</span>)) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb3-10">                         .convert_alpha()</span>
<span id="cb3-11">            <span class="va" style="color: #111111;">self</span>.images.append(img)</span>
<span id="cb3-12">        <span class="va" style="color: #111111;">self</span>.image <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.images[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb3-13">        <span class="va" style="color: #111111;">self</span>.rect <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.image.get_rect()</span>
<span id="cb3-14">        <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">75</span></span>
<span id="cb3-15">        <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">250</span></span>
<span id="cb3-16">        <span class="va" style="color: #111111;">self</span>.frame <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb3-17">        <span class="va" style="color: #111111;">self</span>.animation_cycle <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">20</span></span>
<span id="cb3-18">        <span class="va" style="color: #111111;">self</span>.animation_time <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">4</span></span>
<span id="cb3-19">        <span class="va" style="color: #111111;">self</span>.updown <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb3-20">  </span>
<span id="cb3-21">    <span class="kw" style="color: #003B4F;">def</span> update(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb3-22">        keys <span class="op" style="color: #5E5E5E;">=</span> pygame.key.get_pressed()</span>
<span id="cb3-23">        <span class="cf" style="color: #003B4F;">if</span> keys[pygame.K_UP]:</span>
<span id="cb3-24">            <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">20</span>:</span>
<span id="cb3-25">                <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">-=</span> <span class="va" style="color: #111111;">self</span>.updown</span>
<span id="cb3-26">        <span class="cf" style="color: #003B4F;">elif</span> keys[pygame.K_DOWN]:</span>
<span id="cb3-27">            <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">&lt;</span> HEIGHT <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">20</span>:</span>
<span id="cb3-28">                <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">+=</span> <span class="va" style="color: #111111;">self</span>.updown</span>
<span id="cb3-29">        <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb3-30">            <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb3-31">        <span class="va" style="color: #111111;">self</span>.rect.center <span class="op" style="color: #5E5E5E;">=</span> (<span class="va" style="color: #111111;">self</span>.x, <span class="va" style="color: #111111;">self</span>.y)</span>
<span id="cb3-32">        <span class="va" style="color: #111111;">self</span>.animation_cycle <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb3-33">        <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.animation_cycle <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="va" style="color: #111111;">self</span>.animation_time:</span>
<span id="cb3-34">            <span class="va" style="color: #111111;">self</span>.animation_cycle <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb3-35">            <span class="va" style="color: #111111;">self</span>.frame <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb3-36">            <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.frame <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">1</span>:</span>
<span id="cb3-37">                <span class="va" style="color: #111111;">self</span>.frame <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb3-38">        <span class="va" style="color: #111111;">self</span>.image <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.images[<span class="va" style="color: #111111;">self</span>.frame]</span></code></pre></div>
<p>Auch hier fällt auf, daß ich in der <code>update()</code>-Methode die Event-Behandlung vom übrigen Programm isoliert habe. Die Events, die den Player betreffen, werden in der Klasse <code>Player()</code> behandelt – und sonst nirgendwo. Das Hauptprogramm ist daher entsprechend knapp ausgefallen:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;">import</span> pygame</span>
<span id="cb4-2"><span class="im" style="color: #00769E;">from</span> pygame.<span class="bu" style="color: null;">locals</span> <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span>
<span id="cb4-3"><span class="im" style="color: #00769E;">import</span> os, sys</span>
<span id="cb4-4"><span class="im" style="color: #00769E;">from</span> random <span class="im" style="color: #00769E;">import</span> randint</span>
<span id="cb4-5"></span>
<span id="cb4-6"><span class="co" style="color: #5E5E5E;"># Hier wird der Pfad zum Verzeichnis der Assets gesetzt</span></span>
<span id="cb4-7">DATAPATH <span class="op" style="color: #5E5E5E;">=</span> os.path.join(os.getcwd(), <span class="st" style="color: #20794D;">"data"</span>)</span>
<span id="cb4-8"></span>
<span id="cb4-9"><span class="co" style="color: #5E5E5E;"># Konstanten deklarieren</span></span>
<span id="cb4-10">WIDTH, HEIGHT <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">640</span>, <span class="dv" style="color: #AD0000;">480</span></span>
<span id="cb4-11">TITLE <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"Pizzaplane Objektorientiert"</span></span>
<span id="cb4-12">FPS <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">60</span></span>
<span id="cb4-13"></span>
<span id="cb4-14"><span class="co" style="color: #5E5E5E;"># Farben</span></span>
<span id="cb4-15">BG_COLOR <span class="op" style="color: #5E5E5E;">=</span> (<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">80</span>, <span class="dv" style="color: #AD0000;">125</span>)    <span class="co" style="color: #5E5E5E;"># Mittelblau</span></span>
<span id="cb4-16"></span>
<span id="cb4-17"><span class="co" style="color: #5E5E5E;">### Hier kommen die Klassen-Definitonen hin</span></span>
<span id="cb4-18"><span class="co" style="color: #5E5E5E;"># Snip</span></span>
<span id="cb4-19"><span class="co" style="color: #5E5E5E;">### Ende der Klassendefinitionen</span></span>
<span id="cb4-20"></span>
<span id="cb4-21"><span class="co" style="color: #5E5E5E;"># Hauptprogramm</span></span>
<span id="cb4-22">w <span class="op" style="color: #5E5E5E;">=</span> GameWorld()</span>
<span id="cb4-23">w.start_screen()</span>
<span id="cb4-24">w.reset()</span>
<span id="cb4-25">w.run()</span></code></pre></div>
<p>Damit bin ich sehr zufrieden. Es entspricht meinen Vorstellungen eines objektorientierten Spieleframeworks. Jetzt muß ich »nur« noch testen, wie es sich in der Praxis bewährt. Dazu werde ich als erstes mein Pizzaplane-Spiel darauf anwenden. Schaun wir mal…</p>
<p>Den <a href="https://github.com/kantel/pygameprojects/blob/master/boilerplate/boilerplateoop_msprites.py">Quellcode</a> und die <a href="https://github.com/kantel/pygameprojects/tree/master/boilerplate/data">Assets</a> gibt es wie immer auch in meinem GitHub-Repositorium.</p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Fußnoten</h2>

<ol>
<li id="fn1"><p>Eigentlich wundert das nicht, denn Greenfoot ist ein Java-Framework, und in Java muß man sich schon gewaltig anstrengen, um der Objektorientierung zu entgehen. Daß dies jedoch nicht ganz unmöglich ist, beweist aber <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processing.html">Processing</a>.&nbsp;🤓↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>Pygame</category>
  <category>Spieleprogrammierung</category>
  <guid>https://kantel.github.io/posts/2023010701_pygame_oop/index.html</guid>
  <pubDate>Sat, 07 Jan 2023 19:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023010701_pygame_oop/images/pizzaplaneworldoop.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Twine und statische Seiten – Video-Tutorials zum Wochenende</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023010601_twine_und_statische_seiten/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://upload.wikimedia.org/wikipedia/commons/9/9f/Alice%27s_Adventures_in_Wonderland_-_Carroll%2C_Robinson_-_S119_-_%27What_day_of_the_month_is_it%27_he_said%2C_turning_to_Alice.jpg"><img src="https://kantel.github.io/posts/2023010601_twine_und_statische_seiten/images/teapartyrobinson-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Auch wenn es schon spät geworden ist, möchte ich auch eine kurze Tradition nicht brechen und Euch heute ein paar Videos vorstellen, mit denen Ihr Euch vergnügen könnt, falls Euch wegen der zu erwartenden Regentage am Wochenende die Decke auf den Kopf fällt:</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/7nd98qsBVNk" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Zuerst einmal: Ich möchte die Arbeit an meinem kleinen Pizza-Flieger kurz unterbrechen, weil ich große Lust habe, an meinem <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/twine2.html">Twine</a>-Universum zu basteln und daher ein paar <a href="http://blog.schockwellenreiter.de/2022/09/2022090601.html">Ausflüge ins Wunderland</a> zu unternehmen. Inspiration für diesen Entschluß war zum einem das Webinar »<a href="https://www.youtube.com/watch?v=7nd98qsBVNk">Making Interactive Fiction with Twine</a>«, das vor ein paar Tagen in meine Timeline auffpoppte.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/VC7TuFG1WYg" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Und dann tauchte zeitgleich auch noch das Tutorial »<a href="https://www.youtube.com/watch?v=VC7TuFG1WYg">Create Inventory in Harlowe (Twine)</a>« auf, das ich Euch nicht vorenthalten möchte.</p>
<p><strong>Es gibt aber auch noch andere Themen</strong>: Zwar hoffe ich, daß ich mit <a href="http://cognitiones.kantel-chaos-team.de/webworking/staticsites/quarto.html">Quarto</a> meinen endgültigen Generator für statische Seiten (und für dieses <del>Blog</del> Kritzelheft) gefunden habe, aber bekanntermaß interessert mich das Thema »<a href="http://cognitiones.kantel-chaos-team.de/webworking/staticsites/staticsites.html">Statische Seiten</a>« und die Werkzeuge, mit denen man diese erstellen kann.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/F8iOU1ci19Q" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Denn auch andere Mütter haben schöne Töchter. Das ist vor allem der in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/ruby/ruby.html">Ruby</a> geschriebene Platzhirsch <a href="http://cognitiones.kantel-chaos-team.de/webworking/staticsites/jekyll.html">Jekyll</a>, der auch so etwas wie das »offiziöse« Werkzeug für <a href="http://cognitiones.kantel-chaos-team.de/programmierung/ruby/ruby.html">GitHub Pages</a> ist. Das Tool wird in »<a href="https://www.youtube.com/watch?v=F8iOU1ci19Q">Meet Jekyll</a>« ausführlich gewürdigt.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/_STFQc9Y2zY" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Und wenn es um Schnelligkeit geht, soll angeblich kein Weg an <a href="http://cognitiones.kantel-chaos-team.de/webworking/staticsites/hugo.html">Hugo</a>, den in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/go.html">Go</a> geschriebenen Generator für statische Seiten vorbeigehen. Dieses Teil wird in dem Tutorial »<a href="https://www.youtube.com/watch?v=_STFQc9Y2zY">Blogging with Hugo and GitHub Pages</a>« von <em>Sarah Gibson</em> ausführlich vorgestellt.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/RyeWjQET0Zk" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p><strong>War sonst noch was?</strong> Ach ja, zu meinen <a href="https://kantel.github.io/posts/20221222901_tiled_for_dummies/">hier vorgestellten</a> »<a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/tiled.html">Tiled</a>«-Tutorials gibt es noch einen kurzen Nachschlag: »<a href="https://www.youtube.com/watch?v=RyeWjQET0Zk">Tiled - Creating Paths, Terrains, Trees, Collisions</a>« von <em>Mike Cropper</em>. Ich wollte meinen Feedreader ein wenig aufräumen und mir fiel einfach nicht ein, wo ich den Link sonst noch unterbringen könnte.</p>
<p><em>(Bildquelle: <a href="https://commons.wikimedia.org/wiki/File:Alice%27s_Adventures_in_Wonderland_-_Carroll,_Robinson_-_S119_-_%27What_day_of_the_month_is_it%27_he_said,_turning_to_Alice.jpg">Wikimedia Commons</a>)</em></p>



 ]]></description>
  <category>Twine</category>
  <category>Statische Seiten</category>
  <guid>https://kantel.github.io/posts/2023010601_twine_und_statische_seiten/index.html</guid>
  <pubDate>Fri, 06 Jan 2023 17:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023010601_twine_und_statische_seiten/images/teapartyrobinson.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Hilfe! Wo ist »Einfügen« auf meinem Mac?</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023010504_insert_key/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://animationresources.org/pics/opper02-big.jpg"><img src="https://kantel.github.io/posts/2023010504_insert_key/images/opper02-big-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Versehentlich (und unbemerkt) hatte ich bei <a href="http://cognitiones.kantel-chaos-team.de/mathematik/rstudio.html">RStudio</a> vor ein paar Tagen irgendeine Taste gedrückt, die den Editor in den <code>insert</code>-Mode versetzte und aus diesem Mode kam ich ums Verrecken nicht mehr heraus. Nur ein Neustart des Programms half mir aus der Patsche.</p>
<p>Als dies mir heute zum zweiten Mal passierte, war ich es leid und warf die <a href="https://duckduckgo.com/">Suchmaschine meines Vertrauens</a> an. Sie half mir aber auch nicht weiter, da sie meinte, daß ich mit der <code>Insert</code>-Taste dieses Verhalten ein- und wieder ausschalten könne. Nur… mein Apple besitzt keine <code>Insert</code>-Taste. Und die vorgeschlagene Tastenkombination <code>fn</code> + <code>Enter</code> blieb auch wirkungslos.</p>
<p>Nach etlichen Minuten wilden Herumprobierens auf meiner angeschlossenen, erweiterten Tastatur fand ich heraus, daß die dort mit »Hilfe« beschriftete Taste wohl die von RStudio gemeinte <code>Insert</code>-Taste sei. Jedenfalls toggelte diese anstandslos zwischen dem <code>insert</code>- und dem normalen <code>edit</code>-Mode hin und her.</p>
<p>Damit ist mir erst einmal geholfen. Doch die Frage bleibt: Was machen MacBook-Nutzer ohne angeschlossene, externe Tastatur? Und welcher Dödel ist bei RStudio auf die Idee gekommen, solch eine wichtige Funktion auf eine Taste zu legen, die nicht auf allen Keyboards zur Verfügung steht? Wird man ja wohl noch mal fragen dürfen …</p>



 ]]></description>
  <category>Quarto</category>
  <guid>https://kantel.github.io/posts/2023010504_insert_key/index.html</guid>
  <pubDate>Thu, 05 Jan 2023 20:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023010504_insert_key/images/opper02-big.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Code the Classics: Rampart</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023010503_code_the_classics_rampart/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.raspberrypi.com/app/uploads/2023/01/Screenshot-2023-01-05-at-15.33.24-500x358.png"><img src="https://kantel.github.io/posts/2023010503_code_the_classics_rampart/images/towerdefence-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p><a href="https://de.wikipedia.org/wiki/Rampart_(Computerspiel)">Rampart</a> ist ein Computerspiel, das von Atari im Jahre 1990 veröffentlicht wurde. Darin muß der Spieler seine Burgen gegen Angriffe von der See verteidigen, in dem er versucht, seine von den gegnerischen Kanonen zerstörten Mauern wieder zu flicken. Das Spiel begründete ein neues Computerspiel-Genre, das der <a href="https://de.wikipedia.org/wiki/Tower_Defense">Tower Defense Games</a>.</p>
<p>Folgegerichtig beschränkt sich das <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygamezero.html">Pygame Zero</a>-Remake von <em>Mark Vanstone</em>, das in der aktuellen <a href="https://wireframe.raspberrypi.com/articles/out-now-wireframe-70-the-final-print-edition">Wireframe 70</a> und zeitgleich in den Raspberry Pi News <a href="https://www.raspberrypi.com/news/tower-defence-wall-building-in-python-wireframe-70/">veröffentlicht</a> wurde, auf den Bau der Mauern, um die Burg vor den Angriffen zu schützen. Die Implementierung der Angriffe selber wie auch das Zurückschießen der Verteidiger ist der Phantasie der Leserinnen und Leser überlassen.</p>
<p>Den <a href="https://github.com/Wireframe-Magazine/">Quellcode und die Assets</a> wird es sicher bald auf GitHub geben (momentan funktioniert <a href="https://github.com/Wireframe-Magazine/Wireframe-70">der Link</a> noch nicht (»Coming Soon«)). Und die aktuelle Wireframe könnt Ihr Euch wie jeden Monat <a href="https://wireframe.raspberrypi.com/issues/70/pdf">hier kostenlos als PDF</a> herunterladen.</p>



 ]]></description>
  <category>Retrogaming</category>
  <category>Pygame Zero</category>
  <guid>https://kantel.github.io/posts/2023010503_code_the_classics_rampart/index.html</guid>
  <pubDate>Thu, 05 Jan 2023 18:50:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023010503_code_the_classics_rampart/images/towerdefence.png" medium="image" type="image/png" height="103" width="144"/>
</item>
<item>
  <title>CodeEdit: Nicht schon wieder eine Mac-only-Falle</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023010502_codeedit_mac_only_falle/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://images.ifun.de/wp-content/uploads/2023/01/code-editor.png"><img src="https://kantel.github.io/posts/2023010502_codeedit_mac_only_falle/images/code-editor-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Nein, auch wenn es mich in sämtlichen Fingern juckt: Ich werde mir <a href="https://www.codeedit.app/">CodeEdit</a>, den neuen, freien (MIT-Lizenz) und <a href="https://stadt-bremerhaven.de/codeedit-erste-vorabversion-des-code-editors-fuer-den-mac-ist-da/">hochgelobten</a> Code-Editor nicht <a href="https://github.com/CodeEditApp/CodeEdit/releases">herunterladen</a>. Denn er ist als XCode-Ersatz gedacht und daher naheliegenderweise Mac-only.</p>
<p>Ich habe schließlich lange genug dafür gekämpft (und den Kampf eigentlich immer noch nicht gewonnen, sondern mich zähnenirschend mit <a href="http://cognitiones.kantel-chaos-team.de/produktivitaet/visualstudiocode.html">Visual Studio Code</a> abgefunden), einen Ersatz für mein geliebtes und hervorragendes <a href="http://cognitiones.kantel-chaos-team.de/produktivitaet/textmate.html">TextMate</a> zu finden, das zwar der beste Editor der Welt, aber eben auch »nur« Mac-only ist. Aber ich habe eben nicht mehr nur Hardware mit dem angebissenen Apfel im Logo, sondern seit einiger Zeit auch ein Chromebook<sup>1</sup> zu bestücken. Und wenn mein betagtes MacBook Pro (das immerhin seit 2012 bei mir seine Dienste verrichtet) seinen Geist aufgeben sollte, wird in mein Arbeitsszimmer sicher kein neuer Laptop von Apple einziehen, sondern ein Linux-Desktop<sup>2</sup>.</p>
<p>Schließlich habe ich hart genug daran gearbeitet, nicht nur keine proprietäre, sondern auch keine plattformabhängige Software mehr einzusetzen. Und nachdem mir das endlich gelungen ist, gehe ich keinen Schritt mehr zurück.</p>
<p>Wer aber unter meinen Leserinnen und Lesern weiterhin auf Apple-Hardware setzt oder setzen muß, für die oder den ist CodeEdit sicher einen Versuch wert und eine echte Alternative zu kommerzieller Software. Auf ifun.de gibt es einen <a href="https://www.ifun.de/codeedit-fuer-mac-neuer-open-source-editor-geht-an-den-start-201567/">ersten Testbericht</a>. Für die, die es brauchen: Habt Spaß damit!</p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Fußnoten</h2>

<ol>
<li id="fn1"><p>Das Chromebook hält zwar zur Zeit so etwas wie eine Art Winterschlaf, aber sobald das Wetter wieder wärmer wird und Programmieren im Garten auf der Terrasse zuläßt – ich habe schließlich oft genug betont, daß mein WLAN bis auf die Terrasse reicht –, werde ich es wieder wecken und aktivieren.↩︎</p></li>
<li id="fn2"><p>Das ist nämlich mein Plan: Eine leistungsstarke Linux-Büchse stationär im Arbeitszimmer und für unterwegs ein Chromebook – ebenfalls mit Linux-Unterstützung. Dafür werde ich meinem nächsten Chromebook ein wenig mehr Speicher spendieren.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>News</category>
  <guid>https://kantel.github.io/posts/2023010502_codeedit_mac_only_falle/index.html</guid>
  <pubDate>Thu, 05 Jan 2023 17:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023010502_codeedit_mac_only_falle/images/code-editor.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Gravity-Simulation mit Pygame (4)</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023010501_gravity_sim_pygame_4/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://upload.wikimedia.org/wikipedia/commons/5/53/Happy_Hooligan%21_The_Night_was_Dark_and_Stormy%21_%28May_2%2C_1909%29.jpg"><img src="https://kantel.github.io/posts/2023010501_gravity_sim_pygame_4/images/darkandstormynight-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Der Google-Bot läßt mich mit dem Thema »Gravity-Simulation mit Pygame« nicht in Ruhe. Gestern abend spülte er ein weiteres Video »<a href="https://www.youtube.com/watch?v=7rZgC_I9RNA">Ridiculously easy n-body gravity simulation using Pygame</a>« in meine Zeitleiste:</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/7rZgC_I9RNA" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Ich habe dieses Video noch aufgenommen, weil es zeigt, wie man eine größere Anzahl von Körpern (der Autor spricht von maximal 200) in die Simulation integriert. Doch jetzt ist Schluß mit dem Thema. Irgendwann muß ich ja auch die Zeit dafür finden, all diese netten Vorschläge in Code umzusetzen. <em>Still digging!</em></p>
<p>Das Bild ziert diesen Beitrag, weil es auf seine Art auch etwas mit Gravitation zu tun hat. <em>(Bildquelle: <a href="https://commons.wikimedia.org/wiki/File:Happy_Hooligan!_The_Night_was_Dark_and_Stormy!_(May_2,_1909).jpg">Wikimedia Commons</a>)</em></p>



 ]]></description>
  <category>Simulation</category>
  <category>Pygame</category>
  <guid>https://kantel.github.io/posts/2023010501_gravity_sim_pygame_4/index.html</guid>
  <pubDate>Thu, 05 Jan 2023 15:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023010501_gravity_sim_pygame_4/images/darkandstormynight.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Noch eine Playlist: Creative Coding mit P5.js</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023010404_creative_coding_p5js/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.youtube.com/watch?v=fbWIolOqIqM"><img src="https://kantel.github.io/posts/2023010404_creative_coding_p5js/images/dannewoo-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Für diejenigen unter Euch, die wie ich den Hals nicht vollbekommen, habe ich noch eine Playlist ausgegraben: <em>Danne Woo</em> <a href="https://creativecoding.danne.design/">unterrichtet</a> »Creative Coding« mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/p5js.html">P5.js</a> am <a href="https://www.qc.cuny.edu/">Queens College, CUNY</a> in New York. Und er hat seine Vorlesungen auf Video aufgezeichnet und auf YouTube hochgeladen:</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/fbWIolOqIqM" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>Seine <a href="https://www.youtube.com/playlist?list=PLKcBOqBHPjvmqJ7xym6wMWCTyDyFTtYV5">Playlist</a> umfaßt 12 Videos mit einer Länge zwischen 30 Minuten und etwa einer Stunde und noch ein kurzes Video mit Studentenarbeiten.</p>
<p>Nach einem ersten Reinschnuppern sieht das nach einer interessanten Vorlesungsreihe aus, da <em>Danne Woo</em> nicht nur die (Programmier-) Technik vermitteln will, sondern auch die ästhetischen und theoretischen Grundlagen behandelt. Etwas, das in den meist eher informatiklastigen Tutorials oft vergessen wird. Daher verspreche ich mir von dieser Playlist sehr viel auch neue Erkenntnisse für mich und daher habe ich sie Mitte der Woche schon einmal vorab herausgehauen.</p>



 ]]></description>
  <category>Creative Coding</category>
  <category>P5.js</category>
  <guid>https://kantel.github.io/posts/2023010404_creative_coding_p5js/index.html</guid>
  <pubDate>Wed, 04 Jan 2023 19:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023010404_creative_coding_p5js/images/dannewoo.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Android-Update am »Januar-Patchday«</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023010403_android_update/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://upload.wikimedia.org/wikipedia/commons/b/b6/Happy_Hooligan_detail%2C_from-_Friend_of_the_Comic_People_1906_%28cropped%29.jpg"><img src="https://kantel.github.io/posts/2023010403_android_update/images/happyhooligan-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Google hat mit seinem monatlichen Sicherheitsupdate für Android (und damit auch auf seinen <a href="https://source.android.com/docs/security/bulletin/pixel/2023-01-01">Pixel-Geräten</a>) wieder <a href="https://source.android.com/docs/security/bulletin/2023-01-01">Sicherheitslücken</a> geschlossen.</p>
<p>Die Updates werden so nach und nach per OTA <em>(over the air)</em> auf Pixel 7/7 pro, Pixel 6a, Pixel 6/6 pro, Pixel 5, Pixel 4a 5G, Pixel 4a verteilt.</p>
<p>Die anderen Hersteller werden wie üblich in Bälde nachziehen, sofern sie überhaupt noch entsprechenden Support leisten. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">persönlicher CERT</a> per Email.)</em></p>
<p><em>(Bildquelle: <a href="https://commons.wikimedia.org/wiki/File:Happy_Hooligan_detail,_from-_Friend_of_the_Comic_People_1906_(cropped).jpg">Wikimedia Commons</a>)</em></p>



 ]]></description>
  <category>News</category>
  <guid>https://kantel.github.io/posts/2023010403_android_update/index.html</guid>
  <pubDate>Wed, 04 Jan 2023 18:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023010403_android_update/images/happyhooligan.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Noch ein Gravity-Simulator in Pygame</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023010402_gravity_sim_2/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://camo.githubusercontent.com/13a8e7d9d34fc04614b5ce08c02df1af94737f30276c291364944d0ee3c98393/68747470733a2f2f692e696d6775722e636f6d2f4f65466f6856762e706e67"><img src="https://kantel.github.io/posts/2023010402_gravity_sim_2/images/gravitysim2-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Natürlich hatte der allwissende Google-Bot mein <a href="https://kantel.github.io/posts/2023010301_gravity_sim_pygame/">gestriges Interesse</a> an einer Gravity-Simulation in <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a> bemerkt (sagte ich nicht, daß dieser Bot mir manchmal unheimlich ist?) und spülte mir gleich noch ein weiteres Video in meine Zeitleiste:</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/M_4bVmkl6IE" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p><a href="https://www.youtube.com/watch?v=M_4bVmkl6IE">Dieses Video</a> des Youtubers <em>Gravitar</em> kommt einmal nicht ganz so hektisch daher, wie das gestern vorgestellte, und ist zum anderen deutschspachig. Und es deckt im großen und ganzen den gleichen Bereich ab, wie der gestern ebenfalls schon vorgestellt, in C++ geschriebene <a href="https://github.com/jasonxia17/orbit-simulator">Orbit-Simulator</a> von <em>Jason Xia</em> (deshalb habe ich gnadenlos auch einen Screenshot daraus als Bannerbild verwurstelt), nur eben in Python und Pygame geschrieben.</p>
<p>Das Video ist Teil der Playlist »<a href="https://www.youtube.com/playlist?list=PLhC_4AWNg9rnM_qAPyUU4Wo1kJoOAMC6_">A beautiful Code in Python</a>«, die ich nur empfehlen kann. Ich habe heute ein wenig darin gestöbert – <em>Gravitar</em> weiß sehr viel über Python und Pygame, auch Dinge, die ich trotz meiner langjährigen Python-Erfahrung noch nicht kannte. Die Playlist wird sich vermutlich niemand komplett reinziehen können, sie ist über die letzten vier Jahre gewachsen und besteht aktuell (Stand heute) aus 89 im Schnitt halbstündigen Tutorials, besitzt also eine Laufzeit von etwa 40 Stunden. Und <em>Gravitar</em> ist fleißig, die Liste wächst noch weiter: Etwa alle zwei Wochen kommt ein neues Video hinzu.</p>
<p>Also macht es wie ich: Nutzt die Playlist als Wissenssteinbruch und stöbert einfach darin herum. Denn Ihr werdet alles davon, nur nicht dümmer.</p>



 ]]></description>
  <category>Simulation</category>
  <category>Pygame</category>
  <guid>https://kantel.github.io/posts/2023010402_gravity_sim_2/index.html</guid>
  <pubDate>Wed, 04 Jan 2023 17:20:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023010402_gravity_sim_2/images/gravitysim2.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Künstler des Monats Januar 2023: Frederick Burr Opper</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023010401_frederick_burr_opper/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://upload.wikimedia.org/wikipedia/commons/thumb/b/bd/%22All_aboard_for_the_millennium%21%22_-_Opper_and_Keppler._LCCN2012648532_%28cropped%29_2.jpg/1024px-%22All_aboard_for_the_millennium%21%22_-_Opper_and_Keppler._LCCN2012648532_%28cropped%29_2.jpg"><img src="https://kantel.github.io/posts/2023010401_frederick_burr_opper/images/allaboard-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Der Künstler, mit dem ich diesen Monat die Beiträge illustrieren werde, für die keine eigenen Bilder vorliegen, heißt <em><a href="https://en.wikipedia.org/wiki/Frederick_Burr_Opper">Frederick Burr Opper</a></em>. Er lebte von 1857 bis 1937 und war ein bekannter amerikanischer (politischer) Karikaturist (unter anderem für den <em>Puck</em>) und einer der ersten Comic-Zeichner. Ihm wird nachgesagt, daß er die Sprechblase als festes Stilmittel in den Comic-Strip eingeführt hat.</p>
<section id="literatur" class="level2">
<h2 class="anchored" data-anchor-id="literatur">Literatur</h2>
<ul>
<li><a href="https://www.lambiek.net/artists/o/opper.htm">Frederick Burr Opper in der Lambiek Comiclopedia</a></li>
<li>Barbara Denscher: <em><a href="https://www.austrianposters.at/2020/11/01/der-cartoonist-frederick-burr-opper-und-die-fake-news/">Der Cartoonist Frederick Burr Opper und die Fake News</a></em>, Austrian Posters (Beiträge zur Geschichte der visuellen Kommunikation), 1. November 2020</li>
</ul>
<p><em>(Bildquelle: <a href="https://commons.wikimedia.org/wiki/File:%22All_aboard_for_the_millennium!%22_-_Opper_and_Keppler._LCCN2012648532_(cropped)_2.jpg">Wikimedia Commons</a>)</em></p>


</section>

 ]]></description>
  <category>Bilder</category>
  <guid>https://kantel.github.io/posts/2023010401_frederick_burr_opper/index.html</guid>
  <pubDate>Wed, 04 Jan 2023 16:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023010401_frederick_burr_opper/images/allaboard.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Frauen am Kontrabaß: Linday Reith</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023010302_lindsay_reith/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://www.youtube.com/watch?v=Qikp08PPBf0"><img src="https://kantel.github.io/posts/2023010302_lindsay_reith/images/lindsayraith-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Die Band »<a href="http://southernraisedbluegrass.com/">Southern Raised</a>« ist eine Familienangelegenheit. Denn drei der vier Bandmitglieder sind Geschwister. Sie spielen <a href="https://de.wikipedia.org/wiki/Bluegrass">Bluegrass</a>, aber alle Musiker haben einen klassischen Hintergrund. Die Band stand schon lange auf meiner Liste – vor allem wegen des seltsamen (nun ja) Kontrabasses, den <em><a href="http://southernraisedbluegrass.com/video/lindsay/">Lindsay Reith</a></em> spielt.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/Qikp08PPBf0" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="">
</iframe>
<p>An ihrer Version der Titelmelodie des Italowesterns »<a href="https://de.wikipedia.org/wiki/Zwei_glorreiche_Halunken">Zwei glorreiche Halunken</a>« hätte sicher auch <em>Ennio Morricone</em> seine Freude gehabt. Trotz des begrenzten Bluegrass-Instrumentariums (Banjo, Fiddle, Mandoline, Gitarre, Baß) zeigt sie doch genug Respekt vor dem orchestralen Original (was ohne Zweifel auch durch die geschickte Aufnahmetechnik erreicht wurde). Und warum soll ein in Spanien gedrehter Italo-Western nicht auch mit original-nordamerikanischern Country-Klängen unterlegt werden dürfen? Mir – als bekennenden Italo-Western-Fan – hat diese Aufnahme jedenfalls viel Spaß bereitet.</p>
<p>Die übrigen Musiker sollen nicht unerwähnt bleiben: Es sind <em>Matt Reith</em> an der Gitarre, <em>Emily Reith</em> and der Fiddel und der Mandoline und <em>Alex Clayton</em> am Banjo. Und auch <em>Joe Carell</em>, der die Aufnahme zusammenmixte, verdient großen Respekt.</p>



 ]]></description>
  <category>Musik</category>
  <guid>https://kantel.github.io/posts/2023010302_lindsay_reith/index.html</guid>
  <pubDate>Tue, 03 Jan 2023 19:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023010302_lindsay_reith/images/lindsayraith.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Gravity-Simulator in Pygame</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023010301_gravity_sim_pygame/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://camo.githubusercontent.com/b21465f9d3c943ceb143be4b29eea89280ff011883b9694dbb78e24dcfdcb563/68747470733a2f2f692e696d6775722e636f6d2f78794a4e5877532e706e67"><img src="https://kantel.github.io/posts/2023010301_gravity_sim_pygame/images/orbitsimulator-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Jetzt mit mehr Physik: <a href="https://kantel.github.io/posts/2023010202_earth_moon_orbit_sim/">Gestern</a> hatte ich doch diese simple Simulation eines Erde-Mond-Systems hier im <em>Schockwellenreiter</em>, die <em>Kevin Workman</em> im Rahmen des <em>Genuary 2023</em> in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/p5js.html">P5.js</a> programmiert hatte. Daraufhin spülte mit heute der mitlesende und daher allwissende Bot von Google <a href="https://www.youtube.com/watch?v=GwhXc78a0QY">diesen Gravity-Simulator</a> – programmiert in <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a> – in meine Zeitleiste.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/GwhXc78a0QY" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="">
</iframe>
<p>Und dieser Simulator nimmt – im Gegensatz zu <em>Kevin Workman</em> – auch mehr Rücksicht auf die dahinterstehende Physik. Also ein guter Startpunkt für eigene Experimente.</p>
<p>Der Screenshot im Banner oben ist von einem in C++ geschriebenen <a href="https://github.com/jasonxia17/orbit-simulator">Orbit-Simulator</a>, den <em><a href="https://github.com/jasonxia17">Jason Xia</a></em> im Quellcode auf GitHub hochgeladen hat. Dieser soll explizit die <a href="https://de.wikipedia.org/wiki/Keplersche_Gesetze">Keplerschen Gesetze</a> berücksichtigen. Auch wenn ich es mit C++ so nicht habe, den Quellcode werde ich wohl noch lesen können. Also ein weiterer Ausgangspunkt für eigene Erkundungen.</p>
<p>Das <a href="https://github.com/jasonxia17?tab=repositories">GitHub-Repositorium</a> von <em>Jason Xia</em> enthält übrigens noch weit mehr Physik-Spielereien, teilweise auch in Python geschrieben. Sollte ich mir daher unbedingt noch genauer anschauen.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/yBVeCXnxQYs" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="">
</iframe>
<p><strong>War sonst noch was?</strong> Ach ja, der <em>Genuary 2023</em> hat ja gerade erst begonnen. Und als zweiten Beitrag hat <em>Kevin Workman</em> im Schnellverfahren einen <a href="https://www.youtube.com/watch?v=yBVeCXnxQYs">Random Walker</a> ebenfalls in P5.js implementiert und auf YouTube hochgeladen. <em>Cool!</em></p>
<p>Dazu schlug mir natürlich der allwissende Google-Bot ebenfalls eine Ergänzung vor: <a href="https://www.youtube.com/watch?v=Q7vY__nghc4">White Noise and Random Walk</a> aus der Reihe »Time Series from Scratch«. Manchmal ist mir der Bot schon etwas unheimlich.&nbsp;🤓</p>



 ]]></description>
  <category>Simulation</category>
  <category>Pygame</category>
  <guid>https://kantel.github.io/posts/2023010301_gravity_sim_pygame/index.html</guid>
  <pubDate>Tue, 03 Jan 2023 15:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023010301_gravity_sim_pygame/images/orbitsimulator.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>PromptToImage: Stable Diffusion für (Silicon-) Macs</title>
  <dc:creator>Jörg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2023010203_prompt_to_image/index.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://user-images.githubusercontent.com/27217431/209742328-6286bb18-fa36-40e2-b1d1-639aadd09cf5.png"><img src="https://kantel.github.io/posts/2023010203_prompt_to_image/images/prompt2image-b.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p><a href="https://de.wikipedia.org/wiki/Stable_Diffusion">Stable Diffusion</a> ist ein Deep-Learning-Text-zu-Bild Generator. Es wird hauptsächlich zur Generierung detaillierter Bilder auf der Grundlage von Textbeschreibungen verwendet, kann aber auch für andere Aufgaben wie Inpainting, Outpainting und die Generierung von Bild-zu-Bild-Übersetzungen auf der Grundlage einer Textaufforderung eingesetzt werden. Im Gegensatz zu proprietären Projekten wie <a href="https://de.wikipedia.org/wiki/DALL-E">DALL-E</a> oder Midjourney steht Stable Fusion unter einer freien, erweiterten GPL-Lizenz, die lediglich bestimmte, sozial schädliche Anwendungsfälle verbietet, wie zum Beispiel Verbrechen, Verleumdung oder die »Ausbeutung von Minderjährigen«. Ansonsten bleibt der Nutzer Eigentümer der Rechte an den von ihm erzeugten Bildern und kann diese auch kommerziell nutzen.</p>
<p>Stable Diffusion muß nicht in der Cloud, sondern kann auf den meisten, relativ modernen Consumer-Rechnern laufen. Während es für Windwows und Linux mit <a href="https://stable-diffusion-ui.github.io/">Stable Diffusion UI</a> (<a href="https://github.com/cmdr2/stable-diffusion-ui">Downlaod und Quellcode</a> auf GitHub) schon seit längerem eine nette Desktop-Version gab, die <em>Jim Clyde Monge</em> <a href="https://medium.com/mlearning-ai/one-click-install-for-stable-diffusion-ui-2-0-run-locally-3c38bfbd30cd">hier besprochen</a> hatte (leider ein Medium.com-Link hinter einer Bezahlschranke), war bisher eine Mac-Version nur versprochen.</p>
<p>Das hat sich nun geändert: Mit <a href="https://github.com/TheMurusTeam/PromptToImage">PromptToImage</a> steht derzeit <a href="https://testflight.apple.com/join/oMxyZ7wO">über Testflight</a> auch eine Version für macOS zum Download bereit. PromptToImage setzt auf <a href="http://cognitiones.kantel-chaos-team.de/programmierung/swift.html">Swift</a> und AppKit, ist also eine native Stable-Diffusion-App für den Mac. Dabei wird nicht nur Text-zu-Bild, sondern auch Bild-zu-Bild unterstützt. Also kommen nun auch endlich Mac-User in den Genuß des faszinierenden Spielzeugs. Doch <a href="https://stadt-bremerhaven.de/prompttoimage-neue-stable-diffusion-app-fuer-den-mac/">Cashys Blog warnt</a>: <em>»… das Thema ist ein echtes »Rabbit Hole«, in dem man sich verlieren kann.«</em></p>
<p>Außerdem braucht das Teil einen Apple Silicon Mac mit macOS 13.1 Ventura. <strong>Intel Macs werden nicht unterstützt</strong>. Ich muß also noch etwas warten, bevor auch ich mit Stable Diffusion meine Zeit vergeuden kann.</p>



 ]]></description>
  <category>Künstliche Intelligenz</category>
  <guid>https://kantel.github.io/posts/2023010203_prompt_to_image/index.html</guid>
  <pubDate>Mon, 02 Jan 2023 19:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2023010203_prompt_to_image/images/prompt2image.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
