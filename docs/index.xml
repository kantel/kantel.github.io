<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Der Schockwellenreiter</title>
<link>https://kantel.github.io/</link>
<atom:link href="https://kantel.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description>Schockwellenreiter</description>
<generator>quarto-1.4.549</generator>
<lastBuildDate>Wed, 10 Apr 2024 16:45:00 GMT</lastBuildDate>
<item>
  <title>Vorher ‚Äì nachher (trotz des Berliner S-Bahn-Chaosses)</title>
  <dc:creator>J√∂rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024041001_vorher_nachher/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53645277164/"><img src="https://kantel.github.io/posts/2024041001_vorher_nachher/images/selfiefriseur-b.jpg" class="img-fluid"></a></p>
<p>Jetzt habe ich wieder die Haare sch√∂n ‚Äì dank <a href="https://www.facebook.com/coiffeuremarinaundteam/?locale=de_DE">Coiffeure Marina &amp; Team</a>. Auch wenn die Reise von Neuk√∂lln nach <del>Schweine√∂de</del> Sch√∂neweide dank der kaputtgesparten Berliner S-Bahn mal wieder der blanke Horror war. Da√ü zwischen S√ºdkreuz und Tempelhof ein Baum aufs Gleis f√§llt, darf eigentlich nicht passieren, es sei denn man hat fahrl√§ssig an der B√∂schungssicherung gespart. Und da√ü irgendwo mal ein Polzeieinsatz den Fahrplan durcheinanderbringt: Geschenkt. Aber da√ü man w√§hrend eines zwanzigmin√ºtigen Zwangsaufenthalts auf dem Bahnhof Baumschulenweg nicht in der Lage ist, die Fahrg√§ste zu informieren, das nehme ich den S-Bahn-Oberen √ºbel.</p>
<p>Darauf gibt es nur eine Antwort: Wegen eklatanten Marktversagens eine sofortige, entsch√§digungslose Enteignung und Rekommunalisierung der S-Bahn. Denn als ich noch Bef√∂rderungsfall und noch nicht Fahrgast war, hatte die S-Bahn noch funktioniert.</p>
<p>Aber genug gemeckert, auch wenn ich meinen Termin nicht halten konnte, hat <em>Marina B.</em> meinen wilden, grauen Locken wieder Schliff verpa√üt. Die beiden obigen vorher-nachher-Photos beweisen es. Daf√ºr geht mein Dank in die Flie√üstra√üe, denn was Friseurinnen k√∂nnen, k√∂nnen nur Friseurinnen.&nbsp;üíá‚Äç‚ôÇÔ∏è</p>



 ]]></description>
  <category>Modernes Leben</category>
  <category>Photographie</category>
  <guid>https://kantel.github.io/posts/2024041001_vorher_nachher/</guid>
  <pubDate>Wed, 10 Apr 2024 16:45:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024041001_vorher_nachher/images/selfiefriseur.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>MicroStudio und Python: Kollisionserkennung (2)</title>
  <dc:creator>J√∂rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024040701_rect_collision/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53637881438/"><img src="https://kantel.github.io/posts/2024040701_rect_collision/images/mstudio_rect_col-b.jpg" class="img-fluid"></a></p>
<p>Dies ist ein weiterer Beitrag meiner kleinen Serie zur Spiele- und zur kreativen Programmierung mit <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/microstudio.html">microStudio</a> und Python/<a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/brython.html">Brython</a>. Auf die <a href="https://kantel.github.io/posts/2024040201_collision_detection_1/">Kollisionserkennung zweier Kreise</a> folgt nun die Kollisionserkennung zweier Rechtecke:</p>
<iframe src="pythontutorial9/index.html" class="if16_9" name="Rechteck-Kollision">
</iframe>
<p>Bei der Kollisionserkennung zweier Rechtecke ist es ‚Äì speziell bei Spielen ‚Äì oftmals sinnvoll, zu unterscheiden, ob die Kollision von oben oder unten (Plattformer!) oder von rechts oder links erfolgt. In diesem Beispiel untersuche ich jedoch nur den einfachsten Fall: Eine Kollision wird gemeldet, egal von welcher Richtung sie stattfindet<sup>1</sup>:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> is_rect_collision(obj1, obj2):</span>
<span id="cb1-2">  distance_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> obj1.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> obj2.x</span>
<span id="cb1-3">  distance_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> obj1.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> obj2.y</span>
<span id="cb1-4">  half_w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> obj1.w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> obj2.w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb1-5">  half_h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> obj1.h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> obj2.h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb1-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(distance_x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> half_w):</span>
<span id="cb1-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(distance_y) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> half_h):</span>
<span id="cb1-8">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb1-9">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span></code></pre></div>
<p>Diese einfach Kollisionserkennung l√§√üt sich jedoch ‚Äì da sie schon die horizontale von der vertikalen Kollision unterscheidet ‚Äì leicht aufbohren. Und auch da√ü im Beispielskript die Rechtecke Quadrate sind (Kenney hatte leider <a href="https://kenney.nl/assets/animal-pack-redux">neben den kreisrunden nur quadratische</a> und keine rechteckigen Viecher im Portfolio), ist keine Einschr√§nkung der Allgemeing√ºltigkeit, denn die obige Funktion pr√ºft Weite und H√∂he der Objekte separat ab.</p>
<p>Das Skript ist dem bisherigen Beispiel ziemlich √§hnlich. Zuerst habe ich die einzelnen Klassen <code>Back</code> (f√ºr den Hintergrund) und <code>Parrot</code> und <code>Whal</code> (f√ºr die <del>rechteckigen</del> quadratischen Tiere) definiert:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Back:</span>
<span id="cb2-2">  </span>
<span id="cb2-3">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-4">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bg_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(234, 218, 184)"</span></span>
<span id="cb2-5">    </span>
<span id="cb2-6">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> display(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-7">    screen.fillRect(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, screen.width, screen.height, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bg_col)</span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Parrot:</span>
<span id="cb2-10">  </span>
<span id="cb2-11">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-12">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span></span>
<span id="cb2-13">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span></span>
<span id="cb2-14">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span></span>
<span id="cb2-15">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span></span>
<span id="cb2-16">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"parrot"</span></span>
<span id="cb2-17">    </span>
<span id="cb2-18">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> move(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-19">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mouse.x</span>
<span id="cb2-20">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mouse.y</span>
<span id="cb2-21">  </span>
<span id="cb2-22">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> display(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-23">    screen.drawSprite(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h)</span>
<span id="cb2-24"></span>
<span id="cb2-25"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Whal:</span>
<span id="cb2-26">  </span>
<span id="cb2-27">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-28">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-29">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-30">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span></span>
<span id="cb2-31">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span></span>
<span id="cb2-32">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"narwhal"</span></span>
<span id="cb2-33">    </span>
<span id="cb2-34">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> display(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-35">    screen.drawSprite(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h)</span></code></pre></div>
<p>Im Hauptprogramm versucht dann der Papagei (unterst√ºtzt von der Maus) auf dem R√ºcken des Wals zu landen. Jedesmal, wenn er auf den Wal trifft, ver√§ndert sich die Farbe des Hintergrunds:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> init():</span>
<span id="cb3-2">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">global</span> back, parrot, whal</span>
<span id="cb3-3">  back <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Back()</span>
<span id="cb3-4">  whal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Whal()</span>
<span id="cb3-5">  parrot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Parrot()</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update():</span>
<span id="cb3-8">  parrot.move()</span>
<span id="cb3-9">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> is_rect_collision(parrot, whal):</span>
<span id="cb3-10">    back.bg_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(243, 156, 18)"</span></span>
<span id="cb3-11">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb3-12">    back.bg_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(234, 218, 184)"</span></span>
<span id="cb3-13"></span>
<span id="cb3-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> draw():</span>
<span id="cb3-15">  back.display()</span>
<span id="cb3-16">  whal.display()</span>
<span id="cb3-17">  parrot.display()</span>
<span id="cb3-18">  </span>
<span id="cb3-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> is_rect_collision(obj1, obj2):</span>
<span id="cb3-20">  distance_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> obj1.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> obj2.x</span>
<span id="cb3-21">  distance_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> obj1.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> obj2.y</span>
<span id="cb3-22">  half_w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> obj1.w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> obj2.w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb3-23">  half_h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> obj1.h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> obj2.h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb3-24">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(distance_x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> half_w):</span>
<span id="cb3-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(distance_y) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> half_h):</span>
<span id="cb3-26">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb3-27">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span></code></pre></div>
<p>Die Funktion <code>is_rect_collision()</code> hier zu implementieren, war eine reine Design-Entscheidung. Ebensogut h√§tte sie als Methode zum Beispiel der Klasse <code>Parrot</code> implementiert werden k√∂nnen.</p>
<p>Meine kleine Tutorial-Reihe zu microStudio mit Python ist mittlerweile schon auf neun Beitr√§ge angewachsen. Hier noch einmal alle bisherigen Artikel, damit Ihr und auch ich nicht die √úbersicht verliert:</p>
<ul>
<li>MicroStudio und Python (Teil 1): <a href="https://kantel.github.io/posts/2024032201_microstudio_python_1/">Hallo Brython</a>!</li>
<li>MicroStudio und Python (Teil 2): <a href="https://kantel.github.io/posts/2024032401_microstudio_python_2/">Zombie Apokalypse</a></li>
<li>MicroStudio und Python (Teil 3): <a href="https://kantel.github.io/posts/2024032502_microstudio_python_3/">Dancing Crab</a></li>
<li>MicroStudio und Python (Teil 4): <a href="https://kantel.github.io/posts/2024032703_flying_badger_python/">Flying Badger</a></li>
<li>MicroStudio und Python (Teil 5): <a href="https://kantel.github.io/posts/2024032801_microstudio_noc_1/">PVector2 und ¬ªThe Nature of Code¬´</a></li>
<li>MicroStudio und Python (Teil 6): <a href="https://kantel.github.io/posts/2024033102_bouncing_balls_microstudio/">Bouncing Balls</a></li>
<li>MicroStudio und Python (Teil 7): <a href="https://kantel.github.io/posts/2024040201_collision_detection_1/">Kollisionserkennung mit Kreisen</a></li>
<li>MicroStudio und Python (Teil 8): <a href="https://kantel.github.io/posts/2024040401_bouncing_birds/">Bouncing Birds</a></li>
<li>MicroStudio und Python (Teil 9): Kollisionserkennung mit Rechtecken</li>
</ul>
<p>Und nat√ºrlich habe ich auch dieses Tutorial wieder auf meinem <a href="https://microstudio.dev/i/kantel/pythontutorial9/">microStudio-Account hochgeladen</a> (dieses Mal hoffentlich mit korrektem Link), damit Ihr damit spielen und experimentieren k√∂nnt. Weitere Tutorials habe ich ebenfalls schon in der Planung. <em>Still digging!</em></p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Fu√ünoten</h2>

<ol>
<li id="fn1"><p>Ich folge hier einem Beispielskript, das ich im <a href="http://blog.schockwellenreiter.de/2019/11/2019112002.html">November 2019</a> schon einmal in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processingpy.html">Processing.py</a> wie auch in JavaScript (<a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/p5js.html">P5.js</a>) implementiert hatte.‚Ü©Ô∏é</p></li>
</ol>
</section></div> ]]></description>
  <category>microStudio</category>
  <category>Python</category>
  <category>Creative Coding</category>
  <category>Spieleprogrammierung</category>
  <guid>https://kantel.github.io/posts/2024040701_rect_collision/</guid>
  <pubDate>Sun, 07 Apr 2024 16:00:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024040701_rect_collision/images/mstudio_rect_col.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Kenney 1-Bit Pack: Neue Farbpaletten braucht das Land</title>
  <dc:creator>J√∂rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024040501_1bit_farbpalette/</link>
  <description><![CDATA[ 




<p><a href="http://cognitiones.kantel-chaos-team.de/multimedia/farbpaletten/kenney1bit.html"><img src="https://kantel.github.io/posts/2024040501_1bit_farbpalette/images/kenney1bit-b.jpg" class="img-fluid"></a></p>
<p>Weil man ja bekanntlich nie genug Farbpaletten <em>in petto</em> haben kann, weil ich bei meiner Erkundung von <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/microstudio.html">microStudio</a> endlich mal etwas mit <a href="https://kenney.nl/assets/1-bit-pack">Kenneys 1-Bit Pack</a> anstellen wollte (denn das steht schon ewig auf meiner Agenda) und weil microStudios Sprite-Editor keine Farbpipette besitzt, habe ich mich hingesetzt und mit Hilfe des <a href="http://cognitiones.kantel-chaos-team.de/multimedia/computergraphik/gc.html">Graphikprogramm meines Vertrauens</a> aus dem Pack die Farben extrahiert und mir daraus selber eine Farbpalette gebastelt.</p>
<p>Und weil ich dies nicht nur f√ºr mich und meine Schublade basteln wollte, habe ich diese Farbpalette unter dem Namen <a href="http://cognitiones.kantel-chaos-team.de/multimedia/farbpaletten/kenney1bit.html">Kenney 1-Bit Pack</a> auf <a href="http://cognitiones.kantel-chaos-team.de/index.html">mein Wiki</a> zur Nutzung f√ºr Euch alle da drau√üen hochgeladen. Stellt was Schickes damit an&nbsp;‚Ä¶</p>



 ]]></description>
  <category>Creative Coding</category>
  <category>Farbpaletten</category>
  <category>microStudio</category>
  <guid>https://kantel.github.io/posts/2024040501_1bit_farbpalette/</guid>
  <pubDate>Fri, 05 Apr 2024 18:45:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024040501_1bit_farbpalette/images/kenney1bit.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>MicroStudio und Python: Bouncing Birds</title>
  <dc:creator>J√∂rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024040401_bouncing_birds/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53627951378/"><img src="https://kantel.github.io/posts/2024040401_bouncing_birds/images/bouncingbirds-b.jpg" class="img-fluid"></a></p>
<p>Nun ist es an der Zeit, da√ü ich mit den neu gewonnenen Erkenntnissen zur <a href="https://kantel.github.io/posts/2024040201_collision_detection_1/">Kollisionserkennung von Kreisen</a> in <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/microstudio.html">microStudio</a> und Python/<a href="https://brython.info/">Brython</a> auch etwas anstelle. Ich habe daber eine Anzahl von kreisrunden V√∂geln (in meiner Spielewelt sind nicht nur Schlangen und Kaninchen, sondern auch V√∂gel kugelrund) √ºber den Bildschirm flattern lassen, die sich ‚Äì in der Regel (dazu weiter unten mehr) ‚Äì bei einer Kollision gegenseitig absto√üen und in entgegengesetzter Richtung weiter fliegen.</p>
<iframe src="pythontutorial8/index.html" class="if16_9" name="Bouncing Birds">
</iframe>
<p>Dazu habe ich erst einmal eine Klasse <code>Bird</code> implementiert:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> randint, uniform, choice</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb1-3"></span>
<span id="cb1-4">bird_im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chick"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chicken"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"duck"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"owl"</span>,</span>
<span id="cb1-5">           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"parrot"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"penguin"</span>]</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Bird:</span>
<span id="cb1-8">  </span>
<span id="cb1-9">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-10">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb1-11">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb1-12">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>)</span>
<span id="cb1-13">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb1-14">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PVector2(x, y)</span>
<span id="cb1-15">    vel_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> uniform(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>) </span>
<span id="cb1-16">    vel_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> uniform(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>)</span>
<span id="cb1-17">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PVector2(vel_x, vel_y)</span>
<span id="cb1-18">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> choice(bird_im)</span>
<span id="cb1-19"></span>
<span id="cb1-20">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> move(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-21">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.add(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel)</span>
<span id="cb1-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check border</span></span>
<span id="cb1-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w:</span>
<span id="cb1-24">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>screen.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> screen.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h:</span>
<span id="cb1-26">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-27">      </span>
<span id="cb1-28">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> display(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-29">    screen.drawSprite(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h)</span>
<span id="cb1-30"></span>
<span id="cb1-31">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> is_circle_collision(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, other):</span>
<span id="cb1-32">    distance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> math.dist([<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y], [other.loc.x, other.loc.y])</span>
<span id="cb1-33">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> distance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> other.r:</span>
<span id="cb1-34">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb1-35">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span></code></pre></div>
<p>Diese Klasse besitzt eine etwas erweiterte Methode <code>is_circle_collision()</code>, die √ºberpr√ºft, ob die eigene Instanz des Vogels mit einem anderen Objekt kollidiert. Die V√∂gel werden durch Vektoren f√ºr ihren Standort (<code>Bird.loc</code>) und ihre Bewegung (<code>Bird.vel</code>) repr√§sentiert. Daf√ºr habe ich wieder meine <a href="https://kantel.github.io/posts/2024032801_microstudio_noc_1/">hier vorgestellte</a>, eigene Vektorenklasse <code>PVector2</code> eingesetzt (ich sollte sie wirklich als <em>Library</em> implementieren).</p>
<p>Dann gibt es nur noch das Hauptskript, das das Spiel steuert:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1">birds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-2">NUM_BIRDS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span></span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> init():</span>
<span id="cb2-5">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">global</span> b</span>
<span id="cb2-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(NUM_BIRDS):</span>
<span id="cb2-7">    b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Bird()</span>
<span id="cb2-8">    birds.append(b)</span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update():</span>
<span id="cb2-11">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> b <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> birds:</span>
<span id="cb2-12">    b.move()</span>
<span id="cb2-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> b2 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> birds:</span>
<span id="cb2-14">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> b2 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> b.is_circle_collision(b2):</span>
<span id="cb2-15">        b.vel.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-16">        b.vel.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-17">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> check_input(keyboard.press, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SPACE"</span>):</span>
<span id="cb2-18">    birds.clear()</span>
<span id="cb2-19">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RESTART"</span>)</span>
<span id="cb2-20">    init()</span>
<span id="cb2-21"></span>
<span id="cb2-22"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> draw():</span>
<span id="cb2-23">  screen.clear()</span>
<span id="cb2-24">  screen.fillRect(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, screen.width, screen.height, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(234, 218, 184)"</span>)</span>
<span id="cb2-25">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> b <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> birds:</span>
<span id="cb2-26">    b.display()</span>
<span id="cb2-27"></span>
<span id="cb2-28"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> check_input(obj, val):</span>
<span id="cb2-29">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">hasattr</span>(obj, val):</span>
<span id="cb2-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> obj[val] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-31">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span></code></pre></div>
<p>Die Kollisionsbehandlung ist in <code>update()</code> implementiert. Da vermieden werden mu√ü, da√ü der eigene Vogel pr√ºft, ob er mit sich selber kollidiert (denn das tut er immer), war eine zweite Schleife in der ersten Schleife notwendig. In dieser wird einmal nachgepr√ºft, da√ü der eigene Vogel <code>b</code> nicht mit dem √ºberpr√ºften anderen Vogel <code>b2</code> identisch ist, <strong>und</strong> ob eine Kollision vorliegt:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> b2 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> birds:</span>
<span id="cb3-2">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> b2 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> b.is_circle_collision(b2):</span>
<span id="cb3-3">        b.vel.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-4">        b.vel.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
<p>Dann und nur dann wird die Bewegungsrichtung des Vogels umgekehrt. Diese Vorgehensweise habe ich von <em>Daniel Shiffman</em> aus seinen Videos ¬ªChecking Objects Intersection¬´ (<a href="https://www.youtube.com/watch?v=uAfw-ko3kB8">Part 1</a> und <a href="https://www.youtube.com/watch?v=GY-c2HO2liA">Part 2</a>) gelernt.</p>
<p>Gelegentlich kommt es vor, da√ü bei der Initialisierung schon zwei V√∂gel so weit √ºberlappen, da√ü sie sich auch wenn sie von anderen V√∂geln angestuppst werden, nicht mehr voneinander trennen k√∂nnen. Um dies zu vermeiden, m√º√üte im <code>init()</code> schon bei der Positionierung der V√∂gel darauf geachtet werden, da√ü keine Kollisionen vorliegen. Um den Code des Tutorials nicht zu √ºberfrachten, habe ich darauf verzichtet (die <code>for</code>-Schleife m√º√üte daf√ºr in eine <code>while</code>-Schleife ge√§ndert werden, die eine Initialisierung eines neuen Vogels nur dann vornimmt, wenn sich seine Posiiton mit keiner Position der schon vorher erstellten V√∂gel √ºberlappt). Stattdessen kann der Nutzer, wenn sich die V√∂gel zu sehr ineinander verkeilen, mit der Leertaste (<code>SPACE</code>) einen Neustart ansto√üen. Daf√ºr habe ich in <code>main</code> auch wieder die Brython-spezifische Funtion <code>check_input()</code> implementiert.</p>
<p>Die kreisrunden V√∂gel stammen wieder von <em>Kenney</em>, dieses Mal aus seinem freien (<a href="https://creativecommons.org/publicdomain/zero/1.0/">CC0</a>) Paket <a href="https://kenney.nl/assets/animal-pack-redux">Animal Pack Redux</a>. Und hier sind wieder ‚Äì um die √úbersicht nicht zu verlieren ‚Äì alle bisher im <em>Schockwellenreiter</em> erschienenen Tutorials zu microStudio mit Python:</p>
<ul>
<li>MicroStudio und Python (Tel 1): <a href="https://kantel.github.io/posts/2024032201_microstudio_python_1/">Hallo Brython</a>!</li>
<li>MicroStudio und Python (Teil 2): <a href="https://kantel.github.io/posts/2024032401_microstudio_python_2/">Zombie Apokalypse</a></li>
<li>MicroStudio und Python (Teil 3): <a href="https://kantel.github.io/posts/2024032502_microstudio_python_3/">Dancing Crab</a></li>
<li>MicroStudio und Python (Teil 4): <a href="https://kantel.github.io/posts/2024032703_flying_badger_python/">Flying Badger</a></li>
<li>MicroStudio und Python (Teil 5): <a href="https://kantel.github.io/posts/2024032801_microstudio_noc_1/">PVector2 und ¬ªThe Nature of Code¬´</a></li>
<li>MicroStudio und Python (Teil 6): <a href="https://kantel.github.io/posts/2024033102_bouncing_balls_microstudio/">Bouncing Balls</a></li>
<li>MicroStudio und Python (Teil 7): <a href="https://kantel.github.io/posts/2024040201_collision_detection_1/">Kollisionserkennung mit Kreisen</a></li>
<li>MicroStudio und Python (Teil 8): Bouncing Birds</li>
</ul>
<p>Ein aufmerksamer Leser hat mich darauf hingewiesen, da√ü viele der bisher publizierten Links auf <a href="https://microstudio.io/kantel/">meinen microStudio-Account</a> nur f√ºr mich zug√§nglich waren. Ich habe sie daher (hoffentlich alle) korrigiert, so auch der f√ºr dieses Tutorial, das hier mit Quellcode und allen Assets <a href="https://microstudio.dev/i/kantel/pythontutorial8/">hier finden solltet</a>. Wenn es damit dennoch Probleme gibt, schreibt es bitte in meine Kommentare.</p>



 ]]></description>
  <category>microStudio</category>
  <category>Python</category>
  <category>Spieleprogrammierung</category>
  <guid>https://kantel.github.io/posts/2024040401_bouncing_birds/</guid>
  <pubDate>Thu, 04 Apr 2024 17:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024040401_bouncing_birds/images/bouncingbirds.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Google korrigiert mit neuer Version 123 seines Browsers Chrome kritische Sicherheitsl√ºcken</title>
  <dc:creator>J√∂rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024040301_chrome_update/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53561598848/"><img src="https://kantel.github.io/posts/2024040301_chrome_update/images/datenkrakemittwoch-b.jpg" class="img-fluid"></a></p>
<p>Immer wieder Mittwochs liefert unser aller Datenkrake ein weiteres Sicherheitsupdate seines Flagschiffs aus: Google ver√∂ffentlicht das Update der Version 123 (123.0.6312.105/106/107) seines Browsers Chrome und schlie√üt damit <a href="https://chromereleases.googleblog.com/2024/04/stable-channel-update-for-desktop.html">kritische Sicherheitsl√ºcken</a>.</p>
<p>Chrome aktualisiert sich (au√üer bei Linux) √ºber die integrierte Update-Funktion, kann aber ‚Äì wenn es pressiert ‚Äì auch <a href="https://www.google.com/intl/de/chrome/browser/">hier geladen</a> werden. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">pers√∂nlicher CERT</a> per Email.)</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/53561598848/">Octopussy</a></em>, erstellt mit <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/scenario.html">Scenario</a>. Prompt: ¬ª<em>A sexy female robot flees from a gigantic data octopus, colored french comic style</em>¬´. Negative Prompt: ¬ª<em>ugly, deformed, noisy, blurry, distorted, out of focus, bad anatomy, extra limbs, poorly drawn face, poorly drawn hands, missing fingers</em>¬´. Modell: Stable Diffusion XL, Style: Scifi Magic + Belgian School.</p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2024040301_chrome_update/</guid>
  <pubDate>Wed, 03 Apr 2024 16:45:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024040301_chrome_update/images/datenkrakemittwoch.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Google schlie√üt am ¬ªApril-Patchday¬´ wieder Sicherheitsl√ºcken in Android</title>
  <dc:creator>J√∂rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024040202_android_update/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53561962164/"><img src="https://kantel.github.io/posts/2024040202_android_update/images/androidsandgoats-b.jpg" class="img-fluid"></a></p>
<p>Google hat mit seinem monatlichen <a href="https://source.android.com/docs/security/bulletin/2024-04-01?hl=de">Sicherheitsupdate f√ºr Android</a> (und damit auch auf seinen <a href="https://source.android.com/docs/security/bulletin/pixel/2024-04-01?hl=de">Pixel-Ger√§ten</a>) wieder Sicherheitsl√ºcken geschlossen.</p>
<p>Die Updates werden so nach und nach per OTA <em>(over the air)</em> auf Pixel 8/8 pro, Pixel Tablet, Pixel Fold, Pixel 7a, Pixel 7/7 pro, Pixel 6a, Pixel 6/6 pro verteilt.</p>
<p>Die anderen Hersteller werden wie √ºblich in B√§lde nachziehen, sofern sie √ºberhaupt noch entsprechenden Support leisten. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">pers√∂nlicher CERT</a> per Email.)</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/53561962164/">Androiden und Ziegen</a></em>, erstellt mit <a href="https://ideogram.ai/">Ideogram</a>. Prompt: ¬ª<em>Three little green robots dance on a colorful meadow in front of a small garden house, two goats in checkered vests watch them, the sun shines on the scenery, colored french comic style, illustration</em>¬´. Modell: Ideogram 1.0, Style: Illustration.</p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2024040202_android_update/</guid>
  <pubDate>Tue, 02 Apr 2024 18:45:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024040202_android_update/images/androidsandgoats.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>MicroStudio und Python: Kollisionserkennung¬†(1)</title>
  <dc:creator>J√∂rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024040201_collision_detection_1/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53624779637/"><img src="https://kantel.github.io/posts/2024040201_collision_detection_1/images/pythontutorial7-b.jpg" class="img-fluid"></a></p>
<p>Meine Expedition durch das Land der Spieleprogrammierung mit <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/microstudio.html">microStudio</a> und Python/<a href="https://brython.info/">Brython</a> geht in die n√§chste Runde. Nachdem ich im letzten Ausflug ein paar <a href="https://kantel.github.io/posts/2024033102_bouncing_balls_microstudio/">Kreise √ºber den Bildschirm h√ºpfen</a> lie√ü, steht nun die n√§chste Frage im Raum: Wie erkennt man, wenn die Kreise miteinander kollidieren?</p>
<p><a href="https://de.wikipedia.org/wiki/Kollisionserkennung_(algorithmische_Geometrie)">Kollisionserkennung</a> ist ein <a href="https://happycoding.io/tutorials/processing/collision-detection">gro√ües Thema</a>, denn kaum eine Computersimulation oder ein -spiel kommt ohne aus. F√ºr den Anfang m√∂chte ich erst einmal den einfachsten Fall behandeln, die Kollision zweier Kreise:</p>
<iframe src="pythontutorial7/index.html" class="if16_9" name="Collision Detection Circle">
</iframe>
<p>Ich hatte diese Kollisionserkennung schon einmal (in Python (<a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processingpy.html">Processing.py</a>) und JavaScript (<a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/p5js.html">P5.js</a>)) im <em>Schockwellenreiter</em> <a href="http://blog.schockwellenreiter.de/2019/11/2019111103.html">behandelt</a>. Es ist wirklich die einfachste Form, denn zwei Kreise kollidieren dann und nur dann, wenn die Distanz der beiden Mittelpunkte der Kreise gleich oder kleiner der L√§nge der beiden Radii ist. In Python kann man das so abfragen:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> is_circle_collision(obj1, obj2):</span>
<span id="cb1-2">  distance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> math.dist([obj1.x, obj1.y], [obj2.x, obj2.y])</span>
<span id="cb1-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> distance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> obj1.r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> obj2.r:</span>
<span id="cb1-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb1-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span></code></pre></div>
<p>Der Abstand ist der <a href="https://de.wikipedia.org/wiki/Euklidischer_Abstand">euklidische Abstand</a>, der (auch in obiger <code>math.dist()</code>-Funktion) nach dem guten alten Satz des Pythagoras berechnet wird.</p>
<p>In meinem Beispielprogramm lasse ich ein kreisrundes Kaninchen vom Spieler mit der Maus steuern. Ber√ºhrt das Kaninchen die (ebenfalls kreisrunde) Schlange, f√§rbt sich der Hintergrund blutrot. Das ist doch alles recht einleuchtend und auch schnell implementiert. Zuerst die Schlange:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Snake:</span>
<span id="cb2-2">  </span>
<span id="cb2-3">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-4">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-5">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-6">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span></span>
<span id="cb2-7">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span></span>
<span id="cb2-8">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span></span>
<span id="cb2-9">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"snake"</span></span>
<span id="cb2-10">    </span>
<span id="cb2-11">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> display(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-12">    screen.drawSprite(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h)</span></code></pre></div>
<p>Die Klasse ist fast schon ein wenig <em>overkill</em>. Da die Schlange im Spiel unbeweglich ist, besitzt sie nur ein paar Eigenschaften und die Methode <code>display()</code>, die sie auf den Bildschirm zeichnet.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Rabbit:</span>
<span id="cb3-2">  </span>
<span id="cb3-3">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-4">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span></span>
<span id="cb3-5">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span></span>
<span id="cb3-6">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span></span>
<span id="cb3-7">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span></span>
<span id="cb3-8">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span></span>
<span id="cb3-9">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rabbit"</span></span>
<span id="cb3-10">    </span>
<span id="cb3-11">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> move(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-12">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mouse.x</span>
<span id="cb3-13">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mouse.y</span>
<span id="cb3-14">  </span>
<span id="cb3-15">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> display(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-16">    screen.drawSprite(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h)</span></code></pre></div>
<p>Viel komplexer ist aber auch die Klasse des Kaninchens nicht, au√üer das sie zus√§tzlich noch die Methode <code>move()</code> besitzt, die daf√ºr verantwortlich ist, da√ü das Kaninchen dem Mauszeiger folgt.</p>
<p>Um die Objektorientierung auf die Spitze zu treiben (aber in der Hauptsache, um die Verwendung globaler Variablen zu minimieren), habe ich dem Bildschirmhintergrund auch eine eigene Klasse spendiert:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Back:</span>
<span id="cb4-2">  </span>
<span id="cb4-3">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-4">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bg_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(234, 218, 184)"</span></span>
<span id="cb4-5">    </span>
<span id="cb4-6">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> display(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-7">    screen.fillRect(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, screen.width, screen.height, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bg_col)</span></code></pre></div>
<p>Bei soviel OOP kann die Hauptroutine ja nur noch √ºbersichtlich kurz geraten sein:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> init():</span>
<span id="cb5-4">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">global</span> rabbit, snake, back</span>
<span id="cb5-5">  back <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Back()</span>
<span id="cb5-6">  rabbit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Rabbit()</span>
<span id="cb5-7">  snake <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Snake()</span>
<span id="cb5-8"></span>
<span id="cb5-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update():</span>
<span id="cb5-10">  rabbit.move()</span>
<span id="cb5-11">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> is_circle_collision(rabbit, snake):</span>
<span id="cb5-12">    back.bg_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(250, 25, 25)"</span></span>
<span id="cb5-13">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb5-14">    back.bg_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(234, 218, 184)"</span>   </span>
<span id="cb5-15">    </span>
<span id="cb5-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> draw():</span>
<span id="cb5-17">  back.display()</span>
<span id="cb5-18">  snake.display()</span>
<span id="cb5-19">  rabbit.display()</span>
<span id="cb5-20">  </span>
<span id="cb5-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> is_circle_collision(obj1, obj2):</span>
<span id="cb5-22">  distance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> math.dist([obj1.x, obj1.y], [obj2.x, obj2.y])</span>
<span id="cb5-23">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> distance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> obj1.r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> obj2.r:</span>
<span id="cb5-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb5-25">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span></code></pre></div>
<p>Hier findet dann endlich die oben erw√§hnte Kollisionserkennung der beiden Kreise statt.</p>
<p>Den kreisrunden Schlangen- wie auch den (ebenfalls kreisrunden) Kaninchenkopf (in meiner Spielewelt habe Tiere nun einmal die Form einer Kugel) habe ich dem freien (<a href="https://creativecommons.org/publicdomain/zero/1.0/">CC0</a>) <a href="https://kenney.nl/assets/animal-pack">Animal Pack</a> von Kenney entnommen, denn es gibt nahezu nichts, was es bei Kenney nicht gibt. Und auch dieses kleine Skript habe ich wieder auf meinem <a href="https://microstudio.dev/i/kantel/pythontutorial7/">microStudio-Account</a> zu Eurer Erbauung hochgeladen.</p>
<ul>
<li>MicroStudio und Python (Tel 1): <a href="https://kantel.github.io/posts/2024032201_microstudio_python_1/">Hallo Brython</a>!</li>
<li>MicroStudio und Python (Teil 2): <a href="https://kantel.github.io/posts/2024032401_microstudio_python_2/">Zombie Apokalypse</a></li>
<li>MicroStudio und Python (Teil 3): <a href="https://kantel.github.io/posts/2024032502_microstudio_python_3/">Dancing Crab</a></li>
<li>MicroStudio und Python (Teil 4): <a href="https://kantel.github.io/posts/2024032703_flying_badger_python/">Flying Badger</a></li>
<li>MicroStudio und Python (Teil 5): <a href="https://kantel.github.io/posts/2024032801_microstudio_noc_1/">PVector2 und ¬ªThe Nature of Code¬´</a></li>
<li>MicroStudio und Python (Teil 6): <a href="https://kantel.github.io/posts/2024033102_bouncing_balls_microstudio/">Bouncing Balls</a></li>
<li>MicroStudio und Python (Teil 7): Kollisionserkennung mit Kreisen</li>
</ul>
<p>Das ist dann das siebte Tutorial dieser kleinen Reihe. Macht was daraus ‚Ä¶</p>



 ]]></description>
  <category>microStudio</category>
  <category>Python</category>
  <category>Spieleprogrammierung</category>
  <guid>https://kantel.github.io/posts/2024040201_collision_detection_1/</guid>
  <pubDate>Tue, 02 Apr 2024 12:45:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024040201_collision_detection_1/images/pythontutorial7.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Breaking News: Py5 v0.10.1a1 freigegeben</title>
  <dc:creator>J√∂rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024040102_py5_v010_1a1/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53625613169/"><img src="https://kantel.github.io/posts/2024040102_py5_v010_1a1/images/py5jupyterlabdesktop-b.jpg" class="img-fluid"></a></p>
<p>Das ist kein Aprilscherz, denn schon gestern sp√ºlte die Meldung in meinen Feedreader, da√ü <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/py5.html">Py5</a> in der <a href="https://ixora.io/blog/new-release-0101a1/">Version v0.10.1a1 freigegeben</a> sei. Py5 ist ja bekanntlich eine Python-3-Variante von <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processing.html">Processing</a>, die mit allen CPython-Modulen zusammenspielt (darunter auch den <em>Scientific Stack</em> mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/numpy.html">NumPy</a>, <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/scipy.html">SciPy</a> und der <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/matplotlib.html">Matplotlib</a>, aber auch mit anderen, wichtigen Bibliotheken, wie zum Beispiel <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/pillow.html">Pillow</a> oder <a href="http://cognitiones.kantel-chaos-team.de/mathematik/sympy.html">SymPy</a>).</p>
<p>Das bedeutet vor allem aber, da√ü Py5 auch in das <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/jupyter.html">Jupyter</a>-√ñkosystem (auch mit <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/jupyterlabdesktop.html">JupyterLab Desktop</a>) passt. Nat√ºrlich habe ich das Update sofort installieren m√ºssen ‚Äì und zwar nicht nur in meiner <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/thonny.html">Thonny</a>-Umgebung, sondern auch ‚Äì da ich mich von <a href="https://kantel.github.io/posts/2024022002_jupyterlabdesktop_thonny/">Thonny emanziperen</a> m√∂chte ‚Äì in meiner JupyterLab-Desktop-Umgebung. W√§hrend das Update in Thonny gewohnt einfach mit den Thonny-eigenen Bordmitteln lief, habe ich f√ºr das Update in meiner Jupyter-<a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/anaconda.html">Anaconda</a>-Umgebung das Terminal anwerfen und dort</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--upgrade</span> py5 py5jupyter</span></code></pre></div>
<p>eingeben m√ºssen. (Das steht hier nur, damit ich beim n√§chsten Mal nicht wieder in <a href="https://py5coding.org/content/install.html#keeping-py5-updated">danach suchen</a> mu√ü.) Danach arbeitete aber auch mein <a href="https://kantel.github.io/posts/2024031403_jld_update_zen_mode/">brandneues</a> JupyterLab-Desktop anstandslos mit dem neuen Py5 zusammen ‚Äì wie obiger <a href="https://www.flickr.com/photos/schockwellenreiter/53625613169/">Screenshot</a> beweist.</p>
<p>Hauptgrund f√ºr dieses Update waren Vorbereitungen, um Py5 f√ºr das neue, bald erscheinende Numpy&nbsp;2.0 fit zu machen. Und es gab ein paar neue Features, die die Performance von Py5 erh√∂hen wollen. Au√üerdem wurden auch ein paar kleinere Fehler behoben.</p>
<p>Ich wei√ü, ich nehme mir immer zu viel vor. Aber ich werde sicher bald ein paar Dinge mit Py5 und JupyterLab Desktop ausprobieren. Diese Kombination f√ºhlt sich n√§mlich ziemlich gut an und kann mich mit den Notebooks vers√∂hnen. <em>Still digging!</em></p>



 ]]></description>
  <category>Py5</category>
  <category>Python</category>
  <category>Creative Coding</category>
  <category>JupyterLab Desktop</category>
  <category>Thonny</category>
  <guid>https://kantel.github.io/posts/2024040102_py5_v010_1a1/</guid>
  <pubDate>Mon, 01 Apr 2024 16:25:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024040102_py5_v010_1a1/images/py5jupyterlabdesktop.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Ein neuer Monat bringt neue Zahlen</title>
  <dc:creator>J√∂rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024040101_neuer_monat_neue_zahlen/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53560418152/"><img src="https://kantel.github.io/posts/2024040101_neuer_monat_neue_zahlen/images/amfenster-b.jpg" class="img-fluid"></a></p>
<p>Der April bringt nicht nur (hoffentlich!) den Fr√ºhling, sondern ‚Äì wie zu jedem Ersten ‚Äì auch die Zahlen des Vormonats, die manchmal hochtrabend auch <em>Mediadaten</em> genannt werden: Im M√§rz 2024 hatte der <em>Schockwellenreiter</em> laut seinem nicht immer zuverl√§ssigen, aber daf√ºr datenschutzkonformen <em><del>Gei√üenpeter</del></em> <em><a href="https://www.goatcounter.com/">GoatCounter</a></em> exakt <strong>4.693 Seitenaufrufe</strong>. Auch wenn diese Exaktheit der Ziffern eine Genauigkeit der Zahlen nur vort√§uscht, freue ich mich √ºber jede Besucherin und jeden Besucher und bedanke mich bei allen meinen Leserinnen und Lesern.</p>
<p>üòé &nbsp; <em>Bleibt mir gewogen!</em></p>
<p>Die <em>Top Five</em> des Vormonats bringen (f√ºr mich) einige √úberraschungen:</p>
<ol type="1">
<li><a href="https://kantel.github.io/posts/2024011002_ki_ohne_zensor/index.html">Bildgeneratoren und K√ºnstliche Intelligenz ‚Äì ohne Zensoren</a> ‚Äì 10. Januar 2024</li>
<li><a href="https://kantel.github.io/posts/2023052401_brauhaus_rixdorf/index.html">Was wird aus dem Brauhaus Rixdorf</a>? ‚Äì 24. Mai <strong>2023</strong></li>
<li><a href="https://kantel.github.io/posts/2024031501_atom_wird_pulsar/">Der Atom-Editor lebt ‚Äì und hei√üt jetzt Pulsar</a> ‚Äì 15. M√§rz 2024</li>
<li><a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/microstudio.html">microStudio</a> in meinem Wiki</li>
<li>Writing for Games: <a href="https://kantel.github.io/posts/2024031202_writing_for_games/">Narrative Geschichten und Spiele</a> ‚Äì 12. M√§rz 2024</li>
</ol>
<p>Da√ü zwei √§ltere Beitr√§ge (davon einer sogar aus dem Vorjahr) ganz oben auftauchen, l√§√üt mich vermuten, da√ü sich mein Umstieg auf <a href="http://cognitiones.kantel-chaos-team.de/webworking/staticsites/quarto.html">Quarto</a> und das damit verbundene, mobilfreundliche Design gelohnt hat. Google hat mich wieder lieb.&nbsp;ü§ì</p>
<hr>
<p><strong>Bild</strong>; <em><a href="https://www.flickr.com/photos/schockwellenreiter/53560418152/">Fr√ºhling am Fenster</a></em>, erstellt mit <a href="https://beta.dreamstudio.ai/generate">DreamStudio</a>. Prompt: ¬ª<em>An old man, white hair, no beard+, blue eyes, glasses, sits at a desk in front of a notebook and writes, there are other open books on the desk, and there is a large mug of steaming coffee next to them, the walls are lined with bookshelves, the spring sun shines through a window, colored french comic style</em>¬´. Negative Prompt: ¬ª<em>ugly, deformed, noisy, blurry, distorted, out of focus, bad anatomy, extra limbs, poorly drawn face, poorly drawn hands, missing fingers, beard, tie</em>¬´. Modell: Stable Diffusion XL, Style: Comic Book.</p>



 ]]></description>
  <category>Interna</category>
  <category>Quarto</category>
  <guid>https://kantel.github.io/posts/2024040101_neuer_monat_neue_zahlen/</guid>
  <pubDate>Mon, 01 Apr 2024 13:40:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024040101_neuer_monat_neue_zahlen/images/amfenster.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Noch kurioser: Tuesday JS Version 46 freigegeben</title>
  <dc:creator>J√∂rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024033103_tuesdayjs_46/</link>
  <description><![CDATA[ 




<p><a href="https://private-user-images.githubusercontent.com/13263198/318185415-a2b877bd-eaaa-4b20-ac8a-7d7d4dd41739.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTE5MDgwMTIsIm5iZiI6MTcxMTkwNzcxMiwicGF0aCI6Ii8xMzI2MzE5OC8zMTgxODU0MTUtYTJiODc3YmQtZWFhYS00YjIwLWFjOGEtN2Q3ZDRkZDQxNzM5LnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDAzMzElMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwMzMxVDE3NTUxMlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTUxODY3YjYxNGRiZDI0MTU5ZGM0ZjFiZDY1NDAxYjVmZjVlNTJjNGI0MWU3YzJmNjE5MDYyMTJmMjdhMTI1YzUmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.39Wrc1bjKoaU_KkKHUs28qzEBXyLDK1zr9Zuxt3QjoU"><img src="https://kantel.github.io/posts/2024033103_tuesdayjs_46/images/tuesdayjs46-b.jpg" class="img-fluid"></a></p>
<p>Da habe ich wohl ein paar Updates verpa√üt: Die letzte Version, die ich von <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/tuesdayjs.html">Tuesday JS</a>, dem freien (Apache 2.0-Lizenz), auch im Webbrowser verwendbaren Editor f√ºr <em>Visual Novels</em> und interaktive Geschichten, mitbekommen hatte, war die <a href="https://kantel.github.io/posts/2024020801_tuesdayjs_update/">Version 42</a>, die Anfang Februar dieses Jahres freigegeben wurde. Doch heute schneite die Meldung auf ein <a href="https://kirill-live.itch.io/tuesday-js/devlog/706493/tuesday-js-release-46-code-syntax-highlighting">Update auf die Version 46</a> in meinen Feedreader. Als wichtigste Neuerung wurde ein Syntax-Highlighting-System freigegeben (erst einmal ¬ªnur¬´ f√ºr JavaScript und JSON, geplant sei das Feature aber auch f√ºr HTML und CSS). Das ist schon kurios f√ºr einen Point-and-Click-Editor, der sich explizit an Nichtprogrammierer richtet. Aber mir soll es recht sein.</p>
<p>Dann haben die Entwickler bekanntgegeben, da√ü man die Engine ab sofort nur noch von <a href="https://github.com/Kirilllive/tuesday-js/releases">GitHub</a> oder Patreon herunterladen kann. Bei den anderen <em>Download Sites</em> war die <em>Publishing Policy</em> wohl zu restriktiv. Nachdem Itch.io von mir verlangt hatte, da√ü ich meine ¬ª<a href="https://kantel.github.io/posts/2024022501_little_lilly/">Little Lilly</a>¬´ (<a href="https://kantel.itch.io/little-lilly">Upload auf Itch.io</a>) als nicht jugendfrei deklarieren mu√üte, kann ich das nachvollziehen.</p>
<p>Im Gegensatz zu dem, was der obige Screenshot vermuten l√§√üt, hat Tuesday JS nicht nur eine japanische, sondern mehrsprachige GUIs ‚Äì unter anderem englisch und deutsch (sonst h√§tte ich <a href="https://kantel.github.io/posts/2024021102_tuesdayjs_1st_steps/">meine Tests damit</a> auch nicht durchf√ºhren k√∂nnen).</p>
<p>Das Teil war nett. Wenn ich wieder etwas Luft habe, werde ich auch damit wieder etwas anstellen. Denn es mu√ü ja nicht immer <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/renpy.html">Ren‚ÄôPy</a> sein.</p>



 ]]></description>
  <category>Tuesday JS</category>
  <category>Interactive Fiction</category>
  <category>Spieleprogrammierung</category>
  <guid>https://kantel.github.io/posts/2024033103_tuesdayjs_46/</guid>
  <pubDate>Sun, 31 Mar 2024 18:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024033103_tuesdayjs_46/images/tuesdayjs46.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Bouncing Balls mit microStudio (Python)</title>
  <dc:creator>J√∂rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024033102_bouncing_balls_microstudio/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53623373035/"><img src="https://kantel.github.io/posts/2024033102_bouncing_balls_microstudio/images/bballs6-b.jpg" class="img-fluid"></a></p>
<p>Die vor ein paar Tagen <a href="https://kantel.github.io/posts/2024032801_microstudio_noc_1/">hier aufgekeimte Idee</a>, <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/microstudio.html">microStudio</a> in der Python/<a href="https://brython.info/">Brython</a>-Variante als Grundlage f√ºr eine (angepa√üte und aufgebohrte) Python-Version von <em>Daniel Shiffmans</em> genialem Buch ¬ª<a href="https://natureofcode.com/">The Nature of Code</a>¬´ zu nehmen, hat mich einfach nicht in Ruhe gelassen. Zumal die noch in diesem Jahr erscheinende Neufassung (in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/p5js.html">P5.js</a>) des Buches extra einen Anhang ¬ª<a href="https://natureofcode.com/appendix-creature/">Creature Design</a>¬´ besitzt. Und das ist in microStudios Sprite-Editor schon mehr oder weniger fest eingbaut.</p>
<p>Also habe ich erst einmal ein <a href="http://blog.schockwellenreiter.de/2021/02/2021020801.html">altes Beispiel</a>, das ich aufgrund √§hnlicher √úberlegungen in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/tigerjython.html">TigerJython</a> implementiert hatte (bevor ich wegen der unklaren Lizenz TigerJython <a href="http://blog.schockwellenreiter.de/2022/10/2022103001.html">den Laufpa√ü gab</a>) und dieses (inklusive PVector2) nach microStudio portiert.</p>
<iframe src="bball6/index.html" class="if16_9" name="Bouncing Balls">
</iframe>
<p>Das ging ‚Äì wie ich es eigentlich auch erwartet hatte ‚Äì v√∂llig schmerzfrei √ºber die B√ºhne. Zuerst hatte ich eine Klasse <code>Ball</code> angelegt:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> randint, uniform, choice</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Ball:</span>
<span id="cb1-4">  </span>
<span id="cb1-5">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-6">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb1-7">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb1-8">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>)</span>
<span id="cb1-9">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb1-10">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PVector2(x, y)</span>
<span id="cb1-11">    vel_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> uniform(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>)</span>
<span id="cb1-12">    vel_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> uniform(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>)</span>
<span id="cb1-13">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PVector2(vel_x, vel_y)</span>
<span id="cb1-14">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> choice(colors)</span>
<span id="cb1-15">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.stroke <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(0, 0, 0)"</span></span>
<span id="cb1-16"></span>
<span id="cb1-17">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> move(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-18">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.add(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel)</span>
<span id="cb1-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check border</span></span>
<span id="cb1-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d:</span>
<span id="cb1-21">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>screen.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> screen.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d:</span>
<span id="cb1-23">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-24">      </span>
<span id="cb1-25">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> display(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-26">    screen.fillRound(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c)</span>
<span id="cb1-27">    screen.setLineWidth(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-28">    screen.drawRound(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.stroke)</span>
<span id="cb1-29">    screen.setLineWidth(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<p>Neu ist hierbei lediglich, da√ü die Methode <code>setLineWidth()</code> auf alle graphischen Primitive angewendet werden kann, also auch beim Rand eines Kreises (<code>drawRound()</code>). Ich habe ihn daher testweise auf zwei Pixel gesetzt. Man sollte allerdings nicht vergessen, ihn anschlie√üend mit <code>setLineWidth(1)</code> auf seinen Default-Wert zur√ºckzusetzen. Die R√§nder der Kreise erscheinen dadurch ziemlich ¬ªfett¬´, aber was nimmt man nicht alles in Kauf, um neue Dinge auszuprobieren?</p>
<p>Dadurch, da√ü die Klasse <code>Ball</code> eine eigene <code>move()</code>- und eine eigene <code>display()</code>-Methode besitzt, ist das Hauptprogramm wieder recht √ºbersichtlich geraten:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgba(230, 96, 55, 200)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgba(17, 42, 106, 200)"</span>,</span>
<span id="cb2-2">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgba(183, 116, 64, 200)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgba(212, 251, 69, 200)"</span>,</span>
<span id="cb2-3">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgba(252, 75, 200, 200)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgba(159, 53, 233, 200)"</span>,</span>
<span id="cb2-4">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgba(57, 218, 56, 200)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgba(67, 253, 133, 200)"</span>,</span>
<span id="cb2-5">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgba(78, 148, 42, 200)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgba(67, 254, 211, 200)"</span>,</span>
<span id="cb2-6">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgba(74, 143, 186, 200)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgba(52, 99, 234, 200)"</span>]</span>
<span id="cb2-7">balls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-8">NUM_BALLS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span></span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> init():</span>
<span id="cb2-11">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">global</span> ball</span>
<span id="cb2-12">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(NUM_BALLS):</span>
<span id="cb2-13">    ball <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Ball()</span>
<span id="cb2-14">    balls.append(ball)</span>
<span id="cb2-15"></span>
<span id="cb2-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update():</span>
<span id="cb2-17">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ball <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> balls:</span>
<span id="cb2-18">    ball.move()</span>
<span id="cb2-19">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> check_input(keyboard.press, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SPACE"</span>):</span>
<span id="cb2-20">    balls.clear()</span>
<span id="cb2-21">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RESTART"</span>)</span>
<span id="cb2-22">    init()</span>
<span id="cb2-23"></span>
<span id="cb2-24"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> draw():</span>
<span id="cb2-25">  screen.clear()</span>
<span id="cb2-26">  screen.fillRect(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, screen.width, screen.height, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(234, 218, 184)"</span>)</span>
<span id="cb2-27">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ball <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> balls:</span>
<span id="cb2-28">    ball.display()</span></code></pre></div>
<p>Wo ich die verwendete Farbpalette in <code>[colors]</code> her habe, wei√ü ich nicht mehr, die Farben sehen aber auf meinem Monitor recht gut aus. Neu ist ansonsten nur, da√ü Ihr mit der <code>SPACE</code>-Taste das Skript neu starten k√∂nnt. Hierbei kommt (mit dem Brython-spezifischen Umweg √ºber die <code>check_input()</code>-Funktion) die microStudio-Methode <code>keyboard.press</code> zum Einsatz, die im Gegensatz zu <code>keyboard</code> (das solange <code>True</code> zur√ºckgibt, wie die Taste gedr√ºckt bleibt) nur registriert, wenn die Taste erstmalig gedr√ºckt wird.</p>
<p>Die Hilfsfuntion <code>check_input()</code> hatte ich hier schon einmal aufgef√ºhrt, der Vollst√§ndigkeit halber (und weil sie recht kurz ist) drucke ich sie hier aber noch einmal ab:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> check_input(obj, val):</span>
<span id="cb3-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">hasattr</span>(obj, val):</span>
<span id="cb3-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> obj[val] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span></code></pre></div>
<p>Dann ist da noch meine <code>PVector2</code>-Klasse, die ich <a href="https://kantel.github.io/posts/2024032801_microstudio_noc_1/">hier schon einmal komplett abgedruckt hatte</a>. Da sie sehr lang ist, verzichte ich auf einen erneuten Abdruck ‚Äì vielleicht sollte ich sie als eine <a href="https://microstudio.dev/documentation/Creating-Libraries/">microStudio-Bibliothek</a> implementieren?</p>
<p>Das komplette Projekt habe ich nat√ºrlich auch wieder auf meinen microStudio-Account <a href="https://microstudio.dev/i/kantel/pythontutorial6/">hochgeladen</a>. Es ist das sechste Programm meiner kleinen microStudio/Python-Tutorial-Reihe:</p>
<ul>
<li>MicroStudio und Python: Tutorial 1: <a href="https://kantel.github.io/posts/2024032201_microstudio_python_1/">Hallo Brython</a>!</li>
<li>MicroStudio und Python (Teil 2): <a href="https://kantel.github.io/posts/2024032401_microstudio_python_2/">Zombie Apokalypse</a></li>
<li>MicroStudio und Python (Teil 3): <a href="https://kantel.github.io/posts/2024032502_microstudio_python_3/">Dancing Crab</a></li>
<li>MicroStudio und Python (Teil 4): <a href="https://kantel.github.io/posts/2024032703_flying_badger_python/">Flying Badger</a></li>
<li>MicroStudio und Python (Teil 5): <a href="https://kantel.github.io/posts/2024032801_microstudio_noc_1/">PVector2 und ¬ªThe Nature of Code¬´</a></li>
<li>MicroStudio und Python (Teil 6): Bouncing Balls</li>
</ul>
<p>Das war es f√ºr heute, mehr ist noch in der Pipeline. Bis zum n√§chsten Mal. <em>Still digging!</em></p>



 ]]></description>
  <category>microStudio</category>
  <category>Python</category>
  <category>Brython</category>
  <category>Nature of Code</category>
  <category>Creative Coding</category>
  <guid>https://kantel.github.io/posts/2024033102_bouncing_balls_microstudio/</guid>
  <pubDate>Sun, 31 Mar 2024 16:45:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024033102_bouncing_balls_microstudio/images/bballs6.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Fr√∂hliche Ostern, fr√∂hliche Western (und ohne Religion)</title>
  <dc:creator>J√∂rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024033101_happy_eastern/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53575004846/"><img src="https://kantel.github.io/posts/2024033101_happy_eastern/images/happyeastern-b.jpg" class="img-fluid"></a></p>
<p>Euch allen da drau√üen w√ºnsche ich ein fr√∂hliches Osterfest. Feiert es als das Fest, das es einmal war, bevor es den Religioten jedweder Coleur in die Krallen geriet: Als fr√∂hliches Fr√ºhlingsfest ohne religi√∂sen Ballast. Und wer gar nicht ohne mythologisches Brimborium kann, der tr√§ume von ein paar nackten Nymphen in einem <a href="https://de.wikipedia.org/wiki/Arkadien_(Mythos)">arkadischen M√§rchenwald</a>. Mehr Religion ertrage ich n√§mlich nicht.</p>
<p>Ich selber habe zur Feier des Fr√ºhlingsfestes meine Wintergarderobe bis zum kommenden Herbst eingemottet und hoffe, da√ü das nicht zu voreilig war.</p>
<p>Und‚Ä¶ habt Ihr alle Eure Uhren um eine Stunde <del>vor</del> <del>zur√ºck</del> umgestellt?</p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/53575004846/">Et in Arcadia ego</a></em>, erstellt mit <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/scenario.html">Scenario</a>. Prompt: ¬ª<em>three naked nymphs, reddish-brown hair, green eyes, big boobs, nice butt, red lips, dance in a sunny clearing, in an enchanted garden with many colorful flowers, A Pan+, with beard, with goat legs, sits on a pedestal, and accompanies her on his flute+, Fox and hare watch the scenario in amazement</em>¬´. Negative Prompt: ¬ª<em>ugly, deformed, noisy, blurry, distorted, out of focus, bad anatomy, extra limbs, poorly drawn face, poorly drawn hands, missing fingers, antlers, deer, horns+, elf ears</em>¬´. Modell: Stable Diffusion XL, Style: Stylized Fantasy + Storybook + 3D.</p>



 ]]></description>
  <category>Modernes Leben</category>
  <guid>https://kantel.github.io/posts/2024033101_happy_eastern/</guid>
  <pubDate>Sun, 31 Mar 2024 14:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024033101_happy_eastern/images/happyeastern.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Bitsy Update ‚Äì und mehr √ºber Bitsy</title>
  <dc:creator>J√∂rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024033001_more_bitsy/</link>
  <description><![CDATA[ 




<p><a href="https://backend.artreview.com/wp-content/uploads/2023/10/Screenshot-2023-10-18-at-15.43.09-1230x692.png"><img src="https://kantel.github.io/posts/2024033001_more_bitsy/images/bitsy81-b.jpg" class="img-fluid"></a></p>
<p>Bei all meiner Begeisterung √ºber das frisch entdeckte <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/microstudio.html">microStudio</a> (zusammen mit Python/<a href="http://blog.schockwellenreiter.de/2019/04/2019041701.html">Brython</a> ‚Äì dazu im n√§chsten Beitrag mehr) sollte ich nicht vergessen, da√ü noch andere mehr oder weniger seltsamen Engines meiner Aufmerksamkeit harren. Dazu geh√∂ren auf jeden Fall die beiden Werkzeuge f√ºr interaktive Geschichten (und mehr) <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/twine2.html">Twine</a> und <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/bitsy.html">Bitsy</a>.</p>
<p>Daher habe ich die Meldung, da√ü <a href="https://ledoux.itch.io/bitsy/devlog/706225/v810">Bitsy in der Version v8.10 freigegeben</a> wurde, zum Anla√ü genommen, auf ein paar Quellen hinzuweisen, die √ºber die √ºbliche Berichterstattung zu dieser kleinen, bewu√üt minimalen Engine hinausgehen:</p>
<ul>
<li><p>Da w√§re zum einen der Beitrag ¬ª<a href="https://artreview.com/bitsy-the-small-game-revolution/">Bitsy, the Small Game Revolution</a>¬´, der eine <a href="http://museumofscreens.com/">Online-Ausstellung</a> zum Anla√ü nimmt, die √§sthtischen Konsquenzen dieses Minimalismusses zu beleuchten.</p></li>
<li><p>In eine √§hnliche Kerbe schl√§gt der Artikel aus der <em>Wired</em> ¬ª<a href="https://www.wired.com/story/you-make-fun-games-no-experience/">You Too Can Make These Fun Games</a>¬´, der schon 2018 in ausgew√§hlten Screenshots auf die √§sthetischen Besonderheiten eines Bitsy-Spiels hinwies.</p></li>
<li><p>Auch der umfangreiche und h√∂chst lesenswerte Workshop ¬ª<a href="https://ruitunion.org/en/posts/2022-04-17-bitsy/">A bit about Bitsy</a>¬´ zweier unbekannter (russischer?) Autoren legt (s)einen Schwerpunkt auf die √§sthetischen Qualit√§ten eines Bitsy-Spiels.</p></li>
<li><p>Und dann gibt es da noch einen weiteren, ebenfalls sehr umfangreichen <a href="https://mycours.es/gamedesign2021/bitsy-2/">Bitsy-Workshop</a> der <em><a href="https://en.wikipedia.org/wiki/Carnegie_Mellon_School_of_Art">Carnegie Mellon University School of Art</a></em> mit einem Schwerpunkt auf visuelles Design. Alleine schon die Screenshots sind eine Augenweide und Inspirationsquelle.</p></li>
<li><p>Auch die Screenshots, die <em>Nathalie Lawhead</em> in ihrem Beitrag ¬ª<a href="https://www.nathalielawhead.com/candybox/bitsy-is-beautiful-exploring-the-bitsy-space-and-some-of-my-favorite-bitsy-games">Bitsy is Beautiful!</a>¬´ rechtfertigen den Besuch ihrer Seite. Und inhaltlich l√§√üt er vergessen, da√ü das verspielte Nutzer-Interface die Navigation ¬ªetwas¬´ erschwert.</p></li>
<li><p>Eher in den Bereich, wie man Bitsy ¬ªnarrativ¬´ einsetzt, also als Instrument, um Geschichten zu erz√§hlen, geht es in dem Workshop ¬ª<a href="https://thisgirl.codes/how-the-bitsy-game-mother-grundys-protection-was-made-by-ash-green/">How the Bitsy game ¬ªMother Grundy‚Äôs Protection¬´ was made By Ash Green</a> auf der britischen Website <em>This Girls Codes</em>. Aber auch hier gibt es zus√§tzlich viele n√ºtzliche Tips zum Game Design.</p></li>
<li><p>Und <em>last but not least</em> noch ein letzter Beitrag heute √ºber narratives Design (speziell politisch motivierter) Geschichten und Spiele mit Bitsy: ¬ª<a href="https://www.pastemagazine.com/games/bitsy/bitsy-makes-it-easy-to-design-small-narrative-game">Bitsy Makes It Easy to Design Small Narrative Games</a>¬´. Und auch hier zeigen die Screenshots die den Bitsy-Spielen innewohnende √Ñsthetik.</p></li>
</ul>
<p><strong>War sonst noch was?</strong> Ach ja, <em>Dan Cox</em> hat nach einer kurzen, krankheitsbedingten Pause die Arbeit an seinen Bitsy- und Twine-Tutorials wieder aufgenommen. Seine <a href="https://www.youtube.com/playlist?list=PLlXuD3kyVEr6bprFqUBCOEWT47xqYmVQ4">Bitsy-8-Playlist</a> ist mittlerweile auf 36 Videos angewachsen und <em>Dan</em> hat sie (zum wiederholten Mal) f√ºr abgeschlossen erkl√§rt (aber ich glaube nicht so wirklich daran). In seinen Videos erf√§hrt man mehr √ºber Bitsy, als ein Mensch eigentlich wissen kann, also schaut sie Euch an! Und ich mag seine unaufgeregte Art der Wissensvermittlung.</p>
<p>Auf seine (noch lange nicht abgeschlossenen) Tutorials zu <a href="https://www.youtube.com/playlist?list=PLlXuD3kyVEr662CjQjQHOVJhmdsl2TgYk">Twine 2.6/2.8 mit Harlowe</a> (aktuell 81 Videos) und <a href="https://www.youtube.com/playlist?list=PLlXuD3kyVEr5JmCL3GbEAd0jPsDVcuge7">Twine 2.6 mit SugarCube</a> (aktuell 32 Videos) werde ich ‚Äì wenn ich selber wieder Twine ¬ªin der Mache habe¬´ ‚Äì in einem separaten Beitrag eingehen.</p>
<hr>
<section id="bibliographie" class="level3">
<h3 class="anchored" data-anchor-id="bibliographie">Bibliographie</h3>
<ul>
<li>Nicholas O‚ÄôBrien: <em><a href="https://artreview.com/bitsy-the-small-game-revolution/">Bitsy, the Small Game Revolution</a></em>, ArtReview vom 23. Oktober 2023</li>
<li>Klint Finley: <em><a href="https://www.wired.com/story/you-make-fun-games-no-experience/">You Too Can Make These Fun Games (No Experience Necessary)</a></em>, Wired vom 14. September 2018</li>
<li>Unbekannt: <em><a href="https://ruitunion.org/en/posts/2022-04-17-bitsy/">A bit about Bitsy</a></em>, Russian IT Union vom 17. April 2022</li>
<li>Paolo Pedercini: <em><a href="https://mycours.es/gamedesign2021/bitsy-2/">Experimental Game Design. Playing Stories: Bitsy</a></em>, Carnegie Mellon University School of Art, Herbst 2021</li>
<li>Nathalie Lawhead: <em><a href="https://www.nathalielawhead.com/candybox/bitsy-is-beautiful-exploring-the-bitsy-space-and-some-of-my-favorite-bitsy-games">Bitsy is Beautiful! (exploring the Bitsy space and some of my favorite Bitsy games)</a></em>, The Candybox Blog vom 17. Juni 2021</li>
<li>Ohne Autorenangabe: <em><a href="https://thisgirl.codes/how-the-bitsy-game-mother-grundys-protection-was-made-by-ash-green/">How the Bitsy game ¬ªMother Grundy‚Äôs Protection¬´ was made by Ash Green</a></em>, This Girls Codes (ohne Datum)</li>
<li>Shont√© Daniels: <em><a href="https://www.pastemagazine.com/games/bitsy/bitsy-makes-it-easy-to-design-small-narrative-game">Bitsy Makes It Easy to Design Small Narrative Games</a></em>, Paste Magazine vom 18. Januar 2018</li>
</ul>


</section>

 ]]></description>
  <category>Bitsy</category>
  <category>Interactive Fiction</category>
  <category>Spieleprogrammierung</category>
  <category>Game Design</category>
  <guid>https://kantel.github.io/posts/2024033001_more_bitsy/</guid>
  <pubDate>Sat, 30 Mar 2024 18:10:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024033001_more_bitsy/images/bitsy81.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>MicroStudio-Tutorial 5: PVector2 und ¬ªThe Nature of Code¬´ mit microStudio?</title>
  <dc:creator>J√∂rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024032801_microstudio_noc_1/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53617311650/"><img src="https://kantel.github.io/posts/2024032801_microstudio_noc_1/images/pvector2stage1-b.jpg" class="img-fluid"></a></p>
<p>Je mehr und je l√§nger ich mich mit <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/microstudio.html">microStudio</a> in der Python/<a href="https://brython.info/">Brython</a>-Variante besch√§ftige, um so mehr gelange ich zu der √úberzeugung, da√ü sich das Teil f√ºr viel mehr eignet, als nur Spiele zu programmieren (obwohl auch das schon eine anspruchsvolle Aufgabe ist).</p>
<p>Mit der Nase darauf gesto√üen wurde ich, als in meinen Feedreader die Videos ¬ª<a href="https://www.youtube.com/watch?v=8V4aAQ8VwCI">Vector motion with the math.Vector2</a>¬´ und ¬ª<a href="https://www.youtube.com/watch?v=cx0nTsrPt0M">Rotating an image around its center with arctan2 and math.Vector2</a> gesp√ºlt wurden<sup>1</sup>. Sie behandeln die (relativ neue) <a href="https://www.pygame.org/docs/ref/math.html#pygame.math.Vector2">Klasse <code>math.Vector2</code></a> in <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a>:</p>
<iframe class="if16_9" src="https://www.youtube.com/embed/8V4aAQ8VwCI?si=oLcRgy9u0cOIGsxD" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p>Das rief Erinnerungen in mir wach: Ich hatte doch auch einmal ‚Äì angelehnt an <a href="https://www.processing.org/reference/PVector.html">Processings PVector-Klasse</a> eine <a href="http://blog.schockwellenreiter.de/2018/11/2018112301.html">2D-Vector-Klasse</a> in Pure-Python <a href="http://blog.schockwellenreiter.de/2018/11/2018111902.html">implementiert</a>, die ich in der <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/nodebox/nodebox.html">Nodebox</a>, in der <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/arcade.html">Arcade-Bibliothek</a> (hier ein <a href="http://blog.schockwellenreiter.de/2020/06/2020062801.html">Beispiel</a>), in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/tigerjython.html">TigerJython</a> (auch ein <a href="http://blog.schockwellenreiter.de/2021/02/2021020801.html">Beispiel</a>) und zuletzt in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/p5py.html">P5 (Python)</a> (ein <a href="http://blog.schockwellenreiter.de/2018/11/2018111902.html">letztes Beispiel</a>) eingesetzt hatte. Hinter all dem stand die √úberlegung, Python-Versionen der Programme aus <em>Daniel Shiffmans</em> genialem Buch ¬ª<a href="https://natureofcode.com/">The Nature of Code</a>¬´ (das dieses Jahr in einer lang erwarteten Neuauflage herauskommen soll) zu schaffen.</p>
<p>Und so kam in mir die Frage auf: Geht das nicht auch mit microStudio und Brython? Also habe ich ein altes <a href="http://blog.schockwellenreiter.de/2018/11/2018112401.html">Beispiel hervorgekramt</a> und testweise im Rahmen meiner Tutorialreihe implementiert. Spoiler: Es geht!</p>
<p>Zuerst habe ich die Klasse <code>Mover</code> implementiert:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Mover:</span>
<span id="cb1-2">  </span>
<span id="cb1-3">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-4">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PVector2(uniform(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), uniform(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>screen.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, screen.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb1-5">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PVector2(uniform(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), uniform(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb1-6">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span></span>
<span id="cb1-7">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgba(255, 100, 255, 1.0)"</span></span>
<span id="cb1-8">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.stroke <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(0, 0, 0)"</span></span>
<span id="cb1-9">    </span>
<span id="cb1-10">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> move(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-11">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.add(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vel)</span>
<span id="cb1-12">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.check_boundaries()</span>
<span id="cb1-13">  </span>
<span id="cb1-14">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> display(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-15">    screen.fillRound(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c)</span>
<span id="cb1-16">    screen.drawRound(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.stroke)</span>
<span id="cb1-17">  </span>
<span id="cb1-18">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> check_boundaries(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r:</span>
<span id="cb1-20">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r</span>
<span id="cb1-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r:</span>
<span id="cb1-22">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r</span>
<span id="cb1-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> screen.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r:</span>
<span id="cb1-24">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>screen.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r</span>
<span id="cb1-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>screen.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r:</span>
<span id="cb1-26">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loc.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> screen.height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r</span></code></pre></div>
<p>Hier habe ich ausgenutzt, da√ü microStudio ‚Äì wie Ihr in der <a href="https://microstudio.dev/documentation/API/">API-Dokumentation</a> unter ¬ªDrawing Shapes¬´ nachlesen k√∂nnt, eigentlich alle Methoden besitzt, um graphische Primitive wie Linien, Rechtecke, Kurven, Kreise und Ellipsen etc. zeichnen zu k√∂nnen. Um den Kreis mit einem Rand zu versehen, habe ich auf einen Trick zur√ºckgegriffen: Ich zeichne erst mit <code>fillRound()</code> einen ausgef√ºllten Kreis und ziehe dann an der gleichen Stelle mit <code>drawRound()</code> noch einmal die Umrisse dieses Kreises nach.</p>
<p>Meine PVector-Klasse habe ich einfach aus meinem <a href="https://github.com/kantel/pvector">GitHub-Repositorium</a> kopiert, lediglich den Namen habe ich ‚Äì zur Verdeutlichung, das es sich um eine reine 2D-Implementierung handelt ‚Äì in <code>PVector2</code> ge√§ndert:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> PVector2():</span>
<span id="cb2-5">    </span>
<span id="cb2-6">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x, y):</span>
<span id="cb2-7">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x</span>
<span id="cb2-8">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y</span>
<span id="cb2-9"></span>
<span id="cb2-10">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, v):</span>
<span id="cb2-11">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> v.x</span>
<span id="cb2-12">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> v.y</span>
<span id="cb2-13">    </span>
<span id="cb2-14">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-15">    v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PVector2(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y)</span>
<span id="cb2-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> v</span>
<span id="cb2-17"></span>
<span id="cb2-18">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> add(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, v):</span>
<span id="cb2-19">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> v.x</span>
<span id="cb2-20">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> v.y</span>
<span id="cb2-21">        </span>
<span id="cb2-22">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> sub(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, v):</span>
<span id="cb2-23">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> v.x</span>
<span id="cb2-24">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> v.y</span>
<span id="cb2-25">    </span>
<span id="cb2-26">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Multiplikation mit einem Skalar</span></span>
<span id="cb2-27">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> mult(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, n):</span>
<span id="cb2-28">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> n</span>
<span id="cb2-29">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> n</span>
<span id="cb2-30">    </span>
<span id="cb2-31">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Division durch einen Skalar</span></span>
<span id="cb2-32">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> div(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, n):</span>
<span id="cb2-33">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/=</span> n</span>
<span id="cb2-34">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/=</span> n</span>
<span id="cb2-35"></span>
<span id="cb2-36">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Elementweise Multiplikation eines Vektor mit einem anderen Vektor</span></span>
<span id="cb2-37">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> mult2(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, v):</span>
<span id="cb2-38">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> v.x</span>
<span id="cb2-39">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> v.y</span>
<span id="cb2-40"></span>
<span id="cb2-41">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Elementweise Division eines Vektor mit einem anderen Vektor</span></span>
<span id="cb2-42">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> div2(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, v):</span>
<span id="cb2-43">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/=</span> v.x</span>
<span id="cb2-44">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/=</span> v.y</span>
<span id="cb2-45"></span>
<span id="cb2-46">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Magnitude</span></span>
<span id="cb2-47">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> mag(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-48">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> math.sqrt(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y)</span>
<span id="cb2-49">    </span>
<span id="cb2-50">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Normalisierung</span></span>
<span id="cb2-51">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> normalize(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-52">    m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mag()</span>
<span id="cb2-53">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb2-54">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.div(m)</span>
<span id="cb2-55"></span>
<span id="cb2-56"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Berechnung der euklidischen Distanz zwischen zwei Vektoren</span></span>
<span id="cb2-57">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> dist(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, v):</span>
<span id="cb2-58">    dx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> v.x</span>
<span id="cb2-59">    dy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> v.y</span>
<span id="cb2-60">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> math.sqrt(dx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>dx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>dy)</span>
<span id="cb2-61">    </span>
<span id="cb2-62">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Berechnung des Skalarprodukts (inneren Produkts) eines Vektors</span></span>
<span id="cb2-63">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> dot(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, v):</span>
<span id="cb2-64">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>v.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>v.y</span>
<span id="cb2-65">    </span>
<span id="cb2-66">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Begrenzt die Magnitude eines Vektors auf max</span></span>
<span id="cb2-67">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> limit(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>):</span>
<span id="cb2-68">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mag() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>:</span>
<span id="cb2-69">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.normalize()</span>
<span id="cb2-70">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mult(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>)</span>
<span id="cb2-71">    </span>
<span id="cb2-72">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Berechnet den Winkel der Rotation eines Vektors</span></span>
<span id="cb2-73">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> heading(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-74">    angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> math.atan2(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x)</span>
<span id="cb2-75">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>angle</span>
<span id="cb2-76"></span>
<span id="cb2-77">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__add__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, other):</span>
<span id="cb2-78">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> other.x</span>
<span id="cb2-79">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> other.y</span>
<span id="cb2-80">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PVector2(x, y)</span>
<span id="cb2-81">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> result</span>
<span id="cb2-82">    </span>
<span id="cb2-83">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__sub__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, other):</span>
<span id="cb2-84">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> other.x</span>
<span id="cb2-85">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> other.y</span>
<span id="cb2-86">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PVector2(x, y)</span>
<span id="cb2-87">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> result</span>
<span id="cb2-88">    </span>
<span id="cb2-89">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__str__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-90">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"["</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"]"</span></span>
<span id="cb2-91">        </span>
<span id="cb2-92">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@classmethod</span></span>
<span id="cb2-93">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> random2D(cls):</span>
<span id="cb2-94">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.uniform(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-95">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.uniform(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-96">    v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cls(x, y)</span>
<span id="cb2-97">    v.normalize()</span>
<span id="cb2-98">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> v</span>
<span id="cb2-99"></span>
<span id="cb2-100">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Klassenmethoden: Skalare Multiplikation und Division</span></span>
<span id="cb2-101">    </span>
<span id="cb2-102">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Multiplikation mit einem Skalar</span></span>
<span id="cb2-103">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> smult(v, n):</span>
<span id="cb2-104">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> v.x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>n</span>
<span id="cb2-105">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> v.y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>n</span>
<span id="cb2-106">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PVector2(x, y)</span>
<span id="cb2-107">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> result</span>
<span id="cb2-108"></span>
<span id="cb2-109">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Division mit einem Skalar</span></span>
<span id="cb2-110">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> sdiv(v, n):</span>
<span id="cb2-111">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb2-112">      x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> v.x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>n</span>
<span id="cb2-113">      y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> v.y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>n</span>
<span id="cb2-114">      result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PVector2(x, y)</span>
<span id="cb2-115">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> result</span>
<span id="cb2-116">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb2-117">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Error. Divison durch Null!"</span>)</span></code></pre></div>
<p>Das Hauptprogramm ist durch diese Modularisierung ‚Äì so wie ich es liebe ‚Äì wieder sehr √ºbersichtlich geraten:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> uniform</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> init():</span>
<span id="cb3-4">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">global</span> mover</span>
<span id="cb3-5">  mover <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Mover()</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update():</span>
<span id="cb3-8">  mover.move()</span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> draw():</span>
<span id="cb3-11">  screen.fillRect(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, screen.width, screen.height, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(32, 62, 80)"</span>)</span>
<span id="cb3-12">  mover.display()</span></code></pre></div>
<p>Es passiert ja auch noch nicht viel: Nach jedem Neustart wird ein Kreis √ºber den Bildschirm gejagt, der ‚Äì wenn er die Grenzen des Fensters erreicht ‚Äì, an der gegen√ºberliegenden Seite wieder auftaucht. Aber in diesem einfachen Beispiel liegt das gro√üe Versprechen, da√ü in microStudio und Python/Brython ein komplettes ¬ªNature of Code¬´ liegen k√∂nnte.</p>
<p>Und Vorsicht: Die PVector2-Klasse ist noch nicht wirklich ausgetestet. Ich werde mit ihr noch etliche Experimente durchf√ºhren m√ºssen.</p>
<p>Damit ist die Liste meiner Tutorials zu microStudio mit Python um ein weiteres Element gewachsen:</p>
<ul>
<li>MicroStudio und Python: Tutorial 1: <a href="https://kantel.github.io/posts/2024032201_microstudio_python_1/">Hallo Brython</a>!</li>
<li>MicroStudio und Python (Teil 2): <a href="https://kantel.github.io/posts/2024032401_microstudio_python_2/">Zombie Apokalypse</a></li>
<li>MicroStudio und Python (Teil 3): <a href="https://kantel.github.io/posts/2024032502_microstudio_python_3/">Dancing Crab</a></li>
<li>MicroStudio und Python (Teil 4): <a href="https://kantel.github.io/posts/2024032703_flying_badger_python/">Flying Badger</a></li>
<li>MicroStudio und Python (Teil 5): PVector2 und ¬ªThe Nature of Code¬´</li>
</ul>
<p>Auch dieses kleine Skript habe ich unter dem Titel ¬ª<a href="https://microstudio.dev/i/kantel/pythontutorial5/">Python Tutorial 5</a>¬´ auf meinem <a href="https://microstudio.io/kantel/">microStudio-Account</a> hochgeladen, damit Ihr damit spielen k√∂nnt. Und wer mir wirklich einen Gefallen tun will, der teste die PVector2-Klasse. Berichte in meinen Kommentaren sind willkommen.</p>
<p>Ich mu√ü gestehen, so viel Spa√ü wie ich in den letzten Tagen mit microStudio und Python hatte, hatte ich schon lange nicht mehr. <em>Still digging!</em></p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Fu√ünoten</h2>

<ol>
<li id="fn1"><p>Die Videos sind Teil einer Monsterplaylist ¬ª<a href="https://www.youtube.com/playlist?list=PLTwy92rWKPiHTwXoyygjW0ZQ1WfkEwhqV">Game Programming</a>¬´, bestehend aus (Stand heute) 66 Tutorials (das letzte Video ist vor f√ºnf Tagen ver√∂ffentlicht worden, es kann also mit neuen Tutorials gerechnet werden). Und auch alle anderen Video-Tutorials des Kanals ¬ª<em><a href="https://www.youtube.com/@DesignCodeDebugRepeat">DesignCodeDebugRepeat</a></em>¬´ (dahinter steckt die Autorin <em>Margaret Burke</em>) sind beachtenswert. Ich habe ihn daher abonniert.‚Ü©Ô∏é</p></li>
</ol>
</section></div> ]]></description>
  <category>microStudio</category>
  <category>Python</category>
  <category>Brython</category>
  <category>Nature of Code</category>
  <category>Creative Coding</category>
  <category>Spieleprogrammierung</category>
  <guid>https://kantel.github.io/posts/2024032801_microstudio_noc_1/</guid>
  <pubDate>Thu, 28 Mar 2024 19:15:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024032801_microstudio_noc_1/images/pvector2stage1.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>MicroStudio-Tutorial (Teil¬†4): Der fliegende Dachs ‚Äì jetzt auch in Python</title>
  <dc:creator>J√∂rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024032703_flying_badger_python/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53539184633/"><img src="https://kantel.github.io/posts/2024032703_flying_badger_python/images/flyingbadgerpython-b.jpg" class="img-fluid"></a></p>
<p>Mein Wechsel von <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/microscript.html">microScript</a> nach Python/<a href="https://brython.info/">Brython</a> in meiner kleinen Tutorialreihe zu <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/microstudio.html">microStudio</a> bedingt, da√ü ich auch einige meiner ersten Tutorials neu implementieren mu√üte. Dazu geh√∂rt auch <a href="https://kantel.github.io/posts/2024022001_microstudio_1st_steps/">mein allererster Schritt mit microStudio</a>, der einen kleinen Dachs im roten Morgenmantel im Ballon √ºber einen W√ºstenhimmel schweben lie√ü.</p>
<iframe src="pythontutorial4/index.html" class="if16_9" name="Flying Badger">
</iframe>
<p>Viel hat hier nach dem Wechsel zu Brython nicht getan, da das Skript ohne Interaktion mit dem Nutzer auskommt, und auch sonst so einfach ist, da√ü nur wenige Zeilen Code ben√∂tigt werden:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Badger:</span>
<span id="cb1-2">  </span>
<span id="cb1-3">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-4">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-5">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span></span>
<span id="cb1-6">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span></span>
<span id="cb1-7">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span></span>
<span id="cb1-8">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"flyingbadger"</span></span>
<span id="cb1-9">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.speed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span></span>
<span id="cb1-10">  </span>
<span id="cb1-11">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> move(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-12">    badger.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> badger.speed</span>
<span id="cb1-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> badger.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> badger.w:</span>
<span id="cb1-14">      badger.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>screen.width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> badger.w</span>
<span id="cb1-15">  </span>
<span id="cb1-16">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> display(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-17">    screen.drawSprite(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im, badger.x, badger.y, badger.w, badger.h)</span>
<span id="cb1-18"></span>
<span id="cb1-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> init():</span>
<span id="cb1-20">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">global</span> badger</span>
<span id="cb1-21">  badger <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Badger()</span>
<span id="cb1-22"></span>
<span id="cb1-23"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update():</span>
<span id="cb1-24">  badger.move()</span>
<span id="cb1-25"></span>
<span id="cb1-26"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> draw():</span>
<span id="cb1-27">  screen.fillRect(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, screen.width, screen.height, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(255, 255, 255)"</span>)</span>
<span id="cb1-28">  screen.drawSprite(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"desert"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, screen.width, screen.height)</span>
<span id="cb1-29">  badger.display()</span></code></pre></div>
<p>Aber da dieses Progr√§mmchen die Basis f√ºr weitere, geplante Tutorien bildet, soll es nicht nur hier in diesem <del>Blog</del> Kritzelheft abgedruckt werden, sondern ich habe es auch <a href="https://microstudio.dev/i/kantel/pythontutorial4/">auf meine microScript-Seiten hochgeladen</a>, wo Ihr neben dem Quellcode auch die verwendeten Assets findet.</p>
<p>Bisher sind ein meiner Reihe ¬ªmicroStudio mit Python¬´ diese Tutorials erschienen:</p>
<ul>
<li>MicroStudio und Python: Tutorial 1: <a href="https://kantel.github.io/posts/2024032201_microstudio_python_1/">Hallo Brython</a>!</li>
<li>MicroStudio und Python (Teil 2): <a href="https://kantel.github.io/posts/2024032401_microstudio_python_2/">Zombie Apokalypse</a></li>
<li>MicroStudio und Python (Teil 3): <a href="https://kantel.github.io/posts/2024032502_microstudio_python_3/">Dancing Crab</a></li>
<li>MicroStudio und Python (Teil 4): Flying Badger</li>
</ul>
<p>Die Reihenfolge der Beitr√§ge ist wegen meines Wechsels von microScript nach Python ein wenig durcheinander geraten. Ich werde sie daher bei Gelegenheit noch umsortieren. <em>Still digging!</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/53539184633/">Flying Badger</a></em>, erstellt mit <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/scenario.html">Scenario</a>. Prompt: ¬ª<em>A badger in a red dressing gown floats over the desert, sitting in the Passanger basket of a blue hot air balloon</em>¬´. Modell: Stable Diffusion XL, Style: Cel Shaded + Icon Stylizer.</p>



 ]]></description>
  <category>microStudio</category>
  <category>Python</category>
  <category>Spieleprogrammierung</category>
  <guid>https://kantel.github.io/posts/2024032703_flying_badger_python/</guid>
  <pubDate>Wed, 27 Mar 2024 18:30:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024032703_flying_badger_python/images/flyingbadgerpython.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Vorfr√ºhling im Britzer Garten</title>
  <dc:creator>J√∂rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024032702_karwoche_britzer_garten/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53615034928/"><img src="https://kantel.github.io/posts/2024032702_karwoche_britzer_garten/images/britzergarten00-b.jpg" class="img-fluid"></a></p>
<p>Heute habe ich den ersten wirklich warmen Berliner Fr√ºhlingstag (es wurden knapp 20¬∞&nbsp;C erreicht) ausgenutzt und meine Jahreskarte f√ºr den <a href="https://de.wikipedia.org/wiki/Britzer_Garten">Britzer Garten</a> verl√§ngert. Als Inhaber einer Ehrenamtskarte hat man mir darauf sogar auch noch ein wenig Rabatt spendiert.</p>
<p><a href="https://www.flickr.com/photos/schockwellenreiter/53614837306/"><img src="https://kantel.github.io/posts/2024032702_karwoche_britzer_garten/images/britzergarten01.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/53615167209/"><img src="https://kantel.github.io/posts/2024032702_karwoche_britzer_garten/images/britzergarten02.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/53613961582/"><img src="https://kantel.github.io/posts/2024032702_karwoche_britzer_garten/images/britzergarten03.jpg" class="img-fluid"></a><br><br> <a href="https://www.flickr.com/photos/schockwellenreiter/53613958002/"><img src="https://kantel.github.io/posts/2024032702_karwoche_britzer_garten/images/britzergarten04.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/53615034688/"><img src="https://kantel.github.io/posts/2024032702_karwoche_britzer_garten/images/britzergarten05.jpg" class="img-fluid"></a>&nbsp;<a href="https://www.flickr.com/photos/schockwellenreiter/53613958217/"><img src="https://kantel.github.io/posts/2024032702_karwoche_britzer_garten/images/britzergarten06.jpg" class="img-fluid"></a></p>
<p><em>Mit einem Klick auf die Vorschaubilder kommt Ihr je auf eine Seite mit einer Vergr√∂√üerung.</em></p>
<p>Zwar hatte die Fr√ºhlingssonne die Bl√ºten im Park noch nicht richtig wachgek√ºsst, aber ein paar Photos habe ich dennoch geschossen. Und weil das Gesichtsbuch und ich auch 2024 keine wirklichen Freunde werden, m√º√üt Ihr da jetzt durch und Euch die Bilder hier anschauen.</p>
<hr>
<p><strong>Photos</strong> (<a href="http://creativecommons.org/licenses/by-nc-nd/2.0/">cc</a>) 2024: <em><a href="http://cognitiones.kantel-chaos-team.de/cv.html">J√∂rg Kantel</a></em></p>



 ]]></description>
  <category>Neuk√∂lln</category>
  <category>Parks und G√§rten</category>
  <category>Photographie</category>
  <guid>https://kantel.github.io/posts/2024032702_karwoche_britzer_garten/</guid>
  <pubDate>Wed, 27 Mar 2024 17:35:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024032702_karwoche_britzer_garten/images/britzergarten00.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Google korrigiert mit Version 123 seines Browsers Chrome kritische Sicherheitsl√ºcken</title>
  <dc:creator>J√∂rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024032701_chrome_update/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53560556567/"><img src="https://kantel.github.io/posts/2024032701_chrome_update/images/sexyoctopussy-b.jpg" class="img-fluid"></a></p>
<p>Google ver√∂ffentlicht das Update der Version 123 (123.0.6312.86/87) seines Browsers Chrome und schlie√üt damit <a href="https://chromereleases.googleblog.com/2024/03/stable-channel-update-for-desktop_26.html">kritische Sicherheitsl√ºcken</a>.</p>
<p>Chrome aktualisiert sich (au√üer bei Linux) √ºber die integrierte Update-Funktion, kann aber ‚Äì wenn es pressiert ‚Äì auch <a href="https://www.google.com/intl/de/chrome/browser/">hier geladen</a> werden. <em>(Mein <a href="http://www.gwdg.de/~mreiman1/">pers√∂nlicher CERT</a> per Email.)</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/53560556567/">Octopussy</a></em>, erstellt mit <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/scenario.html">Scenario</a>. Prompt: ¬ª<em>A sexy female robot flees from a gigantic data octopus, colored french comic style</em>¬´. Negative Prompt: ¬ª<em>ugly, deformed, noisy, blurry, distorted, out of focus, bad anatomy, extra limbs, poorly drawn face, poorly drawn hands, missing fingers</em>¬´. Modell: Stable Diffusion XL, Style: Scifi Magic + Belgian School.</p>



 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2024032701_chrome_update/</guid>
  <pubDate>Wed, 27 Mar 2024 16:45:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024032701_chrome_update/images/sexyoctopussy.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Apple-Flickentag f√ºr die Desktop-Betriebssysteme</title>
  <dc:creator>J√∂rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024032601_apple_update/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53571226371/"><img src="https://kantel.github.io/posts/2024032601_apple_update/images/bigapple-b.jpg" class="img-fluid"></a></p>
<p>Nach den <a href="https://kantel.github.io/posts/2024032301_apple_not_update/">Notfall-Updates vor wenigen Tagen</a> f√ºr die mobilen Ger√§te hat Apple nun auch die (vermutlich) regul√§ren und normalen (doch was ist bei der Firma aus Cupertino schon normal?) Updates f√ºr die noch unterst√ºtzten Desktop-Betriebssysteme ver√∂ffentlicht:</p>
<section id="apple-ver√∂ffentlicht-macos-sonoma-14.4.1" class="level3">
<h3 class="anchored" data-anchor-id="apple-ver√∂ffentlicht-macos-sonoma-14.4.1">Apple ver√∂ffentlicht macOS Sonoma 14.4.1</h3>
<p>Apple hat das Update auf die neue Betriebssystemversion macOS Sonoma 14.4.1 freigegeben, bietet Leistungsverbesserungen und korrigiert damit auch wieder <a href="https://support.apple.com/de-de/HT214096">Sicherheitsprobleme</a>.</p>
<p>Das Update steht √ºber die Systemeinstellungen zur Verf√ºgung.</p>
</section>
<section id="apple-ver√∂ffentlicht-sicherheitsupdate-f√ºr-macos-ventura-und-monterey" class="level3">
<h3 class="anchored" data-anchor-id="apple-ver√∂ffentlicht-sicherheitsupdate-f√ºr-macos-ventura-und-monterey">Apple ver√∂ffentlicht Sicherheitsupdate f√ºr macOS Ventura und Monterey</h3>
<p>Apple hat auch das Sicherheitsupdate auf <a href="https://support.apple.com/de-de/HT214095">macOS Ventura 13.6.6</a> und <a href="https://support.apple.com/de-de/HT214094">macOS Monterey</a> freigegeben.</p>
<p>Die Updates stehen wie √ºblich √ºber die Softwareaktualisierung bereit.</p>
<p><em>(Mein <a href="http://www.gwdg.de/~mreiman1/">pers√∂nlicher CERT</a> per Email.)</em></p>
<hr>
<p><strong>Bild</strong>: <em><a href="https://www.flickr.com/photos/schockwellenreiter/53571226371/">Big Apples</a></em>, erstellt mit <a href="http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/scenario.html">Scenario</a>. Prompt: ¬ª<em>The evil witch gives Snow White a half-eaten apple in the fairytale forest</em>¬´. Negative Prompt: ¬ª<em>ugly, deformed, noisy, blurry, distorted, out of focus, bad anatomy, extra limbs, poorly drawn face, poorly drawn hands, missing fingers</em>¬´. Modell: Stable Diffusion XL, Style: Hyper-Realistic Digital Watercolor + Vibrant Storybook.</p>


</section>

 ]]></description>
  <category>Security</category>
  <guid>https://kantel.github.io/posts/2024032601_apple_update/</guid>
  <pubDate>Tue, 26 Mar 2024 14:25:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024032601_apple_update/images/bigapple.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>MicroStudio und Python (Teil 3): Dancing Crab</title>
  <dc:creator>J√∂rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024032502_microstudio_python_3/</link>
  <description><![CDATA[ 




<p><a href="https://www.flickr.com/photos/schockwellenreiter/53611256725/"><img src="https://kantel.github.io/posts/2024032502_microstudio_python_3/images/dancingcrab-b.jpg" class="img-fluid"></a></p>
<p>Heute habe ich das dritte Tutorial meiner kleinen Reihe zu <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/microstudio.html">microStudio</a> mit Python/<a href="https://brython.info/">Brython</a> fertiggestellt. Daf√ºr habe ich eine kleine, rote Krabbe mit Luftblasen tanzen lassen. Wenn sie mit einer ¬ªnormalen¬´ (durchsichtigen wei√üen) Luftblase zusammenst√∂√üt, bekommt sie einen Punkt gutgeschrieben. Kollidiert sie dagegen mit einer roten Luftblase, werden ihr zehn Punkte abgezogen. Sinkt das Punktekonto der Krabbe unter Null, ist das Spiel zu Ende.</p>
<iframe src="dancingcrab/index.html" class="if16_9" name="Dancing Crab">
</iframe>
<p>Die Idee der tanzenden Krabbe ist nicht meine und nicht wirklich neu. Sie basiert auf einem Spiel, das <em>Hauke Fehr</em> schon 2019 in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/tigerjython.html">TigerJython</a> implementiert hatte<sup>1</sup>, und auch ich hatte, inspiriert davon, ziemlich genau vor einem Jahr auch schon einmal aus einer spontanen Laune heraus eine <a href="https://kantel.github.io/posts/2023041403_dancing_crab_3/">Impementierung</a> in <a href="http://cognitiones.kantel-chaos-team.de/programmierung/python/trinket.html">Trinket</a> vorgenommen.</p>
<p>Nun also das Ganze noch einmal in microStudio. Daf√ºr habe ich als erstes der Krabbe eine eigene Klasse spendiert:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Crab:</span>
<span id="cb1-2">  </span>
<span id="cb1-3">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-4">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb1-5">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb1-6">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb1-7">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-8">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">65</span></span>
<span id="cb1-9">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.speed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb1-10">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-11">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"crab"</span></span>
<span id="cb1-12">    </span>
<span id="cb1-13">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> move(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> check_input(keyboard, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LEFT"</span>):</span>
<span id="cb1-15">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.speed</span>
<span id="cb1-16">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check border</span></span>
<span id="cb1-17">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>:</span>
<span id="cb1-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span></span>
<span id="cb1-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> check_input(keyboard, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RIGHT"</span>):</span>
<span id="cb1-20">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.speed</span>
<span id="cb1-21">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check border</span></span>
<span id="cb1-22">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>:</span>
<span id="cb1-23">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span></span>
<span id="cb1-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># wrap(self)</span></span>
<span id="cb1-25">  </span>
<span id="cb1-26">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> display(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-27">    screen.drawSprite(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h)</span></code></pre></div>
<p>Die Bewegung der Krabbe ist einfach, sie kann nur nach rechts oder links krabbeln und auch nicht aus dem Fenster laufen (sie wird in <code>move()</code> bei <img src="https://latex.codecogs.com/png.latex?-160"> oder <img src="https://latex.codecogs.com/png.latex?160"> zum Stoppen gebracht).</p>
<p>Die Luftblasen, die sich in meinem Programm entgegen den Gesetzen der Physik nach unten statt nach oben bewegen (hey, das ist <strong>mein</strong> Spiel, da mache ich die Gesetze!), sind ebenfalls eine eigene Klasse:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Bubble:</span>
<span id="cb2-2">  </span>
<span id="cb2-3">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-4">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.reset()</span>
<span id="cb2-5">    </span>
<span id="cb2-6">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> reset(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-7">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bubbleblue1"</span></span>
<span id="cb2-8">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">170</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">170</span>)</span>
<span id="cb2-9">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>)</span>
<span id="cb2-10">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb2-11">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w</span>
<span id="cb2-12">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-13">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.speed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> uniform(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>)</span>
<span id="cb2-14">    </span>
<span id="cb2-15">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> is_circle_collision(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, other):</span>
<span id="cb2-16">    distance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> math.dist([<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y], [other.x, other.y])</span>
<span id="cb2-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> distance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> other.r:</span>
<span id="cb2-18">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb2-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb2-20">  </span>
<span id="cb2-21">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> move(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-22">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.speed</span>
<span id="cb2-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>:</span>
<span id="cb2-24">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.reset()</span>
<span id="cb2-25">      </span>
<span id="cb2-26">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> display(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-27">    screen.drawSprite(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h)</span></code></pre></div>
<p>Neu ist hierbei, da√ü ich gelernt habe, da√ü das <code>math</code>-Modul in Python seit der Version Python&nbsp;3.8 ebenfalls eine <a href="https://www.w3schools.com/python/ref_math_dist.asp"><code>dist()</code>-Methode besitzt</a>, die den euklidischen Abstand zwischen zwei Punkten berechnet. Sie erwartet allerdings die Punktekoordinaten als Liste, daf√ºr kann sie aber die Abst√§nde zwischen beliebig-dimensionalen Punkten berechnen (beide Punkte m√ºssen aber die gleiche Dimension besitzen). Also habe ich sie in der Methode <code>is_circle_collision()</code> eingesetzt, denn niemand sollte das Rad doppelt erfinden m√ºssen.</p>
<p>Da die roten Luftblasen ‚Äì abgesehen davon, da√ü sie ¬ªb√∂se¬´ sind ‚Äì sich nur in Nuancen von den ¬ªguten¬´ Blasen unterscheiden, leben sie in einer Tochterklasse <code>RedBubble</code>, die von <code>Bubble</code> erbt:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> RedBubble(Bubble):</span>
<span id="cb3-2">  </span>
<span id="cb3-3">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb3-5">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.reset()</span>
<span id="cb3-6">  </span>
<span id="cb3-7">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> reset(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-8">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bubblered"</span></span>
<span id="cb3-9">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">170</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">170</span>)</span>
<span id="cb3-10">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>)</span>
<span id="cb3-11">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb3-12">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w</span>
<span id="cb3-13">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb3-14">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.speed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> uniform(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>)</span></code></pre></div>
<p>So ist die Klasse recht kurz geraten.</p>
<p>Auch das Hauptprogramm ist vergleichsweise kurz, einen gro√üen Teil machen die <em>Credits</em> in den Kommentaren am Anfang aus:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dancing Crab</span></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># J√∂rg Kantel 2024</span></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Inspiriert von Heiko Fehr: ¬ªLet's Code Python¬´, Bonn (Rheinwerk-Verlag) 2019, Seiten 247ff.</span></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Krabbe: Nitin Chowdary (CC0), https://opengameart.org/content/crab</span></span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Luftblasen: HorrorPen (CC-BY 3.0), https://opengameart.org/content/bubbles8-colors</span></span>
<span id="cb4-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bildhintergrund: Kenney.nl Fish Pack (CC0), https://www.kenney.nl/assets/fish-pack</span></span>
<span id="cb4-7"></span>
<span id="cb4-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> random <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> randint, uniform</span>
<span id="cb4-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb4-10"></span>
<span id="cb4-11">NUM_BUBBLES <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span></span>
<span id="cb4-12">NUM_RBUBBLES <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb4-13">bubbles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb4-14">redbubbles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb4-15"></span>
<span id="cb4-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> init():</span>
<span id="cb4-17">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">global</span> crab, bubble, rb</span>
<span id="cb4-18">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(NUM_BUBBLES):</span>
<span id="cb4-19">    bubble <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Bubble()</span>
<span id="cb4-20">    bubbles.append(bubble)</span>
<span id="cb4-21">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(NUM_RBUBBLES):</span>
<span id="cb4-22">    rb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RedBubble()</span>
<span id="cb4-23">    redbubbles.append(rb)</span>
<span id="cb4-24">  crab <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Crab()</span>
<span id="cb4-25"></span>
<span id="cb4-26"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update():</span>
<span id="cb4-27">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> bubble <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> bubbles:</span>
<span id="cb4-28">    bubble.move()</span>
<span id="cb4-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> bubble.is_circle_collision(crab):</span>
<span id="cb4-30">      bubble.reset()</span>
<span id="cb4-31">      crab.score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb4-32">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> rb <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> redbubbles:</span>
<span id="cb4-33">    rb.move()</span>
<span id="cb4-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> rb.is_circle_collision(crab):</span>
<span id="cb4-35">      rb.reset()</span>
<span id="cb4-36">      crab.score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb4-37">  crab.move()</span>
<span id="cb4-38">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> crab.score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb4-39">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GAME OVER!"</span>)</span>
<span id="cb4-40"></span>
<span id="cb4-41"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> draw():</span>
<span id="cb4-42">  screen.clear()</span>
<span id="cb4-43">  screen.fillRect(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, screen.width, screen.height, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(49, 197, 244)"</span>)</span>
<span id="cb4-44">  screen.drawSprite(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"background"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, screen.width, screen.height, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">640</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">416</span>)</span>
<span id="cb4-45">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> bubble <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> bubbles:</span>
<span id="cb4-46">    bubble.display()</span>
<span id="cb4-47">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> rb <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> redbubbles:</span>
<span id="cb4-48">    rb.display()</span>
<span id="cb4-49">  crab.display()</span>
<span id="cb4-50">  screen.drawText(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Score: "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(crab.score), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rgb(250, 25, 25)"</span>)</span></code></pre></div>
<p>Es gibt auch hier nichts wirklich Neues, alle Methoden der microScript-API wurden in den vorherigen Tutorials schon behandelt. Das gilt auch f√ºr die <code>util</code>-Datei, die nur aus der Brython-spezifischen Methode <code>check_input()</code> besteht (die Methode <code>wrap()</code> habe ich f√ºr die kleine Krabbe nicht ben√∂tigt):</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> check_input(obj, val):</span>
<span id="cb5-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">hasattr</span>(obj, val):</span>
<span id="cb5-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> obj[val] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb5-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span></code></pre></div>
<p>Da die Anzahl meiner microScript/Python-Tutorials (hoffentlich) immer weiter w√§chst, f√ºhre ich die bisher erschienenen am Ende des Artikels einzeln auf, damit Ihr (und ich) sie wiederfindet:</p>
<ul>
<li><a href="https://kantel.github.io/posts/2024032201_microstudio_python_1/">MicroStudio und Python: Tutorial 1</a>: Hallo Brython!</li>
<li><a href="https://kantel.github.io/posts/2024032401_microstudio_python_2/">MicroStudio und Python (Teil 2)</a>: Zombie Apokalypse</li>
<li>MicroStudio und Python (Teil 3): Dancing Crab</li>
</ul>
<p>Die Reihe wird sicher fortgesetzt. Und nat√ºrlich habe ich zu Eurer Erbauung dieses dritte Tutorial auch wieder <a href="https://microstudio.dev/i/kantel/pythontutorial3/">auf meinen microStudio-Account hochgeladen</a>. Habt Spa√ü damit!</p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Fu√ünoten</h2>

<ol>
<li id="fn1"><p>Hauke Fehr: <em><a href="https://www.rheinwerk-verlag.de/lets-code-python/">Let‚Äôs code Python</a></em>, Bonn (Rheinwerk Computing) 2019, Seiten 247 ff.‚Ü©Ô∏é</p></li>
</ol>
</section></div> ]]></description>
  <category>microStudio</category>
  <category>Spieleprogrammierung</category>
  <guid>https://kantel.github.io/posts/2024032502_microstudio_python_3/</guid>
  <pubDate>Mon, 25 Mar 2024 19:55:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024032502_microstudio_python_3/images/dancingcrab.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Freie Tiles und Sprites f√ºr Minimalisten</title>
  <dc:creator>J√∂rg Kantel</dc:creator>
  <link>https://kantel.github.io/posts/2024032501_tilesets_fuer_minimalisten/</link>
  <description><![CDATA[ 




<p><a href="https://kenney.nl/media/pages/assets/scribble-platformer/f308c7810a-1674932930/sample.png"><img src="https://kantel.github.io/posts/2024032501_tilesets_fuer_minimalisten/images/scribbleplat-b.jpg" class="img-fluid"></a></p>
<p>Da man nicht nur nie genug <a href="http://cognitiones.kantel-chaos-team.de/multimedia/farbpaletten/farbpaletten.html">Farbpaletten</a> im Portfolio haben kann, sondern auch freie Tile- und Spritesets nie ausgehen d√ºrfen (speziell wenn ‚Äì wie momentan bei mir ‚Äì ein Schwerpunkt auf die Erkundung neuer Spiele-Engines liegt) und da zus√§tzlich bekanntlich in der Beschr√§nkung die Kraft liegt, habe ich heute (auch um meiner Kreativit√§t einen Schub zu geben) ein paar weitere freie, minimalistische Asset-Packs f√ºr Euch und f√ºr mich zusammengestellt.</p>
<p>Den Anfang macht ‚Äì wie sollte es anders sein ‚Äì mal wieder Kenney mit dem <a href="https://kenney.nl/assets/scribble-platformer">Scribble Platformer</a>- (√ºber 100 Assets) und dem <a href="https://kenney.nl/assets/scribble-dungeons">Scribble Dungeons</a>- (√ºber 256 Assets) Paketen. Die in ein 64x64-Pixel-Raster passenden Bildchen haben mit ihrer handgezeichneten Anmutung einen eigenen Charme, der unter anderem geradezu nach einem Einsatz in Tutorials schreit, um den Entwurfscharakter zu betonen.</p>
<p>Wie alles von Kenney sind die Packs in der Public Domain (<a href="https://creativecommons.org/publicdomain/zero/1.0/">CC0</a>).</p>
<p>Einen ganz anderen Charakter besitzt die <em><a href="https://itch.io/c/3905668/the-doomsphere">Doomsphere</a></em>-Reihe, die der User <em>Butterhands</em> auf Itch.io hochgeladen hat. Sie sind alle in 1-Bit gehalten (also strikt schwarz-wei√ü) und passen in ein 32x32-Pixel-Raster (mit 32x32 Pixel gro√üen Sprites und 16x16 gro√üen Tiles). Die Reihe besteht momentan (das j√ºngste Update ist von heute, es k√∂nnten also noch weitere Packs folgen) aus dem</p>
<ul>
<li><a href="https://butterhands.itch.io/doomcrypt-kit">1-Bit Doomcrypt Kit</a> (Vampires prey upon the wrong monastery.)</li>
<li><a href="https://butterhands.itch.io/doomland-kit">1-Bit Doomland Kit</a> (The only thing more dangerous than orcs is this hungry and unforgiving forest.)</li>
<li><a href="https://butterhands.itch.io/doomgeon-kit">1-Bit Doomgeon Kit</a> (Some skeletons are best left unearthed.)</li>
<li><a href="https://butterhands.itch.io/doomhold-kit">1-Bit Doomhold Kit</a> (These aren‚Äôt Santa‚Äôs helpers!) und dem (brandfrischen)</li>
<li><a href="https://butterhands.itch.io/doomsphere-charset">1-Bit Doomsphere Charset</a> (A new entry into the Doomsphere!)</li>
</ul>
<p>und sind ebenfalls in der Public Domain (<a href="http://creativecommons.org/publicdomain/zero/1.0?ref=chooser-v1">CC0 1.0</a>).</p>
<p><a href="https://butterhands.itch.io/doomcrypt-kit"><img src="https://kantel.github.io/posts/2024032501_tilesets_fuer_minimalisten/images/doomsphere1.png" class="img-fluid"></a>&nbsp;<a href="https://butterhands.itch.io/doomland-kit"><img src="https://kantel.github.io/posts/2024032501_tilesets_fuer_minimalisten/images/doomsphere2.png" class="img-fluid"></a>&nbsp;<a href="https://butterhands.itch.io/doomgeon-kit"><img src="https://kantel.github.io/posts/2024032501_tilesets_fuer_minimalisten/images/doomsphere1.png" class="img-fluid"></a><br><br> <a href="https://butterhands.itch.io/doomhold-kit"><img src="https://kantel.github.io/posts/2024032501_tilesets_fuer_minimalisten/images/doomsphere4.png" class="img-fluid"></a>&nbsp;<a href="https://butterhands.itch.io/doomsphere-charset"><img src="https://kantel.github.io/posts/2024032501_tilesets_fuer_minimalisten/images/doomsphere5.png" class="img-fluid"></a></p>
<p>Wo von Minimalismus die Rede ist und das in der Beschr√§nkung die Kraft l√§ge, da darf nat√ºrlich <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/bitsy.html">Bitsy</a> nicht fehlen. <em>Adam Le Doux</em>, der Programmierer dieser (gewollt) extrem minimalstischen Engine, hat zus√§tzlich zwei freie Tile- und Spritesets daf√ºr ver√∂ffentlicht: Einmal das <a href="https://ledoux.itch.io/forest-zone-bitsy-tile-pack">Forest Zone Bitsy Tile Pack</a> (96 Tiles in einer Bitsy-kompatobken HTML-Datei) und dann das <a href="https://ledoux.itch.io/terrarium-bitsy-tile-pack">Terrarium Bitsy Tile Pack</a> (186 Tiles, einmal auch in einer Bitsy-kompatiblen HTML-Datei, dann aber auch als <code>.bitsy</code>-Data-File). Das letztgenannte Set kommt zus√§tzlich noch mit zehn Farbpaletten.</p>
<p>Au√üerdem l√§√üt <em>Adam Le Doux</em> uns wissen, da√ü es bald auch wieder eine <a href="https://ledoux.itch.io/bitsy/devlog/703292/bitsyjam-returns-suggest-a-theme">Bitsy Jam geben wird</a> und er bittet um Themenvorschl√§ge.</p>
<iframe class="if16_9" src="https://www.youtube.com/embed/F-zH_bumHjM?si=GEYu4KpC0YouYIqm" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p><strong>War sonst noch was</strong>? Ach ja, von <em>aprilmaycodes</em> gibt es nicht nur die (Stand heute) zehn Videos (meist zwischen 30 Minuten und zwei Stunden Spielzeit) umfassende Playlist ¬ª<a href="https://www.youtube.com/playlist?list=PLutR-qDsVNKgjzcqIHnZTv2lMxC2DoYLI">Pygame Turn-Based RPG Code-Along</a>¬´ (da kann noch mit Fortsetzungen gerechnet werden), sondern auch noch die Liste ¬ª<a href="https://www.youtube.com/playlist?list=PLutR-qDsVNKjVQepwGwv-4n4hL2w1MuKh">Stardew Valley Clone</a>¬´ (15 Videos). Programmiert wird in beiden Projekten mit <a href="http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html">Pygame</a> und daher pa√üt das irgendwie auch noch in diesen Beitrag.</p>



 ]]></description>
  <category>Spieleprogrammierung</category>
  <category>Tiles und Sprites</category>
  <category>Bitsy</category>
  <category>Pygame</category>
  <guid>https://kantel.github.io/posts/2024032501_tilesets_fuer_minimalisten/</guid>
  <pubDate>Mon, 25 Mar 2024 16:05:00 GMT</pubDate>
  <media:content url="https://kantel.github.io/posts/2024032501_tilesets_fuer_minimalisten/images/scribbleplat.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
