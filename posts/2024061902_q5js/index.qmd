---
title: "Q5.js: The Sequel to P5.js is here"
author: "J√∂rg Kantel"
date: "2024-06-19 9:45:00"
categories: [Q5.js, P5.js, Processing, JavaScript, Creative Coding]
image: "images/q5jsdemo.jpg"
---

[![](images/q5jsdemo-b.jpg)](https://www.flickr.com/photos/schockwellenreiter/53801829670/)

Ein neues Spielzeug? Oder nur ein wenig Rumoren in der [Processing](http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processing.html)-Community? Jedenfalls scheint *[Quinton Ashley](https://github.com/quinton-ashley/p5play/wiki/Developer-Log)*, der Sch√∂pfer von [P5.play](http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/p5play.html) mit der Entwicklung von [P5.js](http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/p5js.html) unzufrieden zu sein (vergleiche auch [hier](https://kantel.github.io/posts/2024061601_openprocessing/)). Daher hat er mit einer Handvoll Mitstreiter das Projekt [Q5.js](https://q5js.org/home/) ins Leben gerufen, das so etwas -- wie der Name schon erahnen l√§√üt -- wie ein legitimer Nachfolger von P5.js sein will.

Ich wei√ü noch nicht, was ich wirklich davon halten soll. Doch Ashley und seine Mitstreiter scheinen keine Fehler gemacht zu haben: Q5.js ist r√ºckw√§rtskompatibel zu P5.js, das hei√üt bestehende P5.js-Skripte laufen ohne √Ñnderung auch in Q5.js. Und auch externe Bibliotheken wie P5.sound oder (das wundert aber niemanden&nbsp;ü§ì) P5.play werden unterst√ºtzt, da Q5.js intern einen Alias zu P5.js besitzt.

Und -- wichtig f√ºr mich -- auch wenn auf der Website nrgendwo darauf hingeweisen wird (hier wird nur auf die Einbindung via CDN (GitHub) oder `npm` verwiesen), man kann mit Q5.js auch lokal im Texteditor seines Vertrauens entwickeln und die Bibliotheken selbst hosten. Denn auf den [GitHub-Seiten des Projekts](https://github.com/q5js/q5.js) kann man wahlweise eine `Q5.js` oder eine `Q5.min.js` herunterladen und sie genau so wie die `P5.js` oder die `P5.min.js` in seinen Projekten nutzen.

Was ist denn nun anders und will besser sein? Q5.js ist klein. W√§hrend P5.js nicht minifiziert 5&nbsp;MB fett ist, bringt Q5.js (ebenfalls nicht minifiziert) gerade einmal 74&nbsp;KB auf die Waage. Bei den minifizierten Versionen sind es 1&nbsp;MB (P5.min.js) versus 48&nbsp;KB (Q5.min.js). Und Q5.js verspricht, mindestens doppelt so schnell, im Extremfall sogar um den Faktor Zehn schneller als P5.js zu sein (das war wohl dem P5.play-Entwickler wichtig).

Daneben gibt es eine Handvoll zus√§tzlicher, exklusiver Features wie `inFill` (das pr√ºft, ob ein Punkt innerhalb des zuletzt gef√ºllten Shapes liegt) oder `ctx`, einen Alias v√ºr den `drawingContext`. Au√üerdem ist die Erstellung mehrerer Sketche auf einer Webseite mit der Einf√ºhrung von `namespace` einfacher geworden und es gibt einen *Top-Level Global Mode*, der es erlaubt, P5-Funktionen auch au√üerhalb von `setup()` oder `draw()` aufzurufen. Und noch vieles mehr&nbsp;‚Ä¶

Das Projekt ist noch jung (erst vor wenigen Monaten -- im Februar letzten Jahres -- ver√∂ffentlicht) und hat dennoch vor wenigen Stunden die Version 2.0 erreicht, die mit einer besseren Modularisierung Q5.js noch schneller und schlanker machen will. [Und es hat noch viel vor](https://github.com/orgs/q5js/projects/1/views/1).

Ich wollte -- wie [hier angemerkt](https://kantel.github.io/posts/2024060901_turtle_gfx/) -- bei meinen P5.js-Experimenten in der n√§chsten Zeit sowieso etwas mit dem Modul [Complex Numbers](https://mathjs.org/docs/datatypes/complex_numbers.html) aus der Library [Math.js](https://mathjs.org/) anstellen und mal Mandelbrot- und Julia-Mengen implementieren. Das w√§re doch die Gelegenheit f√ºr einen Geschwindigkeitsvergleich zwischen P5.js und Q5.js. *Still digging!*