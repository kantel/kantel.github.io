---
title: "Py5 mit Spyder in eigenem Conda-Environment"
author: "Jörg Kantel"
date: "2024-06-29 15:40:00"
categories: [Python, Py5, Spyder]
image: "images/py5spyder.jpg"
---

[![](images/py5spyder-b.jpg)](https://www.flickr.com/photos/schockwellenreiter/53823834445/)

Heureka, es geht! Ich habe -- wie gestern [angekündigt](https://kantel.github.io/posts/2024062801_conda_env_python/) -- es tatsächlich geschafft, [Py5](http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/py5.html) im eigenen Conda-Environment mit [Spyder](http://cognitiones.kantel-chaos-team.de/programmierung/python/spyder.html) zu starten. Und dafür waren nur wenige Vorarbeiten notwendig:

Ich hatte ja vor einem Jahr schon [festgestellt](https://kantel.github.io/posts/2023042001_pillow_tutorial/), daß sich (Standalone-) Spyder per Design (das ist kein Bug, sondern ein Feature!) schwer tut, mit anderen als den mitgelieferten (Python-) Paketen zusammenzuarbeiten. Der in der Spyder-FAQ vorgeschlagene [Workaround](https://docs.spyder-ide.org/5/faq.html#using-packages-installer) wies mich aber auf eine Lösung hin, die recht einfach mit der [Anaconda](http://cognitiones.kantel-chaos-team.de/programmierung/python/anaconda.html)-Navigator-Umgebung zu realisieren war. Dafür muß man einen Weg einschlagen, den *Lee Vaughan* in seinem Buch »[Python Tools vor Scientists](https://nostarch.com/python-tools-scientists)« den »naiven Zugang« *(Naive Approach)* nennt[^1]. Hierbei wird tatsächlich ein eigenes Spyder in der gewünschten Umgebung (in meinem Fall `py5`) installiert. Der Anaconda-Navigator schlägt (nach einem Wechsel in das Environment) die Installation auch schon vor, so daß diese mit einem Mausklick zu erledigen ist[^2].

[^1]: Im Gegensatz zum »modularen Zugang« *(Modular Approach)*, bei dem jedes Conda-Environment nur Aliase auf die im Base-Environment installierten Pakete bereitstellt.
[^2]: Auch *Lee Vaughan* empfiehlt für Spyder den naiven Zugang, während er für [Jupyter](http://cognitiones.kantel-chaos-team.de/programmierung/python/jupyter.html) und [JupyterLab](http://cognitiones.kantel-chaos-team.de/programmierung/python/jupyterlab.html) den modularen Weg vorschlägt.

Wenn man nun im Navigator in der aktivierten Umgebung Spyder startet, läuft ein Spyder, das alle Python-Pakete kennt, die in der aktiven Umgebung installiert sind -- also in meinem Fall auch Py5. Der [Screenshot im Banner oben](https://www.flickr.com/photos/schockwellenreiter/53823834445/) ist der Beweis.

Das macht die Spynne doch wieder zu einer möglichen [Visual Studio Code](http://cognitiones.kantel-chaos-team.de/produktivitaet/visualstudiocode.html)-Alternative. Ich brenne darauf zu testen, wie sich Py5 zum Beispiel zusammen mit der [Matplotlib](http://cognitiones.kantel-chaos-team.de/programmierung/python/matplotlib.html) schlägt. Aber auch von Simulationen mit [Pygame](http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html) als Simulationsoberfläche und der Matplotlib als Umgebung für die Charts wage ich zu träumen. Ihr seht, ich habe immer noch zu tun. *Still digging!*

### Literatur

Lee Vaughan: *[Python Tools for Scientists](https://nostarch.com/python-tools-scientists). An Introduction to Using Anaconda, JupyterLab, and Python’s Scientific Libraries*, San Francisco CA (No Starch Press) 2022