---
title: "Es geht noch geiler: Web2Executable"
author: "Jörg Kantel"
date: "2024-02-12 20:35:00"
categories: [JavaScript, Creative Coding, Interactive Fiction, Spieleprogrammierung]
image: "images/web2exe.jpg"
---

[![](images/web2exe-b.jpg)](https://www.flickr.com/photos/schockwellenreiter/53524181232/)

Vor [etwa einen Monat](https://kantel.github.io/posts/2024010702_bitsybox/) berichtete ich über die [Bitsybox](https://ledoux.itch.io/bitsybox), einen Emulator für Windows, macOS und Linux, mit dem man Bitsy-Spiele »native« auf den genannten Plattformen abspielen kann, und kommentiere dies mit »wie geil ist das denn?«

Es geht aber noch geiler: Denn bei meiner [jüngsten Erkundung](https://kantel.github.io/posts/2024020801_tuesdayjs_update/) von [Tuesday JS](http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/tuesdayjs.html) stolperte ich auch über den Beitrag »[Creation html desctop app for windows macos and linux](https://kirill-live.itch.io/tuesday-js/devlog/241616/creation-html-desctop-app-for-windows-macos-and-linux)«. Im Kontext, in dem er stand, vermutete ich zunächst, daß es um eine Anwendung ging, die Tuesday-JS-Spiele für den Desktop fit machen kann. Aber [Web2Executable](https://github.com/nwutils/Web2Executable), das Teil, um das es in diesem Beitrag geht, kann viel mehr -- es kann nahezu jede JavaScript/HTML-App mit Hilfe von Node (genauer: [NW.js](https://github.com/nwutils/Web2Executable) (das früher mal [Node Webkit](http://cognitiones.kantel-chaos-team.de/webworking/frameworks/nodewebkit.html)) hieß), in eine Standalone-App für Windows, macOS und Linux verwandeln, ohne daß man einen Rechner mit den genannten Betriebssystemen besitzen muß (Okay, mindestens auf einen Rechner muß man natürlich Zugriff haben, aber auf dem kann man die Binaries auch für die »fremden« Betriebssysteme erzeugen).

Das alles ist natürlich mehr als geil: Nicht nur, daß ich damit Desktop-Apps für Tuesday JS erzeugen kann, sondern auch aus interaktiven Geschichten mit [Twine](http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/twine2.html) oder [Ink](http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/inkle.html), oder Spielen mit der [jüngst entdeckten](https://kantel.github.io/posts/2024021001_ctJS/) JavaScript-Spiele-Engine [Ct.js](http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/ctjs.html) könnte ich »native« Anwendungen »stricken«. Und das ist noch nicht alles: Wegen meiner frisch erwachten JavaScript Begeisterung träume schon von [P5.js](http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/p5js.html)-Applikationen auf dem Desktop, die die DOM-Erweiterungen von P5.js nutzen, und noch an vieles mehr. Die Möglichkeiten sind nahezu grenzenlos. *Still dreaming!*

Aber erst einmal habe ich aus meinem [gestern erstellten](https://kantel.github.io/posts/2024021102_tuesdayjs_1st_steps/) Tuesday-JS-Prototypen eine Desktop-Anwendung erstellt. Die Mac-Version läuft, da ich jedoch keine Hardware habe, um die Linux- oder Windows-Version zu testen, habe ich alles [auf Itch.io hochgeladen](https://kantel.itch.io/poirots-abenteuer) und bitte Euch da draußen, das auch mal unter Windows oder Linux anzuwerfen (Vorsicht, die Downloads sind naturgemäß (133 MB bis 157 MB) recht fett). Über Erfolgs- oder Mißerfolgsberichte in meinen Kommentaren wäre ich dankbar.

Wenn Ihr das Teil selber testen wollt, gibt es zwei Hürden zu überwinden: Die jüngste [Version 0.7.2b](https://github.com/nwutils/Web2Executable/releases/tag/v0.7.2b) gibt es momentan als Binariy nur für Windows, Nutzer »richtiger« Betriebssysteme müssen auf die [Version 0.7.1b](https://github.com/nwutils/Web2Executable/releases/tag/v0.7.1b) zurückgreifen. Und Apple-Nutzer kämpfen wie gewohnt mit der Überfürsorge ihres Betriebssystems, das den Download als potentiell gefährlich einstuft. Dagegen hat vermutlich jede und jeder von Euch da draußen seine eigene Strategie entwickelt.

Natürlich habe ich **[Web2Executable](http://cognitiones.kantel-chaos-team.de/webworking/frameworks/web2executable.html)** auch eine Seite in [meinem Wiki](http://cognitiones.kantel-chaos-team.de/index.html) spendiert.

**War sonst noch was?** Ach ja, wer lieber mit [Electron](http://cognitiones.kantel-chaos-team.de/webworking/frameworks/electron.html) statt mit NW.js hantiert, für den hat der gleiche Autor das Tool [Electrify](http://cognitiones.kantel-chaos-team.de/webworking/frameworks/electrify.html) entwickelt, das ähnlich wie Web2Executable funktioniert. Aber diese Anwendung ist seit etlichen Jahren verwaist und wird nicht mehr weiterentwickelt. Aber mir persönlich gefiel sowieso [Node Webkit/NW.js besser](http://blog.schockwellenreiter.de/essays/nodewebkit01.html) als Electron, denn der Ansatz, zuerst eine HTML-Seite für die Applikation zu schreiben und dann das JavaScript drumherum zu stricken, [liegt mir mehr](http://blog.schockwellenreiter.de/2017/12/2017121105.html), als ausgehend von einer JavaScript-Datei `main.js` die Applikation zu erzeugen. Aber das ist vermutlich Geschmackssache -- beide Anwedungen erzeugen -- das liegt ein der Natur der Sache -- gleich fette Dateien.