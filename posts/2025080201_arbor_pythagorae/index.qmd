---
title: "Arbor Pythagorae mit CPythons Schildkr√∂te und mit Trinkets Turtle"
author: "J√∂rg Kantel"
date: "2025-08-02 19:00:00"
categories: [Python, Turtle, Trinket, Creative Coding]
image: "images/arborpythagorae.jpg"
---

[![](images/arborpythagorae-b.jpg)](https://www.flickr.com/photos/schockwellenreiter/54695317548/)

Nachdem mein [letztes Experiment](https://kantel.github.io/posts/2025073001_fraktaler_baum/) mit [CPythons Turtle](http://cognitiones.kantel-chaos-team.de/programmierung/python/turtlepython.html) und dem nahezu identischen Quellcode in [Trinket](http://cognitiones.kantel-chaos-team.de/programmierung/python/trinket.html) so erfolgreich verlaufen war, hatte ich Blut geleckt und wollte eines meiner Lieblingsobjekte, den [Pythagoras-Baum](https://de.wikipedia.org/wiki/Pythagoras-Baum), auch mit Pythons Turtle (und parallel dazu auch mit Trinkets Schildkr√∂te) realisieren. Zwar hatte ich ihn [vor etwa drei Wochen](https://kantel.github.io/posts/2025071101_pythagoras_baum_py5/) mit einem Algorithmus, der ohne Turtle-Kommandos auskommt, in [Py5](http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/py5.html), dem Python3-Port von Processing, implementiert, und [davor auch schon einmal](https://kantel.github.io/posts/2025060201_spass_mit_tigerjython/) mit [TigerJythons](http://cognitiones.kantel-chaos-team.de/programmierung/python/tigerjython.html) Turtle, aber die Implementierung der Schildkr√∂te in TigerJython weicht doch stark von Pythons Turtle ab. Daher wollte ich den Pythagoras-Baum einfach auch mal mit den Kommandes realisieren, die Python in seiner Standard-Bibliothek zur Verf√ºgung stellt, ohne da√ü man zus√§tzliche Module installieren mu√ü.

In den folgenden Abschnitten ist jeweils das Trinket-Skript in diese Seiten eingebettet, das Ihr mit ¬ªRun¬´ neu starten k√∂nnt. Zwar habe ich noch keine weiteren Interaktionen eingeplant, aber ¬ªWeil es geht!¬´ ist doch auch ein hinreichender Grund f√ºr dieses Experiment.&nbsp;ü§ì

## Der symmetrische Pythagoras-Baum

<iframe src="https://trinket.io/embed/python/6de8871e3e4d?outputOnly=true&runOption=run&start=result" width="657" height="539" frameborder="0" marginwidth="0" marginheight="0" allowfullscreen></iframe>

Der symmetrische Pythagoras-Baum ist die einfachste Form der Realisierung, weil hier die rechte wie die linke Seite gleichbehandelt werden, es also keine Unterscheidungen gibt. Daher ist der Quellcode auch entsprechend kurz geraten:

~~~python
# Symmetrischer Pythagorasbaum
import turtle as t
import math

WIDTH, HEIGHT = 640, 400

palette = [(42, 40, 45), (54, 50, 80), (160, 51, 46),
           (50, 80, 105), (215, 158, 40),
           (180, 144, 55), (140, 82, 48)]

wn = t.Screen()
wn.setup(width = WIDTH, height = HEIGHT, startx = 2000, starty = 80)
wn.colormode(255)               # f√ºr Trinket auskommentieren
wn.title("Arbor Pythagorae 1")  # f√ºr Trinket auskommentieren
wn.bgcolor(230, 226, 204)

p = t.Turtle()
p.speed(0)
p.pencolor(0, 100, 0)   # Dunkles Gr√ºn
p.setheading(90)

def tree(s):
    if s < 2:
        return
    quadrat(s)
    p.forward(s)
    s1 = s/math.sqrt(2)
    p.left(45)
    tree(s1)
    p.right(90)
    p.forward(s1)
    tree(s1)
    p.back(s1)
    p.left(45)
    p.back(s)

def quadrat(s):
    p.fillcolor(palette[int(s%len(palette) - 1)])
    p.begin_fill()
    for _ in range(4):
        p.forward(s)
        p.right(90)
    p.end_fill()

p.penup()
p.setpos(-50, -HEIGHT/2 + 20)
# Bildschirm-Refresh ausschalten
wn.tracer(0)
p.pendown()
tree(90)
p.hideturtle()
# Bildschirm-Refresh wieder einschalten
wn.update()

print("I did it, Babe!")

wn.mainloop()
~~~

Die Implementierung in Trinket unterscheidet sich nur dadurch, da√ü die Zeilen $13$ und $14$ auskommentiert oder gel√∂scht werden m√ºssen. Au√üerdem sind in Zeile $12$ die Parameter `startx` und `starty` sinnlos, denn sie sind nur daf√ºr gedacht, die Position des Ausgabefenster festzulegen (in diesem Fall auf meinen zweiten Monitor). Aber Trinket ignoriert sie einfach, Ihr m√ºsst sie also nicht l√∂schen.

## Der asymmetrische Pythagoras-Baum

<iframe src="https://trinket.io/embed/python/73d448ee70e2?outputOnly=true&runOption=run&start=result" width="657" height="539" frameborder="0" marginwidth="0" marginheight="0" allowfullscreen></iframe>

Der Code f√ºr den asymmetrischen Pythagoras-Baum unterscheidet sich doch deutlich von dem des symmetrischen Baums (im Gegensatz zu der [Implementierung ohne Turtle in Py5](https://kantel.github.io/posts/2025071101_pythagoras_baum_py5/), wo im Prinzip nur die Winkelkonstanten ge√§ndert werden mu√üten -- alle anderen √Ñnderungen waren nur kosmetischer Natur).

W√§hrend der symmetrische Pythagorasbaum die Rekursion stoppte, wenn die L√§nge der einzelnen Schritte kleiner $2$ wurde (die Rekursionstiefe also von der Seitenl√§nge des Startqudrates abhing), wird beim asymmetrischen Baum die Rekursionstiefe explizit festgelegt und als Parameter der Funktion `tree()` mit √ºbergeben. Das ist deshalb notwendig, weil die rechte und die linke Seite des Baumes unterschiedlich behandelt werden. W√§hrend der linken Seite bei jeder Rekursion eine Seitenl√§nge von $s \sqrt(\frac{3}{2})$ zugewiesen wird, bekommt die rechte Seite jeweils eine neue Seitenl√§nge von $\frac{s}{2}$.

Da es f√ºr mich daher schwierig war, zu entscheiden, welche Seitenl√§nge (die rechte oder die linke?) f√ºr den Abbruch der Rekursion zust√§ndig sein soll, habe ich mich entschieden, einen Rekursionslevel als Abbruchkriterium mitzugeben.

~~~python
# Asymmetrischer Pythagorasbaum
import turtle as t
import math

WIDTH, HEIGHT = 640, 400
REC_LEVEL = 12   # Rekursionstiefe

palette = [(42, 40, 45), (54, 50, 80), (160, 51, 46),
           (50, 80, 105), (215, 158, 40),
           (180, 144, 55), (140, 82, 48)]

wn = t.Screen()
wn.setup(width = WIDTH, height = HEIGHT, startx = 2000, starty = 80)
wn.colormode(255)               # f√ºr Trinket auskommentieren
wn.title("Arbor Pythagorae 2")  # f√ºr Trinket auskommentieren
wn.bgcolor(230, 226, 204)

p = t.Turtle()
p.speed(0)
p.pencolor(0, 100, 0)   # Dunkles Gr√ºn
p.setheading(90)

def tree(s, level):
    if level < 1:
        return
    else:
        quadrat(s)
        # Linke Seite
        ls = s*math.sqrt(3)/2
        p.forward(s)
        p.left(90)
        p.forward(s)
        p.right(150)
        p.forward(ls)
        p.left(90)
        tree(ls, level - 1)
        # Rechte Seite
        rs = s/2
        p.right(180)
        p.forward(rs)
        p.left(90)
        tree(rs, level - 1)
        p.left(60)
        p.back(s)

def quadrat(s):
    p.fillcolor(palette[int(s%len(palette) - 1)])
    p.begin_fill()
    for _ in range(4):
        p.forward(s)
        p.left(90)
    p.end_fill()

p.penup()
p.setpos(120, -HEIGHT/2 + 30)
# Bildschirm-Refresh ausschalten
wn.tracer(0)
p.pendown()
# F√ºr eine Rekursionstiefe > 14 braucht man schon sehr viel Geduld
tree(80, REC_LEVEL)
p.hideturtle()
# Bildschirm-Refresh wieder einschalten
wn.update()

print("I did it, Babe!")

wn.mainloop()
~~~

Auch hier gilt f√ºr die Trinket-Version f√ºr die Zeilen $13$, $14$ und $15$ was ich oben schon f√ºr die Zeilen $12$ bis $14$ geschrieben hatte: Sie k√∂nnen auskommentiert werden, respektive bei der `wn.setup()`-Zeile werden die letzten beiden Parameter von Trinket einfach ignoriert.

Wie schon beim symmetrischen Pythagoras-Baum sind die Werte in `p.setpos()` und die Seitenl√§nge des Startquadrats in `tree()` kosmetischer Natur. Ich habe durch wildes Experimentieren herausgefunden, mit welchen Werten der Baum am Besten ins Fenster passt.

## Die Farben

Damit meine Pythagoras-Skripte nicht immer gleich aussehen, habe ich dieses Mal eine [andere Farbpalette](http://cognitiones.kantel-chaos-team.de/multimedia/farbpaletten/malewitsch.html) ausgew√§hlt. Sie ist inspiriert von Werken des russisch-sowjetischen Malers *[Kasimir Malewitsch](https://de.wikipedia.org/wiki/Kasimir_Sewerinowitsch_Malewitsch)* (1879-1935), eines Hauptvertreters der Russischen Avantgarde, Wegbereiter des Konstruktivismus und Begr√ºnder des Suprematismus. Ich finde die Farben passen sehr gut zum extrem k√ºnstlich konstruierten Pythagoras-Baum.

Den Quellcode findet Ihr nat√ºrlich wieder in meinem GitHub-Repositorium ([arborpythagorae1.py](https://github.com/kantel/turtlepy/blob/master/sources/trees/arborpythagorae1.py) und [arborpythagorae2.py](https://github.com/kantel/turtlepy/blob/master/sources/trees/arborpythagorae2.py)) und die Trinkets f√ºr [Arbor Pythagorae 1](https://trinket.io/python/6de8871e3e4d) und [Arbor Pythagorae 2](https://trinket.io/python/73d448ee70e2) k√∂nnt Ihr von meinem Trinket-Account remixen. Stellt damit an, was Ihr wollt und habt Spa√ü damit.