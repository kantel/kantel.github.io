---
title: "Boids -- mein nächstes Python-Projekt"
author: "Jörg Kantel"
date: "2022-12-11"
categories: [Python, Py5, Processing]
image: "images/boidsprocessing-s.jpg"
---

[![](images/boidsprocessing.jpg)](https://www.youtube.com/watch?v=2IVgz3pDmKc)

Da mein Umzug mit [Quarto](http://cognitiones.kantel-chaos-team.de/webworking/staticsites/quarto.html) nach [GitHub Pages](http://cognitiones.kantel-chaos-team.de/webworking/webservices/githubpages.html) ja erstaunlich problemlos über die Bühne ging, habe ich jetzt wieder Zeit für ein paar Projekte mit Python, genauer: Ich möchte meine Erkundungen von [Py5](http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/py5.html), dem Python3-Port von [Processing](http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processing.html) fortführen. Und da bei mir ja immer noch Experimente in Richtung von *»The Nature of Code«* anstehen, habe ich mir als Projekt eine Implementierung von *Craig Reynolds* [Boids](https://de.wikipedia.org/wiki/Boids) ausgesucht.

Wegen der Popularität des Themas gibt es Video-Tutorials zu »Boids« wie Sand am Meer. Ich brauchte daher nicht lange zu suchen, bis ich fündig wurde:

<iframe width="560" height="315" src="https://www.youtube.com/embed/2IVgz3pDmKc" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

Besonders gefallen hatte mir die zweiteilige [Flocking-Simulation](https://www.youtube.com/watch?v=2IVgz3pDmKc) ([Teil 2](https://www.youtube.com/watch?v=pM1sUYfk2Vw)) von *Stray Basilisk*. Die Videos weisen zwar mit je mehr als anderthalbstündiger Laufzeit eine beträchtliche Länge auf, aber sie sind nicht langweilig. Und sie sind in Processing programmiert.

Als besonderes Schmankerl nutzt *Stray Basilisk* für die Darstellung der Boids dieses [freie Tileset](https://opengameart.org/content/lpc-birds) mit fünfzehn animierten Vögeln aus dem *Liberated Pixel Cup* von OpenGameArt.org. Die geben dem Programm doch gleich eine ganz eigene Anmutung.

Die beiden Videos sind Teil einer Playlist »[Game Coding From Scratch](https://www.youtube.com/playlist?list=PLljr03m9JFTz8HBLSK_FVmD0kQfMPXVk_)« mit insgesamt 42 meist anderthalb bis zweistündigen Videos mit vielen weiteren Projekten (auch in [Go](http://cognitiones.kantel-chaos-team.de/programmierung/go.html) und [Unity](http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/unity.html)), die mich sicher noch über Tage, wenn nicht gar Wochen beschäftigen wird.

<iframe width="560" height="315" src="https://www.youtube.com/embed/x-GwBH4dhko" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

Wer es etwas kompakter mag, dem sei das Video »[Coding Boids in 15 Minutes](https://www.youtube.com/watch?v=x-GwBH4dhko)« empfohlen (ebenfalls in Processing). Der Autor hat sich reichlich bei *Daniel Shiffmans* »[Flocking Simulation](https://www.youtube.com/watch?v=mhjuuHl6qHM)« bedient, aber auch dessen Video ([Webseite auf Coding Train](https://thecodingtrain.com/challenges/124-flocking-simulation)) ist 45 Minuten lang. Kompakter als in obigem Video geht es also kaum noch.

Und *last but not least* gibt es noch die fünfteilige *Coding Challenge* »[Evolutionary Steering Behaviors](https://thecodingtrain.com/challenges/69-evolutionary-steering-behaviors)« (ebenfalls von *Daniel Shiffman*) mit einer Gesamtlaufzeit von etwas über zwei Stunden. Genug Material also, um meine Experimente vorzubereiten. *Still digging!*