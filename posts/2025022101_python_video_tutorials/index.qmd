---
title: "Schlangenfraß: Video-Tutorials zum Wochenende"
author: "Jörg Kantel"
date: "2025-02-21 18:00:00"
categories: [Spieleprogrammierung, Python, Pygame, Pymunk, VPython, Trinket, Nature of Code]
image: "images/pythontv.jpg"
---

[![](images/pythontv-b.jpg)](https://www.flickr.com/photos/schockwellenreiter/54341544016/)

Da mein Programm für die nächsten Wochen oder gar Monate darin besteht, mindestens die ersten drei Kapitel aus *Daniel Shiffmans* »[The Nature of Code](https://natureofcode.com/)« nach Python und [Pygame](http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html) zu portieren und um eigene Beispiele zu erweitern, habe ich mir zur Vorbereitung erst einmal ein paar Video-Tutorials herausgesucht, die ich Euch nicht vorenthalten möchte:

## Pymunk

<iframe class="if16_9" src="https://www.youtube.com/embed/tLsi2DeUsak?si=gU63EyKNNaVcjWET" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>

**[Pymunk](https://www.pymunk.org/en/latest/)**, die nach eigenen Angaben leicht zu erlernende, freie (MIT-Lizenz) Physik-Bibliothek ([Quellcode](https://github.com/viblo/pymunk) auf GitHub) steht zwar frühestens erst dann auf meinder Liste, wenn ich mich auch an das Kapitel&nbsp;6 über Physik-Bibliotheken heranwage. Aber da ich schon lange mal etwas mit Pymunk anstellen wollte, habe ich mir das [obige Video](https://www.youtube.com/watch?v=tLsi2DeUsak) vorab schon einmal reingezogen.

## VPython

<iframe class="if16_9" src="https://www.youtube.com/embed/LmNBp0TKmjI?si=42cj_tJy5vxJldI9" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>

Anders sieht es mit dem Kanal »[Dot Physics](https://www.youtube.com/@DotPhysics)« von *Rhett Allain* aus. Der überaus fleißge Physik-Professor und YouTuber deckt viele der Themen (und noch weit mehr) ab, die auch in *The Nature of Code* behandelt werden. Das fängt mit seinen beiden Videos über [ein](https://www.youtube.com/watch?v=dYtAq3vZXiY)- und [zweidemensionale](https://www.youtube.com/watch?v=LmNBp0TKmjI) *Random Walks* an (die bei *Shiffman* im Kapitel&nbsp;0 vehandelt werden) und setzt sich in vielen weiteren physikalischen Themen fort. *Rhett Allain*, der auch ein fleißger Autor auf [Wired](https://www.wired.com/author/rhett-allain/) und auf [Medium.com](https://rjallain.medium.com/) ist, nutzt für seine Skripte [VPython](http://cognitiones.kantel-chaos-team.de/programmierung/python/vpython.html), eine Bibliothek, mit der man in Python einfach zwei- und dreidimensionale physikalische Probleme lösen kann (und zwar in der Online-[Trinket](http://cognitiones.kantel-chaos-team.de/programmierung/python/glowwscript.html)-Version). Ich hatte ihn [Ende Januar](https://kantel.github.io/posts/2025013101_video_tutorials/) schon einmal kurz auf dem Schirm, aber wegen meiner aktuellen Interessen möchte ich noch einmal ausführlicher auf ihn eingehen:

- Die Playlist »[Physics Python Tutorials](https://www.youtube.com/playlist?list=PLWFlMBumSLSaqgYlK2wD7XSPRQ2p-_Tl4)« besteht aus 35 im Schnitt etwa zwanzigminütigen Videos. Danach dürften in Bezug auf VPython keine Fragen mehr offen sein.
- Die kurze Liste »[Pi](https://www.youtube.com/playlist?list=PLWFlMBumSLSZNZ71I6J3NW1t4M9HlWhwp)« (vier Videos) ist etwas für den [Pi Day](https://de.wikipedia.org/wiki/Pi-Tag).
- Die aus drei Videos bestehende Liste »[Double Pendulum](https://www.youtube.com/playlist?list=PLWFlMBumSLSYBuPnVT16kL-q0IRfSsxqt)« behandelt einen Bereich, der ein beliebtes Physik-Problem mit Bezug zur Chaos-Theorie und dynamischen Systemen ist.
- Wieder Bezug auf Kapitel&nbsp;0 (und weit darüber hinaus) geht die Liste »[Monte Carlo](https://www.youtube.com/playlist?list=PLWFlMBumSLSbNNqXI_bhwAHXIc5yYFqRi)« die aus 11 Videos (mit ein paar Überschneidungen zur Liste »Physics Python Tutorials« siehe oben) besteht.
- Ganz aktuell sind die Listen »[Introduction to Astrophysics](https://www.youtube.com/playlist?list=PLWFlMBumSLSaI4LTqDsjwFiIeXoeNUoAd)« und »[Classical Mechanics 2 - Spring 2025](https://www.youtube.com/playlist?list=PLWFlMBumSLSbc1ZSMIC7Ey9kpVywnpBks)«. Sie bestehen zur Zeit aus je vier etwa halbstündigen Videos, werden aber noch ständig aktualisiert.

## Pygame

<iframe class="if16_9" src="https://www.youtube.com/embed/8o0bGX_PYCs?si=Sxql_7ShGJCRlwYI" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>

*J. Brandon George* (aka *GameElementGuy*) hat ein How To geschrieben: »[Easily Implement Sprite Sheets In Your PyGames](https://darth-data410.medium.com/how-to-easily-implement-sprite-sheets-in-your-pygames-120ce5ea9780)«, aus dem auch das [obige Video](https://www.youtube.com/watch?v=8o0bGX_PYCs) stammt. Inspiriert wurde er unter anderem von dem siebeneinhalbstündigen (sic!) Tutorial »[Creating a Zelda style game in Python [with some Dark Souls elements]](https://www.youtube.com/watch?v=QU1pPzEGrqw)«, das man sich nur häppchenweise reinziehen kann.

Zum Thema »Spritesheets in Pygame« gibt es auch von *Coding wiith Russ* die zwei Tutorials »[Pygame Sprite Sheets](https://www.youtube.com/watch?v=M6e3_8LHc7A)« und »[Pygame Sprite Animation](https://www.youtube.com/watch?v=nXOVcOBqFwM)«, die unbedingt auch in dieser Reihenfolge konsumiert werden sollten.

Daneben gibt es auf diesen Kanal eine Reihe weiterer Playlisten, die jeweils die Programmierung eines Spieles in Pygame zeigen. Meine Favoriten sind:

- »[PyGame - Shooter Game](https://www.youtube.com/playlist?list=PLjcN1EyupaQm20hlUE11y9y8EY2aXLpnv)« (13 Videos).
- »[PyGame - Castle Defender](https://www.youtube.com/playlist?list=PLjcN1EyupaQnjjBvXn4Ew1a9Ms-9QzVub)« (10 Videos).

Dann sind mir noch (völlig unsortiert und ungeprüft) diese Playlisten aus diversen Kanälen untergekommen:

- »[2D Game Development | Pygame](https://www.youtube.com/playlist?list=PL4U0724Jn5ZxvILgwV1A786Aqg92wHSEQ)«, Playlist mit 9 etwa fünfminütigen Videos.
- »[Pygame - Adventure Game](https://www.youtube.com/playlist?list=PLn8cgfOA2qzeXxXe7DBWxX1UR5fJ4MDTb)«, Playlist mit 20 Videos.
- »[Game programming](https://www.youtube.com/playlist?list=PLTwy92rWKPiHTwXoyygjW0ZQ1WfkEwhqV)«, Playlist mit 73 Videos.
- »[PyGame - Misc Tutorials](https://www.youtube.com/playlist?list=PLjcN1EyupaQmZw8C-q6a4Zekidxf8SUj3)«, Playlist mit 28 Videos.
- »[Pygame Fundamentals](https://www.youtube.com/playlist?list=PL8ui5HK3oSiHnIdi0XIAVXHAeulNmBrLy)«, Playlist mit 11 Videos.
- »[Pygame ARPG Tutorial Series](https://www.youtube.com/playlist?list=PLLdd2IQ6qKU7OAOpVdaK304D_BGSOw3iW)«, Playlist mit 9 Videos.
- »[Pygame Tutorials](https://www.youtube.com/playlist?list=PLwUc9C-upZIo4uF9z6jXybDgRAa41YAMr)«, Playlist mit 4 Videos.
- »[Python Pygame tutorials! Build video games with python!!](https://www.youtube.com/playlist?list=PLsFyHm8kJsx1g191CspASSTHuLDEXZRH9)«, Playlist mit 63 Videos.

Das schafft natürlich niemand, das kann man sich bestenfalls nur sehr selektiv reinziehen.

<iframe class="if16_9" src="https://www.youtube.com/embed/OLXNAn7SvRY?si=9qRz3Fnqu_aTNKAt" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>

**War sonst noch was?** Ach ja, der User *[Leaflet](https://www.youtube.com/@masendor)* hat eine von [Elden Ring](https://de.wikipedia.org/wiki/Elden_Ring)« inspirierte interaktive Geschichte oder *Visual Novel* in Pygame realisiert. Dazu gibt es auch noch eine andere Geschichte »[Royal Ordains](https://www.youtube.com/watch?v=ar8TsS8spMU)« auf YouTube und den [Quellcode](https://github.com/remance/Masendor) für seine Elden Ring Variante (MIT-Lizenz) auf GitHub.

<iframe class="if16_9" src="https://www.youtube.com/embed/ar8TsS8spMU?si=qbP3MglGVRXuY7iC" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>

Mir ist nicht ganz klar, ob und wie die Geschichten zusammengehören, fertiggestellt scheinen sie auch noch nicht zu sein. Aber es ist eine interessante Frage, warum der Autor für seine (Pseudo-) Mittelalter-Fantasy-Geschichten Pygame und nicht [Ren'Py](http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/renpy.html) verwendet. Weil es geht&nbsp;…? Auf jeden Fall ist es interessantes und inspirierendes Projekt (und auch den [Quellcode](https://github.com/remance/Royal-Ordains) für Rocal Ordains (GPL) gibt es auf GitHub).

---

**Bild**: *[Python sits on a sofa and watches TV](https://www.flickr.com/photos/schockwellenreiter/54341544016/)*, erstellt mit [OpenArt.ai](https://openart.ai/home). Prompt: »*colored french comic style, a large python with horn-rimmed glasses sits on a sofa in a living room in the evening and watches television, next to the sofa an old-fashioned floor lamp is lit, on the walls there are shelves with many books, the moon shines through a window*«. Modell: Flux (Pro), Style: None.