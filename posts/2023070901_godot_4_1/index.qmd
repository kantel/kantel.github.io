---
title: "Godot 4.1 ist draußen"
author: "Jörg Kantel"
date: "2023-07-09 16:20:00"
categories: [Godot, Spieleprogrammierung]
image: "images/godot41.jpg"
---

[![](images/godot41-b.jpg)](https://godotengine.org/storage/blog/godot-4-1-is-here/detached-code-editor.png)

Von wegen »Warten auf Godot«: Nachdem die *[Godot Game Engine](http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/godot.html)* lange Zeit ihrem Namen alle Ehre gemacht hat (zwischen Godot 3 und [Godot 4](https://gamefromscratch.com/godot-4-released/) lagen fünf Jahre Wartezeit), ist nun gerade einmal vier Monate nach der [Veröffentlichung von Godot 4.0](https://kantel.github.io/posts/2023030402_godot_4/) die [Version 4.1 freigegeben](https://gamefromscratch.com/godot-4-1-released/) worden (hier die [offizielle Ankündigung](https://godotengine.org/article/godot-4-1-is-here/)). Es gibt eine Menge Neuerungen und Bugfixes gegenüber der Version 4.0 (letzteres bestätigt mich bei meinem Vorsatz, Nuller-Releases nach Möglichkeit zu ignorieren), aber nun gibt es keine Ausrede mehr.

<iframe width="560" height="315" src="https://www.youtube.com/embed/PAtG_fHhIx8" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>

Denn die in meinen Augen wichtigste Neuerung ist die, daß der Texteditor/die Texteditoren nun in eigenen, unabhängigen Fenstern geöffnet werden können. Das bringt zwar noch nicht den Komfort eines separaten Editors, wie ihn zum Beispiel [Ren'Py](http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/renpy.html) mit [Visual Studio Code](http://cognitiones.kantel-chaos-team.de/produktivitaet/visualstudiocode.html) besitzt, kommt ihm aber schon ziemlich nahe.

<iframe width="560" height="315" src="https://www.youtube.com/embed/Q4B7K6-BkmI" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>

Das Erlernen einer neuen Game Engine ist immer ein ziemlicher Aufwand. Ich erinnere mich noch an die Schwierigkeiten, die [ich vor Jahrzehnten hatte](http://www.kantel.de/hc/index.html), die (objektbasierte -- damals war das neu) Philosophie hinter [HyperCard](http://cognitiones.kantel-chaos-team.de/programmierung/hypercard.html) zu verstehen, aber auch in jüngster Zeit meine Anstrengungen, [Ren'Py](http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/renpy.html) zu begreifen, setzte ein gehöriges Maß an Geduld voraus.

Nun also Godot: Lange Teit habe ich mich geziert, nun aber habe ich die [aktuelle Version heruntergeladen](https://godotengine.org/download/macos/) und mir für das [runderneuerte, »offzielle« Tutorial](https://docs.godotengine.org/en/stable/getting_started/step_by_step/) sowie für die [Asset-Seiten mit den Demo-Programmen](https://godotengine.org/asset-library/asset?category=10&support[official]=1) Bookmarks gesetzt. Denn das Geile an Godot ist ja, daß man -- ähnlich wie bei Ren'Py -- von seiner Entwicklungsplattform Binaries für (mindestens) Windows, macOS und Linux sowie eine HMLL5-Version für das Web erstellen kann.

Ich habe also große Lust bekommen, Godot zu lernen. Damit ich das Vorhaben auch in die Tat umsetzte, habe ich mir eine Reihe von Tutorials zusammengestellt:

<iframe width="560" height="315" src="https://www.youtube.com/embed/f3WGFwCduY0" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>

Die Tutorialreihe »[Godot Pixel Platformer](https://www.youtube.com/playlist?list=PL9FzW-m48fn16W1Sz5bhTd1ArQQv4f-Cm)« des YouTubers *HeartBeast*  (sechzehn im Schnitt etwa halbstündige Videos) nutzt die [Pixel Platformer Assets](https://www.kenney.nl/assets/pixel-platformer) von Kenney, die auch in meinem [Pygame-Platformer](https://kantel.github.io/posts/2023061701_platformer_pygame_pygbag_1/) Verwendung gefunden haben.

Auf diesem Kanal gibt es noch viele weitere Godot-Tutorials, einige davon gehören allerdings zu kostenpflichtigen Lehrgängen. Trotzdem lohnt es sich, durch die [Kanalseiten](https://www.youtube.com/@uheartbeast/playlists) zu stöbern, sie sind eine Quelle für viele Inspirationen (nicht nur für Godot, sondern auch für andere Plattformen).

<iframe width="560" height="315" src="https://www.youtube.com/embed/Luf2Kr5s3BM" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>

Ein weiteres, nettes Tutorial ist der über einstündige »[Godot 4 Crash Course for Beginners](https://www.youtube.com/watch?v=Luf2Kr5s3BM), ein (nach eigenen Angaben des Kanals *[Chris' Tutorials](https://www.youtube.com/@ChrisTutorialsYT))* *GameDev 2D Top Down Tutorial*. Und das nicht nur, aber auch wegen der niedlichen, freien [Sprout Land Assets](https://cupnooble.itch.io/sprout-lands-asset-pack) von *Cup Nooble*. Sollte ich je eine Farm-Simulation im Stil von [Stardew Valley](https://de.wikipedia.org/wiki/Stardew_Valley) programmieren wollen, muß ich diese Assets unbedingt verwenden.

Auch dieser Kanal bietet noch viele weitere Überraschungen, wobei neben Godot auch andere Engines und sogar Paper RPGs gefeatured werden. Die von *Chris* [hochgeladenen Playlists](https://www.youtube.com/@ChrisTutorialsYT/playlists) sind daher auf jeden Fall auch einen Blick wert.

<iframe width="560" height="315" src="https://www.youtube.com/embed/nAh_Kx5Zh5Q" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>

Viel Zeit (elfeinhalb Stunden) mitbringen müssen diejenigen, die sich die »[ultimate introduction to Godot 4](https://www.youtube.com/watch?v=nAh_Kx5Zh5Q)« zu Gemüte führen wollen. Aber der auf diesen Seiten schon mehrfach lobend erwähnte Kanal *Clear Code* bürgt für Qualität.

<iframe width="560" height="315" src="https://www.youtube.com/embed/FNEAJsry5sA" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>

Brett macht Spiele, (Kalauer an) und zwar keine Brettspiele (Kalauer wieder aus), sondern unter anderem diesen »[Complete 2D Platformer in Godot 4](https://www.youtube.com/watch?v=FNEAJsry5sA)«. Auch dieses Tutorial besticht unter anderem wieder durch Kenney-Assets, dieses Mal das [1-Bit Platformer Pack](https://kenney.nl/assets/1-bit-platformer-pack). Und auch *[Bretts Kanal](https://www.youtube.com/@brettmakesgames)* weist noch etliche weitere Überraschungen auf, die es zu entdecken gilt.

<iframe width="560" height="315" src="https://www.youtube.com/embed/1rwa5kqFep4" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>

Und das kann man immer mal brauchen: *yourgeekeric* zeigt, wie man [Godot zusammen mit GitHub](https://www.youtube.com/watch?v=1rwa5kqFep4) nutzt. Auch auf [seinem Kanal](https://www.youtube.com/@yourgeekeric) warten noch viele weitere Überraschungen auf Euch.

<iframe width="560" height="315" src="https://www.youtube.com/embed/pATpV7MwZr8" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>

**War sonst noch was?** Ach ja, *GameFromScratch* beantwortet die Frage, [warum man die Godot Game Engine nutzen](https://www.youtube.com/watch?v=pATpV7MwZr8) sollte. Und damit schließt sich der Kreis zu meiner Einleitung am Anfang dieses Beitrags. *Still digging!*
