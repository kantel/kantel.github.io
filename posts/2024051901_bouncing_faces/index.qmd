---
title: "Bouncing Faces: Drei Wege, mit P5.js zu spielen"
author: "J√∂rg Kantel"
date: "2024-05-19 16:40:00"
categories: [Creative Coding, P5.js, Processing, Visual Studio Code]
image: "images/bouncingfaceswebeditor.jpg"
---

[![](images/bouncingfaceswebeditor-b.jpg)](https://www.flickr.com/photos/schockwellenreiter/53702749653/)

Es ist an der Zeit, da√ü ich [mein Versprechen](https://kantel.github.io/posts/2024042801_microstudio_particle2/) einl√∂se, ein [P5.js](http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/p5js.html)-Tutorial f√ºr Anf√§nger zu schreiben. Und das bedeutet, ein P5.js-Tutorial, das als Entwicklungsumgebung den [P5.js-Webeditor](https://editor.p5js.org/) nutzt.

Warum ist dieser Unterschied √ºberhaupt notwendig? P5.js ist nicht einfach eine weitere [Processing](http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processing.html)-Variante, sondern eine unabh√§ngige JavaScript-Bibliothek, die sich in ihren Methoden an die Processing-Befehle anlehnt. Das bedeutet, P5.js l√§uft √ºberall dort, wo JavaScript implementiert werden kann und -- das ist in diesem Zusammenhang wichtig -- P5.js-Sketche k√∂nnen in (nahezu) jeder Entwicklungsumgebung geschrieben werden. In der Hauptsache sind es drei Wege, auf die ich im Folgenden eingehen m√∂chte[^1]:

[^1]: Dieser Beitrag fu√üt auf *Tim Rodenbr√∂kers* Blog-Aufsatz ¬ª[Three ways to work with p5.js](https://timrodenbroeker.de/three-ways-to-work-with-p5-js/)¬´ vom 1. September 2022, letzte Bearbeitung am 25. Januar 2024.

### Weg 1: Der P5.js-Webeditor

Seit seiner Einf√ºhrung vor etwa sieben Jahren ist der **[P5.js-Webeditor](https://editor.p5js.org/)** so etwas wie die Standard-Umgebung der P5.js-Entwicklergemeinde geworden. Das hat nicht nur damit zu tun, da√ü die P5.js-Gurus *Patt Vira* und *Daniel Shiffman* ihn in ihren Video-Tutorials mittlerweile ausschlie√ülich nutzen, sondern vor allem damit, da√ü man mit ihm einfach und ohne irgendetwas installieren zu m√ºssen, loslegen kann. Nicht einmal eine Registrierung ist erforderlich[^2]. Entwickelt wurde der Editor ursp√ºnglich von *Cassie Tarakajian*, mittlerweile wirken aber sehr viele Mitstreiterinnen und Mitstreiter an Weiterentwicklung des Editors mit.

[^2]: Zumindest im Prinzip -- ohne Registrierung kann man seine Sketche allerdings nicht abspeichern.

Ein Ziel war es, eine P5.js-Entwicklungsumgebung zu schaffen, die m√∂glichst barrierefrei ist und √ºberall funktioniert.

Der Webeditor bringt erst einmal alles mit, was man f√ºr einen P5.js-Sketch braucht: Eine `index.html`, die den Sketch ausf√ºhrt, die Datei `sketch.js` f√ºr den eigentlichen Sketch und eine minimale `style.css`, mit der die Ausgabe versch√∂nert werden kann. Im einfachsten Fall mu√ü der Entwickler nur die `sketch.js` anfassen, falls er jedoch wei√ü, was er tut, kann er auch die `index.html`[^3] und die `style.css` editieren.

[^3]: Das ist sp√§testens dann notwendig, wenn zus√§tzlich zur `sketch.js` noch weitere JavaScript-Dateien (zum Beispiel f√ºr eigene Klassen) eingebunden werden m√ºssen.

Selbstverst√§ndlich kann der Nutzer √ºber die linke Seitenspalte noch weitere Dateien oder auch Verzeichnisse anlegen, um zum Beispiel Assets (Bilder oder T√∂ne) in seine Sketche einzubinden. Registrierte Nutzer k√∂nnen au√üerdem (in Ma√üen) das Aussehen der Entwicklungsumgebung vom schlichten Tageslichtmode mit wei√üem Hintergrund zum beliebten `Dark Mode` ver√§ndern. Mein [Screenshot im Bannerbild oben](https://www.flickr.com/photos/schockwellenreiter/53702749653/) ist im dunlen Mode mit hohem Kontrast gehalten. Au√üerdem kann der Entwickler seine Sprache (in meinem Fall *deutsch*) w√§hlen.

Nat√ºrlich hat der Webeditor auch ein paar Schattenseiten. Die dunkelste ist, da√ü er seine P5.js-Bibliotheken `p5.js` und `p5.sound.min.js` von einem [Cloud Delivery Network](https://de.wikipedia.org/wiki/Content_Delivery_Network) (CDN) holt (in diesem Fall: *Cloudflare*). F√ºr Anf√§nger ist das sicher hinnehmbar, aber man gibt damit auch ein wenig seine Unabh√§ngigkeit auf.

Die Vorteile des P5.js-Webeditors liegen auf der Hand:

- Er ist extrem einfach und √ºberall zu nutzen, wo man Zugriff auf einen (einigerma√üen aktuellen) Webbrowser hat.
- Es ist keine Installation n√∂tig.

Dem stehen einige wenige Nachteile gegen√ºber, die aber eigentlich nur den Power-Nutzer betreffen:

- Die gesamte Entwicklung inklusive der graphischen Ausgabe des Canvas findet in *einem* Browserfenster statt. Das kann manchmal etwas eng werden.
- Die Speicherung erfolgt in der Cloud (man kann seine Sketche aber auch herunterladen und auf seinem Rechner und/oder in der Versionsverwaltung seines Vertrauens -- zus√§tzlich -- abspeichern).
- Die P5.js-Bibliotheken werden von einem CDN *(Cloudflare)* geladen.

*Tim Rodenbr√∂ker* vermutet zus√§tzlich noch, da√ü es bei gr√∂√üeren Projekten Probleme mit der Skalierung geben k√∂nnte. Ich hatte allerdings schon einige sehr gro√üe Projekte im Webeditor ausgef√ºhrt und keine Probleme gefunden.

### Weg 2: Die Processing-Entwicklungsumgebung (PDE)

[![](images/bouncingfacespde.jpg)](https://www.flickr.com/photos/schockwellenreiter/53702790684/)

Dieser Weg ist vielen unbekannt, sie sind v√∂llig erstaunt dar√ºber, da√ü die normal Processing-Entwicklungsumgebung (PDE) auch einen P5.js-Mode besitzt. Man mu√ü ihn -- wie alle Modes -- √ºber `Tools - Tools verwalten` und dann √ºber den Reiter `Modes` installieren. Danach steht er in dem Klappmen√º recht oben zur Verf√ºgung.

Die PDE legt f√ºr jedes neue Projekt ein Verzeichnis an, da√ü die Sketch-Datei und eine `index.html` besitzt. Beide Dateien sind in der PDE editierbar (siehe [Screenshot](https://www.flickr.com/photos/schockwellenreiter/53702790684/)). Daneben wird ein Verzeichnis `libraries` mit der Datei `p5.min.js` erzeugt, so da√ü im einfachsten Fall f√ºr den Nutzer auch keine zus√§tzlichen Installationen erforderlich sind[^4].

[^4]: Als Besonderheit gibt es noch die Datei `sketch.properties`: Sie teilt der PDE mit, da√ü es sich um ein P5.js-Projekt handelt. Diese Datei wird nur von der PDE angefa√üt, sie st√∂rt also nicht, wenn man zwischen der PDE und einem Texteditor (siehe weiter unten) als Entwicklungsumgebung wechselt.

Wenn der Nutzer in der PDE entwickelt, bekommt er aussagekr√§ftige Fehlermeldungen, wie er es auch von Processing gewohnt ist. Sie ist also f√ºr viele eine ideale Entwicklungsumgebung, wenn man -- wie mit Processing -- ¬ªnur¬´ einen Sketch entwickeln will und keine ¬ªSchweinereien¬´ üê∑ mit dem DOM der den Sketch umgebenden HTML-Datei vorhat.

Wenn einen Sketch aus der PDE heraus startet, ruft diese den Standard-Browser mit `localhost` auf Port 8734 auf. Je nach F√§higkeiten des installierten Standard-Browsers stehen einem alle Tools der Entwicklungsumgebung des Browsers (zum Beispiel die JavaScript-Konsole) zur Verf√ºgung (noch einmal: Siehe [Screenshot](https://www.flickr.com/photos/schockwellenreiter/53702790684/)).

Die Nutzung der PDE als P5.js IDE ist eine gro√üartige M√∂glichkeit f√ºr alle, die aus der Processing/Java-Welt kommen und mit der PDE sowieso schon vertraut sind. Es ist schade, da√ü diese M√∂glichkeit anscheinend weitestgehend unbekannt ist.

### Weg 3: Der Stino-Texteditor f√ºr Programmierer

[![](images/bouncingfacesvscode.jpg)](https://www.flickr.com/photos/schockwellenreiter/53702913734/)

Die Tatsache, da√ü P5.js eine JavaScript-Bibliothek ist, die sich von keiner anderen JavaScript-Bibliothek unterscheidet, hat zur Folge, da√ü die ¬ªnat√ºrliche¬´ Entwicklungsumgebung f√ºr P5.js-Projekte die gleiche ist, wie f√ºr jedes andere Webprojekt auch: Ein stinknormaler (stino) Texteditor und ein ganz gew√∂hnlicher Browser. Mehr ist nicht notwendig -- im Zweifelsfalle geht es (auf dem Mac) auch mit den Bordmitteln TextEdit und Safari (was ich allerdings nicht unbedingt empfehle, daf√ºr mu√ü man schon eine sehr hohe Leidensf√§higkeit oder Askese besitzen). Aber Nerds k√∂nnen zum Beispiel auf den Emacs oder Vim zur√ºckgreifen und ich bin mir sicher, da√ü es daf√ºr auch entsprechende Erweiterungen gibt, die die Entwicklung unterst√ºtzen.

Ich selber habe es aus reiner Neugier auch einmal mit der bezaubernden [Geany](http://cognitiones.kantel-chaos-team.de/produktivitaet/geany.html) ausprobiert und es lief tadellos. Wer in die Mac-only-Falle tappsen will (ich sicher nicht (mehr)), der hat mit [BBEdit](http://cognitiones.kantel-chaos-team.de/produktivitaet/bbedit.html) (kommerziell, aber eingeschr√§nkt kostenlos nutzbar) oder [TextMate](http://cognitiones.kantel-chaos-team.de/produktivitaet/textmate.html) (Open Source) zwei ausgezeichnete Entwicklungsumgebungen zur Auswahl. Ich m√∂chte hier jedoch [Visual Studio Code](http://cognitiones.kantel-chaos-team.de/produktivitaet/visualstudiocode.html) (ebenfalls Open Source) mit zwei Plugins als Entwicklungsumgebung vorstellen[^5].

[^5]: Wer bei Visual Studio Code erschreckt zusammenzuckt: Beide Plugins funzen auch mit [VSCodium](https://vscodium.com/), der ebenfalls freien, aber weniger geschw√§tzigen Visual-Studio-Code-Alternative.

Wie bei jedem anderen Webprojekt mu√ü man sich seine Entwicklungsumgebung erst einmal zusammenstellen. Als Minimum geh√∂ren dazu die HTML-Datei (meist `index.html`), dann die Datei mit dem JavaScript-Sketch (meist -- aber nicht zwingend `sketch.js`), eine CSS-Datei f√ºr das Aussehen und *last but not least* ein Verzeichnis mit den ben√∂tigten Bibliotheken (ich nenne dieses Verzeichnis meistens `js`), und darin mu√ü mindestens eine `p5.min.js` enthalten sein.

Das kann man sich nat√ºrlich jedesmal h√§ndisch zusammenklauben (ich mache das oft sogar so, weil ich fast immer noch irgendwelche Besonderheiten habe, die ich zus√§tzlich installieren will), aber es gibt auch das wunderbare Plugin (im Visual-Studio-Code-Jargon *Extension* genannt) [p5.vscode](https://marketplace.visualstudio.com/items?itemName=samplavigne.p5-vscode) von *Sam Lavigne*. Einmal installiert kann man √ºber die Command Palette sich ein leeres Projekt mit allen notwendigen HTML-, CSS- und JavaScript-Dateien erstellen lassen oder auch weitere P5.js-Bibliotheken suchen und installieren. Au√üerdem kommt es mit einer automatischen (und manchmal geschw√§tzigen) Code-Vervollst√§ndigung und einer Dokumentation aller P5.js-Schl√ºsselw√∂rter und -Funktionen. Zus√§tzlich bringt es noch die VSCode-[Live Server](https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer)-Extension mit, das zweite der oben erw√§hnten Plugins, das sich nicht nur f√ºr P5.js-Projekte als unverzichtbares Werkzeug f√ºr mich herausgestellt hat.

All das wird nat√ºrlich lokal installiert, so da√ü man sich nicht in Abh√§ngigkeiten von irgendwelchen CDNs begibt.

Aus dem oben beschriebenen d√ºrfte der kundigen Leserin oder dem kundigen Leser klar geworden sein, da√ü meine Pr√§ferenzen eindeutig bei dem Weg √ºber einen stinknormalen Texteditor liegen (um genau zu sein: Ich nutze Visual Studio Code -- wie man auch an dem [Screenshot](https://www.flickr.com/photos/schockwellenreiter/53702913734/) sieht). Denn das ist der flexibelste Weg (notfalls kann ich ihn auch ohne die erw√§hnten Plugins nutzen), er ist unbegrenzt skalierbar und ich kann bei der Programmierung bei Bedarf auch problemlos zwischen meinem Texteditor und der Processing PDE wechseln.

Aber da dieser Weg nicht unbedingt einfach ist und Anf√§nger durchaus √ºberfordern kann, werde ich meine geplanten P5.js-Tutorials im P5.js-Webeditor entwickeln. Aber ehrlich gesagt: Wenn man sich seine Entwicklungsumgebung erst einmal zusammengeschustert hat, macht es eigentlich keinen Unterschied, welchen Weg man geht.

### Das Code-Beispiel

F√ºr die verwendeten Screenshots habe ich einen Sketch beutzt, den ich geschrieben hatte, um die [k√ºrzlich vorgestellten](https://kantel.github.io/posts/2024042902_openmoji/) freien [OpenMojis](https://openmoji.org/) zu testen. Es ist ein weiteres simples Partikelsystem, nur da√ü die Partikel in diesem Falle Emojis sind, die (als Bildchen!) √ºber den Bildschirm huschen. Daf√ºr hatte ich erst einmal eine Klasse `Face` geschrieben:

~~~javascript
class Face {

  constructor () {
    this.r = random(12, 24);
    let x = random(this.r, width - this.r);
    let y = random(this.r, height - this.r);
    this.loc = createVector(x, y);
    let velx = random(-3, 3);
    let vely = random(-3, 3);
    this.vel = createVector(velx, vely);
    const faceImages = [face01, face02, face03, face04, face05, face06,
                        face07, face08, face09, face10, face11, face12];
    this.im = random(faceImages);
  }

  move() {
    this.loc.add(this.vel);
  }

  checkEdges() {
    if (this.loc.y >= height - this.r) {
      this.vel.y *= -1;
      this.loc.y = (height - this.r);
    } else if (this.loc.y <= this.r) {
      this.vel.y *= -1;
      this.loc.y = this.r;
    }
    if (this.loc.x >= width - this.r) {
      this.vel.x *= -1;
      // this.dx = random(-3, 3);
      this.loc.x = (width - this.r);
    } else if (this.loc.x <= this.r) {
      this.vel.x *= -1;
      this.loc.x = this.r;
    }
  }

  show() {
    image(this.im, this.loc.x, this.loc.y, 2*this.r, 2*this.r);
  }
}
~~~

Diese Klasse leistet die Hauptarbeit, daher ist das eigentliche Skript -- sieht man von der etwas aufgeblasenen `preload()`-Funktion ab (ich wei√ü, das ginge auch noch k√ºrzer) -- wieder recht kompakt geraten:

~~~javascript
function preload() {
  face01 = loadImage("data/face01.png");
  face02 = loadImage("data/face02.png");
  face03 = loadImage("data/face03.png");
  face04 = loadImage("data/face04.png");
  face05 = loadImage("data/face05.png");
  face06 = loadImage("data/face06.png");
  face07 = loadImage("data/face07.png");
  face08 = loadImage("data/face08.png");
  face09 = loadImage("data/face09.png");
  face10 = loadImage("data/face10.png");
  face11 = loadImage("data/face11.png");
  face12 = loadImage("data/face12.png");
}

let faces = [];
const numFaces = 30;

function setup() {
  createCanvas(800, 480);
  imageMode(CENTER);
  background("#2b3e50");
  for (let i = 0; i < numFaces; i++) {
    faces.push(new Face());
  }
  print(faces.length);
}

function draw() {
  background("#2b3e50");
  for (let face of faces) {
    face.checkEdges();
    face.move();
    face.show();
  }
}
~~~

Ich hoffe, ich habe Euch hiermit neugierig gemacht auf die Tutorials, die noch kommen werden. Ich bin selber ebenfalls gespannt darauf, speziell wie [P5.play](http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/p5play.html) sich schl√§gt (ich bin schlie√ülich ein Spielkalb und ich stehe dazu). *Still digging!*