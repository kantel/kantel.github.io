---
title: "JupyterLab Desktop goes Thonny"
author: "Jörg Kantel"
date: "2024-02-20 19:45:00"
categories: [Python, Jupyter, JupyterLab Desktop, MyST Markdown]
image: "images/juypterlabdesktop.jpg"
---

[![](images/juypterlabdesktop-b.jpg)](https://www.flickr.com/photos/schockwellenreiter/53501582607/)

Eines der größten Vorzüge von [Thonny](http://cognitiones.kantel-chaos-team.de/programmierung/python/thonny.html), der kleinen, (nicht nur anfänger-) freundlichen Python-IDE ist ja, daß sie in einer eigenen, einfach innerhalb Thonny zu verwaltenden Python-Umgebung läuft, und so dem Nutzer die volle Kontrolle über die Umgebung und die Umgebungsvariablen erlaubt. Doch jetzt geht [JupyterLab Desktop](http://cognitiones.kantel-chaos-team.de/programmierung/python/jupyterlabdesktop.html), die Variante der [Jupyter](http://cognitiones.kantel-chaos-team.de/programmierung/python/jupyter.html)-IDE, die [JupyterLab](http://cognitiones.kantel-chaos-team.de/programmierung/python/jupyterlab.html) aus den Klauen der Webbrowser befreien will, mit der aktuellen Version 4.1 noch einen Schritt weiter: Sie erlaubt die Erstellung, Verwaltung und den Aufruf virtueller Umgebungen aus der Applikation heraus, ohne sich in die (Un-) Tiefen der Kommandozeile begeben zu müssen. Wie man dies bewerkstelligt, erläuterte gestern *Mehmet Bektas* ausführlich in dem Beitrag »[Python environment management in JupyterLab Desktop](https://blog.jupyter.org/python-environment-management-in-jupyterlab-desktop-3b119c5811d9)« im Jupyter Blog.

Bisher hatte ich virtuelle Python-Umgebungen ja weitestgehend gemieden, da ich schnell die Übersicht verlor, welche Umgebungen ich schon angelegt und wie ich sie benannt hatte. (Ich weiß, [PyCharm](http://cognitiones.kantel-chaos-team.de/programmierung/python/pycharm.html) liefert eine Übersicht, aber diese IDE war mir zum einen zu fett und zum anderen in der freien (Apache-Lizenz) *Community Edition* zu sehr eingeschränkt in den Möglichkeiten.) Aber natürlich haben virtuelle Umgebungen unbestritten Vorteile, und wenn JuypterLab Desktop deren Verwaltung tatsächlich so einfach macht, wie der Beitrag im Jupyter Blog verspricht, sollte ich JuyterLab als (m)eine Python-IDE doch wieder in Erwägung ziehen.

Vor allem, weil auch noch ein zweiter Artikel in dem Blog meine Aufmerksamkeit erregte: *Marc Wouts* schreibt dort nämlich unter »[The Jupytext Menu is back!](https://blog.jupyter.org/the-jupytext-menu-is-back-3e6212e8c090)«, daß man aus JupyterLab (Desktop) auch wieder einfach »Jupytext Notebooks« speichern und editieren könne. Das sind Juypter Notebooks, die entweder als Markdown-Dateien (Endung `.md`) oder als Python-Skripte (Endung `.py`) im Texteditor oder der IDE Eures Vertrauens weiterverarbeitet werden können. Das bereitet sie auch für die [Publikation via MyST Markdown](https://kantel.github.io/posts/2023083003_myst_jupyterbook/) vor.

Einen Wermutstropfen in all dieser Euphorie gibt es allerdings: Die [Release Notes](https://github.com/jupyterlab/jupyterlab-desktop/releases/tag/v4.1.1-1) schreiben, daß JupyterLab Desktop unter  macOS »mindestens« die Version macOS 10.15 (Catalina) benötigt. Das ist die letzte Version, mit der mein betagtes MacBook Pro noch läuft. Es ist also abzusehen, daß ich irgendwann eine aktuelle Version von JupyterLab Desktop auf meiner Kiste nicht mehr installieren kann.

---

**Bild**: *[Python am Schreibtisch](https://www.flickr.com/photos/schockwellenreiter/53501582607/)* erstellt mit [Scenario](http://cognitiones.kantel-chaos-team.de/technikgeschichte/rechnerundnetze/scenario.html).  Prompt: »*A python with ((glasses)) and a pointer in front of a chart with diagrams in an office. Shelves with books on the walls. It's a sunny morning*«. Modell: Stable Diffusion XL, Style: Stylized Fantasy + Whimsical Storybook.