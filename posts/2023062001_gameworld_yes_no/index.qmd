---
title: "Pygame objektorientiert: Braucht es die Klasse GameWorld?"
author: "Jörg Kantel"
date: "2023-06-20 17:25:00"
categories: [Pygame, Greenfoot, Spieleprgrammierung, OOP]
image: "images/platformer1.jpg"
---

[![](images/platformer1-b.jpg)](https://www.flickr.com/photos/schockwellenreiter/52962509456/)

Da ich letzte Nacht wegen der sommerlichen Schwüle nicht richtig einschlafen konnte, ging mir im Halbschlaf mein Projekt »[Pygame (sauber) objektorientiert](https://kantel.github.io/posts/2023010701_pygame_oop/)« nicht aus dem Kopf, für das ja mein von *[Jonathan Cooper](https://www.youtube.com/playlist?list=PLk64HPu_u_NOD0hC2XFZfDu1ZOr7OF1qB)* inspiriertes [Jump-and-Run-Spiel](https://kantel.github.io/posts/2023061701_platformer_pygame_pygbag_1/) eine Art Referenz-Implementierung für [Pygame](http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html) in [Pygbag](http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygbag.html) (damit es auch im Browser zu spielen ist) werden soll.

Mich beschäftigte dabei in der Hauptsache die Frage, ob die Klasse `GameWorld` wirklich notwendig und sinnvoll sei? Denn schon bei meinen ersten Überlegungen stand sie ziemlich einsam und eigentlich funktionslos im Raum,

![GameWorld in Pygame](images/gameworldpygame.jpg)

während sie in [Greenfoot](http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/greenfoot.html), das ja die Blaupause für meine Implementierung war, eher eine Klasse ist, **in** der die anderen Klassen leben:

![GameWorld in Greenfot](images/gameworldgreenfoot.jpg)


Daher fragte ich mich, ob Pygames Hauptprogramm nicht selber schon die Funktion besitzt, die die Klasse `World` (oder `GameWorld`) in Greenfoot besitzt? Zumal zum einen die Objektorientierung in Java strenger behandelt wird als in Python, und zum zweiten ich die `run()`-Methode wegen der Eigenheiten der Pygbag-Implementierung sowieso aus `GameWorld` herauslösen und in die `main()`-Funktion (und dort in die `while True`-Hauptschleife) auslagern mußte.

Das trägt sicher nicht zur Klarheit bei, die ich mit (m)einem OOP-Ansatz eigentllich erreichen wollte. Daher sollte ich bei dem sowieso geplanten Refaktoring diesen Ansatz noch einmal überdenken.

<iframe width="560" height="315" src="https://www.youtube.com/embed/uWvb3QzA48c" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>

Wenn ich mich recht erinnere, hatte *KidsCanCode* in seinem [Platformer-Projekt](https://www.youtube.com/playlist?list=PLsk-HSGFjnaG-BwZkuAOcVwWldfCLu1pq)« schon vor etlichen Jahren eine Art `GameWorld`-Klasse in Pygame eingeführt. Ich sollte mir also die Playlist noch einmal reinziehen, vielleicht finde ich dort eine Begründung, die meine Zweifel ausräumt.

Ein Seiteneffekt dieser Überlegungen: Die Beschäftigung mit Greenfoot hat mir Spaß gemacht (obwohl ich Java eigentlich nicht mag). Ich habe große Lust bekommen, damit auch einmal etwas absolut Verrücktes und Sinnloses anzustellen. *Still digging!*

**War sonst noch was?** Ach ja, unser aller Datenkrake spülte mir noch zwei Videos zu Pygame mit Pygbag in meinen Feedreader:

- [How to Export Pygame Projects into the Web](https://www.youtube.com/watch?v=LB7dAlIDnDw).
- [Pygame in the BROWSER with pygbag on Github](https://www.youtube.com/watch?v=RDkfbASO-gM) ([Blogpost](https://pythonprogramming.altervista.org/pygame-in-the-browser-with-pygbag-and-github/) dazu).

Die wollte ich Euch nicht vorenthalten.
