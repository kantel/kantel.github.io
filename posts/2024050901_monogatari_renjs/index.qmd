---
title: "Monogatari und RenJS: Zwei Engines für Visual Novels (und mehr)"
author: "Jörg Kantel"
date: "2024-05-09 14:45:00"
categories: [Monogatari, RenJS, Interacitive Fiction, Spieleprogrammierung]
image: "images/monogatari.jpg"
---

[![](images/monogatari-b.jpg)](https://www.flickr.com/photos/schockwellenreiter/53708372012/)

Mein in schöner Regelmäßigkeit auf diesen Seiten auftauchender Freund und Diskussionspartner *Kalle aus Bremen* wollte mich für diesen automatischen [Processing](http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processing.html)/Java nach [P5.js](http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/p5js.html)/JavaScript-[Konverter](https://dkessner.github.io/processing-p5-convert/) begeistern und war -- glaube ich -- ein wenig enttäuscht, weil sich meine Begeisterung in Grenzen hielt[^1]. Aber mich begeisterte etwas ganz anderes. Denn auf den [Seiten von *Darren Kessner*](https://dkessner.github.io/project_current/) fand ich einen [Link zu einer Visual Novel über Alice im Wunderland](https://dkessner.github.io/alice/) und dort wieder einen Link zu der Engine [Monogatari](https://monogatari.io/), mit der er diese interaktive Geschichte gebastelt hatte, und dort wiederum -- über einige Umwege -- einen Link zu [RenJS](https://renjs.net/index.html), eine weitere interessante *Visual Novel Engine*.

[^1]: Ich bin kein Berufs-, sondern ein Hobby-Programmierer. Folgerichtig ist Programmieren für mich in erster Linie eine kreative Tätigkeit. Daher lasse ich mir die Freude an der Kreativität doch nicht von solch einem Automatisierungstool verderben. (Wohlgemerkt, wäre ich ein Profi-Programmierer und müßte mich mit so langweiligen Aufgaben wie zum Beispiel der Programmierung eines Warenwirtschaftssystems herumschlagen, dann sähe meiner Einschätzung solch eines Automatisierungs-Werkzeiges vermutlich anders aus.)

Beide Engines berufen sich auf [Ren'Py](http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/renpy.html) und folgen einer ähnlichen, Skript-orientierten Vorgehensweise, haben aber ihren Fokus auf Webtechniken (HTML5, JavaScript, CSS).

<iframe class="if16_9" src="https://www.youtube.com/embed/byObSXXFAnM?si=3Y0ZdypeRMLPqcku" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>

Die **Monogatari Visual Novel Engine** (MIT-Lizenz)[^2] verlangt einen Texteditor, einen lokalen Webserver (zum Beispiel [MAMP](http://cognitiones.kantel-chaos-team.de/webworking/mamp.html) oder [XAMPP](http://cognitiones.kantel-chaos-team.de/webworking/xampp.html)) und einen einigermaßen modernen Browser als Entwicklungsumgebung. Die Software besitzt eine [ausführliche Dokumentation](https://developers.monogatari.io/documentation) und ist auch auf [GitHub zu finden](https://developers.monogatari.io/documentation). Zusätzlich führt eine [nett gemachte Demo](https://monogatari.io/demo/) (siehe [Screenshot](https://www.flickr.com/photos/schockwellenreiter/53708372012/) im Bannerbild oben) in die vielfältigen Möglichkeiten des Programms ein.

[^2]: Der Name [Monogatari](https://de.wikipedia.org/wiki/Monogatari_Series) leitet sich von einer in Japan populären, gleichnamigen [Light-Novel](https://de.wikipedia.org/wiki/Light_Novel)-Reihe ab, die auch als Anime und in diversen Fernsehserien umgesetzt wurde.

<iframe class="if16_9" src="https://www.youtube.com/embed/Es1nmMqUDHg?si=l774lUNqm6Cpqr4E" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>

Die Voraussetzungen, um mit **RenJS V2** (CC-BY-SA-4.0) eine interaktive Geschichte entwickeln zu können, sind genau dieselben wie bei Monogatari (Texteditor, Browser und lokaler Entwicklungsserver). Hier zeigt schon der Name die Nähe zu Ren'Py, doch ist [Phaser](https://phaser.io/) die (JavaScript-) Engine, die im Hintergrund werkelt. Auch RenJS besitzt eine [umfangreiche Dokumentation](https://renjs.net/docs-page.html) und ein [GitHub-Repositorium](https://github.com/lunafromthemoon/RenJS-V2). Zusätzlich ist das Teil auch noch auf [Itch.io zu finden](https://lunafromthemoon.itch.io/renjs), wo auch eine kleine Demo gestartet werden kann.

Für beide Engines gilt, daß sie neben einer browserbasierten Version auch -- vermutlich via [Electron](http://cognitiones.kantel-chaos-team.de/webworking/frameworks/electron.html) -- Desktop-Applikationen für Windows, macOS und Linux erzeugen können.

Monogatari wie auch RenJS klingen sehr vielversprechend und scheinen sehr ähnlich zu sein. Um sie besser beurteilen zu können, müßte ich sie anscheinend wirklich auf Herz und Nieren testen. Und wißt Ihr was? Ich glaube, ich habe Lust darauf!