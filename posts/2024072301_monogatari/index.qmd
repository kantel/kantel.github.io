---
title: "Wie weiter mit Interactive Fiction: Auch Monogatari ist wieder am Start"
author: "Jörg Kantel"
date: "2024-07-23 20:00:00"
categories: [Monogatari, RenJS, Twine, Interactive Fiction, Spieleprogrammierung]
image: "images/monogatari1ststeps.jpg"
---

[![](images/monogatari1ststeps-b.jpg)](https://www.flickr.com/photos/schockwellenreiter/53876715094/)

Nachdem ich gestern abend und heute stundenlang mit den [gestern besprochenen](https://kantel.github.io/posts/2024072201_tuesdayjs_renjs/) *Visual Novel Engines* [Tuesday JS](http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/tuesdayjs.html) und [RenJS](https://renjs.net/index.html) gespielt hatte, war ich von den Ergebnissen so ernüchtert, daß ich trotz meiner Abneigung gegen geschweifte Klammern doch wieder [Monogatari](https://monogatari.io/) angeworfen hatte. Und das Ergebnis: **Monogatari** ist wieder im Rennen!

RenJS ist nicht schlecht (und Tuesday JS ist wegen der [Twine](http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/twine2.html)-ähnlichen Oberfläche sowieso meine heimliche Liebe), aber RenJS bringt für die Webversion etwas mit, was mich schon an [Ren'Py](http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/renpy.html) gestört hatte: Es verbringt beim Start etliche Zeit damit, das Spiel zu initialisieren und zu laden. Und außerdem sind die Default-GUI-Elemente für meinen Geschmack von ausgesuchter Hässlichkeit (okay, das kann man ändern, aber den RenJS GUI Builder gibt es nur für Windows und für Linux).

Monogatari hingegen ist sofort einsatzbereit und das Default GUI sieht dem gewohnten von Ren'Py sehr ähnlich. Es arbeitet -- wie RenJS auch -- geschmeidig mit [Visual Studio Code](http://cognitiones.kantel-chaos-team.de/produktivitaet/visualstudiocode.html) -- aber auch mit der weniger geschwätzigen Alternative [VSCodium](https://vscodium.com/) -- und dem [Live-Server-Plugin](https://ritwickdey.github.io/vscode-live-server/) zusammen, so daß ein separater lokaler Webserver nicht erforderlich ist (siehe [Screenshot](https://www.flickr.com/photos/schockwellenreiter/53876715094/) im Bannerbild oben). Und die [Dokumentation](https://developers.monogatari.io/documentation) ist ähnlich umfang- und hilfreich wie die von RenJS.

Das Teil verspricht responsive Layouts *out of the box* und die erstellten interaktiven Geschichten sollen auch auf den kleinen Bildschirmen der Smartphones spielbar sein. Daher habe ich auf die Schnelle einen Prototypen erstellt und ihn auf [Itch.io hochgeladen](https://kantel.itch.io/monogatari-first-steps), damit Ihr und ich dies auch testen könnt.

Gefunden habe ich außerdem noch zwei (hoffentlich nützliche -- ich habe sie mir noch nicht angeschaut) Video-Tutorial-Quellen:

1. Vom User *Remi Autor* gibt es eine [dreiteilige Playlist](https://www.youtube.com/playlist?list=PLi8AjZd1QKBAODR2AoWLgpPZIYysolIkG) mit einem Beginners Guide und einem zweiteiligen Tutorial-Stream.
2. Und der *RemeranAuthor* hat das Monogatari-Tutorial »[A BEGINNER'S guide to thinking about CSS](https://www.youtube.com/watch?v=az6b9Qu7Qog)« auf YouTube hochgeladen.

Die Engine ist frei (MIT-Lizenz), den [Quellcode gibt es auf GitHub](https://github.com/Monogatari/Monogatari) und sie wird aktuell noch aktiv von 25 Kontributoren weiterentwickelt. Außerdem kann man via Electron damit Desktop- und via Cordova mobile Anwendungen erstellen.

Daß Monogatari auf JSON setzt, hat vielleicht auch seine Vorzüge: *Haroldo Pinheiro* hat auf dieser Basis ein [Twine 2 Storyformat](https://github.com/haroldo-ok/twine-monogatari/) geschrieben, das Monogatari mit Twine verheiratet. Man soll damit seine Geschichte in Twine schreiben und in Monogatari veröffentlichen können. Er hat dazu eine [Demo](https://haroldo-ok-2.github.io/twine-monogatari/v0.2.0/demo.html) und ein [Video](https://www.youtube.com/watch?v=cNW5hKvAsTo) veröffentlicht. Von so etwas träume ich ja schon lange. *Still digging!*