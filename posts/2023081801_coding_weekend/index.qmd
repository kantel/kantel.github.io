---
title: "Video-Tutorials zum Wochenende: Coding mit der Schlange und mit P5.js"
author: "Jörg Kantel"
date: "2023-08-18 15:30:00"
categories: [Python, Turtle, Processing, P5.js, Simulation, Creative Coding, Twine]
image: "images/humptydumpty13.jpg"
---

[![](images/humptydumpty13-b.jpg)](https://upload.wikimedia.org/wikipedia/commons/b/b1/Denslow%27s_Humpty_Dumpty_pg_13.jpg)

Nachdem ich die letzten Male eher sparsam mit meiner Themenauswahl für die wöchentlichen Video-Tutorials war, gibt es an diesem Wochenende wieder einen Gemischtwarenladen, damit ich [mein zweites Gehirn](http://cognitiones.kantel-chaos-team.de/webworking/auszeichnungssprachen/logseq.html) wieder etwas freimachen kann. Es gibt Simulationen mit [Pythons Schildkröte](http://cognitiones.kantel-chaos-team.de/programmierung/python/turtlepython.html), mit [P5.js](http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/p5js.html) und [Processing (Java)](http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processing.html). Und wo Processing dransteht, sind natürlich auch *Creative Coding* und *Generative Art* mit von der Partie. Zum Schluß -- das ist meiner [jüngsten Entdeckung](https://kantel.github.io/posts/2023081701_tweego_first_steps/) von [Tweego](http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/tweego.html) geschuldet -- darf natürlich auch [Twine](http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/twine2.html) nicht fehlen. Doch wie immer der Reihe nach:

<iframe width="560" height="315" src="https://www.youtube.com/embed/L7z3vv75jdI" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>

[Simulation with Processing](https://www.youtube.com/playlist?list=PLsGCUnpinsDnfiHYpasqrFC5VNzqnXFeh) ist eine wunderbare und extrem lehrreiche Playlist mit zehn Videos zwischen je zehn und 45 Minuten. Und der [Kanal von Jeff Thompson](https://www.youtube.com/@jeffkthompson) enthält noch viele weitere nützliche Playlisten zu Processing und und P5.js. Schaut daher ruhig bei ihm vorbei.

<iframe width="560" height="315" src="https://www.youtube.com/embed/RxE5GBxvVM8" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>

Dann ist da noch die Reihe [P5.js tutorials – Generative art](https://www.youtube.com/playlist?list=PL5Y9p1EK4LbRyYSt_xt2oFY3Z8yCfKJNK) (fünf kurz Videos zwischen drei und zehn Minuten). Auch [dieser Kanal](https://www.youtube.com/@hbyhadeel) harrt noch weiterer Entdeckungen, zum Beispiel diese Playlist »[Processing tutorials – Generative art](https://www.youtube.com/playlist?list=PL5Y9p1EK4LbSumwbRpTDAmGhW17CNHN2f)« (zweiundzwanzig Videos, je zwischen einer Minute und einer dreiviertel Stunde Spieldauer).

<iframe width="560" height="315" src="https://www.youtube.com/embed/mO4aKYNRuws" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>

Der [Data Garden](https://www.youtube.com/@datagardenproject) ist ein junges *Education Project*, das (nicht nur) jüngeren Menschen die Programmierung (in P5.js) näherbringen will. Bisher haben sie dazu [sechs Playlists](https://www.youtube.com/@datagardenproject/playlists?view=1&sort=dd&shelf_id=0) veröffentlicht – fünf Module und eine *Sharing Session*. Das jüngste Update ist erst wenige Tage alt, also rechne ich mit weiteren Tutorials und habe daher den Datengarten abonniert.

<iframe width="560" height="315" src="https://www.youtube.com/embed/XZTRJdzlD-M" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>

In die gleiche Kerbe schlägt das [GWC Curriculum](https://www.youtube.com/@gwccurriculum1640) aus dem YouTube-Kanal der [Girls Who Code](https://girlswhocode.com/), die den *Gender Gap* in den Technologie-Fächern schließen wollen. Besonders gefallen haben mir daraus diese Playlists:

- [Personal Website HTML Project](https://www.youtube.com/playlist?list=PLxuXeImzB_r3STAftmyESUUFQtbd5-Osi)
- [Welcome to p5.js](https://www.youtube.com/playlist?list=PLxuXeImzB_r0_4f9iF3kTMSDCCIr06iQO)
- [Meteor Catcher Game in p5.js](https://www.youtube.com/playlist?list=PLxuXeImzB_r0WKEWpWFPDVI0p3zx9BKQm)
- [Storytelling in Python Activity Set](https://www.youtube.com/playlist?list=PLxuXeImzB_r2VJ686txtjgxxB8T6Ti1fT)

Von Webworking über P5.js bis hin zu Python ist dieser Kanal breit aufgestellt. Nicht nur darum habe ich auch diesem Kanal abonniert.

<iframe width="560" height="315" src="https://www.youtube.com/embed/iaOKlximufY" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>

[Genetische Algorithmen mit der Schlange](https://www.youtube.com/playlist?list=PLmzkEJ1Zz_uZN89BdPwr9qQ06jqsm6UY6): In dieser Serie geht es darum, einen einfachen Bot zu programmieren, der später mit anderen Bots rekombiniert werden soll, um seine Eigenschaften zu verbessern, die ihm helfen, Nahrung zu finden und zu überleben. Das Projekt ist leider eingeschlafen, aber die bisherigen Videos sind als Grundlage für eigenen Experimente doch ganz interessant.

Das Video nutzt für die graphische Darstellung die ebenfalls nicht mehr weiterentwickelte Bibliothek [PySFML](https://github.com/intjelic/python-sfml), jedoch sollte es nicht schwer sein, diese auf [Pygame](http://cognitiones.kantel-chaos-team.de/multimedia/spieleprogrammierung/pygame.html), [Processing.py](http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processingpy.html) oder [Py5](http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/py5.html) umzuschreiben.

Eine weitere, [kurze Playlist](https://www.youtube.com/playlist?list=PLmzkEJ1Zz_uZ5nvTOLaGHfinCzEVEVBlz) (vier etwa zehnminütige Videos) des gleichen Autors führt in die Python-Graphikbibliothek [Graphics.py](http://cognitiones.kantel-chaos-team.de/programmierung/python/graphicspy.html) ein. Auch wenn ich [um 2017](http://blog.schockwellenreiter.de/2017/11/2017111101.html) [ebenfalls](http://blog.schockwellenreiter.de/2017/11/2017111302.html) mal mit dieser [Bibliothek](http://blog.schockwellenreiter.de/2020/04/2020041101.html) [gespielt](http://blog.schockwellenreiter.de/2017/11/2017111404.html) [hatte](http://blog.schockwellenreiter.de/2017/11/2017112601.html), dürfte das heute nur noch von historischem Interesse sein.

<iframe width="560" height="315" src="https://www.youtube.com/embed/6IF8V7FTaPs" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>

Man kann auch mit P5.js Physik simulieren. Das zeigt die Playlist [Magnetic Force (a.k.a. Mass Spectrometer)](https://www.youtube.com/playlist?list=PLISRe8GegO8ShKCTLUQp2mcF2CQEnlr1M) (vier Videos je etwa zehn Minuten bis eine Viertelstunde Spieldauer). Da dies als eine Inspiration für mein geplantes Projekt »[Py5 in Beispielen](https://kantel.github.io/posts/2023081402_plaene_schmieden/)« dienen könnte (auch wenn der Vortrag gelegentlich doch ein wenig trocken ist), habe ich mir den Link zum [Quellcode](https://editor.p5js.org/ChrisOrban/sketches/HJ1UdD9yM) und zur [Step-py-Step Instruction](https://www.asc.ohio-state.edu/orban.14/physics_coding/bfield.html) notiert.

<iframe width="560" height="315" src="https://www.youtube.com/embed/5zpQXlaIA5s" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>

Das Video [Coding Randomly Generated Color Bubbles in Python](https://www.youtube.com/watch?v=5zpQXlaIA5s) stellt auch was mit Pythons Turtle an und ist Teil der Playlist [Various Programming Tutorials](https://www.youtube.com/playlist?list=PL7idXwkT0hgrM5syH_X22sd8yA-a_Tjsf) (30 Videos) von *Brian Fedluk*.

**War sonst noch was?** Ach ja, ich wollte Twine ja nicht vergessen: [Introduction to Twine](https://www.youtube.com/playlist?list=PLHPiz_8klh0zT-0vpoK6MYF5bQ3MCmRNS) ist eine kurze (dreiteilige) Playlist zu Twine. Und damit wende ich mich wieder Tweego zu und wünsche Euch allen da draußen noch ein schönes Wochenende.

*(Bild: [William Wallace Denslow](https://en.wikipedia.org/wiki/W._W._Denslow) (1856-1915), Humpty Dumpty, 1903. Bildquelle: [Wikimedia Commons](https://commons.wikimedia.org/wiki/File:Denslow%27s_Humpty_Dumpty_pg_13.jpg))*