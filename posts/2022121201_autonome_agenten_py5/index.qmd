---
title: "Autonome Agenten in Py5 (Teil 1)"
author: "J√∂rg Kantel"
date: "2022-12-12 16:00:00"
categories: [Python, Py5, Processing]
image: "images/agenten01-s.jpg"
---

[![](images/agenten01.jpg)](https://www.flickr.com/photos/schockwellenreiter/52558822476/in/photostream/)

Getreu meiner [gestrigen Ank√ºndigung](https://kantel.github.io/posts/2022121101_boids_python_processing/) habe ich damit angefangen, so etwas wie *Boids* in [Py5](http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/py5.html), dem freundlichen Python3-Port von [Processing](http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/processing.html) zu implementieren. Da ich zum einen die Implementierung f√ºr alle nachvollziehbar machen wollte und zum anderen immer noch mein Vorhaben im Raum steht, eine (erweiterte) Fassung von *Daniel Shiffmans* ¬ª[The Nature of Code](https://natureofcode.com/)¬´ in Python zu schreiben, habe ich mich bei meinen ersten Versuchen an Shiffmans *Processing (Java)*-Version orientiert.

Boids sind in erster Linie autonome Agenten und so habe ich mir das [Kapitel zu den autonomen Agenten](https://natureofcode.com/book/chapter-6-autonomous-agents/) (Seite 260ff) vorgekn√∂pft. Mir ging es aber nicht um eine 1:1-Umsetzung des Java-Codes, sondern ich wollte in meiner Py5-Version die `Py5Vector`-Klasse verstehen und implementieren, die sich doch in einigen Punkten von Processings `PVector`-Klasse unterscheidet. Das war aber dank der [Dokumentation](https://py5coding.org/how_tos/py5vector_class.html) nicht allzuschwer und so hatte ich schon nach wenigen Minuten einen Sketch fertiggestellt, in dem ein `Vehicle` dem Mauszeiger folgt:

``` python
## Autonome Agenten 1
## Nach Daniel Shiffman: ¬ªThe Nature of Code¬´, S. 260 ff

class Vehicle():
    
    def __init__(self,_x,_y):
        self.acc = Py5Vector(0, 0)    # Acceleration
        self.vel = Py5Vector(0, 0)    # Velocity
        self.loc = Py5Vector(_x, _y)  # Location
        self.r = 3.0
        self.maxspeed = 4.0           # Arbitrary value for maximum speed
        self.maxforce = 0.1           # Arbitrary value for maximum force
    
    def update(self):                 # Eulersche Polygonzug-Methode
        self.vel += self.acc
        self.vel.set_limit(self.maxspeed)
        self.loc += self.vel
        self.acc *= 0
        
    def apply_force(self, force):
        self.acc += force
        
    def seek(self, target):
        desired = Py5Vector(target - self.loc)
        desired.normalize()
        desired *= self.maxspeed
        steer = (desired - self.vel)
        steer.set_limit(self.maxforce)
        self.apply_force(steer)
        
    def display(self):
        theta = self.vel.heading + PI/2  # +PI/2 = Ausrichtung nach Osten
        fill(240, 80, 37)
        stroke(0)
        with push_matrix():
            translate(self.loc.x, self.loc.y)
            rotate(theta)
            with begin_closed_shape():
                vertex(0,      -self.r*2)
                vertex(-self.r, self.r*2)
                vertex(self.r,  self.r*2)
                
WIDTH = 400
HEIGHT = 400

def setup():
    global vehicle
    size(WIDTH, HEIGHT)
    window_title("üêÅ Wo ist das M√§uschen? üêÅ")
    window_move(1300, 40)
    vehicle = Vehicle(width/2, height/2)
    
def draw():
    background(49, 197, 244)
    target = Py5Vector(mouse_x, mouse_y)
    vehicle.seek(target)
    vehicle.update()
    vehicle.display()
```

Genial ist immer noch das `with`-Statement, da√ü Kommandos wie `push_matrix()` oder `begin_(closed_)shape()` wie ¬ªechte¬´ Python-Befehle aussehen l√§√üt.

Ansonsten findet Ihr nat√ºrlich den [Quellcode](https://github.com/kantel/py5/blob/main/agenten/vehicle01.py) auf GitHub und ich werde das Skriptchen so *peu a peu* zu einem richtigen Boids-Beispiel ausarbeiten und das Ergebnis auf diesen Seiten pr√§sentieren. *Still digging!*
