---
title: "Interaktive Simulationen mit P5.js"
author: "Jörg Kantel"
date: "2024-01-22 16:45:00"
categories: [Modellbildung, Simulation, Numerik, P5.js]
image: "images/lotkavolterra.jpg"
---

[![](images/lotkavolterra-b.jpg)](https://www.redblobgames.com/dynamics/predator-prey/)

Manchmal kommen einem auch schon etwas ältere Beiträge unter, die nicht nur gerade in meine derzeitigen Aktivitäten passen, sondern auch zum Träumen anregen. So ging es mir mit dem Beitrag »[Predator-Prey](https://www.redblobgames.com/dynamics/predator-prey/)«, der schon am 1. Januar 2021 von *Amit Patel* in den  [Red Blob Games](https://www.redblobgames.com/) veröffentlicht wurde. Vordergründig geht es darin um das berühmte Räuber-Beute-Modell, das auch unter dem Namen [Lotka-Volterra-Gleichungen](https://de.wikipedia.org/wiki/Lotka-Volterra-Gleichungen) bekannt ist.

Das ist an sich nichts Neues, auch ich habe dieses Modell schon mehrfach [zum Beispiel in Python](http://blog.schockwellenreiter.de/2020/03/2020033001.html) oder in [TigerJython, Part 1](http://blog.schockwellenreiter.de/2021/02/2021022701.html), [TigerJython, Part 2](http://blog.schockwellenreiter.de/2021/02/2021022802.html) implementiert. Neu für mich -- und damit passend zu meiner [frisch entfachten Liebe](https://kantel.github.io/posts/2024011703_p5js_tuts/) zu [P5.js](http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/p5js.html) -- ist aber nicht nur die Implementierung in JavaScript mit den Slidern zur interaktiven Erkundung des Modells, sondern auch die Nutzung der freien (BSD-Lizenz) [Odex.js-Bibliothek](https://github.com/littleredcomputer/odex-js) zur Lösung der Differentialgleichungen. Wie ich bei meinen TigerJython-Experimenten schon [erwähnt hatte](http://blog.schockwellenreiter.de/2021/02/2021022701.html), ist die naive Herangehensweise mit dem einfachen [Eulerschein Polygonzugverfahren](https://de.wikipedia.org/wiki/Explizites_Euler-Verfahren) bei diesen Differentialgleichungssystemen problematisch, weil das System dann zu Überschwingungen neigt und damit die [zweite Lotka-Volterra-Regel](https://de.wikipedia.org/wiki/Lotka-Volterra-Regeln#Zweite_Lotka-Volterra-Regel) aushebelt. (Ich war seinerzeit -- um die Genauigkeit zu verbessern -- auf das [Euler-Cromer-Verfahren](https://en.wikipedia.org/wiki/Semi-implicit_Euler_method) ausgewichen.)

Daher gibt es von *Amit Patel* auch noch je einen Beitrag zur [Genauigkeit](https://www.redblobgames.com/dynamics/predator-prey/implementation/accuracy.html) und zur [Performanz](https://www.redblobgames.com/dynamics/predator-prey/implementation/performance.html) der Odex.js-Bibliothek.

Das zweite ist die Sache mit den Slidern. Auch wenn vielfach der Eindruck entsteht, sind Schieberegler kein Alleinstellungsmerkmal von P5.js. *Nicky Case* hatte schon 2016 in seinem, damals auch im *Schockwellenreiter* [erwähnten, genialen Beitrag](http://blog.schockwellenreiter.de/2018/05/2018052202.html) »Simulating the World (in Emoji)« ([Original-Version](https://ncase.me/simulating/index_old.html), [aktualisierte Fassung](https://ncase.me/sim/) ohne Begleittext) gezeigt, wie man mit HTML5-DOM-Elementen (zum Beispiel Text-Input, Klappmenüs und eben Schieberegler) interaktive Simulationen in JavaScript erstellen kann. Und auch Pythons [Matplotlib](http://cognitiones.kantel-chaos-team.de/programmierung/python/matplotlib.html) kann [interaktiv mit Slidern umgehen](https://kantel.github.io/posts/2023041904_spyder_slider/) -- nur eben geht das nicht online.

Dagegen scheint P5.js mit seiner [DOM-Bibliothek](https://p5js.org/reference/#group-DOM) über alle Möglichkeiten zu verfügen, nicht nur die Ausgabe im Canvas, sondern auch die gesamte HTML-Umgebung der Seite, in der der Sketch eingebunden ist, per Skript zu manipulieren. Hier beginnt meine Träumerei, denn damit (und mit der Odex.js-Bibliothek) müßten viele interaktive Modelle und Simulationen mit JavaScript im Browser verwirkicht werden können. Die Geschwindigkeit von JavaScript dürfte mittlerweile in den meisten Fällen ausreichend sein. Und es gibt sicher noch weitere, numerische JavaScript-Bibliotheken, die ich noch nicht kenne, und die es zu entdecken gilt. *Still digging!*