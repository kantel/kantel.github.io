---
title: "Flappy Bird: Retrogaming und Künstliche Intelligenz"
author: "Jörg Kantel"
date: "2023-03-31 21:00:00"
categories: [Spieleprogrammierung, Trinket, Retrogaming, Künstliche Intelligenz]
image: "images/neatandgenalg.jpg"
---

[![](images/neatandgenalg-b.jpg)](https://www.youtube.com/watch?v=ihX3-WDua2I)

**Zum Zehnjährigen**: Obwohl eigentlich noch recht jung (von 2013) ist [Flappy Bird](https://de.wikipedia.org/wiki/Flappy_Bird) wegen seines riesigen Erfolgs sehr schnell ein Computerspielklassiger geworden, der mittlerweile in unzähligen Versionen nachprogrammiert wurde und nicht nur für die Ausbildung der Spieleprogrammierer, sondern auch als Forschungsobjekt im Bereich *Künstliche Intelligenz* herhalten muß.

So ist es einfach folgerichtig, daß *Flappy Bird* auch mein nächstes [Trinket](https://kantel.github.io/#category=Trinket)-Projekt werden soll (es drängelt sich als Nachfolgeprojekt zu [Pizza Plane](https://kantel.github.io/posts/2023032602_pizza_plane_with_pizzas/) geradezu auf). Daher habe ich zur Einstimmung ein paar Video-Tutorials zusammengestellt, die Lust auf das Projekt machen sollen.

<iframe width="560" height="315" src="https://www.youtube.com/embed/IIrGAvlNckw" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>

Den Anfang macht die Playlist »[Create Flappy Bird in Processing](https://www.youtube.com/playlist?list=PLAE4MzuQm3Gwj2QLcqpepbTuIuzi_18mS) von *Allen Thoe*, die in sechs etwa zehnminütigen bis viertelstündigen Videos eine klassische Version von *Flappy Bird* implementiert.

<iframe width="560" height="315" src="https://www.youtube.com/embed/YHaax4jP0ps" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>

Etwas mehr Phantasie bezüglich der Spielegestaltung und auch eine größere Nähe und Verbindung zu meinem kleinen, grünen Pizzaflieger zeigt die Implementierung »[Tappy Plane Game in Python and Pygame]({{video https://www.youtube.com/watch?v=YHaax4jP0ps}}) von *Click Clack Code*. Es nutzt die freien [Tappy Plane Assets](https://opengameart.org/content/tappy-plane) von [Kenney.nl](https://www.kenney.nl/assets/tappy-plane) (die ihrer [Website](https://www.kenney.nl/) frisch ein Redesign gegönnt habe) und kommt -- wie alles von *Click Clack Code* -- ohne störende Kommentare aus, nur Code pur.

<iframe width="560" height="315" src="https://www.youtube.com/embed/cXgA1d_E-jY" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>

Doch der eigentlich Klassiker ist natürlich *Daniel Shiffman*, der schon vor sechs Jahren seine Version von *Flappy Bird* in [P5.js](http://cognitiones.kantel-chaos-team.de/programmierung/creativecoding/processing/p5js.html) programmierte und [online stellte](https://www.youtube.com/watch?v=cXgA1d_E-jY). Kurz darauf folgte noch [Clappy Bird](https://www.youtube.com/watch?v=aKiyCeIuwn4), wo er den Vogel mit Händeklatschen steuerte.

<iframe width="560" height="315" src="https://www.youtube.com/embed/c6y21FkaUqw" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>

Der Höhepunkt ist jedoch seine Coding Challenge 100: Neuroevolution Flappy Bird, [Part&nbsp;1](https://www.youtube.com/watch?v=c6y21FkaUqw), [Part 2](https://www.youtube.com/watch?v=YtRA6tqgJBc), [Part 3](https://www.youtube.com/watch?v=3lvj9jvERvs), [Part 4](https://www.youtube.com/watch?v=HrvNpbnjEG8) und [Part 5](https://www.youtube.com/watch?v=U9wiMM3BqLU), in der er seine eigene [JavaScript-Neural-Network-Bibliothek](https://github.com/CodingTrain/Toy-Neural-Network-JS/) und einen ebenfalls selbst geschriebenen Genetischen Algorithmus nutzt, um dem Vogel künstliche Intelligenz beizubringen.

<iframe width="560" height="315" src="https://www.youtube.com/embed/cdUNkwXx-I4" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>

Es folgte noch eine Version, in der er seine eigene Bibliothek durch [TensorFlow](https://de.wikipedia.org/wiki/TensorFlow) ersetzte. Und alles dies -- und mehr -- hat er in seiner Playlist [The Nature of Code, Part 11: Neurovolution](https://www.youtube.com/playlist?list=PLRqwX-V7Uu6Yd3975YwxrR0x40XGJ_KGO) zusammengefaßt.

<iframe width="560" height="315" src="https://www.youtube.com/embed/ihX3-WDua2I" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>

Natürlich gibt es unzählige ähnliche Implementierungen. Eine der wie ich finde interessantestens findet Ihr in der Playlist »[Arcade Games with Genetic Algorithms and Neural Net AI](https://www.youtube.com/playlist?list=PLnICFpQDyZRErLFGJffSEFtRFO5uq5hQm), in der eine Implementierung allgemein ohne Bezug auf eine spezielle Programmiersprache erklärt wird.

Das alles sollte Material genug sein, um mich auf mein Vorhaben einzustimmen. *Still digging!*